{
  "openapi": "3.0.2",
  "info": {
    "title": "Vimeo API",
    "description": "Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.",
    "version": "3.4",
    "contact": {
      "url": "https://developer.vimeo.com/help"
    }
  },
  "tags": [
    {
      "name": "API Information\\Essentials",
      "description": "These are the most common methods for retrieving information about the Vimeo API."
    },
    {
      "name": "Authentication Extras\\Authenticate",
      "description": "Use these methods to perform authentication."
    },
    {
      "name": "Authentication Extras\\Convert",
      "description": "Use these methods to convert authentication resources."
    },
    {
      "name": "Authentication Extras\\Essentials",
      "description": "These are the most common methods for working with authentication."
    },
    {
      "name": "Authentication Extras\\Exchange",
      "description": "Use these methods to exchange authentication resources."
    },
    {
      "name": "Categories\\Channels",
      "description": "Use these methods to work with channels in a category."
    },
    {
      "name": "Categories\\Essentials",
      "description": "These are the most common methods for working with categories."
    },
    {
      "name": "Categories\\Groups",
      "description": "Use these methods to work with groups in a category."
    },
    {
      "name": "Categories\\Users",
      "description": "Use these methods to manage user interactions with a category."
    },
    {
      "name": "Categories\\Videos",
      "description": "Use these methods to work with videos in a category."
    },
    {
      "name": "Channels\\Categories",
      "description": "Use these methods to work with channel categories."
    },
    {
      "name": "Channels\\Essentials",
      "description": "These are the most common methods for working with channels."
    },
    {
      "name": "Channels\\Moderators",
      "description": "Use these methods to work with channel moderators."
    },
    {
      "name": "Channels\\Private channel members",
      "description": "Use these methods to work with private channel members."
    },
    {
      "name": "Channels\\Subscriptions and subscribers",
      "description": "Use these methods to work with channel subscriptions."
    },
    {
      "name": "Channels\\Tags",
      "description": "Use these methods to work with tags in channels."
    },
    {
      "name": "Channels\\Videos",
      "description": "Use these methods to work with videos in channels."
    },
    {
      "name": "Embed Presets\\Custom logos",
      "description": "Vimeo members with access to embed presets can include their own logo images in the embedded player. These custom logos can be part of an embed preset.\n\n            Use these methods to work with custom logos."
    },
    {
      "name": "Embed Presets\\Essentials",
      "description": "These are the most common methods for working with embed presets."
    },
    {
      "name": "Embed Presets\\Timeline events",
      "description": "Use these methods to work with timeline events."
    },
    {
      "name": "Embed Presets\\Videos",
      "description": "Use these methods to work with videos that have embed presets."
    },
    {
      "name": "Folders\\Essentials",
      "description": "These are the most common methods for working with folders."
    },
    {
      "name": "Folders\\Items",
      "description": "Use these methods to manage items in folders."
    },
    {
      "name": "Folders\\Videos",
      "description": "Use these methods to manage videos in folders."
    },
    {
      "name": "Groups\\Essentials",
      "description": "These are the most common methods for working with groups."
    },
    {
      "name": "Groups\\Subscriptions",
      "description": "Use these methods to manage group membership."
    },
    {
      "name": "Groups\\Users",
      "description": "Use these methods to manage group members."
    },
    {
      "name": "Groups\\Videos",
      "description": "Use these methods to manage group videos."
    },
    {
      "name": "Likes\\Essentials",
      "description": "These are the most common methods for working with likes."
    },
    {
      "name": "Live\\Embed privacy",
      "description": "Use these methods to work with embed privacy for events."
    },
    {
      "name": "Live\\Essentials",
      "description": "These are the most common methods for working with events."
    },
    {
      "name": "Live\\Event M3U8 playback",
      "description": "Use these methods to work with M3U8 playback URLs for event streams."
    },
    {
      "name": "Live\\Event activation",
      "description": "Use these methods to work with the activation of events."
    },
    {
      "name": "Live\\Event automated closed captions",
      "description": "Use these methods to work with the automated closed captions preferences of events."
    },
    {
      "name": "Live\\Event destinations",
      "description": "Use these methods to work with event destinations."
    },
    {
      "name": "Live\\Event end",
      "description": "Use these methods to work with the ending of events."
    },
    {
      "name": "Live\\Event low latency",
      "description": "Use these methods to manage an event's low-latency option."
    },
    {
      "name": "Live\\Event sessions",
      "description": "Use these methods to work with event sessions."
    },
    {
      "name": "Live\\Event thumbnails",
      "description": "Use these methods to work with the thumbnail images of events."
    },
    {
      "name": "Live\\Event videos",
      "description": "Use these methods to work with event videos."
    },
    {
      "name": "On Demand\\Backgrounds",
      "description": "Use these methods to work with background images on an On Demand page."
    },
    {
      "name": "On Demand\\Essentials",
      "description": "These are the most common methods for working with On Demand pages."
    },
    {
      "name": "On Demand\\Genres",
      "description": "Use these methods to work with On Demand genres."
    },
    {
      "name": "On Demand\\Posters",
      "description": "Use these methods to work with poster images on On Demand pages."
    },
    {
      "name": "On Demand\\Promotions",
      "description": "Use these methods to work with promotions on On Demand pages."
    },
    {
      "name": "On Demand\\Purchases and rentals",
      "description": "Use these methods to work with purchases and rentals on On Demand pages."
    },
    {
      "name": "On Demand\\Regions",
      "description": "Use these methods to work with regions on On Demand pages."
    },
    {
      "name": "On Demand\\Seasons",
      "description": "Use these methods to work with On Demand seasons."
    },
    {
      "name": "On Demand\\Videos",
      "description": "Use these methods to work with videos on On Demand pages."
    },
    {
      "name": "Payments\\Essentials",
      "description": "These are the most common methods for making product purchases."
    },
    {
      "name": "Portfolios\\Essentials",
      "description": "These are the most common methods for working with portfolios."
    },
    {
      "name": "Portfolios\\Videos",
      "description": "Use these methods to manage portfolio videos."
    },
    {
      "name": "Search\\Federated",
      "description": "Use these methods to work with federated searches."
    },
    {
      "name": "Showcases\\Custom showcase logos",
      "description": "Use these methods to manage custom showcase logos, or the supplementary images, usually logos, that appear on a showcase's page. These images aren't the same as showcase thumbnails, or the images that represent the showcase across Vimeo."
    },
    {
      "name": "Showcases\\Custom showcase thumbnails",
      "description": "Use these methods to manage custom thumbnail images for showcases. These thumbnails come from uploaded image files that aren't necessarily stills from a video."
    },
    {
      "name": "Showcases\\Essentials",
      "description": "These are the most common methods for working with showcases."
    },
    {
      "name": "Showcases\\Showcase videos",
      "description": "Use these methods to manage showcase videos."
    },
    {
      "name": "Subscription Plans\\Essentials",
      "description": "These are the most common methods for working with subscription plans."
    },
    {
      "name": "Tags\\Essentials",
      "description": "These are the most common methods for working with tags."
    },
    {
      "name": "Teams\\Members",
      "description": "Use these methods to work with team members."
    },
    {
      "name": "Tutorial\\Essentials",
      "description": "These are the most common methods for working with the API tutorial."
    },
    {
      "name": "Users\\Analytics",
      "description": "Use these methods to work with the authenticated user's video analytics."
    },
    {
      "name": "Users\\Essentials",
      "description": "These are the most common methods for working with users."
    },
    {
      "name": "Users\\Feeds",
      "description": "Use these methods to work with user feeds."
    },
    {
      "name": "Users\\Followers",
      "description": "Use these methods to work with user followers."
    },
    {
      "name": "Users\\Pictures",
      "description": "Use these methods to work with user pictures."
    },
    {
      "name": "Users\\Search",
      "description": "Use these methods to search for users."
    },
    {
      "name": "Users\\Watch history",
      "description": "Use these methods to work with a user's watch history."
    },
    {
      "name": "Videos\\Animated thumbnails",
      "description": "Use these methods to work with animated thumbnails for videos."
    },
    {
      "name": "Videos\\Chapters",
      "description": "Use these methods to work with video chapters."
    },
    {
      "name": "Videos\\Content ratings",
      "description": "Use these methods to work with video content ratings."
    },
    {
      "name": "Videos\\Creative Commons",
      "description": "Use these methods to work with Creative Commons licenses."
    },
    {
      "name": "Videos\\Credits",
      "description": "Use these methods to work with credited users in videos."
    },
    {
      "name": "Videos\\Embed privacy",
      "description": "Use these methods to manage the allowlist of embeddable videos."
    },
    {
      "name": "Videos\\Essentials",
      "description": "These are the most common methods for working with videos."
    },
    {
      "name": "Videos\\Fragments",
      "description": "Use these methods to work with the video fragments for branched or segmented scrubbers."
    },
    {
      "name": "Videos\\Languages",
      "description": "Use these methods to work with video languages."
    },
    {
      "name": "Videos\\Live M3U8 playback",
      "description": "Use these methods to work with M3U8 playback URLs for event streams."
    },
    {
      "name": "Videos\\Nondestructive trimming",
      "description": "Use these methods to work with nondestructive trimming."
    },
    {
      "name": "Videos\\Recommendations",
      "description": "Use these methods to work with recommended videos."
    },
    {
      "name": "Videos\\Showcases",
      "description": "Use these methods to work with showcase videos."
    },
    {
      "name": "Videos\\Tags",
      "description": "Use these methods to work with associated tags."
    },
    {
      "name": "Videos\\Text tracks",
      "description": "Use these methods to work with video text tracks."
    },
    {
      "name": "Videos\\Thumbnails",
      "description": "Use these methods to work with video thumbnails."
    },
    {
      "name": "Videos\\Transcripts",
      "description": "Use these methods to work with video transcripts."
    },
    {
      "name": "Videos\\Unlisted videos",
      "description": "Use these methods to work with unlisted videos."
    },
    {
      "name": "Videos\\Uploads",
      "description": "Use these methods to work with video uploads."
    },
    {
      "name": "Videos\\Versions",
      "description": "Use these methods to work with video versioning."
    },
    {
      "name": "Videos\\Video comments",
      "description": "Use these methods to work with video comments."
    },
    {
      "name": "Watch Later Queue\\Essentials",
      "description": "These are the most common methods for working with a user's Watch Later queue."
    }
  ],
  "servers": [
    {
      "url": "https://api.vimeo.com",
      "description": "Vimeo.com"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Get the API specification",
        "description": "This method returns the full OpenAPI specification for the Vimeo API.",
        "operationId": "get_endpoints",
        "tags": [
          "API Information\\Essentials"
        ],
        "parameters": [
          {
            "description": "Return an OpenAPI specification.",
            "in": "query",
            "name": "openapi",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "Return an OpenAPI specification for the specified API version. This overwrites the **version** field provided in the **Accept** header.",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "string",
              "example": "3.4"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard request.",
            "content": {
              "application/vnd.vimeo.endpoint+json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoint"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2436: An invalid API version was requested.",
            "content": {
              "application/vnd.vimeo.endpoint+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/"
      }
    },
    "/albums/{album_id}/available_videos": {
      "get": {
        "summary": "Get all the user's videos that can be added to or removed from a showcase",
        "description": "This method returns every video belonging to the authenticated user that can be added to or removed from the specified showcase.",
        "operationId": "get_available_showcase_videos",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `default` - Sort the results by the default method.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by most recent user interaction.\n * `likes` - Sort the results by number of likes.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "default",
                "duration",
                "last_user_action_event_date",
                "likes",
                "modified_time",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't add videos to this showcase.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/albums/!album_id/available_videos"
      }
    },
    "/categories": {
      "get": {
        "summary": "Get all categories",
        "description": "This method returns every available category.",
        "operationId": "get_categories",
        "tags": [
          "Categories\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `last_video_featured_time` - Sort the results by most recently featured.\n * `name` - Sort the results by name.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "last_video_featured_time",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The categories were returned.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/categories"
      }
    },
    "/categories/{category}": {
      "get": {
        "summary": "Get a specific category",
        "description": "This method returns the specified category.",
        "operationId": "get_category",
        "tags": [
          "Categories\\Essentials"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The category was returned.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          },
          "404": {
            "description": "No such category exists.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/categories/+category"
      }
    },
    "/categories/{category}/channels": {
      "get": {
        "summary": "Get all the channels in a category",
        "description": "This method returns every channel that belongs to the specified category.",
        "operationId": "get_category_channels",
        "tags": [
          "Categories\\Channels"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `followers` - Sort the results by number of followers.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "followers",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channels were returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/channel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such category exists.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/categories/+category/channels"
      }
    },
    "/categories/{category}/groups": {
      "get": {
        "summary": "Get all the groups in a category",
        "description": "This method returns every group that belongs to the specified category.",
        "operationId": "get_category_groups",
        "tags": [
          "Categories\\Groups"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `members` - Sort the results by number of members.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "members",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The groups were returned.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such category exists.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/categories/+category/groups"
      }
    },
    "/categories/{category}/videos": {
      "get": {
        "summary": "Get all the videos in a category",
        "description": "This method returns every video that belongs to the specified category.",
        "operationId": "get_category_videos",
        "tags": [
          "Categories\\Videos"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `conditional_featured` - Return featured videos.\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "conditional_featured",
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `featured` - Sort the results by featured status.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n * `relevant` - Sort the results by relevance.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "featured",
                "likes",
                "plays",
                "relevant"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such category exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/categories/+category/videos"
      }
    },
    "/categories/{category}/videos/{video_id}": {
      "get": {
        "summary": "Get a specific video in a category",
        "description": "This method returns a single video in the specified category. You can use this method to determine whether the video belongs to the category.",
        "operationId": "check_category_for_video",
        "tags": [
          "Categories\\Videos"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 273576296
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "* No such category exists, or the video doesn't belong to it.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/categories/+category/videos/!video_id"
      }
    },
    "/channels": {
      "get": {
        "summary": "Get all channels",
        "description": "This method returns all available channels.",
        "operationId": "get_channels",
        "tags": [
          "Channels\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `featured` - Return featured channels.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "featured"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `default` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `relevant` - Sort the results by relevance. This option is available for search queries only.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "followers",
                "relevant",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channels were returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/channel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The relevant sort has no search query.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels"
      },
      "post": {
        "summary": "Create a channel",
        "description": "This method creates a new channel.",
        "operationId": "create_channel",
        "tags": [
          "Channels\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.channel+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the channel.",
                    "example": "We really love videos, and these are the videos we really, really love.",
                    "type": "string"
                  },
                  "link": {
                    "description": "The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.",
                    "example": "staffpicks",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the channel.",
                    "example": "Vimeo Staff Picks",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy level of the channel.\n\nOption descriptions:\n * `anybody` - Anyone can access the channel.\n * `moderators` - Only moderators can access the channel.\n * `user` - Only moderators and designated users can access the channel.\n",
                    "enum": [
                      "anybody",
                      "moderators",
                      "user"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "privacy"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The channel was created.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/channel"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't create channels.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-template": "/channels"
      }
    },
    "/channels/{channel_id}": {
      "delete": {
        "summary": "Delete a channel",
        "description": "This method deletes the specified channel. The authenticated user must own the channel.",
        "operationId": "delete_channel",
        "tags": [
          "Channels\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The channel was deleted."
          },
          "403": {
            "description": "The authenticated user doesn't own this channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id"
      },
      "get": {
        "summary": "Get a specific channel",
        "description": "This method returns a single channel.",
        "operationId": "get_channel",
        "tags": [
          "Channels\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel was returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/channel"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id"
      },
      "patch": {
        "summary": "Edit a channel",
        "description": "This method edits the specified channel.",
        "operationId": "edit_channel",
        "tags": [
          "Channels\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.channel+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the channel.",
                    "example": "We really love videos, and these are the videos we really, really love.",
                    "type": "string"
                  },
                  "link": {
                    "description": "The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `\"\"` for this field removes the link alias.",
                    "example": "staffpicks",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the channel.",
                    "example": "Vimeo Staff Picks",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy level of the channel.\n\nOption descriptions:\n * `anybody` - Anyone can access the channel.\n * `moderators` - Only moderators can access the channel.\n * `users` - Only moderators and designated users can access the channel.\n",
                    "enum": [
                      "anybody",
                      "moderators",
                      "users"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The channel was edited.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/channel"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id"
      }
    },
    "/channels/{channel_id}/categories": {
      "get": {
        "summary": "Get all the categories to which a channel belongs",
        "description": "This method returns every category to which the specified channel belongs.",
        "operationId": "get_channel_categories",
        "tags": [
          "Channels\\Categories"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The categories were returned.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such channel exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/categories"
      },
      "put": {
        "summary": "Add a channel to a list of categories",
        "description": "This method adds the specified channel to multiple categories.",
        "operationId": "add_channel_categories",
        "tags": [
          "Channels\\Categories"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "channels": {
                    "description": "The array of category URIs to add.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "channels"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The channel was added to the categories."
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't add categories to the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: You exceeded the maximum number of channel categories.\n* Error code 2205: There was no request body, or the request body is malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/categories"
      }
    },
    "/channels/{channel_id}/categories/{category}": {
      "delete": {
        "summary": "Remove a channel from a category",
        "description": "This method removes a channel from the specified category. The authenticated user must be the owner of the channel.",
        "operationId": "delete_channel_category",
        "tags": [
          "Channels\\Categories"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The channel was removed."
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "No such channel or category exists.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user doesn't own the channel or isn't a channel moderator.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/categories/+category"
      },
      "put": {
        "summary": "Add a channel to a specific category",
        "description": "This method adds the specified channel to a single category. The authenticated user must be the owner of the channel.",
        "operationId": "categorize_channel",
        "tags": [
          "Channels\\Categories"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The channel was added to the category."
          },
          "400": {
            "description": "Error code 2204: You exceeded the maximum number of channel categories.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "No such channel or category exists.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user doesn't own the channel or isn't a channel moderator.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/categories/+category"
      }
    },
    "/channels/{channel_id}/moderators": {
      "delete": {
        "summary": "Remove a list of moderators from a channel",
        "description": "This method removes multiple moderators from the specified channel. The authenticated user must be the owner of the channel.",
        "operationId": "remove_channel_moderators",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.user+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_uri": {
                    "description": "The URI of a user to remove as a moderator.",
                    "example": "/users/152184",
                    "type": "string"
                  }
                },
                "required": [
                  "user_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The moderators were removed."
          },
          "404": {
            "description": "No such channel exists, or no such user exists.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the channel, a requested user isn't a moderator of the channel, or a requested user is the owner of the channel.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/moderators"
      },
      "get": {
        "summary": "Get all the moderators of a channel",
        "description": "This method returns every moderator of the specified channel.",
        "operationId": "get_channel_moderators",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date added.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The moderators were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/moderators"
      },
      "patch": {
        "summary": "Replace the moderators of a channel",
        "description": "This method replaces the current list of channel moderators with a new list. The authenticated user must be the owner of the channel and a follower of each requested user to add them as a channel moderator.",
        "operationId": "replace_channel_moderators",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_uri": {
                    "description": "The URI of the user to add as a moderator.",
                    "example": "/users/152184",
                    "type": "string"
                  }
                },
                "required": [
                  "user_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The moderators were replaced.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2908: The list contains more than 100 users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/moderators"
      },
      "put": {
        "summary": "Add a list of moderators to a channel",
        "description": "This method adds multiple users as moderators to the specified channel. Include the users by their URI as a JSON array in the body of the request using the **user_uri** field, like this: `[{ \"user_uri\": \"/users/1234\" }, { \"user_uri\": \"/users/1235\" }]`. The authenticated user must be a follower of a requested user to add this person as a moderator. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).",
        "operationId": "add_channel_moderators",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The moderators were added."
          },
          "400": {
            "description": "Error code 2908: The list contains more than 100 users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "No such channel exists, or no such user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the channel, a requested user is already a moderator of the channel, or the authenticated user doesn't follow a requested user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/moderators"
      }
    },
    "/channels/{channel_id}/moderators/{user_id}": {
      "get": {
        "summary": "Get a specific moderator of a channel",
        "description": "This method returns a single moderator of the specified channel.",
        "operationId": "get_channel_moderator",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The moderator was returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/moderators/!user_id"
      },
      "delete": {
        "summary": "Remove a specific moderator from a channel",
        "description": "This method removes a single moderator from the specified channel. The authenticated user must be the owner of the channel.",
        "operationId": "remove_channel_moderator",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The moderator was removed."
          },
          "404": {
            "description": "No such channel exists, or no such user exists.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the channel, the requested user isn't a moderator of the channel, or the requested user is the owner of the channel.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/moderators/+user_id"
      },
      "put": {
        "summary": "Add a specific moderator to a channel",
        "description": "This method adds a single user as a moderator to the specified channel. The authenticated user must be a follower of the requested user to add them as a channel moderator.",
        "operationId": "add_channel_moderator",
        "tags": [
          "Channels\\Moderators"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No such channel exists, or no such user exists.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the channel, the requested user is already a moderator of the channel, or the authenticated user doesn't follow the requested user.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/moderators/+user_id"
      }
    },
    "/channels/{channel_id}/privacy/users": {
      "get": {
        "summary": "Get all the users who can access a private channel",
        "description": "This method returns all the users who have access to the specified private channel. The authenticated user must be the owner of the channel.",
        "operationId": "get_channel_privacy_users",
        "tags": [
          "Channels\\Private channel members"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user doesn't own this channel.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/privacy/users"
      },
      "put": {
        "summary": "Permit a list of users to access a private channel",
        "description": "This method gives multiple users access to the specified private channel. The authenticated user must be the owner of the channel.",
        "operationId": "set_channel_privacy_users",
        "tags": [
          "Channels\\Private channel members"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.user+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "The array of either the user URIs or the user IDs to permit to access the private channel.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The users can access the private channel.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user doesn't own this channel.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 2204: A requested user can't have access to the channel.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2205: There was no request body, or the request body is malformed.\n* Error code 2900: No such user exists.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/privacy/users"
      }
    },
    "/channels/{channel_id}/privacy/users/{user_id}": {
      "delete": {
        "summary": "Restrict a user from accessing a private channel",
        "description": "This method prevents a single user from being able to access the specified private channel. The authenticated user must be the owner of the channel.",
        "operationId": "delete_channel_privacy_user",
        "tags": [
          "Channels\\Private channel members"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user can't acceess the private channel."
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user doesn't own the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/privacy/users/+user_id"
      },
      "put": {
        "summary": "Permit a specific user to access a private channel",
        "description": "This method gives a single user access to the specified private channel. The authenticated user must be the owner of the channel.",
        "operationId": "set_channel_privacy_user",
        "tags": [
          "Channels\\Private channel members"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user can now view the private channel."
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user doesn't own the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/privacy/users/+user_id"
      }
    },
    "/channels/{channel_id}/tags": {
      "get": {
        "summary": "Get all the tags that have been added to a channel",
        "description": "This method returns every tag that has been added to the specified channel.",
        "operationId": "get_channel_tags",
        "tags": [
          "Channels\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tags were returned.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No such channel exists.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/tags"
      },
      "put": {
        "summary": "Add a list of tags to a channel",
        "description": "This method adds multiple tags to the specified channel. Include the tags as a JSON array in the body of the request using the **tag** field, like this: `[{ \"tag\": \"funny\" }, { \"tag\": \"concert\" }]`. The authenticated user must be the owner of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).",
        "operationId": "add_tags_to_channel",
        "tags": [
          "Channels\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.tag+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "description": "The name of the tag to assign.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The tags were added.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "* No such channel exists, or a parameter is invalid.\n* Error code 2205: There was no request body, or the request body is malformed.\n* Error code 2501: The channel can't have more than 20 tags.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't add tags to this channel.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/tags"
      }
    },
    "/channels/{channel_id}/tags/{word}": {
      "delete": {
        "summary": "Remove a tag from a channel",
        "description": "This method removes a single tag from the specified channel. The authenticated user must be the owner of the channel.",
        "operationId": "delete_tag_from_channel",
        "tags": [
          "Channels\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The word to use as the tag.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tag was removed."
          },
          "400": {
            "description": "The tag is invalid, or a parameter is invalid.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't remove tags from this channel.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/tags/*word"
      },
      "get": {
        "summary": "Check if a tag has been added to a channel",
        "description": "This method determines whether a tag has been added to the specified channel.",
        "operationId": "check_if_channel_has_tag",
        "tags": [
          "Channels\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The word to use as the tag.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tag has been added to the channel."
          },
          "400": {
            "description": "No such tag exists.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: The tag exists, but the channel isn't tagged by it.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/tags/*word"
      },
      "put": {
        "summary": "Add a specific tag to a channel",
        "description": "This method adds a single tag to the specified channel. The authenticated user must be the owner of the channel.",
        "operationId": "add_channel_tag",
        "tags": [
          "Channels\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The word to use as the tag.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tag was added."
          },
          "400": {
            "description": "* The tag is invalid, or a parameter is invalid.\n* Error code 2501: The channel can't have more than 20 tags.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't add tags to this channel.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/tags/*word"
      }
    },
    "/channels/{channel_id}/users": {
      "get": {
        "summary": "Get all the followers of a channel",
        "description": "This method returns every follower of the specified channel.",
        "operationId": "get_channel_subscribers",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderators` - Return moderators.\n",
            "in": "query",
            "name": "filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "moderators"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by follow date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The followers were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/users"
      }
    },
    "/channels/{channel_id}/videos": {
      "delete": {
        "summary": "Remove a list of videos from a channel",
        "description": "This method removes multiple videos from the specified channel. Include the videos by their URI as a JSON block in the body of the request using the **video_uri** field, like this: `[{ \"video_uri\": \"/videos/1234\" }, { \"video_uri\": \"/videos/1235\" }]`. The authenticated user must be a moderator of the channel. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).",
        "operationId": "remove_videos_from_channel",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "video_uri": {
                    "description": "The URI of a video to remove.",
                    "example": "/videos/258684937",
                    "type": "string"
                  }
                },
                "required": [
                  "video_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were removed."
          },
          "404": {
            "description": "No such channel or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't remove videos from this channel, or a video can't be removed from the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/videos"
      },
      "get": {
        "summary": "Get all the videos in a channel",
        "description": "This method returns every video in the specified channel.",
        "operationId": "get_channel_videos",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The page that contains the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by date added.\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting method.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results as the user has arranged them.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "comments",
                "date",
                "default",
                "duration",
                "likes",
                "manual",
                "modified_time",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "No videos have been added to this channel since the given `If-Modified-Since` header."
          },
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such channel exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "The **sort** field is `default`, but the **direction** field has a value.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/videos"
      },
      "put": {
        "summary": "Add a list of videos to a channel",
        "description": "This method adds multiple videos to the specified channel. The authenticated user must be a moderator of the channel.",
        "operationId": "add_videos_to_channel",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "video_uri": {
                    "description": "A member of an array representing the URIs of the videos to add. For each member in the array, use the format `{\"video_uri\":\"x\"}` where **x** is a video URI. For more information on batch requests like this, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).",
                    "example": "/videos/258684937",
                    "type": "string"
                  }
                },
                "required": [
                  "video_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The videos were added."
          },
          "404": {
            "description": "No such channel or user exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add videos to the channel, or a video can't be added to the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/videos"
      }
    },
    "/channels/{channel_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a specific video from a channel",
        "description": "This method removes a single video from the specified channel. The authenticated user must be a moderator of the channel.",
        "operationId": "delete_video_from_channel",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "404": {
            "description": "No such channel or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't remove videos from this channel, or the video can't be removed from the channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id"
      },
      "get": {
        "summary": "Get a specific video in a channel",
        "description": "This method returns a single video in the specified channel. You can use it to determine whether the video is in the channel.",
        "operationId": "get_channel_video",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id"
      },
      "put": {
        "summary": "Add a specific video to a channel",
        "description": "This method adds a single video to the specified channel. The authenticated user must be a moderator of the channel.",
        "operationId": "add_video_to_channel",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "404": {
            "description": "No such channel or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The video can't be added to a channel, or the authenticated user can't add videos to this channel.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/comments": {
      "get": {
        "summary": "Get all the video comments on a video",
        "description": "This method returns every video comment on the specified video.",
        "operationId": "get_comments_alt1",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comments were returned.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/comments"
      },
      "post": {
        "summary": "Add a video comment to a video",
        "description": "This method adds a video comment to the specified video.",
        "operationId": "create_comment_alt1",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.comment+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "richtext": {
                    "description": "The rich comment in JSON stringified form. Either this field or the **text** field is required.",
                    "example": "{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I love this!\"}]}]}",
                    "type": "string"
                  },
                  "text": {
                    "description": "The comment as plain text. Either this field or the **richtext** field is required.",
                    "example": "I love this!",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The comment was added.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2207: The comment text is missing.\n* Error code 2204: The comment rich text is invalid.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3301: The comment was flagged as spam.\n* Error code 3411: The authenticated user is unverified.\n* Error code 3412: The authenticated user can't comment.\n* Error code 3413: Comments are disabled for this video.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/comments"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/credits": {
      "get": {
        "summary": "Get all the credited users in a video",
        "description": "This method returns every credited user in a video.",
        "operationId": "get_video_credits_alt1",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The credited users were returned.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/credit"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/credits"
      },
      "post": {
        "summary": "Credit a user in a video",
        "description": "This method adds a user credit to the specified video.",
        "operationId": "add_video_credit_alt1",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.credit+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email address of the credited person.",
                    "example": "user@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the credited person.",
                    "example": "Sam Doe",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of the credited person.",
                    "example": "Producer",
                    "type": "string"
                  },
                  "user_uri": {
                    "description": "The Vimeo URI of the credited person.",
                    "example": "/users/152184",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "name",
                  "role",
                  "user_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The credit was added.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/credit"
                }
              }
            }
          },
          "400": {
            "description": "* A parameter is invalid.\n* The authenticated user has an unverified email address.\n* There is a user block between the video owner and the person receiving credit.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the video.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/credits"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/likes": {
      "get": {
        "summary": "Get all the users who have liked a video",
        "description": "This method returns every user who has liked the specified video.",
        "operationId": "get_video_likes_alt1",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by join date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/likes"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/pictures": {
      "get": {
        "summary": "Get all the thumbnails of a video",
        "description": "This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.",
        "operationId": "get_video_thumbnails_alt1",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/pictures"
      },
      "post": {
        "summary": "Add a video thumbnail",
        "description": "This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.",
        "operationId": "create_video_thumbnail_alt1",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the image created by the **time** field should be the default thumbnail for the video.",
                    "example": true,
                    "type": "boolean"
                  },
                  "time": {
                    "description": "The time offset in seconds from which to create the thumbnail.",
                    "example": 300,
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The thumbnail image was added to the video.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/pictures"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/privacy/users": {
      "get": {
        "summary": "Get the users who can access an unlisted video",
        "description": "This method returns every user who has access to the specified unlisted video.",
        "operationId": "get_video_privacy_users_alt1",
        "tags": [
          "Videos\\Unlisted videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No users can access this unlisted video.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/privacy/users"
      },
      "put": {
        "summary": "Permit a list of users to access an unlisted video",
        "description": "This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.",
        "operationId": "add_video_privacy_users_alt1",
        "tags": [
          "Videos\\Unlisted videos"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were granted access to the unlisted video.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/privacy/users"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/texttracks": {
      "get": {
        "summary": "Get all the text tracks of a video",
        "description": "This method returns every text track of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_text_tracks_alt2",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The text tracks were returned.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/text-track"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/texttracks"
      },
      "post": {
        "summary": "Add a text track to a video",
        "description": "This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).",
        "operationId": "create_text_track_alt1",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video.texttrack+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the current text track is the *active text track,* or the one that appears in the player. Only one text track per language and type can be active.",
                    "example": true,
                    "type": "boolean"
                  },
                  "is_auto_generated": {
                    "description": "Whether the text track was uploaded automatically by the Seshat audio annotation management platform.",
                    "type": "boolean"
                  },
                  "is_edited": {
                    "description": "Whether the text track was uploaded by the Seshat audio annotation management platform after the user edited their transcript.",
                    "type": "boolean"
                  },
                  "language": {
                    "description": "The language of the text track. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.",
                    "example": "en-US",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the text track.",
                    "example": "Commentary",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of text track.\n\nOption descriptions:\n * `captions` - The text track is the captions type.\n * `chapters` - The text track is the chapters type.\n * `descriptions` - The text track is the descriptions type.\n * `metadata` - The text track is the metadata type.\n * `subtitles` - The text track is the subtitles type.\n",
                    "enum": [
                      "captions",
                      "chapters",
                      "descriptions",
                      "metadata",
                      "subtitles"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "language",
                  "name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The text track was added.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/text-track"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't add the text track.\n* Error code 2204: The request contains errors.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/texttracks"
      }
    },
    "/channels/{channel_id}/videos/{video_id}/versions": {
      "get": {
        "summary": "Get all the versions of a video",
        "description": "This method returns every version of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_video_versions_alt1",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The versions were returned.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video-version"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/channels/+channel_id/videos/!video_id/versions"
      }
    },
    "/contentratings": {
      "get": {
        "summary": "Get all content ratings",
        "description": "This method returns all available content ratings.",
        "operationId": "get_content_ratings",
        "tags": [
          "Videos\\Content ratings"
        ],
        "responses": {
          "200": {
            "description": "The content ratings were returned.",
            "content": {
              "application/vnd.vimeo.contentrating+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/content-rating"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/contentratings"
      }
    },
    "/creativecommons": {
      "get": {
        "summary": "Get all Creative Commons licenses",
        "description": "This method returns all available Creative Commons licenses.",
        "operationId": "get_cc_licenses",
        "tags": [
          "Videos\\Creative Commons"
        ],
        "parameters": [
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Creative Commons licenses were returned.",
            "content": {
              "application/vnd.vimeo.creativecommons+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/creative-commons"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/creativecommons"
      }
    },
    "/destination/{destination_id}": {
      "delete": {
        "summary": "Delete an event destination",
        "description": "This method deletes the specified event destination belonging to the authenticated user.",
        "operationId": "delete_live_event_destination",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event destination.",
            "in": "path",
            "name": "destination_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The event destination was deleted."
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event destination exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/destination/#destination_id"
      },
      "get": {
        "summary": "Get an event destination",
        "description": "This method returns the specified event destination belonging to the authenticated user.",
        "operationId": "get_live_event_destination",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event destination.",
            "in": "path",
            "name": "destination_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event destination was returned.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-destination"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event destination exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/destination/#destination_id"
      },
      "patch": {
        "summary": "Update an event destination",
        "description": "This method updates the specified event destination belonging to the authenticated user.",
        "operationId": "update_live_event_destination",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event destination.",
            "in": "path",
            "name": "destination_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.simulcast.destination+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "description": "The title to display for the simulcast.",
                    "example": "My channel",
                    "type": "string"
                  },
                  "is_enabled": {
                    "description": "Whether the destination is enabled for simulcasting.",
                    "example": true,
                    "type": "boolean"
                  },
                  "privacy": {
                    "description": "The privacy setting of the destination. Be sure to choose a value that corresponds to your service.\n\nOption descriptions:\n * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.\n * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.\n * `all_friends` - The privacy setting is `all_friends` for Facebook.\n * `everyone` - The privacy setting is `everyone` for Facebook.\n * `private` - The privacy setting is `private` for YouTube.\n * `public` - The privacy setting is `public` for YouTube.\n * `self` - The privacy setting is `self` for Facebook.\n * `unlisted` - The privacy setting is `unlisted` for YouTube.\n",
                    "enum": [
                      "CONNECTIONS",
                      "PUBLIC",
                      "all_friends",
                      "everyone",
                      "private",
                      "public",
                      "self",
                      "unlisted"
                    ],
                    "example": "public",
                    "type": "string"
                  },
                  "provider_destination_id": {
                    "description": "The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID.",
                    "example": "bda55c6b3ba4",
                    "type": "string"
                  },
                  "service_name": {
                    "description": "The service to simulcast to.\n\nOption descriptions:\n * `custom_rtmp` - Simulcast to a custom service.\n * `facebook` - Simulcast to Facebook Live.\n * `linkedin` - Simulcast to LinkedIn Live.\n * `youtube` - Simulcast to YouTube Live.\n",
                    "enum": [
                      "custom_rtmp",
                      "facebook",
                      "linkedin",
                      "youtube"
                    ],
                    "example": "youtube",
                    "type": "string"
                  },
                  "stream_key": {
                    "description": "The RTMP stream key.",
                    "example": "da056692-ba63-4749-a6eb-a476a22b3acd",
                    "type": "string"
                  },
                  "stream_url": {
                    "description": "The RTMP URL for receiving the video stream.",
                    "example": "rtmp://mycooldomain.com/live",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the simulcast destination.\n\nOption descriptions:\n * `channel` - The destination is a YouTube channel.\n * `custom` - The destination is custom.\n * `organization` - The destination is a LinkedIn organization.\n * `page` - The destination is a Facebook page.\n * `profile` - The destination is a Facebook or LinkedIn profile.\n",
                    "enum": [
                      "channel",
                      "custom",
                      "organization",
                      "page",
                      "profile"
                    ],
                    "example": "channel",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event destination was updated.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-destination"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 13000: The RTMP URL and key are already being used for one of the authenticated user's events.\n* Error code 13001: The authenticated user can simulcast on up to 20 custom RTMP destinations at once.\n* Error code 13002: The authenticated user can simulcast on up to 10 destinations on Facebook, YouTube, or LinkedIn.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event destination exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/destination/#destination_id"
      }
    },
    "/groups": {
      "get": {
        "summary": "Get all groups",
        "description": "This method returns every available group.",
        "operationId": "get_groups",
        "tags": [
          "Groups\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `featured` - Return featured groups.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "featured"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `relevant` - Sort the results by relevance. This option is available for search queries only.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "followers",
                "relevant",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The groups were returned.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/groups"
      },
      "post": {
        "summary": "Create a group",
        "description": "This method creates a new group.",
        "operationId": "create_group",
        "tags": [
          "Groups\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.group+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the group.",
                    "example": "Want to participate in our weekly challenges? Join the group to receive messages and new challenges!",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the group.",
                    "example": "Vimeo Weekend Challenge",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The group was created.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't create groups.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-template": "/groups"
      }
    },
    "/groups/{group_id}": {
      "delete": {
        "summary": "Delete a group",
        "description": "This method deletes the specified group. The authenticated user must be the owner of the group.",
        "operationId": "delete_group",
        "tags": [
          "Groups\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The group was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/groups/+group_id"
      },
      "get": {
        "summary": "Get a specific group",
        "description": "This method returns the specified group.",
        "operationId": "get_group",
        "tags": [
          "Groups\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group was returned.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/groups/+group_id"
      }
    },
    "/groups/{group_id}/users": {
      "get": {
        "summary": "Get all the members of a group",
        "description": "This method returns every user who belongs to the specified group.",
        "operationId": "get_group_members",
        "tags": [
          "Groups\\Users"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderators` - Return group moderators.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "moderators"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The members were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such group exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/groups/+group_id/users"
      }
    },
    "/groups/{group_id}/videos": {
      "get": {
        "summary": "Get all the videos in a group",
        "description": "This method returns every video from the specified group.",
        "operationId": "get_group_videos",
        "tags": [
          "Groups\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "No videos have been added to the group since the given `If-Modified-Since` header."
          },
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such group exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/groups/+group_id/videos"
      }
    },
    "/groups/{group_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a group",
        "description": "This method removes a video from the specified group. The authenticated user must be the owner of the group.",
        "operationId": "delete_video_from_group",
        "tags": [
          "Groups\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "403": {
            "description": "The authenticated user can't remove the video from the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/groups/+group_id/videos/#video_id"
      },
      "get": {
        "summary": "Get a specific video in a group",
        "description": "This method returns a single video from the specified group. You can use this method to determine whether the video belongs to the group.",
        "operationId": "get_group_video",
        "tags": [
          "Groups\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "* No such video or group exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/groups/+group_id/videos/#video_id"
      },
      "put": {
        "summary": "Add a video to a group",
        "description": "This method adds a video to the specified group. The authenticated user must be the owner of the group.",
        "operationId": "add_video_to_group",
        "tags": [
          "Groups\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The video is in pending status."
          },
          "200": {
            "description": "The video was added.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "403": {
            "description": "* The video is already in the group.\n* The authenticated user can't add videos to the group.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/groups/+group_id/videos/#video_id"
      }
    },
    "/languages": {
      "get": {
        "summary": "Get all languages",
        "description": "This method returns all available video languages.",
        "operationId": "get_languages",
        "tags": [
          "Videos\\Languages"
        ],
        "parameters": [
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `audiotracks` - Return languages that can be used for audio tracks.\n * `texttracks` - Return languages that can be used for text tracks.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "audiotracks",
                "texttracks"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The languages were returned.",
            "content": {
              "application/vnd.vimeo.language+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/language"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/languages"
      }
    },
    "/live_events": {
      "delete": {
        "summary": "Delete a list of events",
        "description": "This method deletes multiple events belonging to the authenticated user.",
        "operationId": "delete_live_events_alt1",
        "tags": [
          "Live\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "description": "The user’s password.",
                    "example": "hunter1",
                    "type": "string"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get all the events that belong to the user",
        "description": "The method returns every event belonging to the authenticated user.",
        "operationId": "get_live_events_alt1",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `not_in_folder` - Show only events that aren't in a folder.\n * `not_in_showcase` - Show only events that aren't in a showcase.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "not_in_folder",
                "not_in_showcase"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          },
          {
            "description": "The type of event to return.\n\nOption descriptions:\n * `all` - Return all events.\n * `one_time` - Return one-time events only.\n * `recurring` - Return recurring events only.\n",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "recurring",
              "enum": [
                "all",
                "one_time",
                "recurring"
              ]
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.event+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recurring_event_type": {
                    "description": "The type of recurring event to return. If no value is specified, the value `default` is used.\n\nOption descriptions:\n * `all` - Return all recurring events.\n * `default` - Return only default recurring events.\n * `venue` - Return only recurring events that are venues.\n",
                    "enum": [
                      "all",
                      "default",
                      "venue"
                    ],
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The events were returned.",
            "content": {
              "application/vnd.vimeo.live.event+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event",
        "description": "This method creates a new event for the authenticated user.",
        "operationId": "create_live_event_alt1",
        "tags": [
          "Live\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allow_share_link": {
                    "description": "Whether the share link is usable.",
                    "type": "boolean"
                  },
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords that improve the quality of the automated closed captions.",
                    "example": "commonly-used words,phrases,technical terms",
                    "type": "string"
                  },
                  "auto_cc_lang": {
                    "description": "The language in which the automated closed captions appear.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string"
                  },
                  "automatically_title_stream": {
                    "description": "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "chat_enabled": {
                    "description": "Whether to display the live chat client on the Vimeo event page.",
                    "example": true,
                    "type": "boolean"
                  },
                  "content_rating": {
                    "description": "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "disable_auto_archiving": {
                    "description": "Whether the feature for disabling auto-archiving is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "dvr": {
                    "description": "Whether the DVR feature is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "embed": {
                    "description": "The embed settings of the event and the videos generated by streaming to this event.",
                    "properties": {
                      "autoplay": {
                        "description": "Whether playback starts automatically on load.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The hexadecimal color code for the main color of the embed player.",
                        "example": "#00adef",
                        "type": "string"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the custom logo on the embed player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether to show the custom logo persistently (`true`) or hide it with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embed player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loop": {
                        "description": "Whether the playlist should start from the beginning again after reaching the end of the last video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "playlist": {
                        "description": "Whether to show the playlist controls on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Whether to show the event schedule on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "show_latest_archived_clip": {
                        "description": "Whether to show the latest archived video in the embed player when off-air.",
                        "example": true,
                        "type": "boolean"
                      },
                      "use_color": {
                        "description": "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "event_type": {
                    "description": "The type of event.\n\nOption descriptions:\n * `default` - The event type is a regular recurring event.\n * `venue` - The event type is a venue.\n",
                    "enum": [
                      "default",
                      "venue"
                    ],
                    "example": "default",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "folder_uri": {
                    "description": "The URI of the event's folder.",
                    "example": "/users/67890/projects/12345",
                    "type": "string"
                  },
                  "interaction_tools_settings": {
                    "description": "The settings for the interaction tools.",
                    "properties": {
                      "is_anonymous_questions_disabled": {
                        "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      },
                      "is_qna_moderated": {
                        "description": "Whether the Q&A is moderated for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      }
                    },
                    "type": "object",
                    "x-mill-visibility-private": true
                  },
                  "low_latency": {
                    "description": "Whether the event has low-latency streaming enabled.",
                    "type": "boolean"
                  },
                  "playlist_sort": {
                    "description": "The order in which the videos of the event appear within the event's playlist.\n\nOption descriptions:\n * `added_first` - The most recently added videos appear first.\n * `added_last` - The most recently added videos appear last.\n * `alphabetical` - The videos appear in alphabetical order.\n * `arranged` - The videos appear in the order in which the user has arranged them.\n * `comments` - The videos appear in order of number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear in order of number of likes.\n * `newest` - The newest videos appear first.\n * `oldest` - The oldest videos appear first.\n * `plays` - The videos appear in order of number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "arranged",
                      "comments",
                      "duration",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "example": "added_first",
                    "type": "string"
                  },
                  "rtmp_preview": {
                    "description": "Whether the event has RTMP preview enabled.",
                    "type": "boolean"
                  },
                  "schedule": {
                    "description": "Information about the time or times that the event is expected to be live.",
                    "properties": {
                      "daily_time": {
                        "description": "The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.",
                        "example": "14:00:00Z",
                        "type": "string"
                      },
                      "type": {
                        "description": "How often the event is expected to be live.\n\nOption descriptions:\n * `single` - The event is live one time only.\n * `weekly` - The event is live on a weekly basis.\n",
                        "enum": [
                          "single",
                          "weekly"
                        ],
                        "example": "weekly",
                        "type": "string"
                      },
                      "weekdays": {
                        "description": "A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "scheduled_playback": {
                    "description": "Whether the scheduled playback feature is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "stream_description": {
                    "description": "The description of the next video to be streamed to the event.",
                    "example": "In this episode, we interview a surprise guest",
                    "type": "string"
                  },
                  "stream_embed": {
                    "properties": {
                      "embed": {
                        "description": "The embed permission level for the event.\n\nOption descriptions:\n * `private` - Only the user can embed the event.\n * `public` - Anyone can embed the event.\n * `whitelist` - Only specified users can embed the event.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "public",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_password": {
                    "description": "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "stream_privacy": {
                    "description": "The privacy settings of the event.",
                    "properties": {
                      "view": {
                        "description": "The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the event.\n * `unlisted` - Only those with the private link can access the event.\n",
                        "enum": [
                          "anybody",
                          "embed_only",
                          "nobody",
                          "password",
                          "unlisted"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_title": {
                    "description": "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.",
                    "example": "Special Feature",
                    "type": "string"
                  },
                  "streaming_auto_stop": {
                    "description": "Whether the feature for automatically stopping the live stream is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "time_zone": {
                    "description": "The time zone used in resolving the timestamps that are included in automatically generated video titles.",
                    "example": "America/New_York",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.",
                    "example": "Live Content",
                    "type": "string"
                  },
                  "unlimited_duration": {
                    "description": "Whether the feature for 24/7 streaming is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "venue_uuid": {
                    "description": "The venue UUID to associate with the event.",
                    "example": "abc345y8-b266-4e30-bfce-db1d0eush49f",
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was created.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "* Error code 3200: The authenticated user can't create an event.\n* Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3422: The authenticated user can't create an event.\n* Error code 3439: The authenticated user can't edit the content rating of an event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}": {
      "patch": {
        "summary": "Update an event",
        "description": "This method updates an event belonging to the authenticated user.",
        "operationId": "update_live_event_alt1",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": false,
                    "type": "boolean"
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.",
                    "type": "string"
                  },
                  "auto_cc_language": {
                    "description": "The language of the automated closed captions.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string"
                  },
                  "automatically_title_stream": {
                    "description": "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "chat_enabled": {
                    "description": "Whether to display the live chat client on the Vimeo event page.",
                    "example": true,
                    "type": "boolean"
                  },
                  "content_rating": {
                    "description": "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "disable_auto_archiving": {
                    "description": "Whether the feature for disabling auto-archiving is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "dvr": {
                    "description": "Whether the DVR feature is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "embed": {
                    "description": "The embed settings of the event and the videos generated by streaming to this event.",
                    "properties": {
                      "autoplay": {
                        "description": "Whether playback starts automatically on load.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The hexadecimal color code for the main color of the embed player.",
                        "example": "#00adef",
                        "type": "string"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the custom logo on the embed player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether to show the custom logo persistently (`true`) or hide it with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embed player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loop": {
                        "description": "Whether the playlist should start from the beginning again after reaching the end of the last video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "playlist": {
                        "description": "Whether to show the playlist controls on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Whether to show the event schedule on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "use_color": {
                        "description": "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "interaction_tools_settings": {
                    "description": "The settings for the interaction tools.",
                    "properties": {
                      "is_anonymous_questions_disabled": {
                        "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      },
                      "is_qna_moderated": {
                        "description": "Whether the Q&A is moderated for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      }
                    },
                    "type": "object",
                    "x-mill-visibility-private": true
                  },
                  "playlist_sort": {
                    "description": "The order in which the videos of the event appear within the event's playlist.\n\nOption descriptions:\n * `added_first` - The most recently added videos appear first.\n * `added_last` - The most recently added videos appear last.\n * `alphabetical` - The videos appear in alphabetical order.\n * `arranged` - The videos appear in the order in which the user has arranged them.\n * `comments` - The videos appear in order of number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear in order of number of likes.\n * `newest` - The newest videos appear first.\n * `oldest` - The oldest videos appear first.\n * `plays` - The videos appear in order of number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "arranged",
                      "comments",
                      "duration",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "example": "added_first",
                    "type": "string"
                  },
                  "schedule": {
                    "description": "Information about the time or times that the event is expected to be live.",
                    "properties": {
                      "daily_time": {
                        "description": "The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.",
                        "example": "14:00:00Z",
                        "type": "string"
                      },
                      "type": {
                        "description": "How often the event is expected to be live.\n\nOption descriptions:\n * `single` - The event is live one time only.\n * `weekly` - The event is live on a weekly basis.\n",
                        "enum": [
                          "single",
                          "weekly"
                        ],
                        "example": "weekly",
                        "type": "string"
                      },
                      "weekdays": {
                        "description": "A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "scheduled_playback": {
                    "description": "Whether the scheduled playback feature is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "stream_description": {
                    "description": "The description of the next video to be streamed to the event.",
                    "example": "In this episode, we interview a surprise guest",
                    "type": "string"
                  },
                  "stream_embed": {
                    "properties": {
                      "embed": {
                        "description": "The embed permission level for the event.\n\nOption descriptions:\n * `private` - Only the user can embed the event.\n * `public` - Anyone can embed the event.\n * `whitelist` - Only specified users can embed the event.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "public",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_mode": {
                    "description": "The stream mode of the event.\n\nOption descriptions:\n * `live` - The stream is live playback.\n * `record` - The stream is in record mode.\n * `simulive` - The stream is scheduled media playback.\n",
                    "enum": [
                      "live",
                      "record",
                      "simulive"
                    ],
                    "example": "live",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "stream_password": {
                    "description": "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "stream_privacy": {
                    "description": "The privacy settings of the event.",
                    "properties": {
                      "view": {
                        "description": "The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the event.\n * `unlisted` - Only those with the private link can access the event.\n",
                        "enum": [
                          "anybody",
                          "embed_only",
                          "nobody",
                          "password",
                          "unlisted"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_title": {
                    "description": "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.",
                    "example": "Special Feature",
                    "type": "string"
                  },
                  "streaming_auto_stop": {
                    "description": "Whether the featuring for automatically stopping the live stream is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "time_zone": {
                    "description": "The time zone used in resolving the timestamps that are included in automatically generated video titles.",
                    "example": "America/New_York",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.",
                    "example": "Live Content",
                    "type": "string"
                  },
                  "unlimited_duration": {
                    "description": "Whether the feature for 24/7 streaming is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was updated.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to update the event.\n* Error code 3422: The authenticated user can't update the event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/!live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "delete": {
        "summary": "Delete a specific event",
        "description": "This method deletes a single event belonging to the authenticated user.",
        "operationId": "delete_live_event_alt1",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The event was deleted."
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to delete the event.\n* Error code 3422: The authenticated user can't delete the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get a specific event",
        "description": "This method returns a single event belonging to the authenticated user.",
        "operationId": "get_live_event_alt1",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The password of the event when the privacy is set to `password`.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The event was returned.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/activate": {
      "post": {
        "summary": "Activate an event",
        "description": "This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.",
        "operationId": "activate_live_event_alt1",
        "tags": [
          "Live\\Event activation"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud_composing_streaming": {
                    "description": "Whether the stream activates from the cloud composer.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "streaming_start_requested": {
                    "description": "Whether the stream activates from the cloud composer.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was activated.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2428: The event has already been activated.\n* Error code 2551: The session can't be activated when the scheduled media playback feature is enabled.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to stream to the event.\n* Error code 3422: The authenticated user can't activate the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4017: An unexpected error occurred.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "Error code 7701: The service is unavailable.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/activate",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/auto_cc": {
      "patch": {
        "summary": "Edit the automated closed captions preference of an event",
        "description": "This method edits the automated closed captions preference for the specified event.",
        "operationId": "edit_live_event_auto_cc_alt1",
        "tags": [
          "Live\\Event automated closed captions"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/application/vnd.vimeo.live.auto_cc+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords that improve the quality of the automated closed captions.",
                    "example": "commonly-used words,phrases,technical terms",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "auto_cc_lang": {
                    "description": "The language in which the automated closed captions appear.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                },
                "required": [
                  "auto_cc_enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The automated closed captions preference was edited.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-automated-closed-captions"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The payload is invalid.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The user doesn't have permission to edit the closed captions preference for the specified event.\n* Error code 3422: The authenticated user can't edit the closed captions preference for the specified event.\n* Error code 3439: The authenticated user has reached the automated closed captions usage limit, or they can't use the automated closed captions feature at all.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/auto_cc",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ],
        "x-mill-visibility-private": true
      }
    },
    "/live_events/{live_event_id}/end": {
      "post": {
        "summary": "End an event",
        "description": "This method ends the specified event. The authenticated user must be the owner of the event.",
        "operationId": "end_live_event_alt1",
        "tags": [
          "Live\\Event end"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the streamable video.",
            "in": "query",
            "name": "clip_id",
            "required": false,
            "schema": {
              "type": "number",
              "example": 12345
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The event was ended.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The user can't end the session.\n* Error code 3422: The authenticated user can't end the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4021: There is no video for the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 10004: The event isn't being streamed.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/end",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/low_latency": {
      "patch": {
        "summary": "Toggle the low-latency option of an event",
        "description": "This method toggles the low-latency option of the specified event.",
        "operationId": "toggle_rle_low_latency_alt1",
        "tags": [
          "Live\\Event low latency"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/application/vnd.vimeo.live.low_latency+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "low_latency": {
                    "description": "Whether the event is low latency.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The low-latency status of the event was returned.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event-low-latency"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't toggle the low-latency option of the event.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/low_latency",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/pictures": {
      "get": {
        "summary": "Get all the thumbnails of an event",
        "description": "This method returns every thumbnail image of the specified event.",
        "operationId": "get_live_event_thumbnails_alt1",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/pictures",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event thumbnail",
        "description": "This method creates a thumbnail image for the specified event.",
        "operationId": "create_live_event_thumbnail_alt1",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the thumbnail is the event's active thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was created.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't delete the thumbnails for the event.\n* Error code 3422: The authenticated user can't create a thumbnail for the event.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/pictures",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/pictures/{thumbnail_id}": {
      "delete": {
        "summary": "Delete an event thumbnail",
        "description": "This method deletes a thumbnail image for the specified event.",
        "operationId": "delete_live_event_thumbnail_alt1",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The thumbnail was deleted."
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't delete the thumbnail for the event.\n* Error code 3422: The authenticated user can't delete the thumbnail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get a specific event thumbnail",
        "description": "This method returns a single thumbnail image of the specified event.",
        "operationId": "get_live_event_thumbnail_alt1",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnail was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "patch": {
        "summary": "Edit an event thumbnail",
        "description": "This method edits a thumbnail image for the specified event.",
        "operationId": "edit_live_event_thumbnail_alt1",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the thumbnail is the event's active thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't update the thumbnail for the event.\n* Error code 3422: The authenticated user can't edit the thumbnail of the event.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/privacy/domains": {
      "get": {
        "summary": "Get all the domains on which an event can be embedded",
        "description": "This method returns every permitted domain for an event. The embed privacy setting must be `whitelist`.",
        "operationId": "get_live_event_whitelist_alt1",
        "tags": [
          "Live\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The permitted domains for the event were returned.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domain"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2518: The embed permission isn't `whitelist`.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't get domains for the event.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/privacy/domains",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "put": {
        "summary": "Embed an event on one or more domains",
        "description": "This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.",
        "operationId": "set_live_event_whitelist_alt1",
        "tags": [
          "Live\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allowed_domains": {
                    "description": "An array of the domains on which the embedded event can appear.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The event was embedded on the specified domains."
          },
          "400": {
            "description": "Error code 2518: The embed permission isn't `whitelist`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't edit domains for the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists under the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/privacy/domains",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/videos": {
      "delete": {
        "summary": "Remove a list of videos from an event",
        "description": "This method removes multiple videos from the specified event.",
        "operationId": "remove_videos_from_live_event_alt1",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "An array of video objects.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "video": {
                          "properties": {
                            "uri": {
                              "description": "The URI of a video to remove.",
                              "example": "/videos/258684937",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were removed."
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't remove one or more of the listed videos.\n* Error code 3422: The authenticated user can't remove videos from the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get all the videos in an event",
        "description": "This method returns every video in the specified event.",
        "operationId": "get_live_event_videos_alt1",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The page that contains the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable events.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added videos.\n * `alphabetical` - Sort the results alphabetically.\n * `arranged` - Sort the results in the order that the user has arranged the videos.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "arranged",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Add a list of videos to an event",
        "description": "This method adds multiple videos to the specified event.",
        "operationId": "add_videos_to_live_event_alt1",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "An array of video objects.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "video": {
                          "properties": {
                            "uri": {
                              "description": "The URI of a video to add.",
                              "example": "/videos/258684937",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were added."
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't add videos to the event.\n* Error code 3422: The authenticated user can't add one or more of the listed videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/live_events/{live_event_id}/videos/{video_id}": {
      "get": {
        "summary": "Get a specific video in an event",
        "description": "This method returns a single video in the specified event.",
        "operationId": "get_live_event_video_alt1",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, video, or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/live_events/#live_event_id/videos/!video_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me": {
      "get": {
        "summary": "Get the user",
        "description": "This method returns the authenticated user.",
        "operationId": "get_user_alt1",
        "tags": [
          "Users\\Essentials"
        ],
        "responses": {
          "200": {
            "description": "The user was returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me"
      },
      "patch": {
        "summary": "Edit the user's account",
        "description": "This method edits the Vimeo account of the authenticated user.",
        "operationId": "edit_user_alt1",
        "tags": [
          "Users\\Essentials"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.user+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bio": {
                    "description": "The user's bio.",
                    "example": "This is where you will find videos and news updates from the staff",
                    "type": "string"
                  },
                  "content_filter": {
                    "description": "A list of values describing the content in the user's videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you're using a query string or an array if you're using JSON.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "gender": {
                    "description": "The authenticated user's gender.\n\nOption descriptions:\n * `f` - The user's preferred pronouns are she and her.\n * `m` - The user's preferred pronouns are he and him.\n * `n` - The user would rather not give preferred pronouns.\n * `o` - The user's preferred pronouns are they and them.\n",
                    "enum": [
                      "f",
                      "m",
                      "n",
                      "o"
                    ],
                    "type": "string"
                  },
                  "link": {
                    "description": "The user's custom Vimeo URL.",
                    "example": "staff",
                    "type": "string"
                  },
                  "location": {
                    "description": "The user's location.",
                    "example": "New York City",
                    "type": "string"
                  },
                  "name": {
                    "description": "The user's display name.",
                    "example": "Vimeo Staff",
                    "type": "string"
                  },
                  "password": {
                    "description": "The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "videos": {
                    "properties": {
                      "privacy": {
                        "properties": {
                          "add": {
                            "description": "Whether the user can add videos to showcases, channels, or groups by default.",
                            "example": true,
                            "type": "boolean"
                          },
                          "comments": {
                            "description": "Who can comment on the user's video uploads by default.\n\nOption descriptions:\n * `anybody` - Anyone can comment.\n * `contacts` - Only the user's contacts can comment.\n * `nobody` - No one can comment.\n",
                            "enum": [
                              "anybody",
                              "contacts",
                              "nobody"
                            ],
                            "type": "string"
                          },
                          "download": {
                            "description": "Whether the user can download videos. This value becomes the default download setting for all future videos that the user uploads.",
                            "example": true,
                            "type": "boolean"
                          },
                          "embed": {
                            "description": "The privacy for the user's embedded videos. The `whitelist` value enables you to define all valid embeddable domains. See our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for details on adding and removing domains.\n\nOption descriptions:\n * `private` - The videos can't be embedded on any domain.\n * `public` - The videos can be embedded on any domain.\n * `whitelist` - The videos can be embedded on the specified domains only.\n",
                            "enum": [
                              "private",
                              "public",
                              "whitelist"
                            ],
                            "type": "string"
                          },
                          "view": {
                            "description": "Who can access the user's videos by default.\n\nOption descriptions:\n * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only the user's contacts can access the videos. _This field is deprecated._\n * `disable` - The videos are disabled. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one can access the videos. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the videos.\n * `unlisted` - The videos are unlisted.\n * `users` - Only other Vimeo members can access the videos. _This field is deprecated._\n",
                            "enum": [
                              "anybody",
                              "contacts",
                              "disable",
                              "nobody",
                              "password",
                              "unlisted",
                              "users"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's Vimeo account was edited.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me"
      }
    },
    "/me/albums": {
      "get": {
        "summary": "Get all the showcases that belong to the user",
        "description": "This method returns every showcase belonging to the authenticated user.",
        "operationId": "get_showcases_alt1",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date of creation.\n * `duration` - Sort the results by duration.\n * `videos` - Sort the results by the number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "duration",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The showcases were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/album"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums"
      },
      "post": {
        "summary": "Create a showcase",
        "description": "This method creates a new showcase for the specified user.",
        "operationId": "create_showcase_alt1",
        "tags": [
          "Showcases\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.album+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_color": {
                    "description": "The hexadecimal color code for the color of the player buttons and showcase controls.",
                    "example": "ff66ee",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the showcase.",
                    "example": "Vimeo holiday videos!",
                    "type": "string"
                  },
                  "hide_from_vimeo": {
                    "description": "Whether the showcase should be hidden from Vimeo when unlisted.",
                    "example": false,
                    "type": "boolean"
                  },
                  "hide_nav": {
                    "description": "Whether to hide Vimeo navigation when displaying the showcase.",
                    "example": true,
                    "type": "boolean"
                  },
                  "hide_upcoming": {
                    "description": "Whether to include the upcoming event in the showcase.",
                    "example": false,
                    "type": "boolean"
                  },
                  "layout": {
                    "description": "The type of layout for presenting the showcase.\n\nOption descriptions:\n * `grid` - The videos appear in a grid.\n * `player` - The videos appear in the player.\n",
                    "enum": [
                      "grid",
                      "player"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the showcase.",
                    "example": "Vimeo Holiday Videos!",
                    "type": "string"
                  },
                  "password": {
                    "description": "The showcase's password. This field is required only when **privacy** is `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy level of the showcase.\n\nOption descriptions:\n * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.\n * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one can access the showcase, including the authenticated user.\n * `password` - Only those with the password can access the showcase.\n * `team` - Only members of the authenticated user's team can access the showcase.\n * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.\n",
                    "enum": [
                      "anybody",
                      "embed_only",
                      "nobody",
                      "password",
                      "team",
                      "unlisted"
                    ],
                    "type": "string"
                  },
                  "review_mode": {
                    "description": "Whether showcase videos use the review mode URL.",
                    "example": true,
                    "type": "boolean"
                  },
                  "sort": {
                    "description": "The default sort order of the videos as they appear in the showcase.\n\nOption descriptions:\n * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.\n * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.\n * `alphabetical` - The videos appear alphabetically by their title.\n * `alphabetical_desc` - The videos appear alphabetically by their title in reverse order.\n * `arranged` - The videos appear as arranged by the owner of the showcase.\n * `comments` - The videos appear according to their number of comments.\n * `likes` - The videos appear according to their number of likes.\n * `newest` - The videos appear in chronological order with the newest first.\n * `oldest` - The videos appear in chronological order with the oldest first.\n * `plays` - The videos appear according to their number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "alphabetical_desc",
                      "arranged",
                      "comments",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "type": "string"
                  },
                  "theme": {
                    "description": "The color theme of the showcase.\n\nOption descriptions:\n * `dark` - The showcase uses the dark theme.\n * `standard` - The showcase uses the standard theme.\n",
                    "enum": [
                      "dark",
                      "standard"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The showcase was created.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't create showcases.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums"
      }
    },
    "/me/albums/{album_id}": {
      "delete": {
        "summary": "Delete a showcase",
        "description": "This method deletes the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "delete_showcase_alt2",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The showcase was deleted."
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't delete the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id"
      },
      "get": {
        "summary": "Get a specific showcase",
        "description": "This method returns the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_alt2",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The showcase was returned.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id"
      },
      "patch": {
        "summary": "Edit a showcase",
        "description": "This method edits the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "edit_showcase_alt2",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.album+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_color": {
                    "description": "The hexadecimal color code for the color of the player buttons and showcase controls.",
                    "example": "ff66ee",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the showcase.",
                    "example": "Vimeo holiday videos!",
                    "type": "string"
                  },
                  "domain": {
                    "description": "The custom domain of the showcase.",
                    "example": "mycustomdomain.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "hide_nav": {
                    "description": "Whether to hide Vimeo navigation when displaying the showcase.",
                    "example": true,
                    "type": "boolean"
                  },
                  "hide_upcoming": {
                    "description": "Whether to include the upcoming event in the showcase.",
                    "example": false,
                    "type": "boolean"
                  },
                  "layout": {
                    "description": "The type of layout for presenting the showcase.\n\nOption descriptions:\n * `grid` - The videos appear in a grid.\n * `player` - The videos appear in the player.\n",
                    "enum": [
                      "grid",
                      "player"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the showcase.",
                    "example": "Vimeo Holiday Videos!",
                    "type": "string"
                  },
                  "password": {
                    "description": "The showcase's password. This field is required only when **privacy** is `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy level of the showcase.\n\nOption descriptions:\n * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.\n * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one can access the showcase, including the authenticated user.\n * `password` - Only people with the password can access the showcase.\n * `team` - Only members of the authenticated user's team can access the showcase.\n * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.\n",
                    "enum": [
                      "anybody",
                      "embed_only",
                      "nobody",
                      "password",
                      "team",
                      "unlisted"
                    ],
                    "type": "string"
                  },
                  "review_mode": {
                    "description": "Whether showcase videos use the review mode URL.",
                    "example": true,
                    "type": "boolean"
                  },
                  "sort": {
                    "description": "The default sort order of the videos as they appear in the showcase.\n\nOption descriptions:\n * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.\n * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.\n * `alphabetical` - The videos appear alphabetically by their title.\n * `alphabetical_desc` - The videos appear alphabetically by their title in reverse order.\n * `arranged` - The videos appear as arranged by the owner of the showcase.\n * `comments` - The videos appear according to their number of comments.\n * `likes` - The videos appear according to their number of likes.\n * `newest` - The videos appear in chronological order with the newest first.\n * `oldest` - The videos appear in chronological order with the oldest first.\n * `plays` - The videos appear according to their number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "alphabetical_desc",
                      "arranged",
                      "comments",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "type": "string"
                  },
                  "theme": {
                    "description": "The color theme of the showcase.\n\nOption descriptions:\n * `dark` - The showcase uses the dark theme.\n * `standard` - The showcase uses the standard theme.\n",
                    "enum": [
                      "dark",
                      "standard"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "description": "The custom Vimeo URL of the showcase.",
                    "example": "my-custom-url",
                    "nullable": true,
                    "type": "string"
                  },
                  "use_custom_domain": {
                    "description": "Whether the user has opted for a custom domain for their showcase.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The showcase was edited.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the showcase, the supplied token doesn't have the proper scopes, or the authenticated user can't edit the showcase.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id"
      }
    },
    "/me/albums/{album_id}/videos": {
      "get": {
        "summary": "Get all the videos in a showcase",
        "description": "This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_videos_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The page containing the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Filter the results by the **embeddable** attribute.\n * `playable` - Filter the results by the **playable** attribute.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable",
                "playable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The password of the showcase.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string",
              "example": "hunter1"
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `default` - Sort the results by the default method.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their manual order.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "default",
                "duration",
                "likes",
                "manual",
                "modified_time",
                "plays"
              ]
            }
          },
          {
            "description": "Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.",
            "in": "query",
            "name": "weak_search",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos"
      },
      "put": {
        "summary": "Replace all the videos in a showcase",
        "description": "This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.",
        "operationId": "replace_videos_in_showcase_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "A comma-separated list of video URIs corresponding to the videos to add.",
                    "example": "/videos/258684937,/videos/273576296",
                    "type": "string"
                  }
                },
                "required": [
                  "videos"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The videos were replaced."
          },
          "403": {
            "description": "The authenticated user can't add videos to the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos"
      }
    },
    "/me/albums/{album_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a showcase",
        "description": "This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "remove_video_from_showcase_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't remove videos from the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos/!video_id"
      },
      "get": {
        "summary": "Get a specific video in a showcase",
        "description": "This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_video_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          },
          {
            "description": "The password of the showcase.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string",
              "example": "hunter1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or the video doesn't belong to it.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos/!video_id"
      },
      "put": {
        "summary": "Add a specific video to a showcase",
        "description": "This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "add_video_to_showcase_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't add videos to the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos/!video_id"
      }
    },
    "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail": {
      "post": {
        "summary": "Create a thumbnail for a showcase from a showcase video",
        "description": "This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.",
        "operationId": "set_video_as_showcase_thumbnail_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time_code": {
                    "description": "The time in seconds of the video frame to use as the thumbnail image.",
                    "example": 300,
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The showcase thumbnail was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3429: The authenticated user can't create a thumbnail for this showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such showcase, user, or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos/#video_id/set_album_thumbnail"
      }
    },
    "/me/albums/{album_id}/videos/{video_id}/set_featured_video": {
      "patch": {
        "summary": "Set the featured video of a showcase",
        "description": "This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.",
        "operationId": "set_video_as_showcase_featured_alt2",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video is now the featured video of the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3429: The authenticated user can't set the featured video of this showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such showcase, user, or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/albums/#album_id/videos/!video_id/set_featured_video"
      }
    },
    "/me/analytics": {
      "get": {
        "summary": "Get video analytics for the authenticated user",
        "description": "This method returns video analytics for the authenticated user's Vimeo account.",
        "operationId": "get_user_analytics_alt1",
        "tags": [
          "Users\\Analytics"
        ],
        "parameters": [
          {
            "description": "The data dimension by which to group the results.\n\nOption descriptions:\n * `browser` - Group the results by browser.\n * `city` - Group the results by city.\n * `country` - Group the results by country.\n * `device_type` - Group the results by device type.\n * `embed_domain` - Group the results by embed domain.\n * `embed_domain_path` - Group the results by embed domain path.\n * `os` - Group the results by operating system.\n * `region` - Group the results by region.\n * `streaming_type` - Group the results by streaming type.\n * `total` - Group the results by the time range provided.\n * `video` - Group the results by video.\n",
            "in": "query",
            "name": "dimension",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "browser",
                "city",
                "country",
                "device_type",
                "embed_domain",
                "embed_domain_path",
                "os",
                "region",
                "streaming_type",
                "total",
                "video"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of video, folder, or event URIs to filter.",
            "in": "query",
            "name": "filter_content",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/users/12345/projects/1233456,/video/7890123,/users/13243/projects/123"
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of country codes in ISO-3166 format to filter on.",
            "in": "query",
            "name": "filter_countries",
            "required": false,
            "schema": {
              "type": "array",
              "example": "UK,US,IN",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of device types to filter on.",
            "in": "query",
            "name": "filter_device_types",
            "required": false,
            "schema": {
              "type": "array",
              "example": "android,ios",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of domain names to filter on.",
            "in": "query",
            "name": "filter_embed_domains",
            "required": false,
            "schema": {
              "type": "array",
              "example": "abc.com,xyz.com",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of combined country and region codes in ISO-3166 format to filter on.",
            "in": "query",
            "name": "filter_regions",
            "required": false,
            "schema": {
              "type": "array",
              "example": "US-NJ,US-NY,IN-GJ,GB-WLS",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of streaming types to filter on.",
            "in": "query",
            "name": "filter_streaming_types",
            "required": false,
            "schema": {
              "type": "array",
              "example": "live,video",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The start date of the range of results in ISO 8601 format.",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2021-05-30T00:00:00+00:00"
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The maximum number of items returned from the request, up to a limit of 1000 items. The default value is `50`.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 50
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `comments` - Sort the results by the number of comments.\n * `country` - Sort the results by country.\n * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.\n * `device_type` - Sort the results by device type.\n * `downloads` - Sort the results by the number of downloads.\n * `drm_licenses_used` - Sort the results by the number of DRM licenses used. _This option is available only to users with the DRM feature._\n * `embed_domain` - Sort the results by embed domain.\n * `finishes` - Sort the results by the number of complete plays.\n * `impressions` - Sort the results by the number of impressions.\n * `like` - Sort the results by the number of likes.\n * `mean_percent_watched` - Sort the results by mean percentage played.\n * `mean_seconds_watched` - Sort the results by mean seconds played.\n * `third_party_impressions` - Sort the results by the number of impressions from all non-Vimeo players.\n * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn't `none`.\n * `total_seconds_watched` - Sort the results by total seconds played.\n * `unique_impressions` - Sort the results by unique impressions.\n * `unique_viewers` - Sort the results by unique viewers.\n * `video` - Sort the results by video ID.\n * `views` - Sort the results by the number of views.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "comments",
                "country",
                "default",
                "device_type",
                "downloads",
                "drm_licenses_used",
                "embed_domain",
                "finishes",
                "impressions",
                "like",
                "mean_percent_watched",
                "mean_seconds_watched",
                "third_party_impressions",
                "time",
                "total_seconds_watched",
                "unique_impressions",
                "unique_viewers",
                "video",
                "views"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The interval by which to aggregate the data according to the specified data dimension. The default value is `none`. This parameter works only when the value of **dimension** is `video`, `country`, `embed_domain`, `device_type`, or `streaming_type`.\n\nOption descriptions:\n * `day` - Aggregate the results by day according to the specified data dimension.\n * `month` - Aggregate the results by month according to the specified data dimension.\n * `none` - The results are not aggregated by time interval.\n * `week` - Aggregate the results by week according to the specified data dimension.\n * `year` - Aggregate the results by year according to the specified data dimension.\n",
            "in": "query",
            "name": "time_interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "month",
                "none",
                "week",
                "year"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The end date of the range of results in ISO 8601 format.",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2021-06-30T23:59:59+00:00"
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The analytics were returned.",
            "content": {
              "application/vnd.vimeo.analytics+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/analytics"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stats"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/analytics",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_ANALYTICS_API"
        ],
        "x-mill-visibility-private": true
      }
    },
    "/me/appearances": {
      "get": {
        "summary": "Get all the videos in which the user appears",
        "description": "This method returns all the videos in which the authenticated user has a credited appearance.",
        "operationId": "get_appearances_alt1",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/appearances"
      }
    },
    "/me/categories": {
      "get": {
        "summary": "Get all the categories that the user follows",
        "description": "This method returns every category that the authenticated user follows.",
        "operationId": "get_category_subscriptions_alt1",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by name.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The categories were returned.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: Only the authenticated user can access this information.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/categories"
      }
    },
    "/me/categories/{category}": {
      "delete": {
        "summary": "Cause the user to stop following a category",
        "description": "This method causes the authenticated user to stop following the specified category.",
        "operationId": "unsubscribe_from_category_alt1",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user has stopped following the category."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/categories/+category"
      },
      "get": {
        "summary": "Check if the user follows a category",
        "description": "This method determines whether the authenticated user follows the specified category.",
        "operationId": "check_if_user_subscribed_to_category_alt1",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is following the category."
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/categories/+category"
      },
      "put": {
        "summary": "Cause the user to follow a specific category",
        "description": "This method causes the authenticated user to follow the specified category.",
        "operationId": "subscribe_to_category_alt1",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "number",
              "example": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is following the category."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/categories/+category"
      }
    },
    "/me/channels": {
      "get": {
        "summary": "Get all the channels to which a user subscribes",
        "description": "This method returns all the channels to which the specified user subscribes.",
        "operationId": "get_channel_subscriptions_alt1",
        "tags": [
          "Channels\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated channels.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "moderated"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "followers",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "No channel has been followed since the given `If-Modified-Since` header."
          },
          "200": {
            "description": "The channels were returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/channel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/channels"
      }
    },
    "/me/channels/{channel_id}": {
      "delete": {
        "summary": "Unsubscribe the user from a specific channel",
        "description": "This method unsubscribes the authenticated user from the specified channel.",
        "operationId": "unsubscribe_from_channel_alt1",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is unsubscribed from the channel."
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/channels/+channel_id"
      },
      "get": {
        "summary": "Check if a user follows a channel",
        "description": "This method determines whether the specified user is a follower of a particular channel.",
        "operationId": "check_if_user_subscribed_to_channel_alt1",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user follows the channel."
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/channels/+channel_id"
      },
      "put": {
        "summary": "Subscribe the user to a specific channel",
        "description": "This method subscribes the authenticated user to the specified channel.",
        "operationId": "subscribe_to_channel_alt1",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is subscribed to the channel."
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/channels/+channel_id"
      }
    },
    "/me/customlogos": {
      "get": {
        "summary": "Get all the custom logos that belong to the user",
        "description": "This method returns every custom logo that belongs to the authenticated user or team owner.",
        "operationId": "get_custom_logos_alt1",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The pixel dimensions of the image in `{width}x{height}` format. For more information, see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#using-the-sizes-parameter) guide.",
            "in": "query",
            "name": "sizes",
            "required": false,
            "schema": {
              "type": "string",
              "example": "100x75"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom logos were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't access the custom logos.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/customlogos"
      },
      "post": {
        "summary": "Add a custom user logo",
        "description": "This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.",
        "operationId": "create_custom_logo_alt1",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "responses": {
          "201": {
            "description": "The custom logo was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add the custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/customlogos"
      }
    },
    "/me/customlogos/{logo_id}": {
      "delete": {
        "summary": "Delete a custom user logo",
        "description": "This method deletes the specified custom logo belonging to the authenticated user.",
        "operationId": "delete_custom_logo_alt1",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The custom logo was deleted."
          },
          "403": {
            "description": "The authenticated user can't access the custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/customlogos/#logo_id"
      },
      "get": {
        "summary": "Get a specific custom user logo",
        "description": "This method returns a single custom logo belonging to the authenticated user.",
        "operationId": "get_custom_logo_alt1",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom logo was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't access the custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/customlogos/#logo_id"
      }
    },
    "/me/destinations": {
      "get": {
        "summary": "Get all available event destinations for the user to stream to",
        "description": "This method returns every available event destination for the authenticated user to stream to.",
        "operationId": "get_available_destinations_alt1",
        "tags": [
          "Live\\Event destinations"
        ],
        "responses": {
          "200": {
            "description": "The event destinations were returned."
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't get the available destinations.\n* Error code 3422: The authenticated user can't live simulcast.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/destinations"
      }
    },
    "/me/feed": {
      "get": {
        "summary": "Get all the videos in the user's feed",
        "description": "This method returns every video in the authenticated user's feed.",
        "operationId": "get_feed_alt1",
        "tags": [
          "Users\\Feeds"
        ],
        "parameters": [
          {
            "description": "The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string",
              "example": "280"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The feed type.\n\nOption descriptions:\n * `appears` - Videos in which the user appears.\n * `category_featured` - Featured videos.\n * `channel` - Channel videos.\n * `facebook_feed` - Videos from the user's Facebook feed.\n * `following` - Videos from accounts that the user follows.\n * `group` - Group videos.\n * `likes` - Liked videos.\n * `ondemand_publish` - On Demand videos.\n * `share` - Shared videos.\n * `tagged_with` - Tagged videos.\n * `twitter_timeline` - Videos from the user's Twitter timeline.\n * `uploads` - Uploaded videos.\n",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "appears",
                "category_featured",
                "channel",
                "facebook_feed",
                "following",
                "group",
                "likes",
                "ondemand_publish",
                "share",
                "tagged_with",
                "twitter_timeline",
                "uploads"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.activity+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/activity-3-1"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.activity+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/feed"
      }
    },
    "/me/followers": {
      "get": {
        "summary": "Get all the followers of the user",
        "description": "This method returns every follower of the authenticated user.",
        "operationId": "get_followers_alt1",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's followers were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/followers"
      }
    },
    "/me/following": {
      "get": {
        "summary": "Get all the users who are followed by the user",
        "description": "This method returns every user who is followed by the authenticated user.",
        "operationId": "get_user_following_alt1",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `online` - Return users who are currently online.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "online"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The followed users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/following"
      },
      "post": {
        "summary": "Follow a list of users",
        "description": "This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as\nan array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:\n\n```\n{\n [\n     {\"uri\" : \"/users/{user01_id}\"},\n     {\"uri\" : \"/users/{user02_id}\"},\n     {\"uri\" : \"/users/{user03_id}\"}\n ]\n}\n```",
        "operationId": "follow_users_alt1",
        "tags": [
          "Users\\Followers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "An array of user IDs for the authenticated user to follow.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The users were followed."
          },
          "401": {
            "description": "Error code 8000: The user access token is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3417: The authenticated user can't follow other users.\n* Error code 3438: The authenticated user can't follow other users because an email verification check hasn't been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2205: The request body is empty, the users array is invalid, or the list of users doesn't contain URIs.\n* Error code 2900: A user in the list doesn't exist.\n* Error code 2901: The list contains more than 100 users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4005: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "429": {
            "description": "Error code 9006: The authenticated user is rate-limited from following other users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/following"
      }
    },
    "/me/following/{follow_user_id}": {
      "delete": {
        "summary": "Unfollow a user",
        "description": "This method causes the authenticated user to stop following another user.",
        "operationId": "unfollow_user_alt1",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user to unfollow.",
            "in": "path",
            "name": "follow_user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3766357
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was unfollowed."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/following/+follow_user_id"
      },
      "get": {
        "summary": "Check if the user is following another user",
        "description": "This method determines whether the authenticated user is a follower of the specified user.",
        "operationId": "check_if_user_is_following_alt1",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user to follow.",
            "in": "path",
            "name": "follow_user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3766357
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The authenticated user follows the specified user."
          },
          "404": {
            "description": "The authenticated user doesn't follow the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/following/+follow_user_id"
      },
      "put": {
        "summary": "Follow a specific user",
        "description": "This method causes the authenticated user to become the follower of the specified user.",
        "operationId": "follow_user_alt1",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user to follow.",
            "in": "path",
            "name": "follow_user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3766357
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was followed."
          },
          "403": {
            "description": "* The authenticated user can't follow other users.\n* Error code 3438: The authenticated user can't follow other users because an email verification check hasn't been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/following/+follow_user_id"
      }
    },
    "/me/groups": {
      "get": {
        "summary": "Get all the groups that the user has joined",
        "description": "This method returns every group to which the authenticated user belongs.",
        "operationId": "get_user_groups_alt1",
        "tags": [
          "Groups\\Users"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated groups.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "moderated"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `members` - Sort the results by number of members.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "members",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The groups were returned.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/groups"
      }
    },
    "/me/groups/{group_id}": {
      "delete": {
        "summary": "Remove the user from a group",
        "description": "This method removes the authenticated user from the specified group. The authenticated user can't be the owner of the group; assign a new owner through a PATCH request first.",
        "operationId": "leave_group_alt1",
        "tags": [
          "Groups\\Subscriptions"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was removed from the group."
          },
          "403": {
            "description": "The authenticated user can't leave the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/groups/+group_id"
      },
      "put": {
        "summary": "Add the user to a group",
        "description": "This method adds the authenticated user to the specified group.",
        "operationId": "join_group_alt1",
        "tags": [
          "Groups\\Subscriptions"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user joined the group."
          },
          "403": {
            "description": "The authenticated user can't join the group. Possible reasons are that the group isn't public or that its privacy setting is `members`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/groups/+group_id"
      },
      "get": {
        "summary": "Check if a user has joined a group",
        "description": "This method determines whether the authenticated user belongs to the specified group.",
        "operationId": "check_if_user_joined_group_alt1",
        "tags": [
          "Groups\\Users"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user belongs to the group."
          },
          "404": {
            "description": "* No such group exists.\n* The authenticated user isn't a member of the group.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/groups/+group_id"
      }
    },
    "/me/likes": {
      "get": {
        "summary": "Get all the videos that the user has liked",
        "description": "This method returns every video that the authenticated user has liked.",
        "operationId": "get_likes_alt1",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/likes"
      }
    },
    "/me/likes/{video_id}": {
      "delete": {
        "summary": "Cause the user to unlike a video",
        "description": "This method causes the authenticated user to unlike the specified video.",
        "operationId": "unlike_video_alt1",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was unliked."
          },
          "403": {
            "description": "The authenticated user can't like videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/likes/!video_id"
      },
      "get": {
        "summary": "Check if the user has liked a video",
        "description": "This method checks if the authenticated user has liked the specified video.",
        "operationId": "check_if_user_liked_video_alt1",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user has liked the video."
          },
          "404": {
            "description": "The user hasn't liked the video.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/likes/!video_id"
      },
      "put": {
        "summary": "Cause the user to like a video",
        "description": "This method causes the authenticated user to like the specified video. The user can't like their own video.",
        "operationId": "like_video_alt1",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was liked."
          },
          "403": {
            "description": "The authenticated user can't like videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "The authenticated user owns the video and can't like it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/likes/!video_id"
      }
    },
    "/me/live_events": {
      "delete": {
        "summary": "Delete a list of events",
        "description": "This method deletes multiple events belonging to the authenticated user.",
        "operationId": "delete_live_events_alt2",
        "tags": [
          "Live\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "description": "The user’s password.",
                    "example": "hunter1",
                    "type": "string"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get all the events that belong to the user",
        "description": "The method returns every event belonging to the authenticated user.",
        "operationId": "get_live_events_alt2",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `not_in_folder` - Show only events that aren't in a folder.\n * `not_in_showcase` - Show only events that aren't in a showcase.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "not_in_folder",
                "not_in_showcase"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          },
          {
            "description": "The type of event to return.\n\nOption descriptions:\n * `all` - Return all events.\n * `one_time` - Return one-time events only.\n * `recurring` - Return recurring events only.\n",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "recurring",
              "enum": [
                "all",
                "one_time",
                "recurring"
              ]
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.event+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recurring_event_type": {
                    "description": "The type of recurring event to return. If no value is specified, the value `default` is used.\n\nOption descriptions:\n * `all` - Return all recurring events.\n * `default` - Return only default recurring events.\n * `venue` - Return only recurring events that are venues.\n",
                    "enum": [
                      "all",
                      "default",
                      "venue"
                    ],
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The events were returned.",
            "content": {
              "application/vnd.vimeo.live.event+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event",
        "description": "This method creates a new event for the authenticated user.",
        "operationId": "create_live_event_alt2",
        "tags": [
          "Live\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allow_share_link": {
                    "description": "Whether the share link is usable.",
                    "type": "boolean"
                  },
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords that improve the quality of the automated closed captions.",
                    "example": "commonly-used words,phrases,technical terms",
                    "type": "string"
                  },
                  "auto_cc_lang": {
                    "description": "The language in which the automated closed captions appear.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string"
                  },
                  "automatically_title_stream": {
                    "description": "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "chat_enabled": {
                    "description": "Whether to display the live chat client on the Vimeo event page.",
                    "example": true,
                    "type": "boolean"
                  },
                  "content_rating": {
                    "description": "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "disable_auto_archiving": {
                    "description": "Whether the feature for disabling auto-archiving is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "dvr": {
                    "description": "Whether the DVR feature is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "embed": {
                    "description": "The embed settings of the event and the videos generated by streaming to this event.",
                    "properties": {
                      "autoplay": {
                        "description": "Whether playback starts automatically on load.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The hexadecimal color code for the main color of the embed player.",
                        "example": "#00adef",
                        "type": "string"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the custom logo on the embed player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether to show the custom logo persistently (`true`) or hide it with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embed player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loop": {
                        "description": "Whether the playlist should start from the beginning again after reaching the end of the last video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "playlist": {
                        "description": "Whether to show the playlist controls on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Whether to show the event schedule on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "show_latest_archived_clip": {
                        "description": "Whether to show the latest archived video in the embed player when off-air.",
                        "example": true,
                        "type": "boolean"
                      },
                      "use_color": {
                        "description": "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "event_type": {
                    "description": "The type of event.\n\nOption descriptions:\n * `default` - The event type is a regular recurring event.\n * `venue` - The event type is a venue.\n",
                    "enum": [
                      "default",
                      "venue"
                    ],
                    "example": "default",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "folder_uri": {
                    "description": "The URI of the event's folder.",
                    "example": "/users/67890/projects/12345",
                    "type": "string"
                  },
                  "interaction_tools_settings": {
                    "description": "The settings for the interaction tools.",
                    "properties": {
                      "is_anonymous_questions_disabled": {
                        "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      },
                      "is_qna_moderated": {
                        "description": "Whether the Q&A is moderated for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      }
                    },
                    "type": "object",
                    "x-mill-visibility-private": true
                  },
                  "low_latency": {
                    "description": "Whether the event has low-latency streaming enabled.",
                    "type": "boolean"
                  },
                  "playlist_sort": {
                    "description": "The order in which the videos of the event appear within the event's playlist.\n\nOption descriptions:\n * `added_first` - The most recently added videos appear first.\n * `added_last` - The most recently added videos appear last.\n * `alphabetical` - The videos appear in alphabetical order.\n * `arranged` - The videos appear in the order in which the user has arranged them.\n * `comments` - The videos appear in order of number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear in order of number of likes.\n * `newest` - The newest videos appear first.\n * `oldest` - The oldest videos appear first.\n * `plays` - The videos appear in order of number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "arranged",
                      "comments",
                      "duration",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "example": "added_first",
                    "type": "string"
                  },
                  "rtmp_preview": {
                    "description": "Whether the event has RTMP preview enabled.",
                    "type": "boolean"
                  },
                  "schedule": {
                    "description": "Information about the time or times that the event is expected to be live.",
                    "properties": {
                      "daily_time": {
                        "description": "The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.",
                        "example": "14:00:00Z",
                        "type": "string"
                      },
                      "type": {
                        "description": "How often the event is expected to be live.\n\nOption descriptions:\n * `single` - The event is live one time only.\n * `weekly` - The event is live on a weekly basis.\n",
                        "enum": [
                          "single",
                          "weekly"
                        ],
                        "example": "weekly",
                        "type": "string"
                      },
                      "weekdays": {
                        "description": "A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "scheduled_playback": {
                    "description": "Whether the scheduled playback feature is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "stream_description": {
                    "description": "The description of the next video to be streamed to the event.",
                    "example": "In this episode, we interview a surprise guest",
                    "type": "string"
                  },
                  "stream_embed": {
                    "properties": {
                      "embed": {
                        "description": "The embed permission level for the event.\n\nOption descriptions:\n * `private` - Only the user can embed the event.\n * `public` - Anyone can embed the event.\n * `whitelist` - Only specified users can embed the event.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "public",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_password": {
                    "description": "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "stream_privacy": {
                    "description": "The privacy settings of the event.",
                    "properties": {
                      "view": {
                        "description": "The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the event.\n * `unlisted` - Only those with the private link can access the event.\n",
                        "enum": [
                          "anybody",
                          "embed_only",
                          "nobody",
                          "password",
                          "unlisted"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_title": {
                    "description": "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.",
                    "example": "Special Feature",
                    "type": "string"
                  },
                  "streaming_auto_stop": {
                    "description": "Whether the feature for automatically stopping the live stream is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "time_zone": {
                    "description": "The time zone used in resolving the timestamps that are included in automatically generated video titles.",
                    "example": "America/New_York",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.",
                    "example": "Live Content",
                    "type": "string"
                  },
                  "unlimited_duration": {
                    "description": "Whether the feature for 24/7 streaming is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "venue_uuid": {
                    "description": "The venue UUID to associate with the event.",
                    "example": "abc345y8-b266-4e30-bfce-db1d0eush49f",
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was created.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "* Error code 3200: The authenticated user can't create an event.\n* Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3422: The authenticated user can't create an event.\n* Error code 3439: The authenticated user can't edit the content rating of an event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}": {
      "patch": {
        "summary": "Update an event",
        "description": "This method updates an event belonging to the authenticated user.",
        "operationId": "update_live_event_alt2",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": false,
                    "type": "boolean"
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.",
                    "type": "string"
                  },
                  "auto_cc_language": {
                    "description": "The language of the automated closed captions.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string"
                  },
                  "automatically_title_stream": {
                    "description": "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "chat_enabled": {
                    "description": "Whether to display the live chat client on the Vimeo event page.",
                    "example": true,
                    "type": "boolean"
                  },
                  "content_rating": {
                    "description": "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "disable_auto_archiving": {
                    "description": "Whether the feature for disabling auto-archiving is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "dvr": {
                    "description": "Whether the DVR feature is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "embed": {
                    "description": "The embed settings of the event and the videos generated by streaming to this event.",
                    "properties": {
                      "autoplay": {
                        "description": "Whether playback starts automatically on load.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The hexadecimal color code for the main color of the embed player.",
                        "example": "#00adef",
                        "type": "string"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the custom logo on the embed player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether to show the custom logo persistently (`true`) or hide it with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embed player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loop": {
                        "description": "Whether the playlist should start from the beginning again after reaching the end of the last video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "playlist": {
                        "description": "Whether to show the playlist controls on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Whether to show the event schedule on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "use_color": {
                        "description": "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "interaction_tools_settings": {
                    "description": "The settings for the interaction tools.",
                    "properties": {
                      "is_anonymous_questions_disabled": {
                        "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      },
                      "is_qna_moderated": {
                        "description": "Whether the Q&A is moderated for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      }
                    },
                    "type": "object",
                    "x-mill-visibility-private": true
                  },
                  "playlist_sort": {
                    "description": "The order in which the videos of the event appear within the event's playlist.\n\nOption descriptions:\n * `added_first` - The most recently added videos appear first.\n * `added_last` - The most recently added videos appear last.\n * `alphabetical` - The videos appear in alphabetical order.\n * `arranged` - The videos appear in the order in which the user has arranged them.\n * `comments` - The videos appear in order of number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear in order of number of likes.\n * `newest` - The newest videos appear first.\n * `oldest` - The oldest videos appear first.\n * `plays` - The videos appear in order of number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "arranged",
                      "comments",
                      "duration",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "example": "added_first",
                    "type": "string"
                  },
                  "schedule": {
                    "description": "Information about the time or times that the event is expected to be live.",
                    "properties": {
                      "daily_time": {
                        "description": "The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.",
                        "example": "14:00:00Z",
                        "type": "string"
                      },
                      "type": {
                        "description": "How often the event is expected to be live.\n\nOption descriptions:\n * `single` - The event is live one time only.\n * `weekly` - The event is live on a weekly basis.\n",
                        "enum": [
                          "single",
                          "weekly"
                        ],
                        "example": "weekly",
                        "type": "string"
                      },
                      "weekdays": {
                        "description": "A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "scheduled_playback": {
                    "description": "Whether the scheduled playback feature is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "stream_description": {
                    "description": "The description of the next video to be streamed to the event.",
                    "example": "In this episode, we interview a surprise guest",
                    "type": "string"
                  },
                  "stream_embed": {
                    "properties": {
                      "embed": {
                        "description": "The embed permission level for the event.\n\nOption descriptions:\n * `private` - Only the user can embed the event.\n * `public` - Anyone can embed the event.\n * `whitelist` - Only specified users can embed the event.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "public",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_mode": {
                    "description": "The stream mode of the event.\n\nOption descriptions:\n * `live` - The stream is live playback.\n * `record` - The stream is in record mode.\n * `simulive` - The stream is scheduled media playback.\n",
                    "enum": [
                      "live",
                      "record",
                      "simulive"
                    ],
                    "example": "live",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "stream_password": {
                    "description": "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "stream_privacy": {
                    "description": "The privacy settings of the event.",
                    "properties": {
                      "view": {
                        "description": "The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the event.\n * `unlisted` - Only those with the private link can access the event.\n",
                        "enum": [
                          "anybody",
                          "embed_only",
                          "nobody",
                          "password",
                          "unlisted"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_title": {
                    "description": "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.",
                    "example": "Special Feature",
                    "type": "string"
                  },
                  "streaming_auto_stop": {
                    "description": "Whether the featuring for automatically stopping the live stream is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "time_zone": {
                    "description": "The time zone used in resolving the timestamps that are included in automatically generated video titles.",
                    "example": "America/New_York",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.",
                    "example": "Live Content",
                    "type": "string"
                  },
                  "unlimited_duration": {
                    "description": "Whether the feature for 24/7 streaming is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was updated.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to update the event.\n* Error code 3422: The authenticated user can't update the event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/!live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "delete": {
        "summary": "Delete a specific event",
        "description": "This method deletes a single event belonging to the authenticated user.",
        "operationId": "delete_live_event_alt2",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The event was deleted."
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to delete the event.\n* Error code 3422: The authenticated user can't delete the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get a specific event",
        "description": "This method returns a single event belonging to the authenticated user.",
        "operationId": "get_live_event_alt2",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The password of the event when the privacy is set to `password`.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The event was returned.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/activate": {
      "post": {
        "summary": "Activate an event",
        "description": "This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.",
        "operationId": "activate_live_event_alt2",
        "tags": [
          "Live\\Event activation"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud_composing_streaming": {
                    "description": "Whether the stream activates from the cloud composer.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "streaming_start_requested": {
                    "description": "Whether the stream activates from the cloud composer.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was activated.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2428: The event has already been activated.\n* Error code 2551: The session can't be activated when the scheduled media playback feature is enabled.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to stream to the event.\n* Error code 3422: The authenticated user can't activate the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4017: An unexpected error occurred.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "Error code 7701: The service is unavailable.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/activate",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/auto_cc": {
      "patch": {
        "summary": "Edit the automated closed captions preference of an event",
        "description": "This method edits the automated closed captions preference for the specified event.",
        "operationId": "edit_live_event_auto_cc_alt2",
        "tags": [
          "Live\\Event automated closed captions"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/application/vnd.vimeo.live.auto_cc+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords that improve the quality of the automated closed captions.",
                    "example": "commonly-used words,phrases,technical terms",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "auto_cc_lang": {
                    "description": "The language in which the automated closed captions appear.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                },
                "required": [
                  "auto_cc_enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The automated closed captions preference was edited.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-automated-closed-captions"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The payload is invalid.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The user doesn't have permission to edit the closed captions preference for the specified event.\n* Error code 3422: The authenticated user can't edit the closed captions preference for the specified event.\n* Error code 3439: The authenticated user has reached the automated closed captions usage limit, or they can't use the automated closed captions feature at all.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/auto_cc",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ],
        "x-mill-visibility-private": true
      }
    },
    "/me/live_events/{live_event_id}/destinations": {
      "get": {
        "summary": "Get all the destinations of a recurring event",
        "description": "This method returns every destination of the specified event. The authenticated user must be the owner of the event.",
        "operationId": "get_live_event_destinations",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event destinations were returned.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event-destination"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: Parameters are missing, or the body data is invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/users/{user_id}/live_events/{live_event_id}/destinations"
        ],
        "x-mill-path-template": "/me/live_events/#live_event_id/destinations",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event destination",
        "description": "This method creates a destination for the specified event. The authenticated user must be the owner of the event.",
        "operationId": "create_live_event_destination",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.simulcast.destination+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "description": "The title to display for the simulcast.",
                    "example": "My channel",
                    "type": "string"
                  },
                  "is_enabled": {
                    "description": "Whether the destination is enabled for simulcasting.",
                    "example": true,
                    "type": "boolean"
                  },
                  "privacy": {
                    "description": "The privacy setting of the destination. Be sure to choose a value that corresponds to your service.\n\nOption descriptions:\n * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.\n * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.\n * `all_friends` - The privacy setting is `all_friends` for Facebook.\n * `everyone` - The privacy setting is `everyone` for Facebook.\n * `private` - The privacy setting is `private` for YouTube.\n * `public` - The privacy setting is `public` for YouTube.\n * `self` - The privacy setting is `self` for Facebook.\n * `unlisted` - The privacy setting is `unlisted` for YouTube.\n",
                    "enum": [
                      "CONNECTIONS",
                      "PUBLIC",
                      "all_friends",
                      "everyone",
                      "private",
                      "public",
                      "self",
                      "unlisted"
                    ],
                    "example": "public",
                    "type": "string"
                  },
                  "provider_destination_id": {
                    "description": "The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID.",
                    "example": "bda55c6b3ba4",
                    "type": "string"
                  },
                  "provider_video_id": {
                    "description": "The ID of the scheduled video.",
                    "example": "6817807391346708000",
                    "nullable": true,
                    "type": "string"
                  },
                  "scheduled_at": {
                    "description": "The time in Unix timestamp format when live streaming is scheduled to start.",
                    "example": 1625754461,
                    "type": "number"
                  },
                  "service_name": {
                    "description": "The service to simulcast to.\n\nOption descriptions:\n * `custom_rtmp` - Simulcast to a custom service.\n * `facebook` - Simulcast to Facebook Live.\n * `linkedin` - Simulcast to LinkedIn Live.\n * `youtube` - Simulcast to YouTube Live.\n",
                    "enum": [
                      "custom_rtmp",
                      "facebook",
                      "linkedin",
                      "youtube"
                    ],
                    "example": "youtube",
                    "type": "string"
                  },
                  "stream_key": {
                    "description": "The RTMP stream key.",
                    "example": "da056692-ba63-4749-a6eb-a476a22b3acd",
                    "type": "string"
                  },
                  "stream_url": {
                    "description": "The RTMP URL for receiving the video stream.",
                    "example": "rtmp://mycooldomain.com/live",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the simulcast destination.\n\nOption descriptions:\n * `channel` - The destination is a YouTube channel.\n * `custom` - The destination is custom.\n * `organization` - The destination is a LinkedIn organization.\n * `page` - The destination is a Facebook page.\n * `profile` - The destination is a Facebook or LinkedIn profile.\n",
                    "enum": [
                      "channel",
                      "custom",
                      "organization",
                      "page",
                      "profile"
                    ],
                    "example": "channel",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name",
                  "service_name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event destination was created.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-destination"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: Parameters are missing, or the body data is invalid.\n* Error code 13003: You can create only one LinkedIn destination per event.\n* Error code 13004: You can create only one YouTube destination per event.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destinations.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/users/{user_id}/live_events/{live_event_id}/destinations"
        ],
        "x-mill-path-template": "/me/live_events/#live_event_id/destinations",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/end": {
      "post": {
        "summary": "End an event",
        "description": "This method ends the specified event. The authenticated user must be the owner of the event.",
        "operationId": "end_live_event_alt2",
        "tags": [
          "Live\\Event end"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the streamable video.",
            "in": "query",
            "name": "clip_id",
            "required": false,
            "schema": {
              "type": "number",
              "example": 12345
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The event was ended.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The user can't end the session.\n* Error code 3422: The authenticated user can't end the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4021: There is no video for the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 10004: The event isn't being streamed.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/end",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/low_latency": {
      "patch": {
        "summary": "Toggle the low-latency option of an event",
        "description": "This method toggles the low-latency option of the specified event.",
        "operationId": "toggle_rle_low_latency_alt2",
        "tags": [
          "Live\\Event low latency"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/application/vnd.vimeo.live.low_latency+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "low_latency": {
                    "description": "Whether the event is low latency.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The low-latency status of the event was returned.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event-low-latency"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't toggle the low-latency option of the event.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/low_latency",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/m3u8_playback": {
      "get": {
        "summary": "Get an M3U8 playback URL for an event",
        "description": "This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).",
        "operationId": "get_live_event_m3u8_playback_alt1",
        "tags": [
          "Live\\Event M3U8 playback"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The requested maximum frames per second.",
            "in": "query",
            "name": "max_fps_fhd",
            "required": false,
            "schema": {
              "type": "number",
              "example": 30
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The time to live of the playlist link in seconds. This value must be between `10` and `60`.",
            "in": "query",
            "name": "ttl",
            "required": false,
            "schema": {
              "type": "number",
              "example": 30
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The M3U8 playback URL was returned."
          },
          "400": {
            "description": "Error code 10008: The event hasn't started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the M3U8 playback URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "* Error code 4020: No streamable video was found.\n* Error code 4021: No video was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "Error code 7900: The streamable video in progress will be available soon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/m3u8_playback",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/pictures": {
      "get": {
        "summary": "Get all the thumbnails of an event",
        "description": "This method returns every thumbnail image of the specified event.",
        "operationId": "get_live_event_thumbnails_alt2",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/pictures",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event thumbnail",
        "description": "This method creates a thumbnail image for the specified event.",
        "operationId": "create_live_event_thumbnail_alt2",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the thumbnail is the event's active thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was created.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't delete the thumbnails for the event.\n* Error code 3422: The authenticated user can't create a thumbnail for the event.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/pictures",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/pictures/{thumbnail_id}": {
      "delete": {
        "summary": "Delete an event thumbnail",
        "description": "This method deletes a thumbnail image for the specified event.",
        "operationId": "delete_live_event_thumbnail_alt2",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The thumbnail was deleted."
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't delete the thumbnail for the event.\n* Error code 3422: The authenticated user can't delete the thumbnail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get a specific event thumbnail",
        "description": "This method returns a single thumbnail image of the specified event.",
        "operationId": "get_live_event_thumbnail_alt2",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnail was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "patch": {
        "summary": "Edit an event thumbnail",
        "description": "This method edits a thumbnail image for the specified event.",
        "operationId": "edit_live_event_thumbnail_alt2",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the thumbnail is the event's active thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't update the thumbnail for the event.\n* Error code 3422: The authenticated user can't edit the thumbnail of the event.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/privacy/domains": {
      "get": {
        "summary": "Get all the domains on which an event can be embedded",
        "description": "This method returns every permitted domain for an event. The embed privacy setting must be `whitelist`.",
        "operationId": "get_live_event_whitelist_alt2",
        "tags": [
          "Live\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The permitted domains for the event were returned.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domain"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2518: The embed permission isn't `whitelist`.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't get domains for the event.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/privacy/domains",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "put": {
        "summary": "Embed an event on one or more domains",
        "description": "This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.",
        "operationId": "set_live_event_whitelist_alt2",
        "tags": [
          "Live\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allowed_domains": {
                    "description": "An array of the domains on which the embedded event can appear.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The event was embedded on the specified domains."
          },
          "400": {
            "description": "Error code 2518: The embed permission isn't `whitelist`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't edit domains for the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists under the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/privacy/domains",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/videos": {
      "delete": {
        "summary": "Remove a list of videos from an event",
        "description": "This method removes multiple videos from the specified event.",
        "operationId": "remove_videos_from_live_event_alt2",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "An array of video objects.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "video": {
                          "properties": {
                            "uri": {
                              "description": "The URI of a video to remove.",
                              "example": "/videos/258684937",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were removed."
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't remove one or more of the listed videos.\n* Error code 3422: The authenticated user can't remove videos from the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get all the videos in an event",
        "description": "This method returns every video in the specified event.",
        "operationId": "get_live_event_videos_alt2",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The page that contains the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable events.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added videos.\n * `alphabetical` - Sort the results alphabetically.\n * `arranged` - Sort the results in the order that the user has arranged the videos.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "arranged",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Add a list of videos to an event",
        "description": "This method adds multiple videos to the specified event.",
        "operationId": "add_videos_to_live_event_alt2",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "An array of video objects.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "video": {
                          "properties": {
                            "uri": {
                              "description": "The URI of a video to add.",
                              "example": "/videos/258684937",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were added."
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't add videos to the event.\n* Error code 3422: The authenticated user can't add one or more of the listed videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/live_events/{live_event_id}/videos/{video_id}": {
      "get": {
        "summary": "Get a specific video in an event",
        "description": "This method returns a single video in the specified event.",
        "operationId": "get_live_event_video_alt2",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, video, or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/live_events/#live_event_id/videos/!video_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/me/ondemand/pages": {
      "get": {
        "summary": "Get all the On Demand pages of the user",
        "description": "This method returns every On Demand page belonging to the authenticated user.",
        "operationId": "get_user_vods_alt1",
        "tags": [
          "On Demand\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The type of the page to return.\n\nOption descriptions:\n * `film` - The page type is a film.\n * `series` - The page type is a series.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "film",
                "series"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added page.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `modified_time` - Sort the results by time of page modification.\n * `name` - Sort the results by page name.\n * `publish.time` - Sort the results by time of page publishing.\n * `rating` - Sort the results by content rating.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "date",
                "modified_time",
                "name",
                "publish.time",
                "rating"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The On Demand pages were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-page"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such user exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/ondemand/pages"
      },
      "post": {
        "summary": "Create an On Demand page",
        "description": "This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.",
        "operationId": "create_vod_alt1",
        "tags": [
          "On Demand\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accepted_currencies": {
                    "description": "An array of accepted currencies.\n\nOption descriptions:\n * `AUD` - The currency is in Australian dollars.\n * `CAD` - The currency is in Canadian dollars.\n * `CHF` - The currency is in Swiss francs.\n * `DKK` - The currency is in Danish krone.\n * `EUR` - The currency is in euros.\n * `GBP` - The currency is in British pounds.\n * `JPY` - The currency is in Japanese yen.\n * `KRW` - The currency is in South Korean won.\n * `NOK` - The currency is in Norwegian krone.\n * `PLN` - The currency is in Polish zloty.\n * `SEK` - The currency is in Swedish krona.\n * `USD` - The currency is in United States dollars.\n",
                    "enum": [
                      "AUD",
                      "CAD",
                      "CHF",
                      "DKK",
                      "EUR",
                      "GBP",
                      "JPY",
                      "KRW",
                      "NOK",
                      "PLN",
                      "SEK",
                      "USD"
                    ],
                    "type": "string"
                  },
                  "buy": {
                    "properties": {
                      "active": {
                        "description": "Whether the video can be purchased. This parameter is required when **rent.active** is `false`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "download": {
                        "description": "Whether people who buy the video can download it. To use this parameter, **type** must be `film`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "price": {
                        "properties": {
                          "AUD": {
                            "description": "The purchase price of the video in Australian dollars.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "CAD": {
                            "description": "The purchase price of the video in Canadian dollars.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "CHF": {
                            "description": "The purchase price of the video in Swiss francs.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "DKK": {
                            "description": "The purchase price of the video in Danish krone.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "EUR": {
                            "description": "The purchase price of the video in euros.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "GBP": {
                            "description": "The purchase price of the video in British pounds.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "JPY": {
                            "description": "The purchase price of the video in Japanese yen.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "KRW": {
                            "description": "The purchase price of the video in South Korean won.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "NOK": {
                            "description": "The purchase price of the video in Norwegian krone.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "PLN": {
                            "description": "The purchase price of the video in Polish zloty.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "SEK": {
                            "description": "The purchase price of the video in Swedish krona.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "USD": {
                            "description": "When **type** is `film`, the purchase price of the video in United States dollars. When **type** is `series`, the purchase price of the entire collection in United States dollars.",
                            "example": 2.99,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "content_rating": {
                    "description": "The content rating of the video, given either as a comma-separated list or as a JSON array, depending on the request format.\n\nOption descriptions:\n * `drugs` - The video contains drug or alcohol use.\n * `language` - The video contains profanity or sexually suggestive content.\n * `nudity` - The video contains nudity.\n * `safe` - The video is suitable for all audiences.\n * `unrated` - The video hasn't been rated.\n * `violence` - The video contains violent or graphic content.\n",
                    "enum": [
                      "drugs",
                      "language",
                      "nudity",
                      "safe",
                      "unrated",
                      "violence"
                    ],
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the On Demand page.",
                    "example": "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\".",
                    "type": "string"
                  },
                  "domain_link": {
                    "description": "The custom domain of the On Demand page.",
                    "example": "https://example.com",
                    "type": "string"
                  },
                  "episodes": {
                    "properties": {
                      "buy": {
                        "properties": {
                          "active": {
                            "description": "Whether episodes can be purchased.",
                            "example": true,
                            "type": "boolean"
                          },
                          "download": {
                            "description": "Whether people who buy episodes can download them. To use this parameter, **type** must be `series`.",
                            "example": true,
                            "type": "boolean"
                          },
                          "price": {
                            "properties": {
                              "USD": {
                                "description": "The purchase price per episode in United States dollars. This parameter is required when **episodes.buy.active** is `true`.",
                                "example": 1.99,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "rent": {
                        "properties": {
                          "active": {
                            "description": "Whether episodes can be rented.",
                            "example": true,
                            "type": "boolean"
                          },
                          "period": {
                            "description": "The rental period of the episode.\n\nOption descriptions:\n * `1 week` - The episode can be rented for a maximum of 1 week.\n * `1 year` - The episode can be rented for a maximum of 1 year.\n * `24 hour` - The episode can be rented for a maximum of 24 hours.\n * `3 month` - The episode can be rented for a maximum of 3 months.\n * `30 day` - The episode can be rented for a maximum of 30 days.\n * `48 hour` - The episode can be rented for a maximum of 48 hours.\n * `6 month` - The episode can be rented for a maximum of 6 months.\n * `72 hour` - The episode can be rented for a maximum of 72 hours.\n",
                            "enum": [
                              "1 week",
                              "1 year",
                              "24 hour",
                              "3 month",
                              "30 day",
                              "48 hour",
                              "6 month",
                              "72 hour"
                            ],
                            "type": "string"
                          },
                          "price": {
                            "properties": {
                              "USD": {
                                "description": "The rental price per episode in United States dollars. This parameter is applicable only when **type** is `series`, and it's required when **episode.rent.active** is `true`.",
                                "example": 0.99,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "link": {
                    "description": "The custom string to use in the Vimeo URL of the On Demand page.",
                    "example": "darbyforever",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the On Demand page.",
                    "example": "Darby Forever",
                    "type": "string"
                  },
                  "rent": {
                    "properties": {
                      "active": {
                        "description": "Whether the video can be rented. This parameter is required when **episodes.rent.active** is `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "period": {
                        "description": "The rental period of the video.\n\nOption descriptions:\n * `1 week` - The video can be rented for a maximum of 1 week.\n * `1 year` - The video can be rented for a maximum of 1 year.\n * `24 hour` - The video can be rented for a maximum of 24 hours.\n * `3 month` - The video can be rented for a maximum of 3 months.\n * `30 day` - The video can be rented for a maximum of 30 days.\n * `48 hour` - The video can be rented for a maximum of 48 hours.\n * `6 month` - The video can be rented for a maximum of 6 months.\n * `72 hour` - The video can be rented for a maximum of 72 hours.\n",
                        "enum": [
                          "1 week",
                          "1 year",
                          "24 hour",
                          "3 month",
                          "30 day",
                          "48 hour",
                          "6 month",
                          "72 hour"
                        ],
                        "type": "string"
                      },
                      "price": {
                        "properties": {
                          "AUD": {
                            "description": "The rental price of the video in Australian dollars.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "CAD": {
                            "description": "The rental price of the video in Canadian dollars.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "CHF": {
                            "description": "The rental price of the video in Swiss francs.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "DKK": {
                            "description": "The rental price of the video in Danish krone.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "EUR": {
                            "description": "The rental price of the video in euros.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "GBP": {
                            "description": "The rental price of the video in British pounds.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "JPY": {
                            "description": "The rental price of the video in Japanese yen.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "KRW": {
                            "description": "The rental price of the video in South Korean won.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "NOK": {
                            "description": "The rental price of the video in Norwegian krone.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "PLN": {
                            "description": "The rental price of the video in Polish zloty.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "SEK": {
                            "description": "The rental price of the video in Swedish krona.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "USD": {
                            "description": "When **type** is `film`, the rental price of the video in United States dollars. When **type** is `series`, the rental price of the entire collection in United States dollars.",
                            "example": 0.99,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "subscription": {
                    "properties": {
                      "monthly": {
                        "properties": {
                          "active": {
                            "description": "Whether a monthly subscription is active. This parameter is required when **rent.active** and **buy.active** are `false`.",
                            "example": true,
                            "type": "boolean"
                          },
                          "price": {
                            "properties": {
                              "USD": {
                                "description": "The monthly subscription price in United States dollars. This parameter is required when **rent.active** and **buy.active** are `false`.",
                                "example": 9.99,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of the On Demand page.\n\nOption descriptions:\n * `film` - The On Demand page is a film.\n * `series` - The On Demand page is a series.\n",
                    "enum": [
                      "film",
                      "series"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "content_rating",
                  "description",
                  "name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The On Demand page was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-page"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/ondemand/pages"
      }
    },
    "/me/ondemand/purchases": {
      "get": {
        "summary": "Get all of the user's On Demand purchases and rentals",
        "description": "This method returns every purchase and rental that the authenticated user has made across all On Demand pages.",
        "operationId": "get_vod_purchases_alt1",
        "tags": [
          "On Demand\\Purchases and rentals"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The type of the On Demand video to filter on.\n\nOption descriptions:\n * `all` - Filter by all video types.\n * `expiring_soon` - Filter by videos that expire soon.\n * `film` - Filter by film.\n * `important` - Filter by pages that are about to expire.\n * `purchased` - Filter by purchased videos.\n * `rented` - Filter by rented videos.\n * `series` - Filter by series.\n * `subscription` - Filter by video subscription.\n * `unwatched` - Filter by unwatched videos.\n * `watched` - Filter by watched videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "expiring_soon",
                "film",
                "important",
                "purchased",
                "rented",
                "series",
                "subscription",
                "unwatched",
                "watched"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added video.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by video name.\n * `purchase_time` - Sort the results by time of video purchase.\n * `rating` - Sort the results by content rating.\n * `release_date` - Sort the results by video release date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "date",
                "name",
                "purchase_time",
                "rating",
                "release_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The purchases and rentals were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-page"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't get purchases and rentals for another user's account.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "purchased"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/ondemand/purchases"
      }
    },
    "/me/ondemand/purchases/{ondemand_id}": {
      "get": {
        "summary": "Check if a user has made a purchase or rental from an On Demand page",
        "description": "This method determines whether the authenticated user has made a purchase or rental from the specified On Demand page.",
        "operationId": "check_if_vod_was_purchased_alt1",
        "tags": [
          "On Demand\\Purchases and rentals"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The authenticated user has made this purchase.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-page"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't make purchases for another user's account.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such user or On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "purchased"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/ondemand/purchases/*ondemand_id"
      }
    },
    "/me/payment_methods": {
      "get": {
        "summary": "Get a list of all payments service payment methods",
        "description": "This method returns a list of all Vimeo payments service payment methods that are available to the authenticated user.",
        "operationId": "list_payment_methods",
        "tags": [
          "Payments\\Essentials"
        ],
        "parameters": [
          {
            "description": "The name of the card member.",
            "in": "query",
            "name": "cardmember_name",
            "required": false,
            "schema": {
              "type": "string",
              "example": "John Doe"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "Whether to return disabled payment methods.",
            "in": "query",
            "name": "show_disabled",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The type of payment method.\n\nOption descriptions:\n * `applepay` - The payment method is Apple Pay.\n * `bank_account` - The payment method is a bank account.\n * `card` - The payment method is a credit or debit card.\n * `googlepay` - The payment method is Google Pay.\n * `paypal` - The payment method is a PayPal account.\n",
                    "enum": [
                      "applepay",
                      "bank_account",
                      "card",
                      "googlepay",
                      "paypal"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of payments service payment methods was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment-method"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 5000: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The authenticated user can't make this request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/me/payment_methods"
      }
    },
    "/me/payment_methods/{payment_method_id}": {
      "delete": {
        "summary": "Delete a payments service payment method",
        "description": "This method deletes the specified Vimeo payments service payment method.",
        "operationId": "delete_payment_method",
        "tags": [
          "Payments\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the payment method.",
            "in": "path",
            "name": "payment_method_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "abc12345"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The payments service payment method was deleted."
          },
          "400": {
            "description": "Error code 2204: No such payment method exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/me/payment_methods/+payment_method_id"
      },
      "get": {
        "summary": "Get information about a payments service payment method",
        "description": "This method returns information about the specified Vimeo payments service payment method.",
        "operationId": "get_payment_method_info",
        "tags": [
          "Payments\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the payment method.",
            "in": "path",
            "name": "payment_method_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "abc12345"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The payments service payment method information was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-method"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such payment method exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/me/payment_methods/+payment_method_id"
      }
    },
    "/me/pictures": {
      "get": {
        "summary": "Get all the pictures that belong to the user",
        "description": "This method returns every portrait image belonging to the authenticated user.",
        "operationId": "get_pictures_alt1",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portrait images were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/pictures"
      },
      "post": {
        "summary": "Add a picture to the user's account",
        "description": "This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive\nfrom the **link** field in the response. For step-by-step instructions, see\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).",
        "operationId": "create_picture_alt1",
        "tags": [
          "Users\\Pictures"
        ],
        "responses": {
          "200": {
            "description": "The portrait image was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/pictures"
      }
    },
    "/me/pictures/{portraitset_id}": {
      "delete": {
        "summary": "Delete a picture from the user's account",
        "description": "This method removes the specified portrait image from the authenticated user's Vimeo account.",
        "operationId": "delete_picture_alt1",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the picture.",
            "in": "path",
            "name": "portraitset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The portrait image was removed."
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/pictures/#portraitset_id"
      },
      "get": {
        "summary": "Get a specific picture that belongs to the user",
        "description": "This method returns a single portrait image belonging to the authenticated user.",
        "operationId": "get_picture_alt1",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the picture.",
            "in": "path",
            "name": "portraitset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portrait image was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/pictures/#portraitset_id"
      },
      "patch": {
        "summary": "Edit a picture in the user's account",
        "description": "This method edits the specified portrait image belonging to the authenticated user.",
        "operationId": "edit_picture_alt1",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the picture.",
            "in": "path",
            "name": "portraitset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the picture is the authenticated user's active portrait.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The portrait image was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/pictures/#portraitset_id"
      }
    },
    "/me/portfolios": {
      "get": {
        "summary": "Get all the portfolios that belong to the user",
        "description": "This method returns every portfolio belonging to the authenticated user.",
        "operationId": "get_portfolios_alt1",
        "tags": [
          "Portfolios\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios were returned.",
            "content": {
              "application/vnd.vimeo.portfolio+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/portfolio"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/portfolios"
      }
    },
    "/me/portfolios/{portfolio_id}": {
      "get": {
        "summary": "Get a specific portfolio",
        "description": "This method returns a single portfolio belonging to the authenticated user.",
        "operationId": "get_portfolio_alt1",
        "tags": [
          "Portfolios\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio was returned.",
            "content": {
              "application/vnd.vimeo.portfolio+json": {
                "schema": {
                  "$ref": "#/components/schemas/portfolio"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/portfolios/*portfolio_id"
      }
    },
    "/me/portfolios/{portfolio_id}/videos": {
      "get": {
        "summary": "Get all the videos in a portfolio",
        "description": "This method returns every video from the specified portfolio belonging to the authenticated user.",
        "operationId": "get_portfolio_videos_alt1",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The page that contains the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting method.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their user-specified order.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "default",
                "likes",
                "manual",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/portfolios/*portfolio_id/videos"
      }
    },
    "/me/portfolios/{portfolio_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a portfolio",
        "description": "This method removes a video from the specified portfolio belonging to the authenticated user.",
        "operationId": "delete_video_from_portfolio_alt1",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "404": {
            "description": "No such portfolio or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/portfolios/*portfolio_id/videos/!video_id"
      },
      "get": {
        "summary": "Get a specific video in a portfolio",
        "description": "This method returns a single video from the specified portfolio belonging to the authenticated user.",
        "operationId": "get_portfolio_video_alt1",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/portfolios/*portfolio_id/videos/!video_id"
      },
      "put": {
        "summary": "Add a video to a portfolio",
        "description": "This method adds a video to the specified portfolio belonging to the authenticated user.",
        "operationId": "add_video_to_portfolio_alt1",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "404": {
            "description": "No such portfolio or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/portfolios/*portfolio_id/videos/!video_id"
      }
    },
    "/me/presets": {
      "get": {
        "summary": "Get all the embed presets that a user has created",
        "description": "This method returns every embed preset that belongs to the authenticated user.",
        "operationId": "get_embed_presets_alt1",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The embed presets were returned.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/preset"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/presets"
      },
      "post": {
        "summary": "Create an embed preset",
        "description": "This method creates an embed preset.",
        "operationId": "create_embed_presets_alt1",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.preset+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "embed": {
                    "properties": {
                      "airplay": {
                        "description": "Whether AirPlay is enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "audio_tracks": {
                        "description": "Whether multiple audio tracks can appear in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "buttons": {
                        "properties": {
                          "embed": {
                            "description": "Whether to show the button for embeds on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "fullscreen": {
                            "description": "Whether to show the button for fullscreen mode on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "hd": {
                            "description": "Whether to show the button for HD videos on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "like": {
                            "description": "Whether to show the button for likes on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "scaling": {
                            "description": "Whether to show the button for scaling on the embeddable player in fullscreen mode.",
                            "example": true,
                            "type": "boolean"
                          },
                          "share": {
                            "description": "Whether to show the button for shares on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "watchlater": {
                            "description": "Whether to show the button for watching later on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "chapters": {
                        "description": "Whether chapters are enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "chromecast": {
                        "description": "Whether the Chromecast button appears in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "closed_captions": {
                        "description": "Whether closed captions are enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The main color of the embeddable player.",
                        "example": "#1ab7ea",
                        "type": "string"
                      },
                      "colors": {
                        "properties": {
                          "color_four": {
                            "description": "The hexadecimal color code of the fourth player color, which controls the player background color.",
                            "example": "#aabbcc",
                            "type": "string"
                          },
                          "color_one": {
                            "description": "The hexadecimal color code of the first player color, which controls the color of the progress bar, buttons, and more.",
                            "example": "#112233",
                            "type": "string"
                          },
                          "color_three": {
                            "description": "The hexadecimal color code of the third player color, which controls the color of text and icons.",
                            "example": "#778899",
                            "type": "string"
                          },
                          "color_two": {
                            "description": "The hexadecimal color code of the second player color, which controls the player accent color.",
                            "example": "#445566",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the active custom logo on the embeddable player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "id": {
                                "description": "The ID of the custom logo that appears on the embeddable player.",
                                "example": 462119,
                                "nullable": true,
                                "type": "number"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "nullable": true,
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "play_button": {
                        "description": "An object representing the play button's settings.",
                        "properties": {
                          "position": {
                            "description": "The position of the play button within the embeddable player.\n\nOption descriptions:\n * `auto` - Use Vimeo's default positioning for the play button.\n * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.\n * `center` - The play button is positioned in the center of the player.\n",
                            "enum": [
                              "auto",
                              "bottom",
                              "center"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "playbar": {
                        "description": "Whether to show the playbar on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "quality_selector": {
                        "description": "Whether to show the quality selector in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "skipping_forward": {
                        "description": "Whether users can skip forward in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "title": {
                        "properties": {
                          "name": {
                            "description": "How to handle the video title in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the video title.\n * `show` - Show the video title.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "How to handle the owner information in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the owner info.\n * `show` - Show the owner info.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "portrait": {
                            "description": "How to handle the owner portrait in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the portrait.\n * `show` - Show the portrait.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "transcript": {
                        "description": "Whether the transcript controls appear in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "volume": {
                        "description": "Whether to show the volume selector on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "The name of the embed preset.",
                    "example": "New preset",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The embed preset was created.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/preset"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/presets"
      }
    },
    "/me/presets/{preset_id}": {
      "get": {
        "summary": "Get a specific embed preset",
        "description": "This method returns a single embed preset. The authenticated user must be the owner of the preset.",
        "operationId": "get_embed_preset_alt1",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The embed preset was returned.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/preset"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/presets/+preset_id"
      },
      "patch": {
        "summary": "Edit an embed preset",
        "description": "This method edits the specified embed preset. The authenticated user must be the owner of the preset.",
        "operationId": "edit_embed_preset_alt1",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.preset+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "outro": {
                    "description": "What to do with the outro.\n\nOption descriptions:\n * `nothing` - Disable the outro.\n",
                    "enum": [
                      "nothing"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The embed preset was edited.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/preset"
                }
              }
            }
          },
          "404": {
            "description": "* No such embed preset exists.\n* The authenticated user can't edit the embed preset.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "The outro type is invalid.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/presets/+preset_id"
      }
    },
    "/me/presets/{preset_id}/videos": {
      "get": {
        "summary": "Get all the videos that have a specific embed preset",
        "description": "This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of the videos.",
        "operationId": "get_embed_preset_videos_alt1",
        "tags": [
          "Embed Presets\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the embed preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/presets/+preset_id/videos"
      }
    },
    "/me/projects": {
      "get": {
        "summary": "Get all the folders that belong to the user",
        "description": "This method returns all the folders belonging to the authenticated user.",
        "operationId": "get_projects_alt1",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `modified_time` - Sort the results by last modification.\n * `name` - Sort the results by name.\n * `pinned_on` - Sort the results by pinned timestamp.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "default",
                "modified_time",
                "name",
                "pinned_on"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folders were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects"
      },
      "post": {
        "summary": "Create a folder",
        "description": "This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.",
        "operationId": "create_project_alt1",
        "tags": [
          "Folders\\Essentials"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the folder.",
                    "example": "Rough cuts",
                    "type": "string"
                  },
                  "parent_folder_uri": {
                    "description": "The URI of the parent folder.",
                    "example": "/users/12345/projects/6789",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The folder was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 2205: The input is empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't create folders.\n* Error code 3701: The maximum folder depth has been exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects"
      }
    },
    "/me/projects/{project_id}": {
      "delete": {
        "summary": "Delete a folder",
        "description": "This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.",
        "operationId": "delete_project_alt1",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "Whether to delete all the videos in the folder along with the folder itself.",
            "in": "query",
            "name": "should_delete_clips",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The folder was deleted."
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't delete the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id"
      },
      "get": {
        "summary": "Get a specific folder",
        "description": "This method returns a single folder belonging to the authenticated user.",
        "operationId": "get_project_alt1",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folder was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id"
      },
      "patch": {
        "summary": "Edit a folder",
        "description": "This method edits the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "edit_project_alt1",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the folder.",
                    "example": "Rough cuts",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The folder was edited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 2205: The input is empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't edit the folder.\n* Error code 3449: The authenticated user can't edit folder settings.\n* Error code 3702: Folder settings aren't enabled for this team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id"
      }
    },
    "/me/projects/{project_id}/items": {
      "delete": {
        "summary": "Remove items from a folder",
        "description": "This method removes all items from the specified folder.",
        "operationId": "delete_folder_items_alt1",
        "tags": [
          "Folders\\Items"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "Whether to delete the items when removing them from the folder.",
            "in": "query",
            "name": "should_delete_items",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "A comma-separated list of video or event URIs to remove.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/live_events/273576296"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The items were removed."
          },
          "404": {
            "description": "Error code 5000: No such folder or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 3200: The authenticated user can't remove items from the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id/items"
      },
      "get": {
        "summary": "Get all the items in a folder",
        "description": "This method returns every item that belongs to the specified folder.",
        "operationId": "get_folder_items",
        "tags": [
          "Folders\\Items"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "A comma-separated list of video privacy types to filter on. The accepted values are `private` for when only the creator and users with access grants can play the video; `public` for when anyone can play the video; `password` for when only users with the correct password can play the video; `hide_from_vimeo` for when the video is private but embeddable anywhere; and `unlisted` for when only users with the link can play the video.",
            "in": "query",
            "name": "clip_privacy_filters",
            "required": false,
            "schema": {
              "type": "string",
              "example": "private,unlisted,hide_from_vimeo"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `folder` - Filter the results by folder.\n * `live_event` - Filter the results by event.\n * `video` - Filter the results by video.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "folder",
                "live_event",
                "video"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "last_user_action_event_date"
              ]
            }
          }
        ],
        "responses": {},
        "x-mill-path-template": "/me/projects/+project_id/items"
      }
    },
    "/me/projects/{project_id}/videos": {
      "delete": {
        "summary": "Remove a list of videos from a folder",
        "description": "This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "remove_videos_from_project_alt1",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "Whether to delete the videos when removing them from the folder.",
            "in": "query",
            "name": "should_delete_clips",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "A comma-separated list of the video URIs to remove.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/videos/273576296"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos were removed."
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The input is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id/videos"
      },
      "get": {
        "summary": "Get all the videos in a folder",
        "description": "This method returns all the videos that belong to the specified folder.",
        "operationId": "get_project_videos_alt1",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.",
            "in": "query",
            "name": "filter_tag",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.",
            "in": "query",
            "name": "filter_tag_all_of",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to exclude. The use of this parameter triggers a search.",
            "in": "query",
            "name": "filter_tag_exclude",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "Whether to include subfolders.",
            "in": "query",
            "name": "include_subfolders",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.",
            "in": "query",
            "name": "query_fields",
            "required": false,
            "schema": {
              "type": "string",
              "example": "title,description"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "last_user_action_event_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id/videos"
      },
      "put": {
        "summary": "Add a list of videos to a folder",
        "description": "This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "add_videos_to_project_alt1",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "A comma-separated list of video URIs to add.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/videos/273576296"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos were added."
          },
          "404": {
            "description": "Error code 5000: No such folder or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The input is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id/videos"
      }
    },
    "/me/projects/{project_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a folder",
        "description": "This method removes a single video from the specified folder. Please note that this doesn't delete the video itself.",
        "operationId": "remove_video_from_project_alt1",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "404": {
            "description": "Error code 5000: No such video exists in the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The input is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id/videos/#video_id"
      },
      "put": {
        "summary": "Add a video to a folder",
        "description": "This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "add_video_to_project_alt1",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "404": {
            "description": "Error code 5000: No such user, folder, or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/projects/+project_id/videos/#video_id"
      }
    },
    "/me/videos": {
      "delete": {
        "summary": "Delete a user's videos",
        "description": "This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.\n\nSpecify the videos to delete in a comma-separated list by URI using the **uris** query parameter.",
        "operationId": "delete_videos_alt1",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "A comma-separated list of the video URIs to delete.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/videos/258684546"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos were deleted."
          },
          "404": {
            "description": "Error code 5000: No such video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 3200: The authenticated user can't delete one or more of the videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos"
      },
      "get": {
        "summary": "Get all the videos that the user has uploaded",
        "description": "This method returns all the videos that the authenticated user has uploaded.",
        "operationId": "get_videos_alt1",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The page that contains the video URI. The field is available only when not paired with **query**.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `app_only` - Return app-only videos.\n * `embeddable` - Return embeddable videos.\n * `featured` - Return featured videos.\n * `live` - Return only live videos.\n * `no_placeholder` - Return no placeholder videos.\n * `nolive` - Return no live videos.\n * `playable` - Return playable videos.\n * `screen_recorded` - Return screen-recorded videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "app_only",
                "embeddable",
                "featured",
                "live",
                "no_placeholder",
                "nolive",
                "playable",
                "screen_recorded"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).",
            "in": "query",
            "name": "filter_playable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "Whether to filter the results by screen-recorded videos (`true`) or non-screen-recorded videos (`false`).",
            "in": "query",
            "name": "filter_screen_recorded",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags.",
            "in": "query",
            "name": "filter_tag",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include all of these tags.",
            "in": "query",
            "name": "filter_tag_all_of",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to exclude. All results must exclude all of these tags.",
            "in": "query",
            "name": "filter_tag_exclude",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "The ID of the team member or team owner uploader to filter for.",
            "in": "query",
            "name": "filter_uploader",
            "required": false,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "Whether to include content from the user's teams when searching.",
            "in": "query",
            "name": "include_team_content",
            "required": false,
            "schema": {
              "type": "string",
              "example": "true"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.\n\nOption descriptions:\n * `chapters` - Query by chapter titles that have been added to the video.\n * `description` - Query by the description of the video.\n * `tags` - Query by tag names that have been added to the video.\n * `title` - Query by the title of the video.\n",
            "in": "query",
            "name": "query_fields",
            "required": false,
            "schema": {
              "type": "array",
              "example": "title,description",
              "enum": [
                "chapters",
                "description",
                "tags",
                "title"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically by title.\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn't had an interaction, the upload date is used instead.\n * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "last_user_action_event_date",
                "likes",
                "modified_time",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "The authenticated user hasn't uploaded any videos since the given **If-Modified-Since** header."
          },
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos"
      },
      "post": {
        "summary": "Upload a video",
        "description": "This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).",
        "operationId": "upload_video_alt1",
        "tags": [
          "Videos\\Uploads"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content_rating": {
                    "description": "A list of values describing the content in this video. For a full list of values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "embed": {
                    "properties": {
                      "buttons": {
                        "properties": {
                          "embed": {
                            "description": "Whether to show the button for embeds on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "fullscreen": {
                            "description": "Whether to show the button for fullscreen mode on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "hd": {
                            "description": "Whether to show the button for HD videos on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "like": {
                            "description": "Whether to show the button for likes on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "scaling": {
                            "description": "Whether to show the button for scaling on the embeddable player in fullscreen mode.",
                            "example": true,
                            "type": "boolean"
                          },
                          "share": {
                            "description": "Whether to show the button for shares on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "watchlater": {
                            "description": "Whether to show the button for watching later on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "color": {
                        "description": "The main color of the embeddable player.",
                        "example": "#1ab7ea",
                        "type": "string"
                      },
                      "end_screen": {
                        "properties": {
                          "type": {
                            "description": "The end screen type.\n\nOption descriptions:\n * `empty` - The end screen is empty.\n * `loop` - The end screen loops the video playback.\n * `share` - The end screen includes sharing options.\n * `thumbnail` - The end screen includes the thumbnail of the video.\n",
                            "enum": [
                              "empty",
                              "loop",
                              "share",
                              "thumbnail"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the active custom logo on the embeddable player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "playbar": {
                        "description": "Whether to show the playbar on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "title": {
                        "properties": {
                          "name": {
                            "description": "How to handle the video title in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the video title.\n * `show` - Show the video title.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "How to handle the owner information in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the owner info.\n * `show` - Show the owner info.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "portrait": {
                            "description": "How to handle the owner portrait in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the portrait.\n * `show` - Show the portrait.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "volume": {
                        "description": "Whether to show the volume selector on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "embed_domains": {
                    "description": "The complete list of domains the video can be embedded on. This field requires that **privacy_embed** have the value `whitelist`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "folder_uri": {
                    "description": "The URI of the folder to which the video is uploaded.",
                    "example": "/users/12345/folders/6789",
                    "type": "string"
                  },
                  "hide_from_vimeo": {
                    "description": "Whether to hide the video from everyone except the video's owner. When the value is `true`, unlisted video links work only for the video's owner.",
                    "example": false,
                    "type": "boolean"
                  },
                  "license": {
                    "description": "The Creative Commons license under which the video is offered.\n\nOption descriptions:\n * `by` - The video is offered under CC BY, or the attibution-only license.\n * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.\n * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.\n * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.\n * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.\n * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.\n * `cc0` - The video is offered under CC0, or the public domain license.\n",
                    "enum": [
                      "by",
                      "by-nc",
                      "by-nc-nd",
                      "by-nc-sa",
                      "by-nd",
                      "by-sa",
                      "cc0"
                    ],
                    "type": "string"
                  },
                  "locale": {
                    "description": "The video's default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.",
                    "example": "en_US",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password. This field is required when **privacy.view** is `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "properties": {
                      "add": {
                        "description": "Whether a user can add the video to a showcase, channel, or group.",
                        "example": true,
                        "type": "boolean"
                      },
                      "comments": {
                        "description": "The privacy level required to comment on the video.\n\nOption descriptions:\n * `anybody` - Anyone can comment on the video.\n * `contacts` - Only the video owner's contacts can comment on the video.\n * `nobody` - No one can comment on the video.\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "nobody"
                        ],
                        "type": "string"
                      },
                      "download": {
                        "description": "Whether a user can download the video. This field isn't available to Vimeo Free members.",
                        "example": true,
                        "type": "boolean"
                      },
                      "embed": {
                        "description": "The video's embed setting. Specify the `whitelist` value to restrict embedding to a specific set of domains. For more information, see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide.\n\nOption descriptions:\n * `private` - The video can't be embedded.\n * `public` - The video can be embedded.\n * `whitelist` - The video can be embedded on the specified domains only.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "type": "string"
                      },
                      "view": {
                        "description": "The video's privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, some privacy settings are unavailable to Vimeo Free members; for more information, see our [Help Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).\n\nOption descriptions:\n * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._\n * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the video.\n * `unlisted` - Only those with the private link can access the video.\n * `users` - Only Vimeo members can access the video. _This field is deprecated._\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "disable",
                          "nobody",
                          "password",
                          "unlisted",
                          "users"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "review_page": {
                    "properties": {
                      "active": {
                        "description": "Whether to enable video review.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "spatial": {
                    "properties": {
                      "director_timeline": {
                        "description": "An array representing the 360 director timeline.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pitch": {
                              "description": "The 360 director timeline pitch. This value must be between `−90` and `90`, and it's required only when **spatial.director_timeline** is defined.",
                              "example": 70,
                              "type": "number"
                            },
                            "roll": {
                              "description": "The 360 director timeline roll.",
                              "type": "number"
                            },
                            "time_code": {
                              "description": "The 360 director timeline time code. This field is required only when **spatial.director_timeline** is defined.",
                              "example": 5,
                              "type": "number"
                            },
                            "yaw": {
                              "description": "The 360 director timeline yaw. This value must be between `0` and `360`, and it's required only when **spatial.director_timeline** is defined.",
                              "example": 125,
                              "type": "number"
                            }
                          },
                          "required": [
                            "pitch",
                            "time_code",
                            "yaw"
                          ]
                        },
                        "type": "array"
                      },
                      "field_of_view": {
                        "description": "The 360 field of view. This value must be between `30` and `90`; the default value is `50`.",
                        "example": 50,
                        "type": "number"
                      },
                      "projection": {
                        "description": "The 360 spatial projection.\n\nOption descriptions:\n * `cubical` - Use cubical projection.\n * `cylindrical` - Use cylindrical projection.\n * `dome` - Use dome projection.\n * `equirectangular` - Use equirectangular projection.\n * `pyramid` - Use pyramid projection.\n",
                        "enum": [
                          "cubical",
                          "cylindrical",
                          "dome",
                          "equirectangular",
                          "pyramid"
                        ],
                        "type": "string"
                      },
                      "stereo_format": {
                        "description": "The 360 spatial stereo format.\n\nOption descriptions:\n * `left-right` - Use left-right stereo.\n * `mono` - Use monaural audio.\n * `top-bottom` - Use top-bottom stereo.\n",
                        "enum": [
                          "left-right",
                          "mono",
                          "top-bottom"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The upload procedure has begun.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8002: No user is associated with the access token.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 4101: The authenticated user's maximum disk space has been reached.\n* Error code 4102: The authenticated user's allotted weekly quota has been reached.\n* Error code 4104: The authenticated user's allotted daily quota has been reached.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The request contains invalid body parameters.\n* Error code 2205: The body of the request isn't formatted properly.\n* Error code 2230: The upload type is invalid.\n* Error code 3116: The **type** payload parameter was supplied instead of **upload.approach**. Use **upload.approach** starting from API version 3.4.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4003: There is a problem initiating the upload.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos"
      }
    },
    "/me/videos/{video_id}": {
      "get": {
        "summary": "Check if the user owns a video",
        "description": "This method determines whether the authenticated user is the owner of the specified video.",
        "operationId": "check_if_user_owns_video_alt1",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The authenticated user owns the video.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "The authenticated user doesn't own the video.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos/!video_id"
      }
    },
    "/me/videos/{video_id}/destinations": {
      "get": {
        "summary": "Get all the destinations of a one-time event",
        "description": "This method returns every destination of the specified event. The authenticated user must be the owner of the event.",
        "operationId": "get_one_time_event_destinations_alt1",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event destinations were returned.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event-destination"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destinations.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos/!video_id/destinations"
      },
      "post": {
        "summary": "Create a one-time event destination",
        "description": "This method creates a destination for the specified event. The authenticated user must be the owner of the event.",
        "operationId": "create_one_time_event_destination_alt1",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.simulcast.destination+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "description": "The title to display for the simulcast.",
                    "example": "My channel",
                    "type": "string"
                  },
                  "is_enabled": {
                    "description": "Whether the destination is enabled for simulcasting.",
                    "example": true,
                    "type": "boolean"
                  },
                  "privacy": {
                    "description": "The privacy setting of the destination. Be sure to choose a value that corresponds to your service.\n\nOption descriptions:\n * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.\n * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.\n * `all_friends` - The privacy setting is `all_friends` for Facebook.\n * `everyone` - The privacy setting is `everyone` for Facebook.\n * `private` - The privacy setting is `private` for YouTube.\n * `public` - The privacy setting is `public` for YouTube.\n * `self` - The privacy setting is `self` for Facebook.\n * `unlisted` - The privacy setting is `unlisted` for YouTube.\n",
                    "enum": [
                      "CONNECTIONS",
                      "PUBLIC",
                      "all_friends",
                      "everyone",
                      "private",
                      "public",
                      "self",
                      "unlisted"
                    ],
                    "example": "public",
                    "type": "string"
                  },
                  "provider_destination_id": {
                    "description": "The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID.",
                    "example": "bda55c6b3ba4",
                    "type": "string"
                  },
                  "provider_video_id": {
                    "description": "The ID of the scheduled video.",
                    "example": "6817807391346708000",
                    "nullable": true,
                    "type": "string"
                  },
                  "scheduled_at": {
                    "description": "The time in Unix timestamp format when live streaming is scheduled to start.",
                    "example": 1625754461,
                    "type": "number"
                  },
                  "service_name": {
                    "description": "The service to simulcast to.\n\nOption descriptions:\n * `custom_rtmp` - Simulcast to a custom service.\n * `facebook` - Simulcast to Facebook Live.\n * `linkedin` - Simulcast to LinkedIn Live.\n * `youtube` - Simulcast to YouTube Live.\n",
                    "enum": [
                      "custom_rtmp",
                      "facebook",
                      "linkedin",
                      "youtube"
                    ],
                    "example": "youtube",
                    "type": "string"
                  },
                  "stream_key": {
                    "description": "The RTMP stream key.",
                    "example": "da056692-ba63-4749-a6eb-a476a22b3acd",
                    "type": "string"
                  },
                  "stream_url": {
                    "description": "The RTMP URL for receiving the video stream.",
                    "example": "rtmp://mycooldomain.com/live",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the simulcast destination.\n\nOption descriptions:\n * `channel` - The destination is a YouTube channel.\n * `custom` - The destination is custom.\n * `organization` - The destination is a LinkedIn organization.\n * `page` - The destination is a Facebook page.\n * `profile` - The destination is a Facebook or LinkedIn profile.\n",
                    "enum": [
                      "channel",
                      "custom",
                      "organization",
                      "page",
                      "profile"
                    ],
                    "example": "channel",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name",
                  "service_name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "* Error code 2204: Parameters are missing, or the body data is invalid.\n* Error code 13003: You can create only one LinkedIn destination per event.\n* Error code 13004: You can create only one YouTube destination per event.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destinations.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos/!video_id/destinations"
      }
    },
    "/me/videos/{video_id}/m3u8_playback": {
      "get": {
        "summary": "Get an M3U8 playback URL for a one-time event",
        "description": "This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).",
        "operationId": "get_one_time_event_m3u8_playback_alt1",
        "tags": [
          "Videos\\Live M3U8 playback"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The M3U8 playback URL was returned."
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the M3U8 playback URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/videos/!video_id/m3u8_playback"
      }
    },
    "/me/watched/videos": {
      "delete": {
        "summary": "Delete the user's watch history",
        "description": "This method deletes the entire watch history of the authenticated user.",
        "operationId": "delete_watch_history",
        "tags": [
          "Users\\Watch history"
        ],
        "responses": {
          "204": {
            "description": "The authenticated user's watch history was deleted."
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/me/watched/videos"
      },
      "get": {
        "summary": "Get all the videos that a user has watched",
        "description": "This method returns every video on the authenticated user's watch history. _This endpoint is deprecated. Any request to it returns empty data with HTTP status code 200._",
        "operationId": "get_watch_history",
        "tags": [
          "Users\\Watch history"
        ],
        "parameters": [
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't view another user's watch history.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-template": "/me/watched/videos"
      }
    },
    "/me/watched/videos/{video_id}": {
      "delete": {
        "summary": "Delete a specific video from the user's watch history",
        "description": "This method deletes the specified video from the authenticated user's watch history.",
        "operationId": "delete_from_watch_history",
        "tags": [
          "Users\\Watch history"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was deleted from the authenticated user's watch history."
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/me/watched/videos/!video_id"
      }
    },
    "/me/watchlater": {
      "get": {
        "summary": "Get all the videos in the user's Watch Later queue",
        "description": "This method returns every video from the authenticated user's Watch Later queue.",
        "operationId": "get_watch_later_queue_alt1",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date added.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "The user hasn't added any videos to their Watch Later queue since the given `If-Modified-Since` header."
          },
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/watchlater"
      }
    },
    "/me/watchlater/{video_id}": {
      "delete": {
        "summary": "Remove a video from the user's Watch Later queue",
        "description": "This method removes the specified video from the authenticated user's Watch Later queue.",
        "operationId": "delete_video_from_watch_later_alt1",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/watchlater/!video_id"
      },
      "get": {
        "summary": "Check if the user has added a video to their Watch Later queue",
        "description": "This method checks the authenticated user's Watch Later queue for the specified video.",
        "operationId": "check_watch_later_queue_alt1",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video is in the user's Watch Later queue.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "The video isn't in the user's Watch Later queue.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/watchlater/!video_id"
      },
      "put": {
        "summary": "Add a video to the user's Watch Later queue",
        "description": "This method adds the specified video to the authenticated user's Watch Later queue.",
        "operationId": "add_video_to_watch_later_alt1",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/me/watchlater/!video_id"
      }
    },
    "/oauth/access_token": {
      "post": {
        "summary": "Exchange an authorization code for an access token",
        "description": "This method exchanges an OAuth authorization code for an OAuth access token.",
        "operationId": "exchange_auth_code",
        "tags": [
          "Authentication Extras\\Exchange"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.auth+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "description": "The authorization code received from the authorization server.",
                    "example": "1234abcd",
                    "type": "string"
                  },
                  "grant_type": {
                    "description": "The grant type. The value of this field must be `authorization_code`.\n\nOption descriptions:\n * `authorization_code` - The grant type is for an authorization code.\n",
                    "enum": [
                      "authorization_code"
                    ],
                    "type": "string"
                  },
                  "redirect_uri": {
                    "description": "The redirect URI. The value of this field must match the URI from `/oauth/authorize`.",
                    "example": "https://example.com",
                    "type": "string"
                  }
                },
                "required": [
                  "code",
                  "grant_type",
                  "redirect_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The authorization code was exchanged.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/auth"
                }
              }
            }
          },
          "400": {
            "description": "* The grant type is invalid.\n* The authorization code is invalid.\n* The redirect URI doesn't match the URI to create the authorization code.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/oauth/access_token"
      }
    },
    "/oauth/authorize/client": {
      "post": {
        "summary": "Authorize a client with OAuth",
        "description": "This method uses the OAuth protocol to authorize a client. For details on OAuth client authorization, see our [Working with Authentication](/api/authentication) guide or the [OAuth spec](https://tools.ietf.org/html/draft-ietf-oauth-v2-31#section-4.4).",
        "operationId": "client_auth",
        "tags": [
          "Authentication Extras\\Authenticate"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.auth+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "The grant type. The value of this field must be `client_credentials`.\n\nOption descriptions:\n * `client_credentials` - The grant type is for the client credentials.\n",
                    "enum": [
                      "client_credentials"
                    ],
                    "type": "string"
                  },
                  "scope": {
                    "description": "A space-separated list of the authentication scopes to access. The default is `public`.",
                    "example": "public",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type",
                  "scope"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The authorization was successful.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/auth"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8001: No such client secret exists.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/oauth/authorize/client"
      }
    },
    "/oauth/authorize/vimeo_oauth1": {
      "post": {
        "summary": "Convert an OAuth 1 access token to an OAuth 2 access token",
        "description": "This method exchanges a legacy Advanced API OAuth 1 token for an API v3 OAuth 2 token.",
        "operationId": "convert_access_token",
        "tags": [
          "Authentication Extras\\Convert"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.auth+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "description": "The grant type. The value of this field must be `vimeo_oauth1`.\n\nOption descriptions:\n * `vimeo_oauth1` - The grant type is for the OAuth1 token.\n",
                    "enum": [
                      "vimeo_oauth1"
                    ],
                    "type": "string"
                  },
                  "token": {
                    "description": "The OAuth 1 token.",
                    "example": "58037c0078d5f54e15e638cc0dd882a570b13c50",
                    "type": "string"
                  },
                  "token_secret": {
                    "description": "The OAuth 1 token secret.",
                    "example": "NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA==",
                    "type": "string"
                  }
                },
                "required": [
                  "grant_type",
                  "token",
                  "token_secret"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The token was converted.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/auth"
                }
              }
            }
          },
          "400": {
            "description": "* The token is invalid.\n* The token has unauthorized scopes.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/auth-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/oauth/authorize/vimeo_oauth1"
      }
    },
    "/oauth/verify": {
      "get": {
        "summary": "Verify an OAuth 2 access token",
        "description": "This method verifies that an OAuth 2 access token exists.",
        "operationId": "verify_token",
        "tags": [
          "Authentication Extras\\Essentials"
        ],
        "responses": {
          "200": {
            "description": "The token was verified.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/auth"
                }
              }
            }
          },
          "401": {
            "description": "The token isn't a valid OAuth 2 token.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/oauth/verify"
      }
    },
    "/ondemand/genres": {
      "get": {
        "summary": "Get all On Demand genres",
        "description": "This method returns every existing On Demand genre.",
        "operationId": "get_vod_genres",
        "tags": [
          "On Demand\\Genres"
        ],
        "responses": {
          "200": {
            "description": "The genres were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-genre"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/genres"
      }
    },
    "/ondemand/genres/{genre_id}": {
      "get": {
        "summary": "Get a specific On Demand genre",
        "description": "This method returns a single On Demand genre.",
        "operationId": "get_vod_genre",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the genre.",
            "in": "path",
            "name": "genre_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The genre was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-genre"
                }
              }
            }
          },
          "404": {
            "description": "No such genre exists.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/genres/*genre_id"
      }
    },
    "/ondemand/genres/{genre_id}/pages": {
      "get": {
        "summary": "Get all the On Demand pages in a genre",
        "description": "This method returns every On Demand page that belongs to the specified genre.",
        "operationId": "get_genre_vods",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the genre.",
            "in": "path",
            "name": "genre_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `country` - Sort the results by country.\n * `my_region` - Sort the results by user's region.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "country",
                "my_region"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by name.\n * `publish.time` - Sort the results by time of publishing.\n * `videos` - Sort the results by video.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "name",
                "publish.time",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The On Demand pages in the genre were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-page"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/genres/*genre_id/pages"
      }
    },
    "/ondemand/genres/{genre_id}/pages/{ondemand_id}": {
      "get": {
        "summary": "Get a specific On Demand page in a genre",
        "description": "This method returns a single On Demand page that belongs to the specified genre.",
        "operationId": "get_genre_vod",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the genre.",
            "in": "path",
            "name": "genre_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The On Demand page in the genre was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-page"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or genre exists.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/genres/*genre_id/pages/+ondemand_id"
      }
    },
    "/ondemand/pages/{ondemand_id}": {
      "delete": {
        "summary": "Delete an On Demand page",
        "description": "This method deletes the specified On Demand page.",
        "operationId": "delete_vod_draft",
        "tags": [
          "On Demand\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The On Demand page was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id"
      },
      "get": {
        "summary": "Get a specific On Demand page",
        "description": "This method returns the specified On Demand page.",
        "operationId": "get_vod",
        "tags": [
          "On Demand\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The On Demand page was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-page"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id"
      },
      "patch": {
        "summary": "Edit an On Demand page",
        "description": "This method edits the specified On Demand page. Use this method to enable preorders on the page or to publish the page.",
        "operationId": "edit_vod",
        "tags": [
          "On Demand\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.ondemand.page+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "link": {
                    "description": "The custom string to use in the Vimeo URL of the On Demand page.",
                    "example": "darbyforever",
                    "type": "string"
                  },
                  "preorder": {
                    "properties": {
                      "active": {
                        "description": "Whether to enable preorders on the On Demand page.",
                        "example": true,
                        "type": "boolean"
                      },
                      "publish_time": {
                        "description": "The time in ISO 8601 format when the On Demand page will be published. This parameter is required when **preorder.active** is `true`.",
                        "example": "2017-05-16T15:05:43+00:00",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "publish": {
                    "properties": {
                      "active": {
                        "description": "Whether to publish the On Demand page.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "publish_when_ready": {
                    "description": "Whether to publish the On Demand page automatically after all videos have finished transcoding.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The On Demand page was edited.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-page"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't edit the On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id"
      }
    },
    "/ondemand/pages/{ondemand_id}/backgrounds": {
      "get": {
        "summary": "Get all the backgrounds on an On Demand page",
        "description": "This method returns every background image on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_backgrounds",
        "tags": [
          "On Demand\\Backgrounds"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The background images were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/backgrounds"
      },
      "post": {
        "summary": "Add a background to an On Demand page",
        "description": "This method adds a background image to the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "create_vod_background",
        "tags": [
          "On Demand\\Backgrounds"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The background image was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add a background image to this On Demand page.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/backgrounds"
      }
    },
    "/ondemand/pages/{ondemand_id}/backgrounds/{background_id}": {
      "delete": {
        "summary": "Delete a background on an On Demand page",
        "description": "This method deletes the specified background image on an On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "delete_vod_background",
        "tags": [
          "On Demand\\Backgrounds"
        ],
        "parameters": [
          {
            "description": "The ID of the background image.",
            "in": "path",
            "name": "background_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The background image was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete this background image.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or background image exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/backgrounds/#background_id"
      },
      "get": {
        "summary": "Get a specific background on an On Demand page",
        "description": "This method returns a single background image on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_background",
        "tags": [
          "On Demand\\Backgrounds"
        ],
        "parameters": [
          {
            "description": "The ID of the background image.",
            "in": "path",
            "name": "background_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The background image was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't get this background image.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or background image exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/backgrounds/#background_id"
      },
      "patch": {
        "summary": "Edit a background on an On Demand page",
        "description": "This method edits the specified background image on an On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "edit_vod_background",
        "tags": [
          "On Demand\\Backgrounds"
        ],
        "parameters": [
          {
            "description": "The ID of the background image.",
            "in": "path",
            "name": "background_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether this background image is the one that appears on the On Demand page.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The background image was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't edit this background image.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or background image exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/backgrounds/#background_id"
      }
    },
    "/ondemand/pages/{ondemand_id}/genres": {
      "get": {
        "summary": "Get all the genres of an On Demand page",
        "description": "This method returns every genre associated with the specified On Demand page.",
        "operationId": "get_vod_genres_by_ondemand_id",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The genres were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-genre"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such On Demand page exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/genres"
      }
    },
    "/ondemand/pages/{ondemand_id}/genres/{genre_id}": {
      "delete": {
        "summary": "Remove a genre from an On Demand page",
        "description": "This method removes a genre association from the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "delete_vod_genre",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the genre.",
            "in": "path",
            "name": "genre_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The genre was removed."
          },
          "400": {
            "description": "The On Demand page must belong to at least one genre.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't remove a genre from this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or genre exists.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/genres/*genre_id"
      },
      "get": {
        "summary": "Check whether an On Demand page belongs to a specific genre",
        "description": "This method determines whether an On Demand page is associated with the specified genre.",
        "operationId": "get_vod_genre_by_ondemand_id",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the genre.",
            "in": "path",
            "name": "genre_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The On Demand page is in this genre.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-genre"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or genre exists.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/genres/*genre_id"
      },
      "put": {
        "summary": "Add a genre to an On Demand page",
        "description": "This method adds the specified genre designation to an On Demand page. A page can be associated with a maximum of two genres. The authenticated user must be the owner of the page.",
        "operationId": "add_vod_genre",
        "tags": [
          "On Demand\\Genres"
        ],
        "parameters": [
          {
            "description": "The ID of the genre.",
            "in": "path",
            "name": "genre_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The genre was added.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-genre"
                }
              }
            }
          },
          "400": {
            "description": "The On Demand page already has two genres.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add a genre to this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or genre exists.",
            "content": {
              "application/vnd.vimeo.ondemand.genre+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/genres/*genre_id"
      }
    },
    "/ondemand/pages/{ondemand_id}/likes": {
      "get": {
        "summary": "Get all the users who have liked a video on an On Demand page",
        "description": "This method returns every user who has liked the specified video on an On Demand page.",
        "operationId": "get_vod_likes",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `extra` - Consider extra content only.\n * `main` - Consider main content only.\n * `trailer` - Consider trailer content only.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "extra",
                "main",
                "trailer"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by join date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/likes"
      }
    },
    "/ondemand/pages/{ondemand_id}/pictures": {
      "get": {
        "summary": "Get all the posters on an On Demand page",
        "description": "This method returns every poster on the specified On Demand page.",
        "operationId": "get_vod_posters",
        "tags": [
          "On Demand\\Posters"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The posters were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/pictures"
      },
      "post": {
        "summary": "Add a poster to an On Demand page",
        "description": "This method adds a poster image to the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "add_vod_poster",
        "tags": [
          "On Demand\\Posters"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The poster was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add posters to this On Demand page.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/pictures"
      }
    },
    "/ondemand/pages/{ondemand_id}/pictures/{poster_id}": {
      "get": {
        "summary": "Get a specific poster on an On Demand page",
        "description": "This method returns a single poster on the specified On Demand page.",
        "operationId": "get_vod_poster",
        "tags": [
          "On Demand\\Posters"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the poster.",
            "in": "path",
            "name": "poster_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The poster was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/pictures/#poster_id"
      },
      "patch": {
        "summary": "Edit a poster on an On Demand page",
        "description": "This method edits a poster image on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "edit_vod_poster",
        "tags": [
          "On Demand\\Posters"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the poster.",
            "in": "path",
            "name": "poster_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether this poster is the one that appears on the On Demand page.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The poster was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/pictures/#poster_id"
      }
    },
    "/ondemand/pages/{ondemand_id}/promotions": {
      "get": {
        "summary": "Get all the promotions on an On Demand page",
        "description": "This method returns every promotion on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_promotions",
        "tags": [
          "On Demand\\Promotions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The type of filter to apply to the results.\n\nOption descriptions:\n * `batch` - Filter the results by the `batch` promotion.\n * `default` - Filter the results by the default promotion.\n * `single` - Filter the results by the `single` promotion.\n * `vip` - Filter the results by the `vip` promotion.\n",
            "in": "query",
            "name": "filter",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "batch",
                "default",
                "single",
                "vip"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The promotions were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-promotion"
                }
              }
            }
          },
          "400": {
            "description": "The filter is invalid.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't get promotions on this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "promo_codes"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/promotions"
      },
      "post": {
        "summary": "Add a promotion to an On Demand page",
        "description": "This method adds a promotion to the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "create_vod_promotion",
        "tags": [
          "On Demand\\Promotions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.ondemand.promotion+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_type": {
                    "description": "The promotion access type, which is a purchase option that isn't available in the On Demand container. Use the **download** and **stream_period** parameters to define additional characteristics for the `vip` type.\n\nOption descriptions:\n * `default` - The promotion grants a discount on the existing purchase options for an On Demand container.\n * `vip` - The promotion grants free access to On Demand content before it's released.\n",
                    "enum": [
                      "default",
                      "vip"
                    ],
                    "type": "string"
                  },
                  "code": {
                    "description": "The promotion code. This parameter is ignored when the promotion type is `batch`.",
                    "example": "sxsw2018",
                    "type": "string"
                  },
                  "discount_type": {
                    "description": "The type of discount offered by the promotion code. When **access_type** is `vip`, the value of this parameter must be `free`.\n\nOption descriptions:\n * `free` - The discount reduces the price to zero.\n * `percent` - The discount reduces the price by the percentage defined in the **percent_off** parameter.\n",
                    "enum": [
                      "free",
                      "percent"
                    ],
                    "type": "string"
                  },
                  "download": {
                    "description": "Whether the promotion grants download access to On Demand content. This field is required only when the download access hasn't been defined in the On Demand container, or when **access_type** is `vip` or **product_type** is `buy`.",
                    "example": true,
                    "type": "boolean"
                  },
                  "end_time": {
                    "description": "The time at which the promotion period ends. If this parameter has no value, the promotion never expires.",
                    "example": "1526089920",
                    "type": "string"
                  },
                  "label": {
                    "description": "The description of the promotion when the promotion type is `batch`. This parameter is ignored when the promotion type is `single`.",
                    "example": "sxsw",
                    "type": "string"
                  },
                  "percent_off": {
                    "description": "The percentage of the discount. This parameter is applicable only when **discount_type** is `percent`.",
                    "example": 50,
                    "type": "number"
                  },
                  "product_type": {
                    "description": "The type of transaction to which the promotion applies. When **access_type** is `default`, the default value is `any`. When **access_type** is `vip`, the default value is `rent` and the only valid product types are `buy` and `rent`.\n\nOption descriptions:\n * `any` - The promotion applies to any transaction.\n * `buy` - The promotion applies only to purchased products.\n * `buy_episode` - The promotion applies only to purchased episodes.\n * `rent` - The promotion applies only to rented products.\n * `rent_episode` - The promotion applies only to rented episodes.\n * `subscribe` - The promotion applies only to subscriptions.\n",
                    "enum": [
                      "any",
                      "buy",
                      "buy_episode",
                      "rent",
                      "rent_episode",
                      "subscribe"
                    ],
                    "type": "string"
                  },
                  "start_time": {
                    "description": "The time at which the promotion period starts. If this parameter has no value, the start time defaults to the time at which the promotion was created.",
                    "example": "1526089920",
                    "type": "string"
                  },
                  "stream_period": {
                    "description": "The amount of time for which the user can access On Demand content upon redeeming a promotion code. This parameter is required only when the streaming period isn't defined in the On Demand container, or when creating promotions where **access_type** is `vip` or **product_type** is `rent`.\n\nOption descriptions:\n * `1_week` - The user can access On Demand content for a maximum of 1 week after redeeming a promotion code.\n * `1_year` - The user can access On Demand content for a maximum of 1 year after redeeming a promotion code.\n * `24_hour` - The user can access On Demand content for a maximum of 24 hours after redeeming a promotion code.\n * `30_day` - The user can access On Demand content for a maximum of 30 days after redeeming a promotion code.\n * `3_month` - The user can access On Demand content for a maximum of 3 months after redeeming a promotion code.\n * `48_hour` - The user can access On Demand content for a maximum of 48 hours after redeeming a promotion code.\n * `6_month` - The user can access On Demand content for a maximum of 6 months after redeeming a promotion code.\n * `72_hour` - The user can access On Demand content for a maximum of 72 hours after redeeming a promotion code.\n",
                    "enum": [
                      "1_week",
                      "1_year",
                      "24_hour",
                      "30_day",
                      "3_month",
                      "48_hour",
                      "6_month",
                      "72_hour"
                    ],
                    "type": "string"
                  },
                  "total": {
                    "description": "When **type** is `batch`, the total number of promotions to generate. When **type** is `single`, the total number of uses of the promotion.",
                    "example": 9,
                    "type": "number"
                  },
                  "type": {
                    "description": "The type of the promotion. When **access_type** is `vip`, the value for this parameter must be `batch`.\n\nOption descriptions:\n * `batch` - The promotion type that generates many random codes to use one time each.\n * `single` - The promotion type that generates one code to use many times.\n",
                    "enum": [
                      "batch",
                      "single"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "download",
                  "stream_period",
                  "total",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The promotion was added.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-promotion"
                }
              }
            }
          },
          "400": {
            "description": "There are errors in the request, or the promotion code already exists.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add promotions to this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "promo_codes",
              "create"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/promotions"
      }
    },
    "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}": {
      "delete": {
        "summary": "Delete a promotion on an On Demand page",
        "description": "This method deletes a promotion on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "delete_vod_promotion",
        "tags": [
          "On Demand\\Promotions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the promotion.",
            "in": "path",
            "name": "promotion_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The promotion was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete promotions on this On Demand page.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or promotion exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "promo_codes",
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/promotions/#promotion_id"
      },
      "get": {
        "summary": "Get a specific promotion on an On Demand page",
        "description": "This method returns a single promotion on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_promotion",
        "tags": [
          "On Demand\\Promotions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the promotion.",
            "in": "path",
            "name": "promotion_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The promotion was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-promotion"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't get promotions on this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or promotion exists.",
            "content": {
              "application/vnd.vimeo.ondemand.promotion+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "promo_codes"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/promotions/#promotion_id"
      }
    },
    "/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes": {
      "get": {
        "summary": "Get all the codes of a promotion on an On Demand page",
        "description": "This method returns every code of the specified promotion on an On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_promotion_codes",
        "tags": [
          "On Demand\\Promotions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the promotion.",
            "in": "path",
            "name": "promotion_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The codes were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.promocode+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-promotion-code"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't get promotions on this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.promocode+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or promotion exists.",
            "content": {
              "application/vnd.vimeo.ondemand.promocode+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "promo_codes"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/promotions/#promotion_id/codes"
      }
    },
    "/ondemand/pages/{ondemand_id}/regions": {
      "delete": {
        "summary": "Remove a list of regions from an On Demand page",
        "description": "This method removes multiple regions from the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "delete_vod_regions",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.ondemand.region+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "countries": {
                    "description": "An array of country codes for the regions to remove.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The regions were removed.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-region"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't remove regions from this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or region exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/regions"
      },
      "get": {
        "summary": "Get all the regions on an On Demand page",
        "description": "This method returns every region on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_regions",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The regions were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-region"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/regions"
      },
      "put": {
        "summary": "Add a list of regions to an On Demand page",
        "description": "This method adds multiple regions to the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "set_vod_regions",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.ondemand.region+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "countries": {
                    "description": "An array of country codes for the regions to add.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "countries"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of regions was added.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-region"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add regions to this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or region exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/regions"
      }
    },
    "/ondemand/pages/{ondemand_id}/regions/{country}": {
      "delete": {
        "summary": "Remove a specific region from an On Demand page",
        "description": "This method removes a single region from the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "delete_vod_region",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The country code of the region to remove.",
            "in": "path",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The region was removed."
          },
          "403": {
            "description": "The authenticated user can't remove regions from this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or region exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/regions/*country"
      },
      "get": {
        "summary": "Get a specific region on an On Demand page",
        "description": "This method returns a single region on the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "get_vod_region",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The country code of the region to return.",
            "in": "path",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The region was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-region"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or region exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/regions/*country"
      },
      "put": {
        "summary": "Add a specific region to an On Demand page",
        "description": "This method adds a single region to the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "add_vod_region",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The country code of the region to add.",
            "in": "path",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string",
              "example": "US"
            }
          },
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The region was added.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-region"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add regions to this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or region exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/regions/*country"
      }
    },
    "/ondemand/pages/{ondemand_id}/seasons": {
      "get": {
        "summary": "Get all the seasons on an On Demand page",
        "description": "This method returns every season on the specified On Demand page.",
        "operationId": "get_vod_seasons",
        "tags": [
          "On Demand\\Seasons"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `viewable` - Filter by viewable seasons.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "viewable"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `manual` - Sort the results manually.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "manual"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The seasons were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.season+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-season"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such On Demand page exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.ondemand.season+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/seasons"
      }
    },
    "/ondemand/pages/{ondemand_id}/seasons/{season_id}": {
      "get": {
        "summary": "Get a specific season on an On Demand page",
        "description": "This method returns a single season on the specified On Demand page.",
        "operationId": "get_vod_season",
        "tags": [
          "On Demand\\Seasons"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the season.",
            "in": "path",
            "name": "season_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The season was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.season+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-season"
                }
              }
            }
          },
          "404": {
            "description": "No such On Demand page or season exists.",
            "content": {
              "application/vnd.vimeo.ondemand.season+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/seasons/+season_id"
      }
    },
    "/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos": {
      "get": {
        "summary": "Get all the videos in a season on an On Demand page",
        "description": "This method returns every video in the specified season on an On Demand page.",
        "operationId": "get_vod_season_videos",
        "tags": [
          "On Demand\\Seasons"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the season.",
            "in": "path",
            "name": "season_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `viewable` - Filter by viewable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "viewable"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `manual` - Sort the results manually.\n * `name` - Sort the results by name.\n * `purchase_time` - Sort the results by time of purchase.\n * `release_date` - Sort the results by release date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "default",
                "manual",
                "name",
                "purchase_time",
                "release_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/seasons/+season_id/videos"
      }
    },
    "/ondemand/pages/{ondemand_id}/videos": {
      "get": {
        "summary": "Get all the videos on an On Demand page",
        "description": "This method returns every video on the specified On Demand page.",
        "operationId": "get_vod_videos",
        "tags": [
          "On Demand\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `all` - Filter for all videos.\n * `buy` - Filter for purchased videos.\n * `expiring_soon` - Filter for videos that expire soon.\n * `extra` - Filter for extra footage videos.\n * `main` - Filter for main videos.\n * `main.viewable` - Filter for videos that are both the main video and are viewable.\n * `rent` - Filter for rented videos.\n * `trailer` - Filter for trailer videos.\n * `unwatched` - Filter for unwatched videos.\n * `viewable` - Filter for videos that are viewable.\n * `watched` - Filter for watched videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "buy",
                "expiring_soon",
                "extra",
                "main",
                "main.viewable",
                "rent",
                "trailer",
                "unwatched",
                "viewable",
                "watched"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `episode` - Sort the results by episode.\n * `manual` - Sort the results manually.\n * `name` - Sort the results by name.\n * `purchase_time` - Sort the results by time of purchase.\n * `release_date` - Sort the results by release date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "default",
                "episode",
                "manual",
                "name",
                "purchase_time",
                "release_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/videos"
      }
    },
    "/ondemand/pages/{ondemand_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from an On Demand page",
        "description": "This method removes a video from the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "delete_video_from_vod",
        "tags": [
          "On Demand\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "403": {
            "description": "The authenticated user can't remove videos from this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/videos/+video_id"
      },
      "get": {
        "summary": "Get a specific video on an On Demand page",
        "description": "This method returns a single video on the specified On Demand page. Use this method to determine whether the video is on the page.",
        "operationId": "get_vod_video",
        "tags": [
          "On Demand\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/videos/+video_id"
      },
      "put": {
        "summary": "Add a video to an On Demand page",
        "description": "This method adds a video to the specified On Demand page. The authenticated user must be the owner of the page.",
        "operationId": "add_video_to_vod",
        "tags": [
          "On Demand\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the On Demand page.",
            "in": "path",
            "name": "ondemand_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 61326
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.ondemand.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "buy": {
                    "properties": {
                      "price": {
                        "properties": {
                          "AUD": {
                            "description": "The purchase price of the video in Australian dollars.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "CAD": {
                            "description": "The purchase price of the video in Canadian dollars.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "CHF": {
                            "description": "The purchase price of the video in Swiss francs.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "DKK": {
                            "description": "The purchase price of the video in Danish krone.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "EUR": {
                            "description": "The purchase price of the video in euros.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "GBP": {
                            "description": "The purchase price of the video in British pounds.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "JPY": {
                            "description": "The purchase price of the video in Japanese yen.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "KRW": {
                            "description": "The purchase price of the video in South Korean won.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "NOK": {
                            "description": "The purchase price of the video in Norwegian krone.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "PLN": {
                            "description": "The purchase price of the video in Polish zloty.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "SEK": {
                            "description": "The purchase price of the video in Swedish krona.",
                            "example": 1.99,
                            "type": "number"
                          },
                          "USD": {
                            "description": "The purchase price of the video in United States dollars. This parameter is required when **buy.active** is `true`.",
                            "example": 1.99,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "position": {
                    "description": "The position of the video in the On Demand collection.",
                    "example": 10,
                    "type": "number"
                  },
                  "release_year": {
                    "description": "The release year of the video.",
                    "example": 2018,
                    "type": "number"
                  },
                  "rent": {
                    "properties": {
                      "price": {
                        "properties": {
                          "AUD": {
                            "description": "The rental price of the video in Australian dollars.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "CAD": {
                            "description": "The rental price of the video in Canadian dollars.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "CHF": {
                            "description": "The rental price of the video in Swiss francs.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "DKK": {
                            "description": "The rental price of the video in Danish krone.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "EUR": {
                            "description": "The rental price of the video in euros.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "GBP": {
                            "description": "The rental price of the video in British pounds.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "JPY": {
                            "description": "The rental price of the video in Japanese yen.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "KRW": {
                            "description": "The rental price of the video in South Korean won.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "NOK": {
                            "description": "The rental price of the video in Norwegian krone.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "PLN": {
                            "description": "The rental price of the video in Polish zloty.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "SEK": {
                            "description": "The rental price of the video in Swedish krona.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "USD": {
                            "description": "The rental price of the video in United States dollars. This parameter is required when **rent.active** is `true`.",
                            "example": 0.99,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of the video.\n\nOption descriptions:\n * `extra` - The video type is extra footage.\n * `main` - The video type is the main video.\n * `trailer` - The video type is a trailer.\n",
                    "enum": [
                      "extra",
                      "main",
                      "trailer"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The video was added.",
            "content": {
              "application/vnd.vimeo.ondemand.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-video"
                }
              }
            }
          },
          "400": {
            "description": "The video can't be added to this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add videos to this On Demand page.",
            "content": {
              "application/vnd.vimeo.ondemand.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/ondemand/pages/+ondemand_id/videos/+video_id"
      }
    },
    "/ondemand/regions": {
      "get": {
        "summary": "Get all the On Demand regions",
        "description": "This method returns every existing On Demand region.",
        "operationId": "get_regions",
        "tags": [
          "On Demand\\Regions"
        ],
        "responses": {
          "200": {
            "description": "The regions were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-region"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/regions"
      }
    },
    "/ondemand/regions/{country}": {
      "get": {
        "summary": "Get a specific On Demand region",
        "description": "This method returns a single On Demand region.",
        "operationId": "get_region",
        "tags": [
          "On Demand\\Regions"
        ],
        "parameters": [
          {
            "description": "The country code of the region to return.",
            "in": "path",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string",
              "example": "US"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The region was returned.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-region"
                }
              }
            }
          },
          "404": {
            "description": "No such region exists.",
            "content": {
              "application/vnd.vimeo.ondemand.region+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/ondemand/regions/@country"
      }
    },
    "/search/{user_id}/items": {
      "get": {
        "summary": "Get the federated search results of the user's items",
        "description": "This method returns the federated search results of the authenticated user's videos and folders according to a search query.\n\nIf no query is provided, the method returns items sorted by the most recent user action.",
        "operationId": "federated_search_user_items",
        "tags": [
          "Search\\Federated"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `folder` - Return folders.\n * `showcase` - Return showcases.\n * `video` - Return videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "folder",
                "showcase",
                "video"
              ]
            }
          },
          {
            "description": "A comma-separated list of privacy settings to filter the results by. Possible values include `unlisted` for videos that are accessible but not searchable from Vimeo, `password` for videos on Vimeo that anyone can access with the correct password, `hide-from-vimeo` for videos that don't appear on Vimeo, `private` for videos on Vimeo that only their owner can access, and `public` for videos on Vimeo that anyone can access. By default, all privacy settings are considered.",
            "in": "query",
            "name": "filter_privacy",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The inclusive end date of the range.",
            "in": "query",
            "name": "modified_end_date",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-01-13"
            }
          },
          {
            "description": "The inclusive start date of the range. This value must be earlier than the modified end date.",
            "in": "query",
            "name": "modified_start_date",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-01-13"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.",
            "in": "query",
            "name": "query_fields",
            "required": false,
            "schema": {
              "type": "string",
              "example": "title,description,captions"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting order.\n * `duration` - Sort the results by duration, where available.\n * `folder_path` - Sort the results by the hierarchy of folders.\n * `last_user_action_event_date` - Sort the results by most recent user interaction.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "folder_path",
                "last_user_action_event_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The federated search results were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/federated-search-items"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-template": "/search/+user_id/items"
      }
    },
    "/subscription_plans/{tier}": {
      "get": {
        "summary": "Get a single subscription plan",
        "description": "This method returns the specified subscription plan.",
        "operationId": "get_plan",
        "tags": [
          "Subscription Plans\\Essentials"
        ],
        "parameters": [
          {
            "description": "The type of subscription plan.\n\nOption descriptions:\n * `advanced` - The plan type is Vimeo Advanced.\n * `business` - The plan type is Vimeo Business.\n * `free` - The plan type is Vimeo Free.\n * `live_premium` - The plan type is Vimeo Premium.\n * `plus` - The plan type is Vimeo Plus.\n * `pro` - The plan type is Vimeo Pro.\n * `pro_unlimited` - The plan type is Vimeo Pro Unlimited.\n * `standard` - The plan type is Vimeo Standard.\n * `starter` - The plan type is Vimeo Starter.\n",
            "in": "path",
            "name": "tier",
            "required": true,
            "schema": {
              "type": "string",
              "example": "pro",
              "enum": [
                "advanced",
                "business",
                "free",
                "live_premium",
                "plus",
                "pro",
                "pro_unlimited",
                "standard",
                "starter"
              ]
            }
          }
        ],
        "responses": {},
        "x-mill-path-template": "/subscription_plans/+tier"
      }
    },
    "/tags/{word}": {
      "get": {
        "summary": "Get a tag",
        "description": "This method returns the specified tag.",
        "operationId": "get_tag",
        "tags": [
          "Tags\\Essentials"
        ],
        "parameters": [
          {
            "description": "The tag to return.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag was returned.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/tags/*word"
      }
    },
    "/tags/{word}/videos": {
      "get": {
        "summary": "Get all the videos with a specific tag",
        "description": "This method returns all the public videos associated with the specified tag.",
        "operationId": "get_videos_with_tag",
        "tags": [
          "Videos\\Tags"
        ],
        "parameters": [
          {
            "description": "The tag word.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `created_time` - Sort the results by creation time.\n * `duration` - Sort the results by duration.\n * `name` - Sort the results by name.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_time",
                "duration",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such tag exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/tags/*word/videos"
      }
    },
    "/teammembers/{code}": {
      "get": {
        "summary": "Get membership information about a team",
        "description": "This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.",
        "operationId": "get_team_information",
        "tags": [
          "Teams\\Members"
        ],
        "parameters": [
          {
            "description": "The code corresponding to the desired team. This value appears under `TeamUser` > `code`.",
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string",
              "example": "q3u4mrqoc3u4hcnqo34"
            }
          }
        ],
        "responses": {},
        "x-mill-path-template": "/teammembers/+code"
      }
    },
    "/tokens": {
      "delete": {
        "summary": "Revoke the current access token",
        "description": "This method revokes the access token that the requesting app is currently using. The token must be of the OAuth 2 type.",
        "operationId": "delete_token",
        "tags": [
          "Authentication Extras\\Essentials"
        ],
        "responses": {
          "204": {
            "description": "The token was revoked."
          },
          "400": {
            "description": "Access can't be revoked for an OAuth 1 token.",
            "content": {
              "application/vnd.vimeo.auth+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/tokens"
      }
    },
    "/tutorial": {
      "get": {
        "summary": "Get started with the Vimeo API",
        "description": "This method tests whether users who are working through the [Getting Started](https://developer.vimeo.com/api/guides/start) guides have set up their configurations correctly.",
        "operationId": "developer_tutorial",
        "tags": [
          "Tutorial\\Essentials"
        ],
        "responses": {},
        "x-mill-path-template": "/tutorial"
      }
    },
    "/users": {
      "get": {
        "summary": "Search for users",
        "description": "This method returns user search results.",
        "operationId": "search_users",
        "tags": [
          "Users\\Search"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `relevant` - Sort the results by relevance.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "followers",
                "relevant",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search results were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "Search is disabled.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "500": {
            "description": "There was an internal search error.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/users"
      }
    },
    "/users/{owner_id}/folders/private_to_me": {
      "get": {
        "summary": "Get a user's private-to-me folder",
        "description": "This method returns the specified private-to-me folder.",
        "operationId": "get_private_to_me_folder",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the owner.",
            "in": "path",
            "name": "owner_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folder was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/users/+owner_id/folders/private_to_me"
      }
    },
    "/users/{user_id}": {
      "get": {
        "summary": "Get the user",
        "description": "This method returns the authenticated user.",
        "operationId": "get_user",
        "tags": [
          "Users\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user was returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me"
        ],
        "x-mill-path-template": "/users/+user_id"
      },
      "patch": {
        "summary": "Edit the user's account",
        "description": "This method edits the Vimeo account of the authenticated user.",
        "operationId": "edit_user",
        "tags": [
          "Users\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.user+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bio": {
                    "description": "The user's bio.",
                    "example": "This is where you will find videos and news updates from the staff",
                    "type": "string"
                  },
                  "content_filter": {
                    "description": "A list of values describing the content in the user's videos. Find the full list in the [/contentratings](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint. You must provide a comma-separated list if you're using a query string or an array if you're using JSON.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "gender": {
                    "description": "The authenticated user's gender.\n\nOption descriptions:\n * `f` - The user's preferred pronouns are she and her.\n * `m` - The user's preferred pronouns are he and him.\n * `n` - The user would rather not give preferred pronouns.\n * `o` - The user's preferred pronouns are they and them.\n",
                    "enum": [
                      "f",
                      "m",
                      "n",
                      "o"
                    ],
                    "type": "string"
                  },
                  "link": {
                    "description": "The user's custom Vimeo URL.",
                    "example": "staff",
                    "type": "string"
                  },
                  "location": {
                    "description": "The user's location.",
                    "example": "New York City",
                    "type": "string"
                  },
                  "name": {
                    "description": "The user's display name.",
                    "example": "Vimeo Staff",
                    "type": "string"
                  },
                  "password": {
                    "description": "The default password for all future videos that this user uploads. To use this field, the **videos.privacy.view** field must be `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "videos": {
                    "properties": {
                      "privacy": {
                        "properties": {
                          "add": {
                            "description": "Whether the user can add videos to showcases, channels, or groups by default.",
                            "example": true,
                            "type": "boolean"
                          },
                          "comments": {
                            "description": "Who can comment on the user's video uploads by default.\n\nOption descriptions:\n * `anybody` - Anyone can comment.\n * `contacts` - Only the user's contacts can comment.\n * `nobody` - No one can comment.\n",
                            "enum": [
                              "anybody",
                              "contacts",
                              "nobody"
                            ],
                            "type": "string"
                          },
                          "download": {
                            "description": "Whether the user can download videos. This value becomes the default download setting for all future videos that the user uploads.",
                            "example": true,
                            "type": "boolean"
                          },
                          "embed": {
                            "description": "The privacy for the user's embedded videos. The `whitelist` value enables you to define all valid embeddable domains. See our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide for details on adding and removing domains.\n\nOption descriptions:\n * `private` - The videos can't be embedded on any domain.\n * `public` - The videos can be embedded on any domain.\n * `whitelist` - The videos can be embedded on the specified domains only.\n",
                            "enum": [
                              "private",
                              "public",
                              "whitelist"
                            ],
                            "type": "string"
                          },
                          "view": {
                            "description": "Who can access the user's videos by default.\n\nOption descriptions:\n * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only the user's contacts can access the videos. _This field is deprecated._\n * `disable` - The videos are disabled. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one can access the videos. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the videos.\n * `unlisted` - The videos are unlisted.\n * `users` - Only other Vimeo members can access the videos. _This field is deprecated._\n",
                            "enum": [
                              "anybody",
                              "contacts",
                              "disable",
                              "nobody",
                              "password",
                              "unlisted",
                              "users"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's Vimeo account was edited.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me"
        ],
        "x-mill-path-template": "/users/+user_id"
      }
    },
    "/users/{user_id}/albums": {
      "get": {
        "summary": "Get all the showcases that belong to the user",
        "description": "This method returns every showcase belonging to the authenticated user.",
        "operationId": "get_showcases",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date of creation.\n * `duration` - Sort the results by duration.\n * `videos` - Sort the results by the number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "duration",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The showcases were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/album"
                  }
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/albums"
        ],
        "x-mill-path-template": "/users/+user_id/albums"
      },
      "patch": {
        "summary": "Add videos and events to showcases",
        "description": "This method adds videos and events to the specified showcases. The authenticated user must either be the owner of the showcase or have team permissions.\n\nThe present setup permits only one event per showcase.",
        "operationId": "update_showcases",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "A comma-separated list of video or event URIs.",
            "in": "query",
            "name": "album_item_uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/live_events/273576296"
            }
          },
          {
            "description": "A comma-separated list of showcase URIs.",
            "in": "query",
            "name": "album_uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/showcases/258684873, /showcases/356684937"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos and events were added to the showcases."
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums"
      },
      "post": {
        "summary": "Create a showcase",
        "description": "This method creates a new showcase for the specified user.",
        "operationId": "create_showcase",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.album+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_color": {
                    "description": "The hexadecimal color code for the color of the player buttons and showcase controls.",
                    "example": "ff66ee",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the showcase.",
                    "example": "Vimeo holiday videos!",
                    "type": "string"
                  },
                  "hide_from_vimeo": {
                    "description": "Whether the showcase should be hidden from Vimeo when unlisted.",
                    "example": false,
                    "type": "boolean"
                  },
                  "hide_nav": {
                    "description": "Whether to hide Vimeo navigation when displaying the showcase.",
                    "example": true,
                    "type": "boolean"
                  },
                  "hide_upcoming": {
                    "description": "Whether to include the upcoming event in the showcase.",
                    "example": false,
                    "type": "boolean"
                  },
                  "layout": {
                    "description": "The type of layout for presenting the showcase.\n\nOption descriptions:\n * `grid` - The videos appear in a grid.\n * `player` - The videos appear in the player.\n",
                    "enum": [
                      "grid",
                      "player"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the showcase.",
                    "example": "Vimeo Holiday Videos!",
                    "type": "string"
                  },
                  "password": {
                    "description": "The showcase's password. This field is required only when **privacy** is `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy level of the showcase.\n\nOption descriptions:\n * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.\n * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one can access the showcase, including the authenticated user.\n * `password` - Only those with the password can access the showcase.\n * `team` - Only members of the authenticated user's team can access the showcase.\n * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.\n",
                    "enum": [
                      "anybody",
                      "embed_only",
                      "nobody",
                      "password",
                      "team",
                      "unlisted"
                    ],
                    "type": "string"
                  },
                  "review_mode": {
                    "description": "Whether showcase videos use the review mode URL.",
                    "example": true,
                    "type": "boolean"
                  },
                  "sort": {
                    "description": "The default sort order of the videos as they appear in the showcase.\n\nOption descriptions:\n * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.\n * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.\n * `alphabetical` - The videos appear alphabetically by their title.\n * `alphabetical_desc` - The videos appear alphabetically by their title in reverse order.\n * `arranged` - The videos appear as arranged by the owner of the showcase.\n * `comments` - The videos appear according to their number of comments.\n * `likes` - The videos appear according to their number of likes.\n * `newest` - The videos appear in chronological order with the newest first.\n * `oldest` - The videos appear in chronological order with the oldest first.\n * `plays` - The videos appear according to their number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "alphabetical_desc",
                      "arranged",
                      "comments",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "type": "string"
                  },
                  "theme": {
                    "description": "The color theme of the showcase.\n\nOption descriptions:\n * `dark` - The showcase uses the dark theme.\n * `standard` - The showcase uses the standard theme.\n",
                    "enum": [
                      "dark",
                      "standard"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The showcase was created.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't create showcases.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/albums"
        ],
        "x-mill-path-template": "/users/+user_id/albums"
      }
    },
    "/users/{user_id}/albums/{album_id}": {
      "delete": {
        "summary": "Delete a showcase",
        "description": "This method deletes the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "delete_showcase",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The showcase was deleted."
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't delete the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id"
      },
      "get": {
        "summary": "Get a specific showcase",
        "description": "This method returns the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The showcase was returned.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id"
      },
      "patch": {
        "summary": "Edit a showcase",
        "description": "This method edits the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "edit_showcase",
        "tags": [
          "Showcases\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.album+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "brand_color": {
                    "description": "The hexadecimal color code for the color of the player buttons and showcase controls.",
                    "example": "ff66ee",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the showcase.",
                    "example": "Vimeo holiday videos!",
                    "type": "string"
                  },
                  "domain": {
                    "description": "The custom domain of the showcase.",
                    "example": "mycustomdomain.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "hide_nav": {
                    "description": "Whether to hide Vimeo navigation when displaying the showcase.",
                    "example": true,
                    "type": "boolean"
                  },
                  "hide_upcoming": {
                    "description": "Whether to include the upcoming event in the showcase.",
                    "example": false,
                    "type": "boolean"
                  },
                  "layout": {
                    "description": "The type of layout for presenting the showcase.\n\nOption descriptions:\n * `grid` - The videos appear in a grid.\n * `player` - The videos appear in the player.\n",
                    "enum": [
                      "grid",
                      "player"
                    ],
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the showcase.",
                    "example": "Vimeo Holiday Videos!",
                    "type": "string"
                  },
                  "password": {
                    "description": "The showcase's password. This field is required only when **privacy** is `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "description": "The privacy level of the showcase.\n\nOption descriptions:\n * `anybody` - Anyone can access the showcase, either on Vimeo or through an embed.\n * `embed_only` - The showcase doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one can access the showcase, including the authenticated user.\n * `password` - Only people with the password can access the showcase.\n * `team` - Only members of the authenticated user's team can access the showcase.\n * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.\n",
                    "enum": [
                      "anybody",
                      "embed_only",
                      "nobody",
                      "password",
                      "team",
                      "unlisted"
                    ],
                    "type": "string"
                  },
                  "review_mode": {
                    "description": "Whether showcase videos use the review mode URL.",
                    "example": true,
                    "type": "boolean"
                  },
                  "sort": {
                    "description": "The default sort order of the videos as they appear in the showcase.\n\nOption descriptions:\n * `added_first` - The videos appear according to when they were added to the showcase, with the most recently added first.\n * `added_last` - The videos appear according to when they were added to the showcase, with the most recently added last.\n * `alphabetical` - The videos appear alphabetically by their title.\n * `alphabetical_desc` - The videos appear alphabetically by their title in reverse order.\n * `arranged` - The videos appear as arranged by the owner of the showcase.\n * `comments` - The videos appear according to their number of comments.\n * `likes` - The videos appear according to their number of likes.\n * `newest` - The videos appear in chronological order with the newest first.\n * `oldest` - The videos appear in chronological order with the oldest first.\n * `plays` - The videos appear according to their number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "alphabetical_desc",
                      "arranged",
                      "comments",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "type": "string"
                  },
                  "theme": {
                    "description": "The color theme of the showcase.\n\nOption descriptions:\n * `dark` - The showcase uses the dark theme.\n * `standard` - The showcase uses the standard theme.\n",
                    "enum": [
                      "dark",
                      "standard"
                    ],
                    "type": "string"
                  },
                  "url": {
                    "description": "The custom Vimeo URL of the showcase.",
                    "example": "my-custom-url",
                    "nullable": true,
                    "type": "string"
                  },
                  "use_custom_domain": {
                    "description": "Whether the user has opted for a custom domain for their showcase.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The showcase was edited.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the showcase, the supplied token doesn't have the proper scopes, or the authenticated user can't edit the showcase.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id"
      }
    },
    "/users/{user_id}/albums/{album_id}/custom_thumbnails": {
      "get": {
        "summary": "Get all the custom thumbnails of a showcase",
        "description": "This method returns every custom thumbnail of the specified showcase.",
        "operationId": "get_showcase_custom_thumbs",
        "tags": [
          "Showcases\\Custom showcase thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't view the custon thumbnails from this showcase.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/custom_thumbnails"
      },
      "post": {
        "summary": "Add a custom thumbnail to a showcase",
        "description": "This method adds an uploaded image file as a custom thumbnail for the specified showcase. The image doesn't need to be a still from a showcase video, unlike with the [standard thumbnail method](https://developer.vimeo.com/api/reference/showcases#set_video_as_showcase_thumbnail). The authenticated user must be the owner of the showcase.\n\nFor information on how to upload the thumbnail, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide, and follow the same steps.",
        "operationId": "create_showcase_custom_thumb",
        "tags": [
          "Showcases\\Custom showcase thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The custom thumbnail was added to the showcase.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add custom thumbnails to this showcase.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums/+album_id/custom_thumbnails"
      }
    },
    "/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}": {
      "delete": {
        "summary": "Delete a custom showcase thumbnail",
        "description": "This method deletes the specified custom thumbnail from its showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "delete_showcase_custom_thumbnail",
        "tags": [
          "Showcases\\Custom showcase thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the custom thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The custom thumbnail was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete this custom thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or it doesn't contain the specified custom thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums/#album_id/custom_thumbnails/!thumbnail_id"
      },
      "get": {
        "summary": "Get a specific custom showcase thumbnail",
        "description": "This method returns a single custom thumbnail of the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_custom_thumbnail",
        "tags": [
          "Showcases\\Custom showcase thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the custom thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom thumbnail was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't view this custom thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or it doesn't contain the specified custom thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/custom_thumbnails/!thumbnail_id"
      },
      "patch": {
        "summary": "Replace a custom showcase thumbnail",
        "description": "This method replaces the specified custom showcase thumbnail with a new image file. The authenticated user must be the owner of the showcase.\n\nFor information on how to upload the thumbnail, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.",
        "operationId": "replace_showcase_custom_thumb",
        "tags": [
          "Showcases\\Custom showcase thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the custom thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether to make this image the active custom showcase thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The custom thumbnail was replaced.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't replace this custom thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or it doesn't contain the specified custom thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums/#album_id/custom_thumbnails/!thumbnail_id"
      }
    },
    "/users/{user_id}/albums/{album_id}/logos": {
      "get": {
        "summary": "Get all the custom logos of a showcase",
        "description": "This method returns every custom logo of the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_logos",
        "tags": [
          "Showcases\\Custom showcase logos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom logos were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/logos"
      },
      "post": {
        "summary": "Add a custom logo to a showcase",
        "description": "This method adds an image file as a custom logo to the specified showcase. The authenticated user must be the owner of the showcase.\n\nFor information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.",
        "operationId": "create_showcase_logo",
        "tags": [
          "Showcases\\Custom showcase logos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The logo was added to the showcase.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add custom logos to this showcase.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums/+album_id/logos"
      }
    },
    "/users/{user_id}/albums/{album_id}/logos/{logo_id}": {
      "delete": {
        "summary": "Delete a custom showcase logo",
        "description": "This method deletes the specified custom logo from its showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "delete_showcase_logo",
        "tags": [
          "Showcases\\Custom showcase logos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The custom logo was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete this custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or it doesn't contain the specified custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums/#album_id/logos/!logo_id"
      },
      "get": {
        "summary": "Get a specific custom showcase logo",
        "description": "This method returns a single custom logo of the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_logo",
        "tags": [
          "Showcases\\Custom showcase logos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom logo was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't access this custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or it doesn't contain the specified custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/logos/!logo_id"
      },
      "patch": {
        "summary": "Replace a custom showcase logo",
        "description": "This method replaces the specified custom showcase logo with a new image file. The authenticated user must be the owner of the showcase.\n\nFor information on how to upload the logo, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails) guide.",
        "operationId": "replace_showcase_logo",
        "tags": [
          "Showcases\\Custom showcase logos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether to make this image the active showcase logo.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The custom logo was replaced.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't replace this custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or it doesn't contain the specified custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/albums/#album_id/logos/!logo_id"
      }
    },
    "/users/{user_id}/albums/{album_id}/videos": {
      "get": {
        "summary": "Get all the videos in a showcase",
        "description": "This method returns every video in the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_videos",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page containing the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Filter the results by the **embeddable** attribute.\n * `playable` - Filter the results by the **playable** attribute.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable",
                "playable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The password of the showcase.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string",
              "example": "hunter1"
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `default` - Sort the results by the default method.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their manual order.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "default",
                "duration",
                "likes",
                "manual",
                "modified_time",
                "plays"
              ]
            }
          },
          {
            "description": "Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name.",
            "in": "query",
            "name": "weak_search",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos"
      },
      "put": {
        "summary": "Replace all the videos in a showcase",
        "description": "This method replaces all the videos in the specified showcase with a new set of one or more videos. The authenticated user must be the owner of the showcase.",
        "operationId": "replace_videos_in_showcase",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "A comma-separated list of video URIs corresponding to the videos to add.",
                    "example": "/videos/258684937,/videos/273576296",
                    "type": "string"
                  }
                },
                "required": [
                  "videos"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The videos were replaced."
          },
          "403": {
            "description": "The authenticated user can't add videos to the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos"
      }
    },
    "/users/{user_id}/albums/{album_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a showcase",
        "description": "This method removes the specified video from its showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "remove_video_from_showcase",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't remove videos from the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos/{video_id}"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos/!video_id"
      },
      "get": {
        "summary": "Get a specific video in a showcase",
        "description": "This method returns a single video belonging to the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "get_showcase_video",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3706071
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          },
          {
            "description": "The password of the showcase.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string",
              "example": "hunter1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists, or the video doesn't belong to it.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos/{video_id}"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos/!video_id"
      },
      "put": {
        "summary": "Add a specific video to a showcase",
        "description": "This method adds a single video to the specified showcase. The authenticated user must be the owner of the showcase.",
        "operationId": "add_video_to_showcase",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "403": {
            "description": "The supplied token doesn't have the proper scopes, or the authenticated user can't add videos to the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such showcase exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos/{video_id}"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos/!video_id"
      }
    },
    "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail": {
      "post": {
        "summary": "Create a thumbnail for a showcase from a showcase video",
        "description": "This method creates a thumbnail image for a showcase from the specified frame of a showcase video. The authenticated user must be the owner of the showcase.",
        "operationId": "set_video_as_showcase_thumbnail",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time_code": {
                    "description": "The time in seconds of the video frame to use as the thumbnail image.",
                    "example": 300,
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The showcase thumbnail was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3429: The authenticated user can't create a thumbnail for this showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such showcase, user, or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos/!video_id/set_album_thumbnail"
      }
    },
    "/users/{user_id}/albums/{album_id}/videos/{video_id}/set_featured_video": {
      "patch": {
        "summary": "Set the featured video of a showcase",
        "description": "This method sets the featured video of the specified showcase. The authenticated user must be the owner of the showcase, and the featured video must belong to it.",
        "operationId": "set_video_as_showcase_featured",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the showcase.",
            "in": "path",
            "name": "album_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 196367152
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video is now the featured video of the showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/album"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3429: The authenticated user can't set the featured video of this showcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such showcase, user, or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": {
          "1": "/me/albums/{album_id}/videos/{video_id}/set_featured_video"
        },
        "x-mill-path-template": "/users/+user_id/albums/#album_id/videos/!video_id/set_featured_video"
      }
    },
    "/users/{user_id}/analytics": {
      "get": {
        "summary": "Get video analytics for the authenticated user",
        "description": "This method returns video analytics for the authenticated user's Vimeo account.",
        "operationId": "get_user_analytics",
        "tags": [
          "Users\\Analytics"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 123456
            }
          },
          {
            "description": "The data dimension by which to group the results.\n\nOption descriptions:\n * `browser` - Group the results by browser.\n * `city` - Group the results by city.\n * `country` - Group the results by country.\n * `device_type` - Group the results by device type.\n * `embed_domain` - Group the results by embed domain.\n * `embed_domain_path` - Group the results by embed domain path.\n * `os` - Group the results by operating system.\n * `region` - Group the results by region.\n * `streaming_type` - Group the results by streaming type.\n * `total` - Group the results by the time range provided.\n * `video` - Group the results by video.\n",
            "in": "query",
            "name": "dimension",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "browser",
                "city",
                "country",
                "device_type",
                "embed_domain",
                "embed_domain_path",
                "os",
                "region",
                "streaming_type",
                "total",
                "video"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of video, folder, or event URIs to filter.",
            "in": "query",
            "name": "filter_content",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/users/12345/projects/1233456,/video/7890123,/users/13243/projects/123"
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of country codes in ISO-3166 format to filter on.",
            "in": "query",
            "name": "filter_countries",
            "required": false,
            "schema": {
              "type": "array",
              "example": "UK,US,IN",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of device types to filter on.",
            "in": "query",
            "name": "filter_device_types",
            "required": false,
            "schema": {
              "type": "array",
              "example": "android,ios",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of domain names to filter on.",
            "in": "query",
            "name": "filter_embed_domains",
            "required": false,
            "schema": {
              "type": "array",
              "example": "abc.com,xyz.com",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of combined country and region codes in ISO-3166 format to filter on.",
            "in": "query",
            "name": "filter_regions",
            "required": false,
            "schema": {
              "type": "array",
              "example": "US-NJ,US-NY,IN-GJ,GB-WLS",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "A comma-separated list of streaming types to filter on.",
            "in": "query",
            "name": "filter_streaming_types",
            "required": false,
            "schema": {
              "type": "array",
              "example": "live,video",
              "items": {
                "type": "string"
              }
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The start date of the range of results in ISO 8601 format.",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2021-05-30T00:00:00+00:00"
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The maximum number of items returned from the request, up to a limit of 1000 items. The default value is `50`.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 50
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `comments` - Sort the results by the number of comments.\n * `country` - Sort the results by country.\n * `default` - Sort the results by the values of both the **dimension** and **time_interval** fields.\n * `device_type` - Sort the results by device type.\n * `downloads` - Sort the results by the number of downloads.\n * `drm_licenses_used` - Sort the results by the number of DRM licenses used. _This option is available only to users with the DRM feature._\n * `embed_domain` - Sort the results by embed domain.\n * `finishes` - Sort the results by the number of complete plays.\n * `impressions` - Sort the results by the number of impressions.\n * `like` - Sort the results by the number of likes.\n * `mean_percent_watched` - Sort the results by mean percentage played.\n * `mean_seconds_watched` - Sort the results by mean seconds played.\n * `third_party_impressions` - Sort the results by the number of impressions from all non-Vimeo players.\n * `time` - Sort the results by the value of the **start_date** field. This option is available only when the value of **time_interval** isn't `none`.\n * `total_seconds_watched` - Sort the results by total seconds played.\n * `unique_impressions` - Sort the results by unique impressions.\n * `unique_viewers` - Sort the results by unique viewers.\n * `video` - Sort the results by video ID.\n * `views` - Sort the results by the number of views.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "comments",
                "country",
                "default",
                "device_type",
                "downloads",
                "drm_licenses_used",
                "embed_domain",
                "finishes",
                "impressions",
                "like",
                "mean_percent_watched",
                "mean_seconds_watched",
                "third_party_impressions",
                "time",
                "total_seconds_watched",
                "unique_impressions",
                "unique_viewers",
                "video",
                "views"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The interval by which to aggregate the data according to the specified data dimension. The default value is `none`. This parameter works only when the value of **dimension** is `video`, `country`, `embed_domain`, `device_type`, or `streaming_type`.\n\nOption descriptions:\n * `day` - Aggregate the results by day according to the specified data dimension.\n * `month` - Aggregate the results by month according to the specified data dimension.\n * `none` - The results are not aggregated by time interval.\n * `week` - Aggregate the results by week according to the specified data dimension.\n * `year` - Aggregate the results by year according to the specified data dimension.\n",
            "in": "query",
            "name": "time_interval",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "month",
                "none",
                "week",
                "year"
              ]
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The end date of the range of results in ISO 8601 format.",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2021-06-30T23:59:59+00:00"
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The analytics were returned.",
            "content": {
              "application/vnd.vimeo.analytics+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/analytics"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "stats"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/analytics",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_ANALYTICS_API"
        ],
        "x-mill-visibility-private": true
      }
    },
    "/users/{user_id}/appearances": {
      "get": {
        "summary": "Get all the videos in which the user appears",
        "description": "This method returns all the videos in which the authenticated user has a credited appearance.",
        "operationId": "get_appearances",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/appearances"
        ],
        "x-mill-path-template": "/users/+user_id/appearances"
      }
    },
    "/users/{user_id}/categories": {
      "get": {
        "summary": "Get all the categories that the user follows",
        "description": "This method returns every category that the authenticated user follows.",
        "operationId": "get_category_subscriptions",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by name.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The categories were returned.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: Only the authenticated user can access this information.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/categories"
        ],
        "x-mill-path-template": "/users/+user_id/categories"
      }
    },
    "/users/{user_id}/categories/{category}": {
      "delete": {
        "summary": "Cause the user to stop following a category",
        "description": "This method causes the authenticated user to stop following the specified category.",
        "operationId": "unsubscribe_from_category",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user has stopped following the category."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/categories/{category}"
        ],
        "x-mill-path-template": "/users/+user_id/categories/+category"
      },
      "get": {
        "summary": "Check if the user follows a category",
        "description": "This method determines whether the authenticated user follows the specified category.",
        "operationId": "check_if_user_subscribed_to_category",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string",
              "example": "animation"
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is following the category."
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/categories/{category}"
        ],
        "x-mill-path-template": "/users/+user_id/categories/+category"
      },
      "put": {
        "summary": "Cause the user to follow a specific category",
        "description": "This method causes the authenticated user to follow the specified category.",
        "operationId": "subscribe_to_category",
        "tags": [
          "Categories\\Users"
        ],
        "parameters": [
          {
            "description": "The name of the category.",
            "in": "path",
            "name": "category",
            "required": true,
            "schema": {
              "type": "number",
              "example": 0
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is following the category."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/categories/{category}"
        ],
        "x-mill-path-template": "/users/+user_id/categories/+category"
      }
    },
    "/users/{user_id}/channels": {
      "get": {
        "summary": "Get all the channels to which a user subscribes",
        "description": "This method returns all the channels to which the specified user subscribes.",
        "operationId": "get_channel_subscriptions",
        "tags": [
          "Channels\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated channels.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "moderated"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `followers` - Sort the results by number of followers.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "followers",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "No channel has been followed since the given `If-Modified-Since` header."
          },
          "200": {
            "description": "The channels were returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/channel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/channels"
        ],
        "x-mill-path-template": "/users/+user_id/channels"
      }
    },
    "/users/{user_id}/channels/{channel_id}": {
      "delete": {
        "summary": "Unsubscribe the user from a specific channel",
        "description": "This method unsubscribes the authenticated user from the specified channel.",
        "operationId": "unsubscribe_from_channel",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is unsubscribed from the channel."
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/channels/{channel_id}"
        ],
        "x-mill-path-template": "/users/+user_id/channels/+channel_id"
      },
      "get": {
        "summary": "Check if a user follows a channel",
        "description": "This method determines whether the specified user is a follower of a particular channel.",
        "operationId": "check_if_user_subscribed_to_channel",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user follows the channel."
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/channels/{channel_id}"
        ],
        "x-mill-path-template": "/users/+user_id/channels/+channel_id"
      },
      "put": {
        "summary": "Subscribe the user to a specific channel",
        "description": "This method subscribes the authenticated user to the specified channel.",
        "operationId": "subscribe_to_channel",
        "tags": [
          "Channels\\Subscriptions and subscribers"
        ],
        "parameters": [
          {
            "description": "The ID of the channel.",
            "in": "path",
            "name": "channel_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 927
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user is subscribed to the channel."
          },
          "404": {
            "description": "No such channel exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/channels/{channel_id}"
        ],
        "x-mill-path-template": "/users/+user_id/channels/+channel_id"
      }
    },
    "/users/{user_id}/customlogos": {
      "get": {
        "summary": "Get all the custom logos that belong to the user",
        "description": "This method returns every custom logo that belongs to the authenticated user or team owner.",
        "operationId": "get_custom_logos",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The pixel dimensions of the image in `{width}x{height}` format. For more information, see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#using-the-sizes-parameter) guide.",
            "in": "query",
            "name": "sizes",
            "required": false,
            "schema": {
              "type": "string",
              "example": "100x75"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom logos were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't access the custom logos.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/customlogos"
        ],
        "x-mill-path-template": "/users/+user_id/customlogos"
      },
      "post": {
        "summary": "Add a custom user logo",
        "description": "This method adds a custom logo representing the authenticated user for display in the embedded player. Be sure to use this method in the context of the multi-step upload procedure described in our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail) guide. This method represents Step 2 of the procedure.",
        "operationId": "create_custom_logo",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The custom logo was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add the custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/customlogos"
        ],
        "x-mill-path-template": "/users/+user_id/customlogos"
      }
    },
    "/users/{user_id}/customlogos/{logo_id}": {
      "delete": {
        "summary": "Delete a custom user logo",
        "description": "This method deletes the specified custom logo belonging to the authenticated user.",
        "operationId": "delete_custom_logo",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The custom logo was deleted."
          },
          "403": {
            "description": "The authenticated user can't access the custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/customlogos/{logo_id}"
        ],
        "x-mill-path-template": "/users/+user_id/customlogos/#logo_id"
      },
      "get": {
        "summary": "Get a specific custom user logo",
        "description": "This method returns a single custom logo belonging to the authenticated user.",
        "operationId": "get_custom_logo",
        "tags": [
          "Embed Presets\\Custom logos"
        ],
        "parameters": [
          {
            "description": "The ID of the custom logo.",
            "in": "path",
            "name": "logo_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom logo was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't access the custom logo.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/customlogos/{logo_id}"
        ],
        "x-mill-path-template": "/users/+user_id/customlogos/#logo_id"
      }
    },
    "/users/{user_id}/destinations": {
      "get": {
        "summary": "Get all available event destinations for the user to stream to",
        "description": "This method returns every available event destination for the authenticated user to stream to.",
        "operationId": "get_available_destinations",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event destinations were returned."
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't get the available destinations.\n* Error code 3422: The authenticated user can't live simulcast.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/destinations"
        ],
        "x-mill-path-template": "/users/+user_id/destinations"
      }
    },
    "/users/{user_id}/feed": {
      "get": {
        "summary": "Get all the videos in the user's feed",
        "description": "This method returns every video in the authenticated user's feed.",
        "operationId": "get_feed",
        "tags": [
          "Users\\Feeds"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The pagination offset. We recommend that you use the pagination links in the feed response instead of working with this value directly. For more details, see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter).",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "string",
              "example": "280"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The feed type.\n\nOption descriptions:\n * `appears` - Videos in which the user appears.\n * `category_featured` - Featured videos.\n * `channel` - Channel videos.\n * `facebook_feed` - Videos from the user's Facebook feed.\n * `following` - Videos from accounts that the user follows.\n * `group` - Group videos.\n * `likes` - Liked videos.\n * `ondemand_publish` - On Demand videos.\n * `share` - Shared videos.\n * `tagged_with` - Tagged videos.\n * `twitter_timeline` - Videos from the user's Twitter timeline.\n * `uploads` - Uploaded videos.\n",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "appears",
                "category_featured",
                "channel",
                "facebook_feed",
                "following",
                "group",
                "likes",
                "ondemand_publish",
                "share",
                "tagged_with",
                "twitter_timeline",
                "uploads"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.activity+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/activity-3-1"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.activity+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/feed"
        ],
        "x-mill-path-template": "/users/+user_id/feed"
      }
    },
    "/users/{user_id}/followers": {
      "get": {
        "summary": "Get all the followers of the user",
        "description": "This method returns every follower of the authenticated user.",
        "operationId": "get_followers",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's followers were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/followers"
        ],
        "x-mill-path-template": "/users/+user_id/followers"
      }
    },
    "/users/{user_id}/following": {
      "get": {
        "summary": "Get all the users who are followed by the user",
        "description": "This method returns every user who is followed by the authenticated user.",
        "operationId": "get_user_following",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `online` - Return users who are currently online.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "online"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The followed users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/following"
        ],
        "x-mill-path-template": "/users/+user_id/following"
      },
      "post": {
        "summary": "Follow a list of users",
        "description": "This method causes the authenticated user to become a follower of multiple users. In the body of the request, specify the list of users to follow as\nan array of URIs, where `user01_id`, `user02_id`, `user03_id`, and so on, are the user IDs of the users in question:\n\n```\n{\n [\n     {\"uri\" : \"/users/{user01_id}\"},\n     {\"uri\" : \"/users/{user02_id}\"},\n     {\"uri\" : \"/users/{user03_id}\"}\n ]\n}\n```",
        "operationId": "follow_users",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "users": {
                    "description": "An array of user IDs for the authenticated user to follow.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "users"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The users were followed."
          },
          "401": {
            "description": "Error code 8000: The user access token is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3417: The authenticated user can't follow other users.\n* Error code 3438: The authenticated user can't follow other users because an email verification check hasn't been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2205: The request body is empty, the users array is invalid, or the list of users doesn't contain URIs.\n* Error code 2900: A user in the list doesn't exist.\n* Error code 2901: The list contains more than 100 users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4005: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "429": {
            "description": "Error code 9006: The authenticated user is rate-limited from following other users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/following"
        ],
        "x-mill-path-template": "/users/+user_id/following"
      }
    },
    "/users/{user_id}/following/{follow_user_id}": {
      "delete": {
        "summary": "Unfollow a user",
        "description": "This method causes the authenticated user to stop following another user.",
        "operationId": "unfollow_user",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user to unfollow.",
            "in": "path",
            "name": "follow_user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3766357
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was unfollowed."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/following/{follow_user_id}"
        ],
        "x-mill-path-template": "/users/+user_id/following/+follow_user_id"
      },
      "get": {
        "summary": "Check if the user is following another user",
        "description": "This method determines whether the authenticated user is a follower of the specified user.",
        "operationId": "check_if_user_is_following",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user to follow.",
            "in": "path",
            "name": "follow_user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3766357
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The authenticated user follows the specified user."
          },
          "404": {
            "description": "The authenticated user doesn't follow the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/following/{follow_user_id}"
        ],
        "x-mill-path-template": "/users/+user_id/following/+follow_user_id"
      },
      "put": {
        "summary": "Follow a specific user",
        "description": "This method causes the authenticated user to become the follower of the specified user.",
        "operationId": "follow_user",
        "tags": [
          "Users\\Followers"
        ],
        "parameters": [
          {
            "description": "The ID of the user to follow.",
            "in": "path",
            "name": "follow_user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3766357
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was followed."
          },
          "403": {
            "description": "* The authenticated user can't follow other users.\n* Error code 3438: The authenticated user can't follow other users because an email verification check hasn't been completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/following/{follow_user_id}"
        ],
        "x-mill-path-template": "/users/+user_id/following/+follow_user_id"
      }
    },
    "/users/{user_id}/groups": {
      "get": {
        "summary": "Get all the groups that the user has joined",
        "description": "This method returns every group to which the authenticated user belongs.",
        "operationId": "get_user_groups",
        "tags": [
          "Groups\\Users"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `moderated` - Return moderated groups.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "moderated"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `members` - Sort the results by number of members.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "members",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The groups were returned.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.group+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/groups"
        ],
        "x-mill-path-template": "/users/+user_id/groups"
      }
    },
    "/users/{user_id}/groups/{group_id}": {
      "delete": {
        "summary": "Remove the user from a group",
        "description": "This method removes the authenticated user from the specified group. The authenticated user can't be the owner of the group; assign a new owner through a PATCH request first.",
        "operationId": "leave_group",
        "tags": [
          "Groups\\Subscriptions"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was removed from the group."
          },
          "403": {
            "description": "The authenticated user can't leave the group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/groups/{group_id}"
        ],
        "x-mill-path-template": "/users/+user_id/groups/+group_id"
      },
      "put": {
        "summary": "Add the user to a group",
        "description": "This method adds the authenticated user to the specified group.",
        "operationId": "join_group",
        "tags": [
          "Groups\\Subscriptions"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user joined the group."
          },
          "403": {
            "description": "The authenticated user can't join the group. Possible reasons are that the group isn't public or that its privacy setting is `members`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/groups/{group_id}"
        ],
        "x-mill-path-template": "/users/+user_id/groups/+group_id"
      },
      "get": {
        "summary": "Check if a user has joined a group",
        "description": "This method determines whether the authenticated user belongs to the specified group.",
        "operationId": "check_if_user_joined_group",
        "tags": [
          "Groups\\Users"
        ],
        "parameters": [
          {
            "description": "The ID of the group.",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1108
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user belongs to the group."
          },
          "404": {
            "description": "* No such group exists.\n* The authenticated user isn't a member of the group.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/groups/{group_id}"
        ],
        "x-mill-path-template": "/users/+user_id/groups/+group_id"
      }
    },
    "/users/{user_id}/likes": {
      "get": {
        "summary": "Get all the videos that the user has liked",
        "description": "This method returns every video that the authenticated user has liked.",
        "operationId": "get_likes",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/likes"
        ],
        "x-mill-path-template": "/users/+user_id/likes"
      }
    },
    "/users/{user_id}/likes/{video_id}": {
      "delete": {
        "summary": "Cause the user to unlike a video",
        "description": "This method causes the authenticated user to unlike the specified video.",
        "operationId": "unlike_video",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was unliked."
          },
          "403": {
            "description": "The authenticated user can't like videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/likes/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/likes/!video_id"
      },
      "get": {
        "summary": "Check if the user has liked a video",
        "description": "This method checks if the authenticated user has liked the specified video.",
        "operationId": "check_if_user_liked_video",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user has liked the video."
          },
          "404": {
            "description": "The user hasn't liked the video.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/likes/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/likes/!video_id"
      },
      "put": {
        "summary": "Cause the user to like a video",
        "description": "This method causes the authenticated user to like the specified video. The user can't like their own video.",
        "operationId": "like_video",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was liked."
          },
          "403": {
            "description": "The authenticated user can't like videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "The authenticated user owns the video and can't like it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/likes/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/likes/!video_id"
      }
    },
    "/users/{user_id}/live_events": {
      "delete": {
        "summary": "Delete a list of events",
        "description": "This method deletes multiple events belonging to the authenticated user.",
        "operationId": "delete_live_events",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "description": "The user’s password.",
                    "example": "hunter1",
                    "type": "string"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {},
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events",
          "/me/live_events"
        ],
        "x-mill-path-template": "/users/+user_id/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get all the events that belong to the user",
        "description": "The method returns every event belonging to the authenticated user.",
        "operationId": "get_live_events",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `not_in_folder` - Show only events that aren't in a folder.\n * `not_in_showcase` - Show only events that aren't in a showcase.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "not_in_folder",
                "not_in_showcase"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          },
          {
            "description": "The type of event to return.\n\nOption descriptions:\n * `all` - Return all events.\n * `one_time` - Return one-time events only.\n * `recurring` - Return recurring events only.\n",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "example": "recurring",
              "enum": [
                "all",
                "one_time",
                "recurring"
              ]
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.event+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recurring_event_type": {
                    "description": "The type of recurring event to return. If no value is specified, the value `default` is used.\n\nOption descriptions:\n * `all` - Return all recurring events.\n * `default` - Return only default recurring events.\n * `venue` - Return only recurring events that are venues.\n",
                    "enum": [
                      "all",
                      "default",
                      "venue"
                    ],
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The events were returned.",
            "content": {
              "application/vnd.vimeo.live.event+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/live_events",
          "/me/live_events"
        ],
        "x-mill-path-template": "/users/+user_id/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event",
        "description": "This method creates a new event for the authenticated user.",
        "operationId": "create_live_event",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allow_share_link": {
                    "description": "Whether the share link is usable.",
                    "type": "boolean"
                  },
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords that improve the quality of the automated closed captions.",
                    "example": "commonly-used words,phrases,technical terms",
                    "type": "string"
                  },
                  "auto_cc_lang": {
                    "description": "The language in which the automated closed captions appear.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string"
                  },
                  "automatically_title_stream": {
                    "description": "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "chat_enabled": {
                    "description": "Whether to display the live chat client on the Vimeo event page.",
                    "example": true,
                    "type": "boolean"
                  },
                  "content_rating": {
                    "description": "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "disable_auto_archiving": {
                    "description": "Whether the feature for disabling auto-archiving is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "dvr": {
                    "description": "Whether the DVR feature is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "embed": {
                    "description": "The embed settings of the event and the videos generated by streaming to this event.",
                    "properties": {
                      "autoplay": {
                        "description": "Whether playback starts automatically on load.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The hexadecimal color code for the main color of the embed player.",
                        "example": "#00adef",
                        "type": "string"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the custom logo on the embed player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether to show the custom logo persistently (`true`) or hide it with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embed player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loop": {
                        "description": "Whether the playlist should start from the beginning again after reaching the end of the last video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "playlist": {
                        "description": "Whether to show the playlist controls on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Whether to show the event schedule on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "show_latest_archived_clip": {
                        "description": "Whether to show the latest archived video in the embed player when off-air.",
                        "example": true,
                        "type": "boolean"
                      },
                      "use_color": {
                        "description": "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "event_type": {
                    "description": "The type of event.\n\nOption descriptions:\n * `default` - The event type is a regular recurring event.\n * `venue` - The event type is a venue.\n",
                    "enum": [
                      "default",
                      "venue"
                    ],
                    "example": "default",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "folder_uri": {
                    "description": "The URI of the event's folder.",
                    "example": "/users/67890/projects/12345",
                    "type": "string"
                  },
                  "interaction_tools_settings": {
                    "description": "The settings for the interaction tools.",
                    "properties": {
                      "is_anonymous_questions_disabled": {
                        "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      },
                      "is_qna_moderated": {
                        "description": "Whether the Q&A is moderated for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      }
                    },
                    "type": "object",
                    "x-mill-visibility-private": true
                  },
                  "low_latency": {
                    "description": "Whether the event has low-latency streaming enabled.",
                    "type": "boolean"
                  },
                  "playlist_sort": {
                    "description": "The order in which the videos of the event appear within the event's playlist.\n\nOption descriptions:\n * `added_first` - The most recently added videos appear first.\n * `added_last` - The most recently added videos appear last.\n * `alphabetical` - The videos appear in alphabetical order.\n * `arranged` - The videos appear in the order in which the user has arranged them.\n * `comments` - The videos appear in order of number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear in order of number of likes.\n * `newest` - The newest videos appear first.\n * `oldest` - The oldest videos appear first.\n * `plays` - The videos appear in order of number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "arranged",
                      "comments",
                      "duration",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "example": "added_first",
                    "type": "string"
                  },
                  "rtmp_preview": {
                    "description": "Whether the event has RTMP preview enabled.",
                    "type": "boolean"
                  },
                  "schedule": {
                    "description": "Information about the time or times that the event is expected to be live.",
                    "properties": {
                      "daily_time": {
                        "description": "The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.",
                        "example": "14:00:00Z",
                        "type": "string"
                      },
                      "type": {
                        "description": "How often the event is expected to be live.\n\nOption descriptions:\n * `single` - The event is live one time only.\n * `weekly` - The event is live on a weekly basis.\n",
                        "enum": [
                          "single",
                          "weekly"
                        ],
                        "example": "weekly",
                        "type": "string"
                      },
                      "weekdays": {
                        "description": "A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "scheduled_playback": {
                    "description": "Whether the scheduled playback feature is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "stream_description": {
                    "description": "The description of the next video to be streamed to the event.",
                    "example": "In this episode, we interview a surprise guest",
                    "type": "string"
                  },
                  "stream_embed": {
                    "properties": {
                      "embed": {
                        "description": "The embed permission level for the event.\n\nOption descriptions:\n * `private` - Only the user can embed the event.\n * `public` - Anyone can embed the event.\n * `whitelist` - Only specified users can embed the event.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "public",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_password": {
                    "description": "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "stream_privacy": {
                    "description": "The privacy settings of the event.",
                    "properties": {
                      "view": {
                        "description": "The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the event.\n * `unlisted` - Only those with the private link can access the event.\n",
                        "enum": [
                          "anybody",
                          "embed_only",
                          "nobody",
                          "password",
                          "unlisted"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_title": {
                    "description": "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.",
                    "example": "Special Feature",
                    "type": "string"
                  },
                  "streaming_auto_stop": {
                    "description": "Whether the feature for automatically stopping the live stream is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "time_zone": {
                    "description": "The time zone used in resolving the timestamps that are included in automatically generated video titles.",
                    "example": "America/New_York",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.",
                    "example": "Live Content",
                    "type": "string"
                  },
                  "unlimited_duration": {
                    "description": "Whether the feature for 24/7 streaming is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "venue_uuid": {
                    "description": "The venue UUID to associate with the event.",
                    "example": "abc345y8-b266-4e30-bfce-db1d0eush49f",
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was created.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "* Error code 3200: The authenticated user can't create an event.\n* Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3422: The authenticated user can't create an event.\n* Error code 3439: The authenticated user can't edit the content rating of an event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events",
          "/me/live_events"
        ],
        "x-mill-path-template": "/users/+user_id/live_events",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}": {
      "patch": {
        "summary": "Update an event",
        "description": "This method updates an event belonging to the authenticated user.",
        "operationId": "update_live_event",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.live.event.recurring+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": false,
                    "type": "boolean"
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.",
                    "type": "string"
                  },
                  "auto_cc_language": {
                    "description": "The language of the automated closed captions.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string"
                  },
                  "automatically_title_stream": {
                    "description": "Whether the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
                    "example": true,
                    "type": "boolean"
                  },
                  "chat_enabled": {
                    "description": "Whether to display the live chat client on the Vimeo event page.",
                    "example": true,
                    "type": "boolean"
                  },
                  "content_rating": {
                    "description": "A list of values describing the content in this event. To return the list of all possible content rating values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "disable_auto_archiving": {
                    "description": "Whether the feature for disabling auto-archiving is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "dvr": {
                    "description": "Whether the DVR feature is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "embed": {
                    "description": "The embed settings of the event and the videos generated by streaming to this event.",
                    "properties": {
                      "autoplay": {
                        "description": "Whether playback starts automatically on load.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The hexadecimal color code for the main color of the embed player.",
                        "example": "#00adef",
                        "type": "string"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the custom logo on the embed player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether to show the custom logo persistently (`true`) or hide it with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embed player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loop": {
                        "description": "Whether the playlist should start from the beginning again after reaching the end of the last video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "playlist": {
                        "description": "Whether to show the playlist controls on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "schedule": {
                        "description": "Whether to show the event schedule on the embed player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "use_color": {
                        "description": "Whether the embed player should use (`true`) or ignore (`false`) the **embed.color** value.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "interaction_tools_settings": {
                    "description": "The settings for the interaction tools.",
                    "properties": {
                      "is_anonymous_questions_disabled": {
                        "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      },
                      "is_qna_moderated": {
                        "description": "Whether the Q&A is moderated for the interaction tools settings.",
                        "example": true,
                        "type": "boolean",
                        "x-mill-visibility-private": true
                      }
                    },
                    "type": "object",
                    "x-mill-visibility-private": true
                  },
                  "playlist_sort": {
                    "description": "The order in which the videos of the event appear within the event's playlist.\n\nOption descriptions:\n * `added_first` - The most recently added videos appear first.\n * `added_last` - The most recently added videos appear last.\n * `alphabetical` - The videos appear in alphabetical order.\n * `arranged` - The videos appear in the order in which the user has arranged them.\n * `comments` - The videos appear in order of number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear in order of number of likes.\n * `newest` - The newest videos appear first.\n * `oldest` - The oldest videos appear first.\n * `plays` - The videos appear in order of number of plays.\n",
                    "enum": [
                      "added_first",
                      "added_last",
                      "alphabetical",
                      "arranged",
                      "comments",
                      "duration",
                      "likes",
                      "newest",
                      "oldest",
                      "plays"
                    ],
                    "example": "added_first",
                    "type": "string"
                  },
                  "schedule": {
                    "description": "Information about the time or times that the event is expected to be live.",
                    "properties": {
                      "daily_time": {
                        "description": "The time in ISO 8601 format when the event is expected to be live, with the zero UTC offset `Z`. This parameter is required when **schedule.type** is `weekly`.",
                        "example": "14:00:00Z",
                        "type": "string"
                      },
                      "type": {
                        "description": "How often the event is expected to be live.\n\nOption descriptions:\n * `single` - The event is live one time only.\n * `weekly` - The event is live on a weekly basis.\n",
                        "enum": [
                          "single",
                          "weekly"
                        ],
                        "example": "weekly",
                        "type": "string"
                      },
                      "weekdays": {
                        "description": "A non-empty array of weekdays on which the event is expected to be live. Weekdays can range from 1 to 7, where 1 is Monday and 7 is Sunday. This parameter is required when **schedule.type** is `weekly`.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "scheduled_playback": {
                    "description": "Whether the scheduled playback feature is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "stream_description": {
                    "description": "The description of the next video to be streamed to the event.",
                    "example": "In this episode, we interview a surprise guest",
                    "type": "string"
                  },
                  "stream_embed": {
                    "properties": {
                      "embed": {
                        "description": "The embed permission level for the event.\n\nOption descriptions:\n * `private` - Only the user can embed the event.\n * `public` - Anyone can embed the event.\n * `whitelist` - Only specified users can embed the event.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "public",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_mode": {
                    "description": "The stream mode of the event.\n\nOption descriptions:\n * `live` - The stream is live playback.\n * `record` - The stream is in record mode.\n * `simulive` - The stream is scheduled media playback.\n",
                    "enum": [
                      "live",
                      "record",
                      "simulive"
                    ],
                    "example": "live",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "stream_password": {
                    "description": "The password when **stream_privacy.view** is `password`. Anyone with the password can view the videos generated by streaming to the event.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "stream_privacy": {
                    "description": "The privacy settings of the event.",
                    "properties": {
                      "view": {
                        "description": "The initial privacy of the videos generated by streaming to the event as well as the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the event. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The event doesn't appear on Vimeo, but it can be embedded on other sites.\n * `nobody` - No one except the owner can access the event. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the event.\n * `unlisted` - Only those with the private link can access the event.\n",
                        "enum": [
                          "anybody",
                          "embed_only",
                          "nobody",
                          "password",
                          "unlisted"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "stream_title": {
                    "description": "The title of the next video to be streamed to the event. This parameter is required when **automatically_title_stream** is `false`.",
                    "example": "Special Feature",
                    "type": "string"
                  },
                  "streaming_auto_stop": {
                    "description": "Whether the featuring for automatically stopping the live stream is enabled.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "time_zone": {
                    "description": "The time zone used in resolving the timestamps that are included in automatically generated video titles.",
                    "example": "America/New_York",
                    "type": "string"
                  },
                  "title": {
                    "description": "The title of the event. If **automatically_title_stream** is `true`, this value is the base title for videos created by streaming to this event.",
                    "example": "Live Content",
                    "type": "string"
                  },
                  "unlimited_duration": {
                    "description": "Whether the feature for 24/7 streaming is enabled.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was updated.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to update the event.\n* Error code 3422: The authenticated user can't update the event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}",
          "/me/live_events/{live_event_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/!live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "delete": {
        "summary": "Delete a specific event",
        "description": "This method deletes a single event belonging to the authenticated user.",
        "operationId": "delete_live_event",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The event was deleted."
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to delete the event.\n* Error code 3422: The authenticated user can't delete the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}",
          "/me/live_events/{live_event_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get a specific event",
        "description": "This method returns a single event belonging to the authenticated user.",
        "operationId": "get_live_event",
        "tags": [
          "Live\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The password of the event when the privacy is set to `password`.",
            "in": "query",
            "name": "password",
            "required": false,
            "schema": {
              "type": "string"
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The event was returned.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.live.event.recurring+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}",
          "/me/live_events/{live_event_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/activate": {
      "post": {
        "summary": "Activate an event",
        "description": "This method creates the necessary RTMP links for the specified event. Begin streaming to these links to trigger the event on Vimeo. The authenticated user must be the owner of the event.",
        "operationId": "activate_live_event",
        "tags": [
          "Live\\Event activation"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud_composing_streaming": {
                    "description": "Whether the stream activates from the cloud composer.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "streaming_start_requested": {
                    "description": "Whether the stream activates from the cloud composer.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was activated.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2428: The event has already been activated.\n* Error code 2551: The session can't be activated when the scheduled media playback feature is enabled.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user doesn't have the necessary permissions to stream to the event.\n* Error code 3422: The authenticated user can't activate the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4017: An unexpected error occurred.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "Error code 7701: The service is unavailable.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/activate",
          "/me/live_events/{live_event_id}/activate"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/activate",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/auto_cc": {
      "patch": {
        "summary": "Edit the automated closed captions preference of an event",
        "description": "This method edits the automated closed captions preference for the specified event.",
        "operationId": "edit_live_event_auto_cc",
        "tags": [
          "Live\\Event automated closed captions"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/application/vnd.vimeo.live.auto_cc+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "auto_cc_enabled": {
                    "description": "Whether automated closed captions are enabled for the event.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-visibility-private": true
                  },
                  "auto_cc_keywords": {
                    "description": "A comma-separated list of keywords that improve the quality of the automated closed captions.",
                    "example": "commonly-used words,phrases,technical terms",
                    "type": "string",
                    "x-mill-visibility-private": true
                  },
                  "auto_cc_lang": {
                    "description": "The language in which the automated closed captions appear.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
                    "enum": [
                      "de-DE",
                      "en-US",
                      "es-ES",
                      "fr-FR",
                      "pt-BR"
                    ],
                    "example": "en-US",
                    "type": "string",
                    "x-mill-visibility-private": true
                  }
                },
                "required": [
                  "auto_cc_enabled"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The automated closed captions preference was edited.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-automated-closed-captions"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The payload is invalid.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The user doesn't have permission to edit the closed captions preference for the specified event.\n* Error code 3422: The authenticated user can't edit the closed captions preference for the specified event.\n* Error code 3439: The authenticated user has reached the automated closed captions usage limit, or they can't use the automated closed captions feature at all.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/application/vnd.vimeo.live.auto_cc+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/auto_cc",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ],
        "x-mill-visibility-private": true
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/destinations": {
      "get": {
        "summary": "Get all the destinations of a recurring event",
        "description": "This method returns every destination of the specified event. The authenticated user must be the owner of the event.",
        "operationId": "get_live_event_destinations_alt1",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event destinations were returned.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event-destination"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: Parameters are missing, or the body data is invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/destinations",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event destination",
        "description": "This method creates a destination for the specified event. The authenticated user must be the owner of the event.",
        "operationId": "create_live_event_destination_alt1",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.simulcast.destination+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "description": "The title to display for the simulcast.",
                    "example": "My channel",
                    "type": "string"
                  },
                  "is_enabled": {
                    "description": "Whether the destination is enabled for simulcasting.",
                    "example": true,
                    "type": "boolean"
                  },
                  "privacy": {
                    "description": "The privacy setting of the destination. Be sure to choose a value that corresponds to your service.\n\nOption descriptions:\n * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.\n * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.\n * `all_friends` - The privacy setting is `all_friends` for Facebook.\n * `everyone` - The privacy setting is `everyone` for Facebook.\n * `private` - The privacy setting is `private` for YouTube.\n * `public` - The privacy setting is `public` for YouTube.\n * `self` - The privacy setting is `self` for Facebook.\n * `unlisted` - The privacy setting is `unlisted` for YouTube.\n",
                    "enum": [
                      "CONNECTIONS",
                      "PUBLIC",
                      "all_friends",
                      "everyone",
                      "private",
                      "public",
                      "self",
                      "unlisted"
                    ],
                    "example": "public",
                    "type": "string"
                  },
                  "provider_destination_id": {
                    "description": "The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID.",
                    "example": "bda55c6b3ba4",
                    "type": "string"
                  },
                  "provider_video_id": {
                    "description": "The ID of the scheduled video.",
                    "example": "6817807391346708000",
                    "nullable": true,
                    "type": "string"
                  },
                  "scheduled_at": {
                    "description": "The time in Unix timestamp format when live streaming is scheduled to start.",
                    "example": 1625754461,
                    "type": "number"
                  },
                  "service_name": {
                    "description": "The service to simulcast to.\n\nOption descriptions:\n * `custom_rtmp` - Simulcast to a custom service.\n * `facebook` - Simulcast to Facebook Live.\n * `linkedin` - Simulcast to LinkedIn Live.\n * `youtube` - Simulcast to YouTube Live.\n",
                    "enum": [
                      "custom_rtmp",
                      "facebook",
                      "linkedin",
                      "youtube"
                    ],
                    "example": "youtube",
                    "type": "string"
                  },
                  "stream_key": {
                    "description": "The RTMP stream key.",
                    "example": "da056692-ba63-4749-a6eb-a476a22b3acd",
                    "type": "string"
                  },
                  "stream_url": {
                    "description": "The RTMP URL for receiving the video stream.",
                    "example": "rtmp://mycooldomain.com/live",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the simulcast destination.\n\nOption descriptions:\n * `channel` - The destination is a YouTube channel.\n * `custom` - The destination is custom.\n * `organization` - The destination is a LinkedIn organization.\n * `page` - The destination is a Facebook page.\n * `profile` - The destination is a Facebook or LinkedIn profile.\n",
                    "enum": [
                      "channel",
                      "custom",
                      "organization",
                      "page",
                      "profile"
                    ],
                    "example": "channel",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name",
                  "service_name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event destination was created.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/event-destination"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: Parameters are missing, or the body data is invalid.\n* Error code 13003: You can create only one LinkedIn destination per event.\n* Error code 13004: You can create only one YouTube destination per event.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destinations.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/destinations",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },

    "/users/{user_id}/live_events/{live_event_id}/low_latency": {
      "patch": {
        "summary": "Toggle the low-latency option of an event",
        "description": "This method toggles the low-latency option of the specified event.",
        "operationId": "toggle_rle_low_latency",
        "tags": [
          "Live\\Event low latency"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/application/vnd.vimeo.live.low_latency+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "low_latency": {
                    "description": "Whether the event is low latency.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The low-latency status of the event was returned.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/recurring-event-low-latency"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't toggle the low-latency option of the event.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/application/vnd.vimeo.live.low_latency+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/low_latency",
          "/me/live_events/{live_event_id}/low_latency"
        ],
        "x-mill-path-template": "/users/#user_id/live_events/#live_event_id/low_latency",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/m3u8_playback": {
      "get": {
        "summary": "Get an M3U8 playback URL for an event",
        "description": "This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).",
        "operationId": "get_live_event_m3u8_playback",
        "tags": [
          "Live\\Event M3U8 playback"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The requested maximum frames per second.",
            "in": "query",
            "name": "max_fps_fhd",
            "required": false,
            "schema": {
              "type": "number",
              "example": 30
            },
            "x-mill-visibility-private": true
          },
          {
            "description": "The time to live of the playlist link in seconds. This value must be between `10` and `60`.",
            "in": "query",
            "name": "ttl",
            "required": false,
            "schema": {
              "type": "number",
              "example": 30
            },
            "x-mill-visibility-private": true
          }
        ],
        "responses": {
          "200": {
            "description": "The M3U8 playback URL was returned."
          },
          "400": {
            "description": "Error code 10008: The event hasn't started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the M3U8 playback URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "* Error code 4020: No streamable video was found.\n* Error code 4021: No video was found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "Error code 7900: The streamable video in progress will be available soon.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/live_events/{live_event_id}/m3u8_playback"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/m3u8_playback",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/ott_destinations": {
      "get": {
        "summary": "Get all the OTT destinations of a recurring event",
        "description": "This method returns every OTT destination of the specified event. The authenticated user must be the owner of the event.",
        "operationId": "get_ott_destinations",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The OTT destinations were returned.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ott-destination"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/ott_destinations"
      },
      "post": {
        "summary": "Create an event OTT destination",
        "description": "This method creates an OTT channel as the destination of the specified event. The authenticated user must be the owner of the event.",
        "operationId": "create_ott_destination",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new OTT destination was created.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/ott-destination"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is missing, or the body data is invalid.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destination.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "* Error code 5000: No such event or user exists.\n* Error code 5018: The user doesn't have any OTT metadata.",
            "content": {
              "application/vnd.vimeo.live.ott.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/ott_destinations"
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/pictures": {
      "get": {
        "summary": "Get all the thumbnails of an event",
        "description": "This method returns every thumbnail image of the specified event.",
        "operationId": "get_live_event_thumbnails",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/pictures",
          "/me/live_events/{live_event_id}/pictures"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/pictures",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Create an event thumbnail",
        "description": "This method creates a thumbnail image for the specified event.",
        "operationId": "create_live_event_thumbnail",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the thumbnail is the event's active thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was created.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't delete the thumbnails for the event.\n* Error code 3422: The authenticated user can't create a thumbnail for the event.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/pictures",
          "/me/live_events/{live_event_id}/pictures"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/pictures",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/pictures/{thumbnail_id}": {
      "delete": {
        "summary": "Delete an event thumbnail",
        "description": "This method deletes a thumbnail image for the specified event.",
        "operationId": "delete_live_event_thumbnail",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The thumbnail was deleted."
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't delete the thumbnail for the event.\n* Error code 3422: The authenticated user can't delete the thumbnail.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/pictures/{thumbnail_id}",
          "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get a specific event thumbnail",
        "description": "This method returns a single thumbnail image of the specified event.",
        "operationId": "get_live_event_thumbnail",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnail was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/pictures/{thumbnail_id}",
          "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "patch": {
        "summary": "Edit an event thumbnail",
        "description": "This method edits a thumbnail image for the specified event.",
        "operationId": "edit_live_event_thumbnail",
        "tags": [
          "Live\\Event thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the thumbnail is the event's active thumbnail.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't update the thumbnail for the event.\n* Error code 3422: The authenticated user can't edit the thumbnail of the event.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, thumbnail, or user exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/pictures/{thumbnail_id}",
          "/me/live_events/{live_event_id}/pictures/{thumbnail_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/pictures/#thumbnail_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/privacy/domains": {
      "get": {
        "summary": "Get all the domains on which an event can be embedded",
        "description": "This method returns every permitted domain for an event. The embed privacy setting must be `whitelist`.",
        "operationId": "get_live_event_whitelist",
        "tags": [
          "Live\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The permitted domains for the event were returned.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domain"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2518: The embed permission isn't `whitelist`.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't get domains for the event.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/privacy/domains",
          "/me/live_events/{live_event_id}/privacy/domains"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/privacy/domains",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "put": {
        "summary": "Embed an event on one or more domains",
        "description": "This method embeds an event on the specified domains. The embed privacy setting must be `whitelist`.",
        "operationId": "set_live_event_whitelist",
        "tags": [
          "Live\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "allowed_domains": {
                    "description": "An array of the domains on which the embedded event can appear.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The event was embedded on the specified domains."
          },
          "400": {
            "description": "Error code 2518: The embed permission isn't `whitelist`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't edit domains for the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists under the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4016: An unexpected error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/privacy/domains",
          "/me/live_events/{live_event_id}/privacy/domains"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/privacy/domains",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/videos": {
      "delete": {
        "summary": "Remove a list of videos from an event",
        "description": "This method removes multiple videos from the specified event.",
        "operationId": "remove_videos_from_live_event",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "An array of video objects.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "video": {
                          "properties": {
                            "uri": {
                              "description": "The URI of a video to remove.",
                              "example": "/videos/258684937",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were removed."
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't remove one or more of the listed videos.\n* Error code 3422: The authenticated user can't remove videos from the event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/videos",
          "/me/live_events/{live_event_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "get": {
        "summary": "Get all the videos in an event",
        "description": "This method returns every video in the specified event.",
        "operationId": "get_live_event_videos",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page that contains the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable events.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added videos.\n * `alphabetical` - Sort the results alphabetically.\n * `arranged` - Sort the results in the order that the user has arranged the videos.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "arranged",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/videos",
          "/me/live_events/{live_event_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      },
      "post": {
        "summary": "Add a list of videos to an event",
        "description": "This method adds multiple videos to the specified event.",
        "operationId": "add_videos_to_live_event",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "videos": {
                    "description": "An array of video objects.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "video": {
                          "properties": {
                            "uri": {
                              "description": "The URI of a video to add.",
                              "example": "/videos/258684937",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The videos were added."
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A parameter is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't add videos to the event.\n* Error code 3422: The authenticated user can't add one or more of the listed videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit",
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/videos",
          "/me/live_events/{live_event_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/videos",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/live_events/{live_event_id}/videos/{video_id}": {
      "get": {
        "summary": "Get a specific video in an event",
        "description": "This method returns a single video in the specified event.",
        "operationId": "get_live_event_video",
        "tags": [
          "Live\\Event videos"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "live_event_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: A password is required for password-protected events.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 3200: The authenticated user can't access the event.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event, video, or user exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/live_events/{live_event_id}/videos/{video_id}",
          "/me/live_events/{live_event_id}/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/live_events/#live_event_id/videos/!video_id",
        "x-mill-vendor-tags": [
          "capability:CAPABILITY_RECURRING_LIVE_EVENTS"
        ]
      }
    },
    "/users/{user_id}/ondemand/pages": {
      "get": {
        "summary": "Get all the On Demand pages of the user",
        "description": "This method returns every On Demand page belonging to the authenticated user.",
        "operationId": "get_user_vods",
        "tags": [
          "On Demand\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The type of the page to return.\n\nOption descriptions:\n * `film` - The page type is a film.\n * `series` - The page type is a series.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "film",
                "series"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added page.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `modified_time` - Sort the results by time of page modification.\n * `name` - Sort the results by page name.\n * `publish.time` - Sort the results by time of page publishing.\n * `rating` - Sort the results by content rating.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "date",
                "modified_time",
                "name",
                "publish.time",
                "rating"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The On Demand pages were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-page"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* No such user exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/ondemand/pages"
        ],
        "x-mill-path-template": "/users/+user_id/ondemand/pages"
      },
      "post": {
        "summary": "Create an On Demand page",
        "description": "This method creates a new On Demand page for the specified user. To publish the page, use the [edit](https://developer.vimeo.com/api/reference/on-demand#edit_vod) method.",
        "operationId": "create_vod",
        "tags": [
          "On Demand\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accepted_currencies": {
                    "description": "An array of accepted currencies.\n\nOption descriptions:\n * `AUD` - The currency is in Australian dollars.\n * `CAD` - The currency is in Canadian dollars.\n * `CHF` - The currency is in Swiss francs.\n * `DKK` - The currency is in Danish krone.\n * `EUR` - The currency is in euros.\n * `GBP` - The currency is in British pounds.\n * `JPY` - The currency is in Japanese yen.\n * `KRW` - The currency is in South Korean won.\n * `NOK` - The currency is in Norwegian krone.\n * `PLN` - The currency is in Polish zloty.\n * `SEK` - The currency is in Swedish krona.\n * `USD` - The currency is in United States dollars.\n",
                    "enum": [
                      "AUD",
                      "CAD",
                      "CHF",
                      "DKK",
                      "EUR",
                      "GBP",
                      "JPY",
                      "KRW",
                      "NOK",
                      "PLN",
                      "SEK",
                      "USD"
                    ],
                    "type": "string"
                  },
                  "buy": {
                    "properties": {
                      "active": {
                        "description": "Whether the video can be purchased. This parameter is required when **rent.active** is `false`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "download": {
                        "description": "Whether people who buy the video can download it. To use this parameter, **type** must be `film`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "price": {
                        "properties": {
                          "AUD": {
                            "description": "The purchase price of the video in Australian dollars.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "CAD": {
                            "description": "The purchase price of the video in Canadian dollars.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "CHF": {
                            "description": "The purchase price of the video in Swiss francs.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "DKK": {
                            "description": "The purchase price of the video in Danish krone.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "EUR": {
                            "description": "The purchase price of the video in euros.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "GBP": {
                            "description": "The purchase price of the video in British pounds.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "JPY": {
                            "description": "The purchase price of the video in Japanese yen.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "KRW": {
                            "description": "The purchase price of the video in South Korean won.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "NOK": {
                            "description": "The purchase price of the video in Norwegian krone.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "PLN": {
                            "description": "The purchase price of the video in Polish zloty.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "SEK": {
                            "description": "The purchase price of the video in Swedish krona.",
                            "example": 2.99,
                            "type": "number"
                          },
                          "USD": {
                            "description": "When **type** is `film`, the purchase price of the video in United States dollars. When **type** is `series`, the purchase price of the entire collection in United States dollars.",
                            "example": 2.99,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "content_rating": {
                    "description": "The content rating of the video, given either as a comma-separated list or as a JSON array, depending on the request format.\n\nOption descriptions:\n * `drugs` - The video contains drug or alcohol use.\n * `language` - The video contains profanity or sexually suggestive content.\n * `nudity` - The video contains nudity.\n * `safe` - The video is suitable for all audiences.\n * `unrated` - The video hasn't been rated.\n * `violence` - The video contains violent or graphic content.\n",
                    "enum": [
                      "drugs",
                      "language",
                      "nudity",
                      "safe",
                      "unrated",
                      "violence"
                    ],
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the On Demand page.",
                    "example": "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\".",
                    "type": "string"
                  },
                  "domain_link": {
                    "description": "The custom domain of the On Demand page.",
                    "example": "https://example.com",
                    "type": "string"
                  },
                  "episodes": {
                    "properties": {
                      "buy": {
                        "properties": {
                          "active": {
                            "description": "Whether episodes can be purchased.",
                            "example": true,
                            "type": "boolean"
                          },
                          "download": {
                            "description": "Whether people who buy episodes can download them. To use this parameter, **type** must be `series`.",
                            "example": true,
                            "type": "boolean"
                          },
                          "price": {
                            "properties": {
                              "USD": {
                                "description": "The purchase price per episode in United States dollars. This parameter is required when **episodes.buy.active** is `true`.",
                                "example": 1.99,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "rent": {
                        "properties": {
                          "active": {
                            "description": "Whether episodes can be rented.",
                            "example": true,
                            "type": "boolean"
                          },
                          "period": {
                            "description": "The rental period of the episode.\n\nOption descriptions:\n * `1 week` - The episode can be rented for a maximum of 1 week.\n * `1 year` - The episode can be rented for a maximum of 1 year.\n * `24 hour` - The episode can be rented for a maximum of 24 hours.\n * `3 month` - The episode can be rented for a maximum of 3 months.\n * `30 day` - The episode can be rented for a maximum of 30 days.\n * `48 hour` - The episode can be rented for a maximum of 48 hours.\n * `6 month` - The episode can be rented for a maximum of 6 months.\n * `72 hour` - The episode can be rented for a maximum of 72 hours.\n",
                            "enum": [
                              "1 week",
                              "1 year",
                              "24 hour",
                              "3 month",
                              "30 day",
                              "48 hour",
                              "6 month",
                              "72 hour"
                            ],
                            "type": "string"
                          },
                          "price": {
                            "properties": {
                              "USD": {
                                "description": "The rental price per episode in United States dollars. This parameter is applicable only when **type** is `series`, and it's required when **episode.rent.active** is `true`.",
                                "example": 0.99,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "link": {
                    "description": "The custom string to use in the Vimeo URL of the On Demand page.",
                    "example": "darbyforever",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the On Demand page.",
                    "example": "Darby Forever",
                    "type": "string"
                  },
                  "rent": {
                    "properties": {
                      "active": {
                        "description": "Whether the video can be rented. This parameter is required when **episodes.rent.active** is `true`.",
                        "example": true,
                        "type": "boolean"
                      },
                      "period": {
                        "description": "The rental period of the video.\n\nOption descriptions:\n * `1 week` - The video can be rented for a maximum of 1 week.\n * `1 year` - The video can be rented for a maximum of 1 year.\n * `24 hour` - The video can be rented for a maximum of 24 hours.\n * `3 month` - The video can be rented for a maximum of 3 months.\n * `30 day` - The video can be rented for a maximum of 30 days.\n * `48 hour` - The video can be rented for a maximum of 48 hours.\n * `6 month` - The video can be rented for a maximum of 6 months.\n * `72 hour` - The video can be rented for a maximum of 72 hours.\n",
                        "enum": [
                          "1 week",
                          "1 year",
                          "24 hour",
                          "3 month",
                          "30 day",
                          "48 hour",
                          "6 month",
                          "72 hour"
                        ],
                        "type": "string"
                      },
                      "price": {
                        "properties": {
                          "AUD": {
                            "description": "The rental price of the video in Australian dollars.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "CAD": {
                            "description": "The rental price of the video in Canadian dollars.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "CHF": {
                            "description": "The rental price of the video in Swiss francs.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "DKK": {
                            "description": "The rental price of the video in Danish krone.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "EUR": {
                            "description": "The rental price of the video in euros.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "GBP": {
                            "description": "The rental price of the video in British pounds.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "JPY": {
                            "description": "The rental price of the video in Japanese yen.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "KRW": {
                            "description": "The rental price of the video in South Korean won.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "NOK": {
                            "description": "The rental price of the video in Norwegian krone.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "PLN": {
                            "description": "The rental price of the video in Polish zloty.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "SEK": {
                            "description": "The rental price of the video in Swedish krona.",
                            "example": 0.99,
                            "type": "number"
                          },
                          "USD": {
                            "description": "When **type** is `film`, the rental price of the video in United States dollars. When **type** is `series`, the rental price of the entire collection in United States dollars.",
                            "example": 0.99,
                            "type": "number"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "subscription": {
                    "properties": {
                      "monthly": {
                        "properties": {
                          "active": {
                            "description": "Whether a monthly subscription is active. This parameter is required when **rent.active** and **buy.active** are `false`.",
                            "example": true,
                            "type": "boolean"
                          },
                          "price": {
                            "properties": {
                              "USD": {
                                "description": "The monthly subscription price in United States dollars. This parameter is required when **rent.active** and **buy.active** are `false`.",
                                "example": 9.99,
                                "type": "number"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "type": {
                    "description": "The type of the On Demand page.\n\nOption descriptions:\n * `film` - The On Demand page is a film.\n * `series` - The On Demand page is a series.\n",
                    "enum": [
                      "film",
                      "series"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "content_rating",
                  "description",
                  "name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The On Demand page was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/on-demand-page"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/ondemand/pages"
        ],
        "x-mill-path-template": "/users/+user_id/ondemand/pages"
      }
    },
    "/users/{user_id}/ondemand/purchases": {
      "get": {
        "summary": "Get all of the user's On Demand purchases and rentals",
        "description": "This method returns every purchase and rental that the authenticated user has made across all On Demand pages.",
        "operationId": "get_vod_purchases",
        "tags": [
          "On Demand\\Purchases and rentals"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The type of the On Demand video to filter on.\n\nOption descriptions:\n * `all` - Filter by all video types.\n * `expiring_soon` - Filter by videos that expire soon.\n * `film` - Filter by film.\n * `important` - Filter by pages that are about to expire.\n * `purchased` - Filter by purchased videos.\n * `rented` - Filter by rented videos.\n * `series` - Filter by series.\n * `subscription` - Filter by video subscription.\n * `unwatched` - Filter by unwatched videos.\n * `watched` - Filter by watched videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "expiring_soon",
                "film",
                "important",
                "purchased",
                "rented",
                "series",
                "subscription",
                "unwatched",
                "watched"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `added` - Sort the results by most recently added video.\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `name` - Sort the results by video name.\n * `purchase_time` - Sort the results by time of video purchase.\n * `rating` - Sort the results by content rating.\n * `release_date` - Sort the results by video release date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "added",
                "alphabetical",
                "date",
                "name",
                "purchase_time",
                "rating",
                "release_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The purchases and rentals were returned.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/on-demand-page"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't get purchases and rentals for another user's account.",
            "content": {
              "application/vnd.vimeo.ondemand.page+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "purchased"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/ondemand/purchases"
        ],
        "x-mill-path-template": "/users/+user_id/ondemand/purchases"
      }
    },
    "/users/{user_id}/pictures": {
      "get": {
        "summary": "Get all the pictures that belong to the user",
        "description": "This method returns every portrait image belonging to the authenticated user.",
        "operationId": "get_pictures",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portrait images were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/pictures"
        ],
        "x-mill-path-template": "/users/+user_id/pictures"
      },
      "post": {
        "summary": "Add a picture to the user's account",
        "description": "This method adds a portrait image to the authenticated user's Vimeo account. Send the binary data of the image file to the location that you receive\nfrom the **link** field in the response. For step-by-step instructions, see\n[Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#uploading-a-thumbnail-step-3).",
        "operationId": "create_picture",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portrait image was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/pictures"
        ],
        "x-mill-path-template": "/users/+user_id/pictures"
      }
    },
    "/users/{user_id}/pictures/{portraitset_id}": {
      "delete": {
        "summary": "Delete a picture from the user's account",
        "description": "This method removes the specified portrait image from the authenticated user's Vimeo account.",
        "operationId": "delete_picture",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the picture.",
            "in": "path",
            "name": "portraitset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The portrait image was removed."
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/pictures/{portraitset_id}"
        ],
        "x-mill-path-template": "/users/+user_id/pictures/#portraitset_id"
      },
      "get": {
        "summary": "Get a specific picture that belongs to the user",
        "description": "This method returns a single portrait image belonging to the authenticated user.",
        "operationId": "get_picture",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the picture.",
            "in": "path",
            "name": "portraitset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portrait image was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/pictures/{portraitset_id}"
        ],
        "x-mill-path-template": "/users/+user_id/pictures/#portraitset_id"
      },
      "patch": {
        "summary": "Edit a picture in the user's account",
        "description": "This method edits the specified portrait image belonging to the authenticated user.",
        "operationId": "edit_picture",
        "tags": [
          "Users\\Pictures"
        ],
        "parameters": [
          {
            "description": "The ID of the picture.",
            "in": "path",
            "name": "portraitset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the picture is the authenticated user's active portrait.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The portrait image was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/pictures/{portraitset_id}"
        ],
        "x-mill-path-template": "/users/+user_id/pictures/#portraitset_id"
      }
    },
    "/users/{user_id}/portfolios": {
      "get": {
        "summary": "Get all the portfolios that belong to the user",
        "description": "This method returns every portfolio belonging to the authenticated user.",
        "operationId": "get_portfolios",
        "tags": [
          "Portfolios\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolios were returned.",
            "content": {
              "application/vnd.vimeo.portfolio+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/portfolio"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/portfolios"
        ],
        "x-mill-path-template": "/users/+user_id/portfolios"
      }
    },
    "/users/{user_id}/portfolios/{portfolio_id}": {
      "get": {
        "summary": "Get a specific portfolio",
        "description": "This method returns a single portfolio belonging to the authenticated user.",
        "operationId": "get_portfolio",
        "tags": [
          "Portfolios\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The portfolio was returned.",
            "content": {
              "application/vnd.vimeo.portfolio+json": {
                "schema": {
                  "$ref": "#/components/schemas/portfolio"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/portfolios/{portfolio_id}"
        ],
        "x-mill-path-template": "/users/+user_id/portfolios/*portfolio_id"
      }
    },
    "/users/{user_id}/portfolios/{portfolio_id}/videos": {
      "get": {
        "summary": "Get all the videos in a portfolio",
        "description": "This method returns every video from the specified portfolio belonging to the authenticated user.",
        "operationId": "get_portfolio_videos",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page that contains the video URI.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by creation date.\n * `default` - Use the default sorting method.\n * `likes` - Sort the results by number of likes.\n * `manual` - Sort the results by their user-specified order.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "default",
                "likes",
                "manual",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/portfolios/{portfolio_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/portfolios/*portfolio_id/videos"
      }
    },
    "/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a portfolio",
        "description": "This method removes a video from the specified portfolio belonging to the authenticated user.",
        "operationId": "delete_video_from_portfolio",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "404": {
            "description": "No such portfolio or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/portfolios/{portfolio_id}/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/portfolios/*portfolio_id/videos/!video_id"
      },
      "get": {
        "summary": "Get a specific video in a portfolio",
        "description": "This method returns a single video from the specified portfolio belonging to the authenticated user.",
        "operationId": "get_portfolio_video",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/portfolios/{portfolio_id}/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/portfolios/*portfolio_id/videos/!video_id"
      },
      "put": {
        "summary": "Add a video to a portfolio",
        "description": "This method adds a video to the specified portfolio belonging to the authenticated user.",
        "operationId": "add_video_to_portfolio",
        "tags": [
          "Portfolios\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the portfolio.",
            "in": "path",
            "name": "portfolio_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "404": {
            "description": "No such portfolio or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/portfolios/{portfolio_id}/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/portfolios/*portfolio_id/videos/!video_id"
      }
    },
    "/users/{user_id}/presets": {
      "get": {
        "summary": "Get all the embed presets that a user has created",
        "description": "This method returns every embed preset that belongs to the authenticated user.",
        "operationId": "get_embed_presets",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The embed presets were returned.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/preset"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/presets"
        ],
        "x-mill-path-template": "/users/+user_id/presets"
      },
      "post": {
        "summary": "Create an embed preset",
        "description": "This method creates an embed preset.",
        "operationId": "create_embed_presets",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.preset+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "embed": {
                    "properties": {
                      "airplay": {
                        "description": "Whether AirPlay is enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "audio_tracks": {
                        "description": "Whether multiple audio tracks can appear in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "buttons": {
                        "properties": {
                          "embed": {
                            "description": "Whether to show the button for embeds on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "fullscreen": {
                            "description": "Whether to show the button for fullscreen mode on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "hd": {
                            "description": "Whether to show the button for HD videos on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "like": {
                            "description": "Whether to show the button for likes on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "scaling": {
                            "description": "Whether to show the button for scaling on the embeddable player in fullscreen mode.",
                            "example": true,
                            "type": "boolean"
                          },
                          "share": {
                            "description": "Whether to show the button for shares on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "watchlater": {
                            "description": "Whether to show the button for watching later on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "chapters": {
                        "description": "Whether chapters are enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "chromecast": {
                        "description": "Whether the Chromecast button appears in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "closed_captions": {
                        "description": "Whether closed captions are enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The main color of the embeddable player.",
                        "example": "#1ab7ea",
                        "type": "string"
                      },
                      "colors": {
                        "properties": {
                          "color_four": {
                            "description": "The hexadecimal color code of the fourth player color, which controls the player background color.",
                            "example": "#aabbcc",
                            "type": "string"
                          },
                          "color_one": {
                            "description": "The hexadecimal color code of the first player color, which controls the color of the progress bar, buttons, and more.",
                            "example": "#112233",
                            "type": "string"
                          },
                          "color_three": {
                            "description": "The hexadecimal color code of the third player color, which controls the color of text and icons.",
                            "example": "#778899",
                            "type": "string"
                          },
                          "color_two": {
                            "description": "The hexadecimal color code of the second player color, which controls the player accent color.",
                            "example": "#445566",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the active custom logo on the embeddable player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "id": {
                                "description": "The ID of the custom logo that appears on the embeddable player.",
                                "example": 462119,
                                "nullable": true,
                                "type": "number"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "nullable": true,
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "play_button": {
                        "description": "An object representing the play button's settings.",
                        "properties": {
                          "position": {
                            "description": "The position of the play button within the embeddable player.\n\nOption descriptions:\n * `auto` - Use Vimeo's default positioning for the play button.\n * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.\n * `center` - The play button is positioned in the center of the player.\n",
                            "enum": [
                              "auto",
                              "bottom",
                              "center"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "playbar": {
                        "description": "Whether to show the playbar on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "quality_selector": {
                        "description": "Whether to show the quality selector in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "skipping_forward": {
                        "description": "Whether users can skip forward in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "title": {
                        "properties": {
                          "name": {
                            "description": "How to handle the video title in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the video title.\n * `show` - Show the video title.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "How to handle the owner information in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the owner info.\n * `show` - Show the owner info.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "portrait": {
                            "description": "How to handle the owner portrait in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the portrait.\n * `show` - Show the portrait.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "transcript": {
                        "description": "Whether the transcript controls appear in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "volume": {
                        "description": "Whether to show the volume selector on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "name": {
                    "description": "The name of the embed preset.",
                    "example": "New preset",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The embed preset was created.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/preset"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/presets"
        ],
        "x-mill-path-template": "/users/+user_id/presets"
      }
    },
    "/users/{user_id}/presets/{preset_id}": {
      "get": {
        "summary": "Get a specific embed preset",
        "description": "This method returns a single embed preset. The authenticated user must be the owner of the preset.",
        "operationId": "get_embed_preset",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The embed preset was returned.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/preset"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/presets/{preset_id}"
        ],
        "x-mill-path-template": "/users/+user_id/presets/+preset_id"
      },
      "patch": {
        "summary": "Edit an embed preset",
        "description": "This method edits the specified embed preset. The authenticated user must be the owner of the preset.",
        "operationId": "edit_embed_preset",
        "tags": [
          "Embed Presets\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.preset+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "outro": {
                    "description": "What to do with the outro.\n\nOption descriptions:\n * `nothing` - Disable the outro.\n",
                    "enum": [
                      "nothing"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The embed preset was edited.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/preset"
                }
              }
            }
          },
          "404": {
            "description": "* No such embed preset exists.\n* The authenticated user can't edit the embed preset.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "The outro type is invalid.",
            "content": {
              "application/vnd.vimeo.preset+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/presets/{preset_id}"
        ],
        "x-mill-path-template": "/users/+user_id/presets/+preset_id"
      }
    },
    "/users/{user_id}/presets/{preset_id}/videos": {
      "get": {
        "summary": "Get all the videos that have a specific embed preset",
        "description": "This method returns every video to which the specified embed preset has been added. The authenticated user must be the owner of the videos.",
        "operationId": "get_embed_preset_videos",
        "tags": [
          "Embed Presets\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the embed preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/presets/{preset_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/presets/+preset_id/videos"
      }
    },
    "/users/{user_id}/projects": {
      "get": {
        "summary": "Get all the folders that belong to the user",
        "description": "This method returns all the folders belonging to the authenticated user.",
        "operationId": "get_projects",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `modified_time` - Sort the results by last modification.\n * `name` - Sort the results by name.\n * `pinned_on` - Sort the results by pinned timestamp.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "date",
                "default",
                "modified_time",
                "name",
                "pinned_on"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folders were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects"
        ],
        "x-mill-path-template": "/users/+user_id/projects"
      },
      "post": {
        "summary": "Create a folder",
        "description": "This method creates a new folder for the authenticated user. By default, this method creates a top-level folder. To create a subfolder — that is, to place the new folder inside an existing folder — specify the parent folder by URI with the **parent_folder_uri** parameter in the body of the request.",
        "operationId": "create_project",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the folder.",
                    "example": "Rough cuts",
                    "type": "string"
                  },
                  "parent_folder_uri": {
                    "description": "The URI of the parent folder.",
                    "example": "/users/12345/projects/6789",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The folder was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 2205: The input is empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't create folders.\n* Error code 3701: The maximum folder depth has been exceeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects"
        ],
        "x-mill-path-template": "/users/+user_id/projects"
      }
    },
    "/users/{user_id}/projects/{project_id}": {
      "delete": {
        "summary": "Delete a folder",
        "description": "This method deletes the specified folder and optionally also the videos that it contains. The authenticated user must be the owner of the folder.",
        "operationId": "delete_project",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "Whether to delete all the videos in the folder along with the folder itself.",
            "in": "query",
            "name": "should_delete_clips",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The folder was deleted."
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't delete the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects/{project_id}"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id"
      },
      "get": {
        "summary": "Get a specific folder",
        "description": "This method returns a single folder belonging to the authenticated user.",
        "operationId": "get_project",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folder was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/projects/{project_id}"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id"
      },
      "patch": {
        "summary": "Edit a folder",
        "description": "This method edits the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "edit_project",
        "tags": [
          "Folders\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the folder.",
                    "example": "Rough cuts",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The folder was edited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 2205: The input is empty.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3200: The authenticated user can't edit the folder.\n* Error code 3449: The authenticated user can't edit folder settings.\n* Error code 3702: Folder settings aren't enabled for this team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects/{project_id}"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id"
      }
    },
    "/users/{user_id}/projects/{project_id}/items": {
      "get": {
        "summary": "Get all the items in a folder",
        "description": "This method returns every item that belongs to the specified folder.",
        "operationId": "get_folder_items",
        "tags": [
          "Folders\\Items"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "A comma-separated list of video privacy types to filter on. The accepted values are `private` for when only the creator and users with access grants can play the video; `public` for when anyone can play the video; `password` for when only users with the correct password can play the video; `hide_from_vimeo` for when the video is private but embeddable anywhere; and `unlisted` for when only users with the link can play the video.",
            "in": "query",
            "name": "clip_privacy_filters",
            "required": false,
            "schema": {
              "type": "string",
              "example": "private,unlisted,hide_from_vimeo"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `folder` - Filter the results by folder.\n * `live_event` - Filter the results by event.\n * `video` - Filter the results by video.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "folder",
                "live_event",
                "video"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration. Items without a duration, namely events and folders, are grouped by type in ascending alphabetical order, with events first.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "last_user_action_event_date"
              ]
            }
          }
        ],
        "responses": {},
        "x-mill-path-template": "/users/+user_id/projects/+project_id/items"
      }
    },
    "/users/{user_id}/projects/{project_id}/videos": {
      "delete": {
        "summary": "Remove a list of videos from a folder",
        "description": "This method removes multiple videos from the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "remove_videos_from_project",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "Whether to delete the videos when removing them from the folder.",
            "in": "query",
            "name": "should_delete_clips",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "A comma-separated list of the video URIs to remove.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/videos/273576296"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos were removed."
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The input is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects/{project_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id/videos"
      },
      "get": {
        "summary": "Get all the videos in a folder",
        "description": "This method returns all the videos that belong to the specified folder.",
        "operationId": "get_project_videos",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags. The use of this parameter triggers a search.",
            "in": "query",
            "name": "filter_tag",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include all of these tags. The use of this parameter triggers a search.",
            "in": "query",
            "name": "filter_tag_all_of",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to exclude. The use of this parameter triggers a search.",
            "in": "query",
            "name": "filter_tag_exclude",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "Whether to include subfolders.",
            "in": "query",
            "name": "include_subfolders",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": false
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.",
            "in": "query",
            "name": "query_fields",
            "required": false,
            "schema": {
              "type": "string",
              "example": "title,description"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n * `default` - Use the default sort order.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by the date of the last user action.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "last_user_action_event_date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such folder exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/projects/{project_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id/videos"
      },
      "put": {
        "summary": "Add a list of videos to a folder",
        "description": "This method adds multiple videos to the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "add_videos_to_project",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "A comma-separated list of video URIs to add.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/videos/273576296"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos were added."
          },
          "404": {
            "description": "Error code 5000: No such folder or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The input is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects/{project_id}/videos"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id/videos"
      }
    },
    "/users/{user_id}/projects/{project_id}/videos/{video_id}": {
      "delete": {
        "summary": "Remove a video from a folder",
        "description": "This method removes a single video from the specified folder. Please note that this doesn't delete the video itself.",
        "operationId": "remove_video_from_project",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          },
          "404": {
            "description": "Error code 5000: No such video exists in the folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The input is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects/{project_id}/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id/videos/#video_id"
      },
      "put": {
        "summary": "Add a video to a folder",
        "description": "This method adds a single video to the specified folder. The authenticated user must be the owner of the folder.",
        "operationId": "add_video_to_project",
        "tags": [
          "Folders\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the folder.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          },
          "404": {
            "description": "Error code 5000: No such user, folder, or video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/projects/{project_id}/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/projects/+project_id/videos/#video_id"
      }
    },
    "/users/{user_id}/team/role": {
      "get": {
        "summary": "Get information about the user's role on a team",
        "description": "This method returns information about the authenticated user's role on the specified team owner's team.",
        "operationId": "get_team_role_information",
        "tags": [
          "Teams\\Members"
        ],
        "parameters": [
          {
            "description": "The ID of the team owner.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {},
        "x-mill-path-template": "/users/+user_id/team/role"
      }
    },
    "/users/{user_id}/team_users/{team_user_id}": {
      "get": {
        "summary": "Get membership information about a team",
        "description": "This method returns information about the membership of the specified team. Usage is currently limited to the team join forms.",
        "operationId": "get_team_information",
        "tags": [
          "Teams\\Members"
        ],
        "parameters": [
          {
            "description": "The ID of the team user.",
            "in": "path",
            "name": "team_user_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The ID of the team owner.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {},
        "x-mill-path-template": "/users/+user_id/team_users/+team_user_id"
      }
    },
    "/users/{user_id}/uploads/{upload_id}": {
      "delete": {
        "summary": "Complete a streaming upload",
        "description": "This method completes the specified streaming upload of the authenticated user.",
        "operationId": "complete_streaming_upload",
        "tags": [
          "Videos\\Uploads"
        ],
        "parameters": [
          {
            "description": "The ID of the streaming upload.",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The crypto signature of the completed upload.",
            "in": "query",
            "name": "signature",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cd89a20adde7a608f3331e71c37bdfa087bacbf3"
            }
          },
          {
            "description": "The ID of the uploaded file.",
            "in": "query",
            "name": "video_file_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1234
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The streaming upload was completed."
          },
          "404": {
            "description": "* Error code 5006: No such video file exists.\n* Error code 5007: No such signature exists.\n* Error code 8400: The signature is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2502: The format of the video file is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4011: The upload server returned an HTTP status code other than 200.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/uploads/+upload_id"
      },
      "get": {
        "summary": "Get an upload attempt",
        "description": "This method returns the specified upload attempt of the authenticated user. _This method has been deprecated. For information on our currently supported upload approaches, see our [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos) guide._",
        "operationId": "get_upload_attempt",
        "tags": [
          "Videos\\Uploads"
        ],
        "parameters": [
          {
            "description": "The ID of the upload attempt.",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The upload attempt was returned.",
            "content": {
              "application/vnd.vimeo.uploadattempt+json": {
                "schema": {
                  "$ref": "#/components/schemas/upload-attempt"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/users/+user_id/uploads/+upload_id"
      }
    },
    "/users/{user_id}/videos": {
      "delete": {
        "summary": "Delete a user's videos",
        "description": "This method deletes one or more videos belonging to the specified user. The authenticated user must have permission to delete the videos.\n\nSpecify the videos to delete in a comma-separated list by URI using the **uris** query parameter.",
        "operationId": "delete_videos",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "A comma-separated list of the video URIs to delete.",
            "in": "query",
            "name": "uris",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/videos/258684937,/videos/258684546"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The videos were deleted."
          },
          "404": {
            "description": "Error code 5000: No such video exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The input is invalid.\n* Error code 3200: The authenticated user can't delete one or more of the videos.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/videos"
        ],
        "x-mill-path-template": "/users/+user_id/videos"
      },
      "get": {
        "summary": "Get all the videos that the user has uploaded",
        "description": "This method returns all the videos that the authenticated user has uploaded.",
        "operationId": "get_videos",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The page that contains the video URI. The field is available only when not paired with **query**.",
            "in": "query",
            "name": "containing_uri",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/258684937"
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `app_only` - Return app-only videos.\n * `embeddable` - Return embeddable videos.\n * `featured` - Return featured videos.\n * `live` - Return only live videos.\n * `no_placeholder` - Return no placeholder videos.\n * `nolive` - Return no live videos.\n * `playable` - Return playable videos.\n * `screen_recorded` - Return screen-recorded videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "app_only",
                "embeddable",
                "featured",
                "live",
                "no_placeholder",
                "nolive",
                "playable",
                "screen_recorded"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "Whether to filter the results by playable videos (`true`) or non-playable videos (`false`).",
            "in": "query",
            "name": "filter_playable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "Whether to filter the results by screen-recorded videos (`true`) or non-screen-recorded videos (`false`).",
            "in": "query",
            "name": "filter_screen_recorded",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include at least one of these tags.",
            "in": "query",
            "name": "filter_tag",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to filter on. All results must include all of these tags.",
            "in": "query",
            "name": "filter_tag_all_of",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "A comma-separated list of tags to exclude. All results must exclude all of these tags.",
            "in": "query",
            "name": "filter_tag_exclude",
            "required": false,
            "schema": {
              "type": "string",
              "example": "abc,xyz"
            }
          },
          {
            "description": "The ID of the team member or team owner uploader to filter for.",
            "in": "query",
            "name": "filter_uploader",
            "required": false,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "Whether to include content from the user's teams when searching.",
            "in": "query",
            "name": "include_team_content",
            "required": false,
            "schema": {
              "type": "string",
              "example": "true"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "A comma-separated list of fields to query over. The default value is `title,description,chapters,tags`.\n\nOption descriptions:\n * `chapters` - Query by chapter titles that have been added to the video.\n * `description` - Query by the description of the video.\n * `tags` - Query by tag names that have been added to the video.\n * `title` - Query by the title of the video.\n",
            "in": "query",
            "name": "query_fields",
            "required": false,
            "schema": {
              "type": "array",
              "example": "title,description",
              "enum": [
                "chapters",
                "description",
                "tags",
                "title"
              ],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically by title.\n * `date` - Sort the results by date.\n * `default` - Use the default sorting method.\n * `duration` - Sort the results by duration.\n * `last_user_action_event_date` - Sort the results by last user interaction. If a result hasn't had an interaction, the upload date is used instead.\n * `likes` - Sort the results by number of likes. To use this option, **direction** must be `desc`.\n * `modified_time` - Sort the results by last modification.\n * `plays` - Sort the results by number of plays. To use this option, **direction** must be `desc`.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "default",
                "duration",
                "last_user_action_event_date",
                "likes",
                "modified_time",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "The authenticated user hasn't uploaded any videos since the given **If-Modified-Since** header."
          },
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/videos"
        ],
        "x-mill-path-template": "/users/+user_id/videos"
      },
      "post": {
        "summary": "Upload a video",
        "description": "This method begins the video upload process for the authenticated user. For more information, see our [upload documentation](https://developer.vimeo.com/api/upload/videos).",
        "operationId": "upload_video",
        "tags": [
          "Videos\\Uploads"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content_rating": {
                    "description": "A list of values describing the content in this video. For a full list of values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "embed": {
                    "properties": {
                      "buttons": {
                        "properties": {
                          "embed": {
                            "description": "Whether to show the button for embeds on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "fullscreen": {
                            "description": "Whether to show the button for fullscreen mode on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "hd": {
                            "description": "Whether to show the button for HD videos on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "like": {
                            "description": "Whether to show the button for likes on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "scaling": {
                            "description": "Whether to show the button for scaling on the embeddable player in fullscreen mode.",
                            "example": true,
                            "type": "boolean"
                          },
                          "share": {
                            "description": "Whether to show the button for shares on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "watchlater": {
                            "description": "Whether to show the button for watching later on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "color": {
                        "description": "The main color of the embeddable player.",
                        "example": "#1ab7ea",
                        "type": "string"
                      },
                      "end_screen": {
                        "properties": {
                          "type": {
                            "description": "The end screen type.\n\nOption descriptions:\n * `empty` - The end screen is empty.\n * `loop` - The end screen loops the video playback.\n * `share` - The end screen includes sharing options.\n * `thumbnail` - The end screen includes the thumbnail of the video.\n",
                            "enum": [
                              "empty",
                              "loop",
                              "share",
                              "thumbnail"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the active custom logo on the embeddable player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "playbar": {
                        "description": "Whether to show the playbar on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "title": {
                        "properties": {
                          "name": {
                            "description": "How to handle the video title in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the video title.\n * `show` - Show the video title.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "How to handle the owner information in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the owner info.\n * `show` - Show the owner info.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "portrait": {
                            "description": "How to handle the owner portrait in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the portrait.\n * `show` - Show the portrait.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "volume": {
                        "description": "Whether to show the volume selector on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "embed_domains": {
                    "description": "The complete list of domains the video can be embedded on. This field requires that **privacy_embed** have the value `whitelist`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "folder_uri": {
                    "description": "The URI of the folder to which the video is uploaded.",
                    "example": "/users/12345/folders/6789",
                    "type": "string"
                  },
                  "hide_from_vimeo": {
                    "description": "Whether to hide the video from everyone except the video's owner. When the value is `true`, unlisted video links work only for the video's owner.",
                    "example": false,
                    "type": "boolean"
                  },
                  "license": {
                    "description": "The Creative Commons license under which the video is offered.\n\nOption descriptions:\n * `by` - The video is offered under CC BY, or the attibution-only license.\n * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.\n * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.\n * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.\n * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.\n * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.\n * `cc0` - The video is offered under CC0, or the public domain license.\n",
                    "enum": [
                      "by",
                      "by-nc",
                      "by-nc-nd",
                      "by-nc-sa",
                      "by-nd",
                      "by-sa",
                      "cc0"
                    ],
                    "type": "string"
                  },
                  "locale": {
                    "description": "The video's default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.",
                    "example": "en_US",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password. This field is required when **privacy.view** is `password`.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "properties": {
                      "add": {
                        "description": "Whether a user can add the video to a showcase, channel, or group.",
                        "example": true,
                        "type": "boolean"
                      },
                      "comments": {
                        "description": "The privacy level required to comment on the video.\n\nOption descriptions:\n * `anybody` - Anyone can comment on the video.\n * `contacts` - Only the video owner's contacts can comment on the video.\n * `nobody` - No one can comment on the video.\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "nobody"
                        ],
                        "type": "string"
                      },
                      "download": {
                        "description": "Whether a user can download the video. This field isn't available to Vimeo Free members.",
                        "example": true,
                        "type": "boolean"
                      },
                      "embed": {
                        "description": "The video's embed setting. Specify the `whitelist` value to restrict embedding to a specific set of domains. For more information, see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide.\n\nOption descriptions:\n * `private` - The video can't be embedded.\n * `public` - The video can be embedded.\n * `whitelist` - The video can be embedded on the specified domains only.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "type": "string"
                      },
                      "view": {
                        "description": "The video's privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, some privacy settings are unavailable to Vimeo Free members; for more information, see our [Help Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).\n\nOption descriptions:\n * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._\n * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the video.\n * `unlisted` - Only those with the private link can access the video.\n * `users` - Only Vimeo members can access the video. _This field is deprecated._\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "disable",
                          "nobody",
                          "password",
                          "unlisted",
                          "users"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "review_page": {
                    "properties": {
                      "active": {
                        "description": "Whether to enable video review.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "spatial": {
                    "properties": {
                      "director_timeline": {
                        "description": "An array representing the 360 director timeline.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pitch": {
                              "description": "The 360 director timeline pitch. This value must be between `−90` and `90`, and it's required only when **spatial.director_timeline** is defined.",
                              "example": 70,
                              "type": "number"
                            },
                            "roll": {
                              "description": "The 360 director timeline roll.",
                              "type": "number"
                            },
                            "time_code": {
                              "description": "The 360 director timeline time code. This field is required only when **spatial.director_timeline** is defined.",
                              "example": 5,
                              "type": "number"
                            },
                            "yaw": {
                              "description": "The 360 director timeline yaw. This value must be between `0` and `360`, and it's required only when **spatial.director_timeline** is defined.",
                              "example": 125,
                              "type": "number"
                            }
                          },
                          "required": [
                            "pitch",
                            "time_code",
                            "yaw"
                          ]
                        },
                        "type": "array"
                      },
                      "field_of_view": {
                        "description": "The 360 field of view. This value must be between `30` and `90`; the default value is `50`.",
                        "example": 50,
                        "type": "number"
                      },
                      "projection": {
                        "description": "The 360 spatial projection.\n\nOption descriptions:\n * `cubical` - Use cubical projection.\n * `cylindrical` - Use cylindrical projection.\n * `dome` - Use dome projection.\n * `equirectangular` - Use equirectangular projection.\n * `pyramid` - Use pyramid projection.\n",
                        "enum": [
                          "cubical",
                          "cylindrical",
                          "dome",
                          "equirectangular",
                          "pyramid"
                        ],
                        "type": "string"
                      },
                      "stereo_format": {
                        "description": "The 360 spatial stereo format.\n\nOption descriptions:\n * `left-right` - Use left-right stereo.\n * `mono` - Use monaural audio.\n * `top-bottom` - Use top-bottom stereo.\n",
                        "enum": [
                          "left-right",
                          "mono",
                          "top-bottom"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The upload procedure has begun.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8002: No user is associated with the access token.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 4101: The authenticated user's maximum disk space has been reached.\n* Error code 4102: The authenticated user's allotted weekly quota has been reached.\n* Error code 4104: The authenticated user's allotted daily quota has been reached.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: The request contains invalid body parameters.\n* Error code 2205: The body of the request isn't formatted properly.\n* Error code 2230: The upload type is invalid.\n* Error code 3116: The **type** payload parameter was supplied instead of **upload.approach**. Use **upload.approach** starting from API version 3.4.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "500": {
            "description": "Error code 4003: There is a problem initiating the upload.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/videos"
        ],
        "x-mill-path-template": "/users/+user_id/videos"
      }
    },
    "/users/{user_id}/videos/{video_id}": {
      "get": {
        "summary": "Check if the user owns a video",
        "description": "This method determines whether the authenticated user is the owner of the specified video.",
        "operationId": "check_if_user_owns_video",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The authenticated user owns the video.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "The authenticated user doesn't own the video.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/me/videos/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/videos/!video_id"
      }
    },
    "/users/{user_id}/videos/{video_id}/destinations": {
      "get": {
        "summary": "Get all the destinations of a one-time event",
        "description": "This method returns every destination of the specified event. The authenticated user must be the owner of the event.",
        "operationId": "get_one_time_event_destinations",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event destinations were returned.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/event-destination"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destinations.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/videos/{video_id}/destinations"
        ],
        "x-mill-path-template": "/users/+user_id/videos/!video_id/destinations"
      },
      "post": {
        "summary": "Create a one-time event destination",
        "description": "This method creates a destination for the specified event. The authenticated user must be the owner of the event.",
        "operationId": "create_one_time_event_destination",
        "tags": [
          "Live\\Event destinations"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.live.simulcast.destination+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "description": "The title to display for the simulcast.",
                    "example": "My channel",
                    "type": "string"
                  },
                  "is_enabled": {
                    "description": "Whether the destination is enabled for simulcasting.",
                    "example": true,
                    "type": "boolean"
                  },
                  "privacy": {
                    "description": "The privacy setting of the destination. Be sure to choose a value that corresponds to your service.\n\nOption descriptions:\n * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.\n * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.\n * `all_friends` - The privacy setting is `all_friends` for Facebook.\n * `everyone` - The privacy setting is `everyone` for Facebook.\n * `private` - The privacy setting is `private` for YouTube.\n * `public` - The privacy setting is `public` for YouTube.\n * `self` - The privacy setting is `self` for Facebook.\n * `unlisted` - The privacy setting is `unlisted` for YouTube.\n",
                    "enum": [
                      "CONNECTIONS",
                      "PUBLIC",
                      "all_friends",
                      "everyone",
                      "private",
                      "public",
                      "self",
                      "unlisted"
                    ],
                    "example": "public",
                    "type": "string"
                  },
                  "provider_destination_id": {
                    "description": "The ID of the destination on the specified service, such as the YouTube channel ID or the Facebook page ID.",
                    "example": "bda55c6b3ba4",
                    "type": "string"
                  },
                  "provider_video_id": {
                    "description": "The ID of the scheduled video.",
                    "example": "6817807391346708000",
                    "nullable": true,
                    "type": "string"
                  },
                  "scheduled_at": {
                    "description": "The time in Unix timestamp format when live streaming is scheduled to start.",
                    "example": 1625754461,
                    "type": "number"
                  },
                  "service_name": {
                    "description": "The service to simulcast to.\n\nOption descriptions:\n * `custom_rtmp` - Simulcast to a custom service.\n * `facebook` - Simulcast to Facebook Live.\n * `linkedin` - Simulcast to LinkedIn Live.\n * `youtube` - Simulcast to YouTube Live.\n",
                    "enum": [
                      "custom_rtmp",
                      "facebook",
                      "linkedin",
                      "youtube"
                    ],
                    "example": "youtube",
                    "type": "string"
                  },
                  "stream_key": {
                    "description": "The RTMP stream key.",
                    "example": "da056692-ba63-4749-a6eb-a476a22b3acd",
                    "type": "string"
                  },
                  "stream_url": {
                    "description": "The RTMP URL for receiving the video stream.",
                    "example": "rtmp://mycooldomain.com/live",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the simulcast destination.\n\nOption descriptions:\n * `channel` - The destination is a YouTube channel.\n * `custom` - The destination is custom.\n * `organization` - The destination is a LinkedIn organization.\n * `page` - The destination is a Facebook page.\n * `profile` - The destination is a Facebook or LinkedIn profile.\n",
                    "enum": [
                      "channel",
                      "custom",
                      "organization",
                      "page",
                      "profile"
                    ],
                    "example": "channel",
                    "type": "string"
                  }
                },
                "required": [
                  "display_name",
                  "service_name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "* Error code 2204: Parameters are missing, or the body data is invalid.\n* Error code 13003: You can create only one LinkedIn destination per event.\n* Error code 13004: You can create only one YouTube destination per event.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the event destinations.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/vnd.vimeo.live.simulcast.destination+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/videos/{video_id}/destinations"
        ],
        "x-mill-path-template": "/users/+user_id/videos/!video_id/destinations"
      }
    },
    "/users/{user_id}/videos/{video_id}/m3u8_playback": {
      "get": {
        "summary": "Get an M3U8 playback URL for a one-time event",
        "description": "This method returns an M3U8 playback URL for the specified event stream. You should use this endpoint only in conjunction with our recommended procedure for playing events via HLS. For more information, see our [HLS guide](https://developer.vimeo.com/api/live/playback).",
        "operationId": "get_one_time_event_m3u8_playback",
        "tags": [
          "Videos\\Live M3U8 playback"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The M3U8 playback URL was returned."
          },
          "401": {
            "description": "Error code 8000: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3200: The authenticated user can't access the M3U8 playback URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5000: No such event or user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/videos/{video_id}/m3u8_playback"
        ],
        "x-mill-path-template": "/users/+user_id/videos/!video_id/m3u8_playback"
      }
    },
    "/users/{user_id}/watchlater": {
      "get": {
        "summary": "Get all the videos in the user's Watch Later queue",
        "description": "This method returns every video from the authenticated user's Watch Later queue.",
        "operationId": "get_watch_later_queue",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `embeddable` - Return embeddable videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "embeddable"
              ]
            }
          },
          {
            "description": "Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). This parameter is required only when **filter** is `embeddable`.",
            "in": "query",
            "name": "filter_embeddable",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date added.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays"
              ]
            }
          }
        ],
        "responses": {
          "304": {
            "description": "The user hasn't added any videos to their Watch Later queue since the given `If-Modified-Since` header."
          },
          "200": {
            "description": "The videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/watchlater"
        ],
        "x-mill-path-template": "/users/+user_id/watchlater"
      }
    },
    "/users/{user_id}/watchlater/{video_id}": {
      "delete": {
        "summary": "Remove a video from the user's Watch Later queue",
        "description": "This method removes the specified video from the authenticated user's Watch Later queue.",
        "operationId": "delete_video_from_watch_later",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was removed."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/watchlater/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/watchlater/!video_id"
      },
      "get": {
        "summary": "Check if the user has added a video to their Watch Later queue",
        "description": "This method checks the authenticated user's Watch Later queue for the specified video.",
        "operationId": "check_watch_later_queue",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video is in the user's Watch Later queue.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "The video isn't in the user's Watch Later queue.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "private"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/watchlater/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/watchlater/!video_id"
      },
      "put": {
        "summary": "Add a video to the user's Watch Later queue",
        "description": "This method adds the specified video to the authenticated user's Watch Later queue.",
        "operationId": "add_video_to_watch_later",
        "tags": [
          "Watch Later Queue\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was added."
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/me/watchlater/{video_id}"
        ],
        "x-mill-path-template": "/users/+user_id/watchlater/!video_id"
      }
    },
    "/videos": {
      "get": {
        "summary": "Search for videos",
        "description": "This method returns all the videos that match custom search criteria.",
        "operationId": "search_videos",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page.\n\nOption descriptions:\n * `CC` - Return videos under any Creative Commons license.\n * `CC-BY` - Return CC BY, or attribution-only, videos.\n * `CC-BY-NC` - Return CC BY-NC, or Attribution-NonCommercial, videos.\n * `CC-BY-NC-ND` - Return CC BY-NC-ND, or Attribution-NonCommercial-NoDerivs, videos.\n * `CC-BY-NC-SA` - Return CC BY-NC-SA, or Attribution-NonCommercial-ShareAlike, videos.\n * `CC-BY-ND` - Return CC BY-ND, or Attribution-NoDerivs, videos.\n * `CC-BY-SA` - Return CC BY-SA, or Attribution-ShareAlike, videos.\n * `CC0` - Return CC0, or public domain, videos.\n * `categories` - Filter by categories.\n * `duration` - Filter by duration.\n * `in-progress` - Return in-progress videos.\n * `minimum_likes` - Filter by minimum likes.\n * `trending` - Return trending videos.\n * `upload_date` - Filter by upload date.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "CC",
                "CC-BY",
                "CC-BY-NC",
                "CC-BY-NC-ND",
                "CC-BY-NC-SA",
                "CC-BY-ND",
                "CC-BY-SA",
                "CC0",
                "categories",
                "duration",
                "in-progress",
                "minimum_likes",
                "trending",
                "upload_date"
              ]
            }
          },
          {
            "description": "A comma-separated list of video URLs to find. Querying, filtering, and sorting aren't supported when using this field.",
            "in": "query",
            "name": "links",
            "required": false,
            "schema": {
              "type": "string",
              "example": "https://vimeo.com/122375452,https://vimeo.com/273576296"
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "staff picks"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `comments` - Sort the results by number of comments.\n * `date` - Sort the results by date.\n * `duration` - Sort the results by duration.\n * `likes` - Sort the results by number of likes.\n * `plays` - Sort the results by number of plays.\n * `relevant` - Sort the results by relevance.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "comments",
                "date",
                "duration",
                "likes",
                "plays",
                "relevant"
              ]
            }
          },
          {
            "description": "A comma-separated list of video URIs to find. Querying, filtering, and sorting aren't supported when using this field.",
            "in": "query",
            "name": "uris",
            "required": false,
            "schema": {
              "type": "string",
              "example": "/videos/122375452,/videos/273576296"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search results were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2101: Either the **uris** or **links** parameter has filtering or sorting arguments.\n* Error code 2204: A problem occurred with the batch request.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "503": {
            "description": "* Search is disabled.\n* Error code 7300: An internal search error occurred.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos"
      }
    },
    "/videos/{container_uuid}/transcript/{texttrack_id}/metadata": {
      "get": {
        "summary": "Get the transcript metadata of a text track",
        "description": "This method returns the transcript metadata of the specified text track.",
        "operationId": "get_transcript_metadata",
        "tags": [
          "Videos\\Transcripts"
        ],
        "parameters": [
          {
            "description": "The UUID of the video container.",
            "in": "path",
            "name": "container_uuid",
            "required": true,
            "schema": {
              "type": "string",
              "example": "f086816d-8da8-4c97-8380-967f4e9f4e62"
            }
          },
          {
            "description": "The ID of the text track.",
            "in": "path",
            "name": "texttrack_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The transcript metadata of the text track was returned.",
            "content": {
              "application/vnd.vimeo.video.transcript_metadata": {
                "schema": {
                  "$ref": "#/components/schemas/transcript-metadata"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5022: No such transcript exists.",
            "content": {
              "application/vnd.vimeo.video.transcript_metadata": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!container_uuid/transcript/+texttrack_id/metadata"
      }
    },
    "/videos/{video_id}": {
      "delete": {
        "summary": "Delete a video",
        "description": "This method deletes the specified video. The authenticated user must be the owner of the video.",
        "operationId": "delete_video",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video was deleted."
          },
          "403": {
            "description": "The authenticated user can't delete the video.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id"
      },
      "get": {
        "summary": "Get a specific video",
        "description": "This method returns a single video.",
        "operationId": "get_video",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "Whether to return timestamps in the description as links.",
            "in": "query",
            "name": "time_links",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video was returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id"
      },
      "patch": {
        "summary": "Edit a video",
        "description": "This method edits the specified video.",
        "operationId": "edit_video",
        "tags": [
          "Videos\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content_rating": {
                    "description": "A list of values describing the content in this video. For a full list of values, use the [`/contentratings`](https://developer.vimeo.com/api/reference/videos#get_content_ratings) endpoint.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "custom_url": {
                    "description": "The custom link of the video. This link doesn't include the base URL and the username or user ID of the video's owner.",
                    "example": "puppies",
                    "type": "string"
                  },
                  "description": {
                    "description": "The description of the video. This field can hold a maximum of 5000 characters.",
                    "example": "A celebration of 10 years of Staff Picks.",
                    "type": "string"
                  },
                  "embed": {
                    "properties": {
                      "airplay": {
                        "description": "Whether AirPlay is enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "audio_tracks": {
                        "description": "Whether multiple audio tracks can appear in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "buttons": {
                        "properties": {
                          "embed": {
                            "description": "Whether to show the button for embeds on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "fullscreen": {
                            "description": "Whether to show the button for fullscreen mode on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "hd": {
                            "description": "Whether to show the button for HD video on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "like": {
                            "description": "Whether to show the button for likes on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "scaling": {
                            "description": "Whether to show the button for scaling on the embeddable player in fullscreen mode.",
                            "example": true,
                            "type": "boolean"
                          },
                          "share": {
                            "description": "Whether to show the button for shares on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          },
                          "watchlater": {
                            "description": "Whether to show the button for watching later on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "cards": {
                        "description": "A collection of cards associated with the selected video.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "display_time": {
                              "description": "The number of seconds for which the card appears.",
                              "type": "number"
                            },
                            "headline": {
                              "description": "The title of the card.",
                              "type": "string"
                            },
                            "id": {
                              "description": "The UUID of the card.",
                              "type": "string"
                            },
                            "image_url": {
                              "description": "The URL of the thumbnail for the card.",
                              "type": "string"
                            },
                            "teaser": {
                              "description": "The description of the card.",
                              "type": "string"
                            },
                            "timecode": {
                              "description": "The playback timestamp, given in seconds, when the card appears.",
                              "type": "number"
                            },
                            "url": {
                              "description": "The URL of the card.",
                              "type": "string"
                            }
                          }
                        },
                        "type": "array"
                      },
                      "chapters": {
                        "description": "Whether chapters are enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "chromecast": {
                        "description": "Whether the Chromecast button appears in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "closed_captions": {
                        "description": "Whether closed captions are enabled in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "color": {
                        "description": "The main color of the embeddable player.",
                        "example": "#1ab7ea",
                        "type": "string"
                      },
                      "end_screen": {
                        "properties": {
                          "type": {
                            "description": "The end screen type.\n\nOption descriptions:\n * `empty` - The end screen is empty.\n * `loop` - The end screen loops the video playback.\n * `share` - The end screen includes sharing options.\n * `thumbnail` - The end screen includes the thumbnail of the video.\n",
                            "enum": [
                              "empty",
                              "loop",
                              "share",
                              "thumbnail"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "logos": {
                        "properties": {
                          "custom": {
                            "properties": {
                              "active": {
                                "description": "Whether to show the active custom logo on the embeddable player.",
                                "example": true,
                                "type": "boolean"
                              },
                              "id": {
                                "description": "The ID of the custom logo that will show on the emeddable player.",
                                "example": 462119,
                                "nullable": true,
                                "type": "number"
                              },
                              "link": {
                                "description": "The URL that loads when the user clicks the custom logo.",
                                "example": "https://example.com",
                                "nullable": true,
                                "type": "string"
                              },
                              "sticky": {
                                "description": "Whether the custom logo is always visible on the embeddable player (`true`) or whether the logo appears and disappears with the rest of the UI (`false`).",
                                "example": true,
                                "type": "boolean"
                              }
                            },
                            "type": "object"
                          },
                          "vimeo": {
                            "description": "Whether to show the Vimeo logo on the embeddable player.",
                            "example": true,
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "play_button": {
                        "description": "An object representing the play button's settings.",
                        "properties": {
                          "position": {
                            "description": "The position of the play button within the embeddable player.\n\nOption descriptions:\n * `auto` - Use Vimeo's default positioning for the play button.\n * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.\n * `center` - The play button is positioned in the center of the player.\n",
                            "enum": [
                              "auto",
                              "bottom",
                              "center"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "playbar": {
                        "description": "Whether to show the playbar on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "quality_selector": {
                        "description": "Whether to show the quality selector in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "skipping_forward": {
                        "description": "Whether users can skip forward in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "title": {
                        "properties": {
                          "name": {
                            "description": "How to handle the video title in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the video title.\n * `show` - Show the video title.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "owner": {
                            "description": "How to handle the owner information in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the owner info.\n * `show` - Show the owner info.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          },
                          "portrait": {
                            "description": "How to handle the owner portrait in the title bar of the embeddable player.\n\nOption descriptions:\n * `hide` - Hide the portrait.\n * `show` - Show the portrait.\n * `user` - Enable the user to decide.\n",
                            "enum": [
                              "hide",
                              "show",
                              "user"
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "transcript": {
                        "description": "Whether the transcript controls appear in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "volume": {
                        "description": "Whether to show the volume selector on the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "embed_domains": {
                    "description": "The complete list of domains the video can be embedded on. This field overwrites existing domains and requires that **privacy_embed** have the value `whitelist`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "embed_domains_add": {
                    "description": "A list of domains intended to be added to an existing set of domains. This field requires that **privacy_embed** have the value `whitelist`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "embed_domains_delete": {
                    "description": "A list of domains intended to be removed from an existing set of domains. This field requires that **privacy_embed** have the value `whitelist`.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "hide_from_vimeo": {
                    "description": "Whether to hide the video from everyone except the video's owner. When the value is `true`, unlisted video links work only for the video's owner.",
                    "example": false,
                    "type": "boolean"
                  },
                  "license": {
                    "description": "The Creative Commons license under which the video is offered.\n\nOption descriptions:\n * `by` - The video is offered under CC BY, or the attibution-only license.\n * `by-nc` - The video is offered under CC BY-NC, or the Attribution-NonCommercial license.\n * `by-nc-nd` - The video is offered under CC BY-NC-ND, or the Attribution-NonCommercian-NoDerivs license.\n * `by-nc-sa` - The video is offered under CC BY-NC-SA, or the Attribution-NonCommercial-ShareAlike licence.\n * `by-nd` - The video is offered under CC BY-ND, or the Attribution-NoDerivs license.\n * `by-sa` - The video is offered under CC BY-SA, or the Attribution-ShareAlike license.\n * `cc0` - The video is offered under CC0, or public domain, videos.\n",
                    "enum": [
                      "by",
                      "by-nc",
                      "by-nc-nd",
                      "by-nc-sa",
                      "by-nd",
                      "by-sa",
                      "cc0"
                    ],
                    "type": "string"
                  },
                  "locale": {
                    "description": "The video's default language. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.",
                    "example": "en-US",
                    "type": "string"
                  },
                  "name": {
                    "description": "The title of the video. This field can hold a maximum of 128 characters.",
                    "example": "Celebrating 10 Years of Staff Picks",
                    "type": "string"
                  },
                  "password": {
                    "description": "The password. When you set **privacy.view** to `password`, you must provide the password as an additional parameter. This field can hold a maximum of 32 characters.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "properties": {
                      "add": {
                        "description": "Whether a user can add the video to a showcase, channel, or group.",
                        "example": true,
                        "type": "boolean"
                      },
                      "comments": {
                        "description": "The privacy level required to comment on the video.\n\nOption descriptions:\n * `anybody` - Anyone can comment on the video.\n * `contacts` - Only the owner's contacts can comment on the video.\n * `nobody` - No one can comment on the video.\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "nobody"
                        ],
                        "type": "string"
                      },
                      "download": {
                        "description": "Whether a user can download the video. This field isn't available to Vimeo Free members.",
                        "example": true,
                        "type": "boolean"
                      },
                      "embed": {
                        "description": "The video's embed setting. Specify the `whitelist` value to restrict embedding to a specific set of domains. For more information, see our [Interacting with Videos](https://developer.vimeo.com/api/guides/videos/interact#set-off-site-privacy) guide.\n\nOption descriptions:\n * `private` - The video can't be embedded.\n * `public` - The video can be embedded.\n * `whitelist` - The video can be embedded on the specified domains only.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "type": "string"
                      },
                      "view": {
                        "description": "The video's privacy setting. When this value is `users`, `application/json` is the only valid content type. Also, some privacy settings are unavailable to Vimeo Free members; for more information, see our [Help Center](https://vimeo.zendesk.com/hc/en-us/articles/224817847).\n\nOption descriptions:\n * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only those who follow the owner on Vimeo can access the video. _This field is deprecated._\n * `disable` - The video is embeddable, but it's hidden on Vimeo and can't be played. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one except the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the video.\n * `unlisted` - Only those with the private link can access the video.\n * `users` - Only Vimeo members can access the video. _This field is deprecated._\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "disable",
                          "nobody",
                          "password",
                          "unlisted",
                          "users"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "review_page": {
                    "properties": {
                      "active": {
                        "description": "Whether to enable video review.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "spatial": {
                    "properties": {
                      "director_timeline": {
                        "description": "An array representing the 360 director timeline.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "pitch": {
                              "description": "The 360 director timeline pitch. This value must be between −90 and 90, and you must specify it only when **spatial.director_timeline** is defined.",
                              "example": 70,
                              "type": "number"
                            },
                            "roll": {
                              "description": "The 360 director timeline roll.",
                              "type": "number"
                            },
                            "time_code": {
                              "description": "The 360 director timeline time code. This paramater is required only when **spatial.director_timeline** is defined.",
                              "example": 5,
                              "type": "number"
                            },
                            "yaw": {
                              "description": "The 360 director timeline yaw. This value must be between 0 and 360, and you must specify it only when **spatial.director_timeline** is defined.",
                              "example": 125,
                              "type": "number"
                            }
                          },
                          "required": [
                            "pitch",
                            "time_code",
                            "yaw"
                          ]
                        },
                        "type": "array"
                      },
                      "field_of_view": {
                        "description": "The 360 field of view. This value must be between 30 and 90. The default is 50.",
                        "example": 50,
                        "type": "number"
                      },
                      "projection": {
                        "description": "The 360 spatial projection.\n\nOption descriptions:\n * `cubical` - Use cubical projection.\n * `cylindrical` - Use cylindrical projection.\n * `dome` - Use dome projection.\n * `equirectangular` - Use equirectangular projection.\n * `pyramid` - Use pyramid projection.\n",
                        "enum": [
                          "cubical",
                          "cylindrical",
                          "dome",
                          "equirectangular",
                          "pyramid"
                        ],
                        "type": "string"
                      },
                      "stereo_format": {
                        "description": "The 360 spatial stereo format.\n\nOption descriptions:\n * `left-right` - Use left-right stereo.\n * `mono` - Use monaural audio.\n * `top-bottom` - Use top-bottom stereo.\n",
                        "enum": [
                          "left-right",
                          "mono",
                          "top-bottom"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The video was edited.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/video"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user doesn't own the video.\n* The **privacy** field is `disable`, and the authenticated user can't set extra embed options.\n* The **privacy** field is `contacts`, and the authenticated user can't follow creators.\n* The authenticated user has an opted-out Pro account, and **privacy.view** is `users`, `password`, `nobody`, or `public`.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id"
      }
    },
    "/videos/{video_id}/albums": {
      "get": {
        "summary": "Get all the showcases that contain a video",
        "description": "This method returns all the showcases that contain the specified video.",
        "operationId": "get_video_albums",
        "tags": [
          "Videos\\Showcases"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The showcases were returned.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/album"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* Error code 3433: No such video exists.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/albums"
      },
      "patch": {
        "summary": "Add or remove a video from a list of showcases",
        "description": "This method adds or removes the specified video to or from multiple showcases.",
        "operationId": "add_or_remove_multiple_albums",
        "tags": [
          "Videos\\Showcases"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.album+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "add": {
                    "description": "The array of showcases to add the video to. Specify these with a batch request; see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) guide for more information.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "description": "The showcase URI to add the video to.",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  },
                  "remove": {
                    "description": "The array of showcases to remove the video from. Specify these with a batch request; see our [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests) guide for more information.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "description": "The showcase URI to remove the video from.",
                          "type": "string"
                        }
                      }
                    },
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The videos were added or removed.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/album"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error code 3433: No such video exists.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/albums"
      }
    },
    "/videos/{video_id}/animated_thumbsets": {
      "get": {
        "summary": "Get all the animated thumbnails of a video",
        "description": "This method returns all the sets of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_all_animated_thumbset",
        "tags": [
          "Videos\\Animated thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The sets of animated thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/animated-thumbset"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* Error code 5001: The authenticated user doesn't own the video.\n* Error code 5017: No such set of animated thumbnails exists.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/animated_thumbsets"
      },
      "post": {
        "summary": "Create a set of animated thumbnails for a video",
        "description": "This method creates a set of animated thumbnails for the specified video. Please note that you can't create more than four sets of animated thumbnails for the same video.",
        "operationId": "create_animated_thumbset",
        "tags": [
          "Videos\\Animated thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.animatedthumbnails+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration": {
                    "description": "The duration of the animation in seconds. The maximum value is 6.",
                    "example": 5,
                    "type": "number"
                  },
                  "start_time": {
                    "description": "The time in seconds corresponding to the start of the animation in the video. The default value is 0.",
                    "example": 2,
                    "type": "number"
                  }
                },
                "required": [
                  "duration"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The set of animated thumbnails was created.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/animated-thumbset"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2204: A parameter is invalid.\n* Error code 3130: The video can't have more than four sets of animated thumbnails.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "The user can't create a set of animated thumbnails from the specified section of the video.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "429": {
            "description": "The authenticated user is rate-limited from creating new animated thumbnails.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/animated_thumbsets"
      }
    },
    "/videos/{video_id}/animated_thumbsets/{picture_id}": {
      "delete": {
        "summary": "Delete a set of animated thumbnails for a video",
        "description": "This method deletes a set of animated thumbnails for the specified video.",
        "operationId": "delete_animated_thumbset",
        "tags": [
          "Videos\\Animated thumbnails"
        ],
        "parameters": [
          {
            "description": "The UUID of the set of animated thumbnails.",
            "in": "path",
            "name": "picture_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "23f34-b34h4-34hb3"
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The set of animated thumbnails was deleted."
          },
          "404": {
            "description": "* Error code 5001: The authenticated user doesn't have permission to delete the animated thumbset.\n* Error code 5017: No such set of animated thumbnails exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/animated_thumbsets/*picture_id"
      },
      "get": {
        "summary": "Get a specific set of animated thumbnails",
        "description": "This method returns a particular set of animated thumbnails associated with the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_animated_thumbset",
        "tags": [
          "Videos\\Animated thumbnails"
        ],
        "parameters": [
          {
            "description": "The UUID of the set of animated thumbnails.",
            "in": "path",
            "name": "picture_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "23few-h4hw4t-45j5"
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The set of animated thumbnails was returned.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/animated-thumbset"
                }
              }
            }
          },
          "404": {
            "description": "* Error code 5001: The authenticated user doesn't own the video.\n* Error code 5017: No such set of animated thumbnails exists.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/animated_thumbsets/*picture_id"
      }
    },
    "/videos/{video_id}/animated_thumbsets/{picture_id}/status": {
      "get": {
        "summary": "Get the status of a set of animated thumbnails",
        "description": "This method returns the status of a particular set of animated thumbnails associated with the specified video. The status indicates whether the thumbnails are ready to use. The authenticated user must be the owner of the video.",
        "operationId": "get_animated_thumbset_status",
        "tags": [
          "Videos\\Animated thumbnails"
        ],
        "parameters": [
          {
            "description": "The UUID of the set of animated thumbnails.",
            "in": "path",
            "name": "picture_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "23few-h4hw4t-45j5"
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The status of the set of animated thumbnails was returned.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/animated-thumbset"
                }
              }
            }
          },
          "404": {
            "description": "* Error code 5001: The authenticated user doesn't own the video.\n* Error code 5017: No such set of animated thumbnails exists.",
            "content": {
              "application/vnd.vimeo.animatedthumbnails+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/animated_thumbsets/*picture_id/status"
      }
    },
    "/videos/{video_id}/available_albums": {
      "get": {
        "summary": "Get all the showcases to which the user can add or remove a specific video",
        "description": "This method returns every showcase to which the authenticated user can add or remove the specified video. The user must be the owner of the showcase.",
        "operationId": "get_available_video_showcases",
        "tags": [
          "Showcases\\Showcase videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by creation date.\n * `duration` - Sort the results by duration.\n * `videos` - Sort the results by number of videos.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date",
                "duration",
                "videos"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The showcases were returned.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/album"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error code 3433: The authenticated user can't add the video to or remove the video from any showcases.",
            "content": {
              "application/vnd.vimeo.album+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/available_albums"
      }
    },
    "/videos/{video_id}/available_channels": {
      "get": {
        "summary": "Get all the channels to which the user can add or remove a specific video",
        "description": "This method returns every channel to which the authenticated user can add or remove the specified video. The authenticated user must be a moderator of the channel.",
        "operationId": "get_available_video_channels",
        "tags": [
          "Channels\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channels were returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/channel"
                  }
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add or remove this video from a channel.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "* The authenticated user isn't a moderator of the channel.\n* Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/available_channels"
      }
    },
    "/videos/{video_id}/available_groups": {
      "get": {
        "summary": "Get all the groups to which the user can add or remove a specific video",
        "description": "This method returns every group to which the authenticated user can add or remove the specified video.",
        "operationId": "get_available_video_groups",
        "tags": [
          "Groups\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The groups were returned.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/group"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error code 3433: The authenticated user can't add the video to or remove the video from any groups.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.channel+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/available_groups"
      }
    },
    "/videos/{video_id}/categories": {
      "get": {
        "summary": "Get all the categories to which a video belongs",
        "description": "This method returns every category that contains the specified video.",
        "operationId": "get_video_categories",
        "tags": [
          "Categories\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The categories were returned.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/categories"
      },
      "put": {
        "summary": "Set categories for a video",
        "description": "This method sets multiple categories and subcategories for the specified video. Include the categories as a JSON block in the body of the request using the **category** field, like this: `[{ \"category\": \"Tech\" }, { \"category\": \"Music\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).",
        "operationId": "suggest_video_category",
        "tags": [
          "Categories\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.category+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "category": {
                    "description": "An array of the names of the desired categories.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "category"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The categories were set.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/category"
                }
              }
            }
          },
          "404": {
            "description": "No such video exists, or no such category exists.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own this video.",
            "content": {
              "application/vnd.vimeo.category+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/categories"
      }
    },
    "/videos/{video_id}/chapters": {
      "get": {
        "summary": "Get all the chapters of a video",
        "description": "This method returns every chapter of the specified video.",
        "operationId": "get_chapters",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The chapters were returned.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/chapter"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/chapters"
      },
      "post": {
        "summary": "Add a chapter to a video",
        "description": "This method adds a chapter to the specified video.",
        "operationId": "create_chapter",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video.chapter+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active_thumbnail_uri": {
                    "description": "The URI of the chapter's active thumbnail.",
                    "example": "/videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg",
                    "type": "string"
                  },
                  "thumbnail_uris": {
                    "description": "An array of URIs of the thumbnails associated with the video chapter.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "timecode": {
                    "description": "The timecode of the chapter in seconds from the start of the video.",
                    "example": 140,
                    "nullable": true,
                    "type": "number"
                  },
                  "title": {
                    "description": "The title of the chapter.",
                    "example": "Chapter 1",
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The chapter was added.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/chapter"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't add the chapter.\n* Error code 2204: The request contains errors.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/chapters"
      }
    },
    "/videos/{video_id}/chapters/temporary/pictures": {
      "post": {
        "summary": "Generate an upload link or timecode-based thumbnail for an unsaved video chapter",
        "description": "This method generates either an upload link or a timecode-based thumbnail for an unsaved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, specify the **timecode** parameter in the body of the request.",
        "operationId": "create_unsaved_chapter_thumbnail_or_upload_link",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timecode": {
                    "description": "The timecode, given in seconds from the start of the video, indicating when the thumbnail should be generated from the video.",
                    "example": 140,
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The upload link or chapter thumbnail was generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't perform this action.\n* Error code 2204: The request contains errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/chapters/temporary/pictures"
      }
    },
    "/videos/{video_id}/chapters/temporary/pictures/{uid}": {
      "get": {
        "summary": "Get a single chapter thumbnail associated with an unsaved video chapter",
        "description": "This method returns the specified thumbnail associated with an unsaved video chapter.",
        "operationId": "get_unsaved_chapter_thumbnail",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The unique ID of the thumbnail.",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string",
              "example": "24kjh4h4g38175db9f59fae9f7g9ekhg"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The chapter thumbnail was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "404": {
            "description": "* No such video or chapter exists.\n* Error code 5020: The specified chapter doesn't exist.\n* Error code 5021: The specified chapter belongs to a different video.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/chapters/temporary/pictures/+uid"
      }
    },
    "/videos/{video_id}/chapters/{chapter_id}": {
      "delete": {
        "summary": "Delete a chapter",
        "description": "This method deletes the specified chapter from a video. The authenticated user must be the owner of the video.",
        "operationId": "delete_chapter",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the chapter.",
            "in": "path",
            "name": "chapter_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The chapter was deleted."
          },
          "404": {
            "description": "* No such video or chapter exists.\n* Error code 5020: The specified chapter doesn't exist.\n* Error code 5021: The specified chapter belongs to a different video.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/chapters/+chapter_id"
      },
      "get": {
        "summary": "Get a specific chapter",
        "description": "This method returns a single chapter of the specified video.",
        "operationId": "get_chapter",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the chapter.",
            "in": "path",
            "name": "chapter_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The chapter was returned.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/chapter"
                }
              }
            }
          },
          "404": {
            "description": "* No such video or chapter exists.\n* Error code 5020: The specified chapter doesn't exist.\n* Error code 5021: The specified chapter belongs to a different video.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/chapters/+chapter_id"
      },
      "patch": {
        "summary": "Edit a chapter",
        "description": "This method edits the specified chapter of a video. The authenticated user must be the owner of the video.",
        "operationId": "edit_chapter",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the chapter.",
            "in": "path",
            "name": "chapter_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video.chapter+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active_thumbnail_uri": {
                    "description": "The URI of the chapter's active thumbnail.",
                    "example": "/videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg",
                    "type": "string"
                  },
                  "timecode": {
                    "description": "The timecode of the chapter in seconds from the start of the video.",
                    "example": 140,
                    "nullable": true,
                    "type": "number"
                  },
                  "title": {
                    "description": "The title of the chapter.",
                    "example": "Chapter 1",
                    "nullable": true,
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The chapter was edited.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/chapter"
                }
              }
            }
          },
          "404": {
            "description": "* No such video or chapter exists.\n* Error code 5020: The specified chapter doesn't exist.\n* Error code 5021: The specified chapter belongs to a different video.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 2204: There are errors in the request.",
            "content": {
              "application/vnd.vimeo.video.chapter+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/chapters/+chapter_id"
      }
    },
    "/videos/{video_id}/chapters/{chapter_id}/pictures": {
      "get": {
        "summary": "Get all the thumbnails associated with a saved video chapter",
        "description": "This method returns every thumbnail associated with the specified saved video chapter.",
        "operationId": "get_chapter_thumbnails",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the chapter.",
            "in": "path",
            "name": "chapter_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The chapter thumbnails were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't perform this action.\n* Error code 2204: The request contains errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "public"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/chapters/+chapter_id/pictures"
      },
      "post": {
        "summary": "Generate an upload link or timecode-based thumbnail for a saved video chapter",
        "description": "This method generates either an upload link or a timecode-based thumbnail for the specified saved video chapter. To generate the upload link, which enables the authenticated user to upload a chapter thumbnail image manually, leave the body of the request empty. To generate an automatic timecode-based thumbnail, include the **timecode** parameter in the body of the request.",
        "operationId": "create_chapter_thumbnail_or_upload_link",
        "tags": [
          "Videos\\Chapters"
        ],
        "parameters": [
          {
            "description": "The ID of the chapter.",
            "in": "path",
            "name": "chapter_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "timecode": {
                    "description": "The timecode, given in seconds from the start of the video, indicating when the thumbnail should be generated from the video.",
                    "example": 140,
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The chapter thumbnail or upload link was generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't perform this action.\n* Error code 2204: The request contains errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/chapters/+chapter_id/pictures"
      }
    },
    "/videos/{video_id}/comments": {
      "get": {
        "summary": "Get all the video comments on a video",
        "description": "This method returns every video comment on the specified video.",
        "operationId": "get_comments",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comments were returned.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/comments"
        ],
        "x-mill-path-template": "/videos/!video_id/comments"
      },
      "post": {
        "summary": "Add a video comment to a video",
        "description": "This method adds a video comment to the specified video.",
        "operationId": "create_comment",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.comment+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "richtext": {
                    "description": "The rich comment in JSON stringified form. Either this field or the **text** field is required.",
                    "example": "{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I love this!\"}]}]}",
                    "type": "string"
                  },
                  "text": {
                    "description": "The comment as plain text. Either this field or the **richtext** field is required.",
                    "example": "I love this!",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The comment was added.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2207: The comment text is missing.\n* Error code 2204: The comment rich text is invalid.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3301: The comment was flagged as spam.\n* Error code 3411: The authenticated user is unverified.\n* Error code 3412: The authenticated user can't comment.\n* Error code 3413: Comments are disabled for this video.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/comments"
        ],
        "x-mill-path-template": "/videos/!video_id/comments"
      }
    },
    "/videos/{video_id}/comments/{comment_id}": {
      "delete": {
        "summary": "Delete a video comment",
        "description": "This method deletes the specified video comment. The authenticated user must be the owner of the comment.",
        "operationId": "delete_comment",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the comment.",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The comment was deleted."
          },
          "404": {
            "description": "* No such video or comment exists.\n* Error code 5000: The comment wasn't deleted and still exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3415: The authenticated user can't delete this comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/comments/+comment_id"
      },
      "get": {
        "summary": "Get a specific video comment",
        "description": "This method returns the specified video comment.",
        "operationId": "get_comment",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the comment.",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The comment was returned.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          },
          "404": {
            "description": "No such video or comment exists.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/comments/+comment_id"
      },
      "patch": {
        "summary": "Edit a video comment",
        "description": "This method edits the specified video comment. The authenticated user must be the owner of the comment.",
        "operationId": "edit_comment",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the comment.",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.comment+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "richtext": {
                    "description": "The rich comment in JSON stringified form. Either this field or the **text** field is required.",
                    "example": "{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I love this!\"}]}]}",
                    "type": "string"
                  },
                  "text": {
                    "description": "The comment as plain text. Either this field or the **richtext** field is required.",
                    "example": "I love this!",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The comment was edited.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2207: The comment text is missing.\n* Error code 2204: The comment rich text is invalid.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3301: The comment was flagged as spam.\n* Error code 3411: The authenticated user is unverified.\n* Error code 3412: The authenticated user can't post comments.\n* Error code 3414: The authenticated user can't edit this comment.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/comments/+comment_id"
      }
    },
    "/videos/{video_id}/comments/{comment_id}/replies": {
      "get": {
        "summary": "Get all the replies to a video comment",
        "description": "This method returns every reply to the specified video comment.",
        "operationId": "get_comment_replies",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the comment.",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The replies were returned.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/comment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video or comment exists.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/comments/+comment_id/replies"
      },
      "post": {
        "summary": "Add a reply to a video comment",
        "description": "This method adds a reply to the specified video comment.",
        "operationId": "create_comment_reply",
        "tags": [
          "Videos\\Video comments"
        ],
        "parameters": [
          {
            "description": "The ID of the comment.",
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.comment+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "richtext": {
                    "description": "The rich comment in JSON stringified form.",
                    "example": "{\"type\":\"doc\",\"content\":[{\"type\":\"paragraph\",\"content\":[{\"type\":\"text\",\"text\":\"I love this!\"}]}]}",
                    "type": "string"
                  },
                  "text": {
                    "description": "The reply to the comment.",
                    "example": "I love this!",
                    "type": "string"
                  }
                },
                "required": [
                  "text"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The reply was added.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            }
          },
          "400": {
            "description": "* Error code 2207: The comment text is missing.\n* Error code 2204: The comment rich text is invalid.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3301: The comment was flagged as spam.\n* Error code 3411: The authenticated user is unverified.\n* Error code 3412: The authenticated user can't comment.\n* Error code 3413: Comments are disabled on this video.",
            "content": {
              "application/vnd.vimeo.comment+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "interact"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/comments/+comment_id/replies"
      }
    },
    "/videos/{video_id}/credits": {
      "get": {
        "summary": "Get all the credited users in a video",
        "description": "This method returns every credited user in a video.",
        "operationId": "get_video_credits",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The credited users were returned.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/credit"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/credits"
        ],
        "x-mill-path-template": "/videos/!video_id/credits"
      },
      "post": {
        "summary": "Credit a user in a video",
        "description": "This method adds a user credit to the specified video.",
        "operationId": "add_video_credit",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.credit+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "The email address of the credited person.",
                    "example": "user@example.com",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the credited person.",
                    "example": "Sam Doe",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of the credited person.",
                    "example": "Producer",
                    "type": "string"
                  },
                  "user_uri": {
                    "description": "The Vimeo URI of the credited person.",
                    "example": "/users/152184",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "name",
                  "role",
                  "user_uri"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The credit was added.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/credit"
                }
              }
            }
          },
          "400": {
            "description": "* A parameter is invalid.\n* The authenticated user has an unverified email address.\n* There is a user block between the video owner and the person receiving credit.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user doesn't own the video.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/credits"
        ],
        "x-mill-path-template": "/videos/!video_id/credits"
      }
    },
    "/videos/{video_id}/credits/available_users": {
      "get": {
        "summary": "Get users who can be credited on a video",
        "description": "This method returns the users who can be credited on the specified video.",
        "operationId": "available_users",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The search query to use to filter the results.",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Stop motion"
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by date followed.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users who can be credited were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/credits/available_users"
      }
    },
    "/videos/{video_id}/credits/{credit_id}": {
      "delete": {
        "summary": "Delete the credit for a user in a video",
        "description": "This method deletes the specified user credit from a video. The authenticated user must be the creator of the credit or the credited user.",
        "operationId": "delete_video_credit",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the credit.",
            "in": "path",
            "name": "credit_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The credit was deleted."
          },
          "400": {
            "description": "The authenticated user isn't the creator of the credit or the credited user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/credits/+credit_id"
      },
      "get": {
        "summary": "Get a specific credited user in a video",
        "description": "This method returns a single credited user in a video.",
        "operationId": "get_video_credit",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the credit.",
            "in": "path",
            "name": "credit_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The credit was returned.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/credit"
                }
              }
            }
          },
          "404": {
            "description": "No such video or credit exists.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/credits/+credit_id"
      },
      "patch": {
        "summary": "Edit the credit for a user in a video",
        "description": "This method edits the specified user credit in a video.",
        "operationId": "edit_video_credit",
        "tags": [
          "Videos\\Credits"
        ],
        "parameters": [
          {
            "description": "The ID of the credit.",
            "in": "path",
            "name": "credit_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.credit+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the credited person.",
                    "example": "Sam Doe",
                    "type": "string"
                  },
                  "role": {
                    "description": "The role of the credited person.",
                    "example": "Producer",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The credit was edited.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/credit"
                }
              }
            }
          },
          "400": {
            "description": "A parameter is invalid.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such video or credit exists.",
            "content": {
              "application/vnd.vimeo.credit+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/credits/+credit_id"
      }
    },
    "/videos/{video_id}/fragments": {
      "delete": {
        "summary": "Delete a video's fragments",
        "description": "This method deletes all fragments for the specified video.",
        "operationId": "delete_fragments",
        "tags": [
          "Videos\\Fragments"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 699033361
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The fragments were deleted."
          }
        },
        "x-mill-path-template": "/videos/!video_id/fragments"
      },
      "get": {
        "summary": "Get all the fragments for a video",
        "description": "This method returns all of the fragments associated with the specified video.",
        "operationId": "get_fragments",
        "tags": [
          "Videos\\Fragments"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 699033361
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The fragments were returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fragments"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/fragments"
      },
      "put": {
        "summary": "Update a video's fragments",
        "description": "This method updates the specified video with new fragments.",
        "operationId": "put_fragments",
        "tags": [
          "Videos\\Fragments"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 699033361
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The fragments were updated."
          }
        },
        "x-mill-path-template": "/videos/!video_id/fragments"
      }
    },
    "/videos/{video_id}/likes": {
      "get": {
        "summary": "Get all the users who have liked a video",
        "description": "This method returns every user who has liked the specified video.",
        "operationId": "get_video_likes",
        "tags": [
          "Likes\\Essentials"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `alphabetical` - Sort the results alphabetically.\n * `date` - Sort the results by join date.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "alphabetical",
                "date"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/likes"
        ],
        "x-mill-path-template": "/videos/!video_id/likes"
      }
    },
    "/videos/{video_id}/pictures": {
      "get": {
        "summary": "Get all the thumbnails of a video",
        "description": "This method returns all thumbnail images of the specified video. The authenticated user must have team permissions for the video.",
        "operationId": "get_video_thumbnails",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnails were returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/picture"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/pictures"
        ],
        "x-mill-path-template": "/videos/!video_id/pictures"
      },
      "post": {
        "summary": "Add a video thumbnail",
        "description": "This method adds a thumbnail image to the specified video. The authenticated user must have team permissions for the video.",
        "operationId": "create_video_thumbnail",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the image created by the **time** field should be the default thumbnail for the video.",
                    "example": true,
                    "type": "boolean"
                  },
                  "time": {
                    "description": "The time offset in seconds from which to create the thumbnail.",
                    "example": 300,
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The thumbnail image was added to the video.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/pictures"
        ],
        "x-mill-path-template": "/videos/!video_id/pictures"
      }
    },
    "/videos/{video_id}/pictures/{picture_id}": {
      "delete": {
        "summary": "Delete a video thumbnail",
        "description": "This method deletes the specified thumbnail image from a video. The authenticated user must have team permissions for the video.",
        "operationId": "delete_video_thumbnail",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "picture_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The thumbnail was deleted."
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/pictures/+picture_id"
      },
      "get": {
        "summary": "Get a specific video thumbnail",
        "description": "This method returns a single thumbnail image from the specified video. The authenticated user must have team permissions for the video.",
        "operationId": "get_video_thumbnail",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "picture_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The thumbnail was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/pictures/+picture_id"
      },
      "patch": {
        "summary": "Edit a video thumbnail",
        "description": "This method edits the specified video thumbnail image. The authenticated user must be the owner of the thumbnail.",
        "operationId": "edit_video_thumbnail",
        "tags": [
          "Videos\\Thumbnails"
        ],
        "parameters": [
          {
            "description": "The ID of the thumbnail.",
            "in": "path",
            "name": "picture_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.picture+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether this thumbnail is the default.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The thumbnail was edited.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/pictures/+picture_id"
      }
    },
    "/videos/{video_id}/presets/{preset_id}": {
      "delete": {
        "summary": "Remove an embed preset from a video",
        "description": "This method removes the specified embed preset from a video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.",
        "operationId": "delete_video_embed_preset",
        "tags": [
          "Embed Presets\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the embed preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The embed preset was removed."
          },
          "404": {
            "description": "No such video or embed preset exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/presets/+preset_id"
      },
      "get": {
        "summary": "Check if an embed preset has been added to a video",
        "description": "This method determines whether a video has the specified embed preset.",
        "operationId": "get_video_embed_preset",
        "tags": [
          "Embed Presets\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the embed preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The embed preset has been added to the video."
          },
          "404": {
            "description": "No such video or embed preset exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/presets/+preset_id"
      },
      "put": {
        "summary": "Add an embed preset to a video",
        "description": "This method adds an embed preset to the specified video. The authenticated user must either be the owner of the video or a team user with the contributor or admin role.",
        "operationId": "add_video_embed_preset",
        "tags": [
          "Embed Presets\\Videos"
        ],
        "parameters": [
          {
            "description": "The ID of the embed preset.",
            "in": "path",
            "name": "preset_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The embed preset was added to the video."
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/presets/+preset_id"
      }
    },
    "/videos/{video_id}/privacy/domains": {
      "get": {
        "summary": "Get all the domains on a video's allowlist",
        "description": "This method returns every domain on the specified video's allowlist.",
        "operationId": "get_video_privacy_domains",
        "tags": [
          "Videos\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The sort direction of the results.\n\nOption descriptions:\n * `asc` - Sort the results in ascending order.\n * `desc` - Sort the results in descending order.\n",
            "in": "query",
            "name": "direction",
            "required": false,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "description": "The way to sort the results.\n\nOption descriptions:\n * `default` - Sort the results by the video's allowlist ID.\n",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "default"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The domains were returned.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/domain"
                  }
                }
              }
            }
          },
          "403": {
            "description": "There are no domains on which the video can be embedded.",
            "content": {
              "application/vnd.vimeo.domain+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/privacy/domains"
      }
    },
    "/videos/{video_id}/privacy/domains/{domain}": {
      "delete": {
        "summary": "Remove a domain from a video's allowlist",
        "description": "This method removes the specified domain from a video's allowlist.",
        "operationId": "delete_video_privacy_domain",
        "tags": [
          "Videos\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The domain name.",
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The domain was removed."
          },
          "403": {
            "description": "The video's embed privacy setting isn't `whitelist`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such domain exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/privacy/domains/*domain"
      },
      "put": {
        "summary": "Add a domain to a video's allowlist",
        "description": "This method adds the specified domain to a video's allowlist.",
        "operationId": "add_video_privacy_domain",
        "tags": [
          "Videos\\Embed privacy"
        ],
        "parameters": [
          {
            "description": "The domain name.",
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string",
              "example": "example.com"
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The domain was added to the video's allowlist."
          },
          "403": {
            "description": "The video doesn't have a user-defined access list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/privacy/domains/*domain"
      }
    },
    "/videos/{video_id}/privacy/users": {
      "get": {
        "summary": "Get the users who can access an unlisted video",
        "description": "This method returns every user who has access to the specified unlisted video.",
        "operationId": "get_video_privacy_users",
        "tags": [
          "Videos\\Unlisted videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were returned.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No users can access this unlisted video.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/privacy/users"
        ],
        "x-mill-path-template": "/videos/!video_id/privacy/users"
      },
      "put": {
        "summary": "Permit a list of users to access an unlisted video",
        "description": "This method gives multiple users permission to access the specified unlisted video. The authenticated user must be the owner of the video. The body of the request should follow our [batch request format](https://developer.vimeo.com/api/common-formats#working-with-batch-requests): each object must contain a single **uri** field whose value is the URI of the user who can access the video.",
        "operationId": "add_video_privacy_users",
        "tags": [
          "Videos\\Unlisted videos"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The users were granted access to the unlisted video.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/privacy/users"
        ],
        "x-mill-path-template": "/videos/!video_id/privacy/users"
      }
    },
    "/videos/{video_id}/privacy/users/{user_id}": {
      "delete": {
        "summary": "Restrict a user from viewing an unlisted video",
        "description": "This method prevents a user from being able to view the specified unlisted video. The authenticated user must be the owner of the video.",
        "operationId": "delete_video_privacy_user",
        "tags": [
          "Videos\\Unlisted videos"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user was restricted from accessing the unlisted video."
          },
          "403": {
            "description": "The video isn't set to a user-defined access list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "No such user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/privacy/users/+user_id"
      },
      "put": {
        "summary": "Permit a single user to access an unlisted video",
        "description": "This method gives a single user permission to access the specified unlisted video. The authenticated user must be the owner of the video.",
        "operationId": "add_video_privacy_user",
        "tags": [
          "Videos\\Unlisted videos"
        ],
        "parameters": [
          {
            "description": "The ID of the user.",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 152184
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The user can already access this unlisted video."
          },
          "200": {
            "description": "The user was granted access to the unlisted video.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "403": {
            "description": "The video doesn't have a user-defined access list.",
            "content": {
              "application/vnd.vimeo.user+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/privacy/users/+user_id"
      }
    },
    "/videos/{video_id}/sessions/status": {
      "get": {
        "summary": "Get the ingest status of a one-time event",
        "description": "This method returns the ingest status of the specified event.",
        "operationId": "get_live_ingest_status",
        "tags": [
          "Live\\Event sessions"
        ],
        "parameters": [
          {
            "description": "The ID of the event.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ingest status was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event-session-status"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/sessions/status"
      }
    },
    "/videos/{video_id}/tags": {
      "get": {
        "summary": "Get all the tags of a video",
        "description": "This method returns all the tags associated with the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_video_tags",
        "tags": [
          "Videos\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tags were returned.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/tags"
      },
      "put": {
        "summary": "Add a list of tags to a video",
        "description": "This method adds multiple tags to the specified video. Include the tags as a JSON array  as the body of the request with the  **name** field, like this: `[{ \"name\": \"funny\"}, {\"name\": \"concert\" }]`. The authenticated user must have edit access to the video. For more information on batch requests like this one, see [Using Common Formats and Parameters](https://developer.vimeo.com/api/common-formats#working-with-batch-requests).",
        "operationId": "add_video_tags",
        "tags": [
          "Videos\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tags were added.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "* The request body wasn't supplied.\n* A parameter is invalid.\n* The request body doesn't contain a JSON-encoded list of tags.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't add tags to this video.\n* The total number of tags can't exceed 20.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/tags"
      }
    },
    "/videos/{video_id}/tags/{word}": {
      "delete": {
        "summary": "Remove a tag from a video",
        "description": "This method removes the specified tag from a video. The authenticated user must have edit access to the video.",
        "operationId": "delete_video_tag",
        "tags": [
          "Videos\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The tag word.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The tag was removed."
          },
          "400": {
            "description": "* A parameter is invalid.\n* The tag is invalid.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/tags/*word"
      },
      "get": {
        "summary": "Check if a tag has been added to a video",
        "description": "This method determines whether the specified tag has been added to a video. The authenticated user must be the owner of the video.",
        "operationId": "check_video_for_tag",
        "tags": [
          "Videos\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The tag word.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag has been added to the video.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "* A parameter is invalid.\n* The tag is invalid.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "The video has no such tag.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/tags/*word"
      },
      "put": {
        "summary": "Add a specific tag to a video",
        "description": "This method adds a single tag to the specified video. The authenticated user must have edit access to the video.",
        "operationId": "add_video_tag",
        "tags": [
          "Videos\\Tags"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The tag word.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string",
              "example": "awesome"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag was added.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "description": "* The tag is invalid.\n* An unsupported parameter was supplied.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The total number of tags can't exceed 20.",
            "content": {
              "application/vnd.vimeo.tag+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/tags/*word"
      }
    },
    "/videos/{video_id}/texttracks": {
      "get": {
        "summary": "Get all the text tracks of a video",
        "description": "This method returns every text track of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_text_tracks",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The text tracks were returned.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/text-track"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/videos/{video_id}/versions/{version_id}/texttracks",
          "/channels/{channel_id}/videos/{video_id}/texttracks"
        ],
        "x-mill-path-template": "/videos/!video_id/texttracks"
      },
      "post": {
        "summary": "Add a text track to a video",
        "description": "This method adds a text track to the specified video. For more information, see [Working with Text Track Uploads](https://developer.vimeo.com/api/upload/texttracks).",
        "operationId": "create_text_track",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video.texttrack+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the current text track is the *active text track,* or the one that appears in the player. Only one text track per language and type can be active.",
                    "example": true,
                    "type": "boolean"
                  },
                  "is_auto_generated": {
                    "description": "Whether the text track was uploaded automatically by the Seshat audio annotation management platform.",
                    "type": "boolean"
                  },
                  "is_edited": {
                    "description": "Whether the text track was uploaded by the Seshat audio annotation management platform after the user edited their transcript.",
                    "type": "boolean"
                  },
                  "language": {
                    "description": "The language of the text track. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.",
                    "example": "en-US",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the text track.",
                    "example": "Commentary",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of text track.\n\nOption descriptions:\n * `captions` - The text track is the captions type.\n * `chapters` - The text track is the chapters type.\n * `descriptions` - The text track is the descriptions type.\n * `metadata` - The text track is the metadata type.\n * `subtitles` - The text track is the subtitles type.\n",
                    "enum": [
                      "captions",
                      "chapters",
                      "descriptions",
                      "metadata",
                      "subtitles"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "language",
                  "name",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The text track was added.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/text-track"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't add the text track.\n* Error code 2204: The request contains errors.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/texttracks"
        ],
        "x-mill-path-template": "/videos/!video_id/texttracks"
      }
    },
    "/videos/{video_id}/texttracks/{texttrack_id}": {
      "delete": {
        "summary": "Delete a text track",
        "description": "This method deletes the specified text track from a video. The authenticated user must be the owner of the video.",
        "operationId": "delete_text_track",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the text track.",
            "in": "path",
            "name": "texttrack_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The text track was deleted."
          },
          "404": {
            "description": "* No such video or text track exists.\n* The authenticated user can't delete the text track.\n* Error code 5014: The specified text track doesn't exist.\n* Error code 5015: The specified text track belongs to a different video.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3430: The authenticated user doesn't have permission to access the text track.\n* Error code 3431: This text track is disabled.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "delete"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/texttracks/+texttrack_id"
      },
      "get": {
        "summary": "Get a specific text track",
        "description": "This method returns a single text track of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_text_track",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the text track.",
            "in": "path",
            "name": "texttrack_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The text track was returned.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/text-track"
                }
              }
            }
          },
          "404": {
            "description": "* No such video or text track exists.\n* Error code 5014: The specified text track doesn't exist.\n* Error code 5015: The specified text track belongs to a different video.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3430: The authenticated user doesn't have permission to access the text track.\n* Error code 3431: This text track is disabled.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/texttracks/+texttrack_id"
      },
      "patch": {
        "summary": "Edit a text track",
        "description": "This method edits the specified text track of a video. The authenticated user must be the owner of the video.",
        "operationId": "edit_text_track",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the text track.",
            "in": "path",
            "name": "texttrack_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video.texttrack+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the current text track is the *active text track,* or the one that appears in the player. Only one text track per language and per type can be active.",
                    "example": true,
                    "type": "boolean"
                  },
                  "language": {
                    "description": "The language of the text track. For a full list of supported languages, use the [`/languages?filter=texttracks`](https://developer.vimeo.com/api/reference/videos#get_languages) endpoint.",
                    "example": "en-US",
                    "type": "string"
                  },
                  "name": {
                    "description": "The name of the text track.",
                    "example": "Commentary",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of text track.\n\nOption descriptions:\n * `captions` - The text track is the captions type.\n * `chapters` - The text track is the chapters type.\n * `descriptions` - The text track is the descriptions type.\n * `metadata` - The text track is the metadata type.\n * `subtitles` - The text track is the subtitles type.\n",
                    "enum": [
                      "captions",
                      "chapters",
                      "descriptions",
                      "metadata",
                      "subtitles"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The text track was edited.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/text-track"
                }
              }
            }
          },
          "404": {
            "description": "* No such video or text track exists.\n* Error code 5014: The specified text track doesn't exist.\n* Error code 5015: The specified text track belongs to a different video.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "* The authenticated user can't edit the text track.\n* Error code 2204: There are errors in the request.\n* Error code 3430: The authenticated user doesn't have permission to access the text track.\n* Error code 3431: This text track is disabled.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/texttracks/+texttrack_id"
      }
    },
    "/videos/{video_id}/timelinethumbnails": {
      "post": {
        "summary": "Add a timeline event thumbnail to a video",
        "description": "This method adds a timeline event thumbnail to the specified video. The authenticated user must be the owner of the video.",
        "operationId": "create_video_custom_logo",
        "tags": [
          "Embed Presets\\Timeline events"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The timeline event thumbnail was added.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't add a timeline event thumbnail to the video.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "upload"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/timelinethumbnails"
      }
    },
    "/videos/{video_id}/timelinethumbnails/{thumbnail_id}": {
      "get": {
        "summary": "Get a timeline event thumbnail",
        "description": "This method returns a single timeline event thumbnail that belongs to the specified video.",
        "operationId": "get_video_custom_logo",
        "tags": [
          "Embed Presets\\Timeline events"
        ],
        "parameters": [
          {
            "description": "The ID of the timeline event thumbnail.",
            "in": "path",
            "name": "thumbnail_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The timeline event thumbnail was returned.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/picture"
                }
              }
            }
          },
          "403": {
            "description": "The authenticated user can't access the timeline event thumbnail.",
            "content": {
              "application/vnd.vimeo.picture+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/timelinethumbnails/+thumbnail_id"
      }
    },
    "/videos/{video_id}/transcripts/{texttrack_id}": {
      "get": {
        "summary": "Get transcript segments",
        "description": "This method returns the transcript segments of the specified text track.",
        "operationId": "get_transcript",
        "tags": [
          "Videos\\Transcripts"
        ],
        "parameters": [
          {
            "description": "The ID of the text track.",
            "in": "path",
            "name": "texttrack_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The transcript segments were returned.",
            "content": {
              "application/vnd.vimeo.video.segment": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/segment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "* Error code 2: The specified video doesn't exist.\n* Error code 5014: The specified text track doesn't exist.\n* Error code 5022: The specified transcript doesn't exist.",
            "content": {
              "application/vnd.vimeo.video.segment": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/transcripts/+texttrack_id"
      }
    },
    "/videos/{video_id}/trim": {
      "post": {
        "summary": "Start a trim operation for a video",
        "description": "This method starts a trim operation for the specified video.",
        "operationId": "clip_trim",
        "tags": [
          "Videos\\Nondestructive trimming"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "trim_end": {
                    "description": "The end position in seconds of the trim in the video.",
                    "example": "2.0",
                    "type": "string"
                  },
                  "trim_start": {
                    "description": "The start position in seconds of the trim in the video.",
                    "example": "1.0",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The trim operation was started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trimmed-video"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "Error code 3411: The authenticated user is unverified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/trim"
      }
    },
    "/videos/{video_id}/versions": {
      "get": {
        "summary": "Get all the versions of a video",
        "description": "This method returns every version of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_video_versions",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The versions were returned.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video-version"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-aliases": [
          "/channels/{channel_id}/videos/{video_id}/versions"
        ],
        "x-mill-path-template": "/videos/!video_id/versions"
      },
      "post": {
        "summary": "Add a version to a video",
        "description": "This method adds a version to the specified video. The authenticated user must be the owner of the video.",
        "operationId": "create_video_version",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video.version+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_name": {
                    "description": "The name of the version.",
                    "example": "untitled.mp4",
                    "type": "string"
                  },
                  "upload": {
                    "properties": {
                      "approach": {
                        "description": "The approach by which to upload the version.\n\nOption descriptions:\n * `post` - Use the POST approach.\n * `pull` - Use the pull approach.\n * `tus` - Use the tus approach.\n",
                        "enum": [
                          "post",
                          "pull",
                          "tus"
                        ],
                        "type": "string"
                      },
                      "link": {
                        "description": "The public URL from which to download the version when **upload.approach** is `pull`. This URL must be valid for at least 24 hours.",
                        "example": "https://example.com",
                        "type": "string"
                      },
                      "redirect_url": {
                        "description": "The app's redirect URL when **upload.approach** is `post`.",
                        "example": "https://example.com",
                        "type": "string"
                      },
                      "size": {
                        "description": "The upload size of the version.",
                        "example": "13623861",
                        "type": "string"
                      }
                    },
                    "required": [
                      "approach"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "file_name",
                  "upload"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The version was added.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/video-version"
                }
              }
            }
          },
          "400": {
            "description": "Error code 2204: The request input contains invalid version data.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "404": {
            "description": "* Error code 5011: An upload isn't associated with this version.\n* Error code 5012: A video isn't associated with this upload.\n* Error code 5013: The endpoint isn't available, because the specified version of the API is less than 3.4 and **upload.approach** isn't `tus`.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          },
          "403": {
            "description": "* Error code 3427: The authenticated user can't edit the video.\n* Error code 4104: The authenticated user's allotted daily quota has been reached.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions"
      }
    },
    "/videos/{video_id}/versions/{version_id}": {
      "delete": {
        "summary": "Delete a video version",
        "description": "This method deletes the specified version from a video. The authenticated user must be the owner of the video.",
        "operationId": "delete_video_version",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The video version was deleted."
          },
          "404": {
            "description": "* No such video exists.\n* Error code 2523: The version isn't associated with the video.\n* Error code 2538: The specified version is the video's current version and can't be deleted.\n* Error code 3200: The authenticated user can't access the versions of this video.\n* Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/versions/!version_id"
      },
      "get": {
        "summary": "Get a specific video version",
        "description": "This method returns a single version of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_video_version",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The video version was returned.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/video-version"
                }
              }
            }
          },
          "404": {
            "description": "* No such video exists.\n* Error code 3200: The authenticated user can't access the versions of this video.\n* Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions/!version_id"
      },
      "patch": {
        "summary": "Edit a video version",
        "description": "This method edits the specified version of a video. The authenticated user must be the owner of the video.",
        "operationId": "edit_video_version",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 12345
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video.version+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "A description of the video version. This description can make use of the full unicode character set.",
                    "example": "description with emoji",
                    "type": "string"
                  },
                  "is_current": {
                    "description": "Whether the video version is active.",
                    "example": true,
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The version was edited.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/video-version"
                }
              }
            }
          },
          "404": {
            "description": "* No such video exists.\n* Error code 2205: A parameter is invalid.\n* Error code 3200: The authenticated user can't access the versions of this video.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "401": {
            "description": "Error code 8003: The user credentials are invalid.",
            "content": {
              "application/vnd.vimeo.video.version+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "edit"
            ]
          }
        ],
        "x-mill-path-template": "/videos/!video_id/versions/!version_id"
      }
    },
    "/videos/{video_id}/versions/{version_id}/audiotracks": {
      "post": {
        "summary": "Create an audio track for a video version",
        "description": "This method creates a new audio track for a video version.",
        "operationId": "create_audio_track",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 53214124
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 42341324
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.vimeo.video.audio_track+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the audio track is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "language_code": {
                    "description": "The language of the audio track. For a full list of supported languages, use the [`/languages?filter=audiotracks`](https://developer.vimeo.com/api/reference/videos#get_languages) method.",
                    "example": "en-US",
                    "type": "string"
                  },
                  "provenance": {
                    "description": "The origin of the audio track.\n\nOption descriptions:\n * `ai_generated` - The audio track is generated by AI.\n * `user_uploaded` - The audio track is uploaded by a user.\n * `user_uploaded_and_ai_generated` - The audio track is uploaded by a user and contains AI content.\n",
                    "enum": [
                      "ai_generated",
                      "user_uploaded",
                      "user_uploaded_and_ai_generated"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of audio track.\n\nOption descriptions:\n * `commentary` - The audio track is the commentary type.\n * `descriptive` - The audio track is the descriptive type.\n * `main` - The audio track is the main type.\n",
                    "enum": [
                      "commentary",
                      "descriptive",
                      "main"
                    ],
                    "type": "string"
                  },
                  "upload": {
                    "properties": {
                      "approach": {
                        "description": "The type of upload approach. For more information about upload approaches, refer to [Working with Video Uploads](https://developer.vimeo.com/api/upload/videos#understanding-upload-approaches).\n\nOption descriptions:\n * `post` - The upload approach is POST.\n * `pull` - The upload approach is pull.\n * `tus` - The upload approach is tus.\n",
                        "enum": [
                          "post",
                          "pull",
                          "tus"
                        ],
                        "type": "string"
                      },
                      "link": {
                        "description": "The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when **approach** is `pull`.",
                        "example": "https://example.com/video.mp4",
                        "type": "string"
                      },
                      "size": {
                        "description": "The size in bytes of the asset to upload. The maximum value of this field is `268435456000`, which corresponds to 250 GB.",
                        "example": "13623861",
                        "type": "string"
                      }
                    },
                    "required": [
                      "approach"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "upload"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The audio track was created.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/alternate-audio-track"
                }
              }
            }
          },
          "404": {
            "description": "No such audio track exists.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions/!version_id/audiotracks"
      }
    },
    "/videos/{video_id}/versions/{version_id}/audiotracks/": {
      "get": {
        "summary": "Get all audio tracks for a video version",
        "description": "This method returns all audio tracks that are associated with the specified video version.",
        "operationId": "get_audio_tracks",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 53214124
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 42341324
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The audio tracks were returned.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/alternate-audio-track"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such audio track exists.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions/!version_id/audiotracks/"
      }
    },
    "/videos/{video_id}/versions/{version_id}/audiotracks/{audiotrack_id}": {
      "delete": {
        "summary": "Delete an audio track from a video version",
        "description": "This method deletes an audio track from the specified video version.",
        "operationId": "delete_audio_track",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the audio track.",
            "in": "path",
            "name": "audiotrack_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "39591d3f-7dm9-456b-bahd-bed12ec136cc"
            }
          },
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 53214124
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 42341324
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The audio track was deleted."
          },
          "404": {
            "description": "No such audio track exists.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions/!version_id/audiotracks/!audiotrack_id"
      },
      "get": {
        "summary": "Get an audio track for a video version",
        "description": "This method returns the specified audio track that is associated with a video version.",
        "operationId": "get_audio_track",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the audio track.",
            "in": "path",
            "name": "audiotrack_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "39591d3f-7dm9-456b-bahd-bed12ec136cc"
            }
          },
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 53214124
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 42341324
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The audio track was returned.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/alternate-audio-track"
                }
              }
            }
          },
          "404": {
            "description": "No such audio track exists.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions/!version_id/audiotracks/!audiotrack_id"
      },
      "patch": {
        "summary": "Edit an audio track for a video version",
        "description": "This method edits the metadata for the specified audio track.",
        "operationId": "edit_audio_track",
        "tags": [
          "Videos\\Versions"
        ],
        "parameters": [
          {
            "description": "The ID of the audio track.",
            "in": "path",
            "name": "audiotrack_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "39591d3f-7dm9-456b-bahd-bed12ec136cc"
            }
          },
          {
            "description": "The ID of the video version.",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 53214124
            }
          },
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 42341324
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/vnd.vimeo.video.audio_track+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "Whether the audio track is enabled.",
                    "example": true,
                    "type": "boolean"
                  },
                  "language_code": {
                    "description": "The language of the audio track. For a full list of supported languages, use the [`/languages?filter=audiotracks`](https://developer.vimeo.com/api/reference/videos#get_languages) method.",
                    "example": "en-US",
                    "type": "string"
                  },
                  "provenance": {
                    "description": "The origin of the audio track.\n\nOption descriptions:\n * `ai_generated` - The audio track is generated by AI.\n * `user_uploaded` - The audio track is uploaded by a user.\n * `user_uploaded_and_ai_generated` - The audio track is uploaded by a user and contains AI-generated content.\n",
                    "enum": [
                      "ai_generated",
                      "user_uploaded",
                      "user_uploaded_and_ai_generated"
                    ],
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of audio track.\n\nOption descriptions:\n * `commentary` - The audio track is the commentary type.\n * `descriptive` - The audio track is the descriptive type.\n * `main` - The audio track is the main type.\n",
                    "enum": [
                      "commentary",
                      "descriptive",
                      "main"
                    ],
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The audio track was edited.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/alternate-audio-track"
                }
              }
            }
          },
          "404": {
            "description": "No such audio track exists.",
            "content": {
              "application/vnd.vimeo.video.audio_track+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/versions/!version_id/audiotracks/!audiotrack_id"
      }
    },
    "/videos/{video_id}/versions/{version_id}/texttracks": {
      "get": {
        "summary": "Get all the text tracks of a video",
        "description": "This method returns every text track of the specified video. The authenticated user must be the owner of the video.",
        "operationId": "get_text_tracks_alt1",
        "tags": [
          "Videos\\Text tracks"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The text tracks were returned.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/text-track"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such video exists.",
            "content": {
              "application/vnd.vimeo.video.texttrack+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          }
        },
        "x-mill-path-aliased": true,
        "x-mill-path-template": "/videos/!video_id/versions/!version_id/texttracks"
      }
    },
    "/videos/{video_id}/videos": {
      "get": {
        "summary": "Get all the related videos of a video",
        "description": "This method returns every related video of the specified video.",
        "operationId": "get_related_videos",
        "tags": [
          "Videos\\Recommendations"
        ],
        "parameters": [
          {
            "description": "The ID of the video.",
            "in": "path",
            "name": "video_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 258684937
            }
          },
          {
            "description": "The attribute by which to filter the results.\n\nOption descriptions:\n * `related` - Return related videos.\n",
            "in": "query",
            "name": "filter",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "related"
              ]
            }
          },
          {
            "description": "The page number of the results to show.",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "description": "The number of items to show on each page of results, up to a maximum of 100.",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "type": "number",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The related videos were returned.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value of **filter** isn't `related`.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/legacy-error"
                }
              }
            }
          },
          "404": {
            "description": "Error code 5451: This resource is restricted in your region.",
            "content": {
              "application/vnd.vimeo.video+json": {
                "schema": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        },
        "x-mill-path-template": "/videos/!video_id/videos"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "bearer"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/access_token",
            "scopes": {
              "create": "Create new albums, channels, and so on",
              "delete": "Delete videos, albums, channels, and so on",
              "edit": "Edit existing videos, albums, channels, and so on",
              "email": "Access to email addresses",
              "interact": "Interact with Vimeo resources on a member's behalf, such as liking a video or following another member",
              "private": "Access private member data",
              "promo_codes": "Add, remove, and review Vimeo On Demand promotions",
              "public": "Access public member data",
              "purchase": "Purchase content",
              "purchased": "Access a member's Vimeo On Demand purchase history",
              "scim": "Manage users and team groups via the SCIM protocol",
              "stats": "Access video stats",
              "upload": "Upload videos",
              "video_files": "Access video files belonging to members with a PRO subscription or higher"
            }
          },
          "clientCredentials": {
            "tokenUrl": "/oauth/authorize/client",
            "scopes": {
              "create": "Create new albums, channels, and so on",
              "delete": "Delete videos, albums, channels, and so on",
              "edit": "Edit existing videos, albums, channels, and so on",
              "email": "Access to email addresses",
              "interact": "Interact with Vimeo resources on a member's behalf, such as liking a video or following another member",
              "private": "Access private member data",
              "promo_codes": "Add, remove, and review Vimeo On Demand promotions",
              "public": "Access public member data",
              "purchase": "Purchase content",
              "purchased": "Access a member's Vimeo On Demand purchase history",
              "scim": "Manage users and team groups via the SCIM protocol",
              "stats": "Access video stats",
              "upload": "Upload videos",
              "video_files": "Access video files belonging to members with a PRO subscription or higher"
            }
          }
        }
      }
    },
    "schemas": {
      "activity-3-1": {
        "title": "Activity 3.1",
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/category"
              }
            ],
            "description": "The category associated with the event. This field is present only when the activity type is `category`."
          },
          "channel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/channel"
              }
            ],
            "description": "The channel associated with the event. This field is present only when the activity type is `channel`."
          },
          "clip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The video associated with the activity."
          },
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/group"
              }
            ],
            "description": "The group associated with the event. This field is present only when the activity type is `group`."
          },
          "metadata": {
            "description": "Information about the activity's metadata.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the activity.",
                "properties": {
                  "related": {
                    "description": "The activity's related content.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/activities?offset=20",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "related"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "tag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/tag"
              }
            ],
            "description": "The tag associated with the event. This field is present only when the activity type is `tag`."
          },
          "time": {
            "description": "The time that the event occurred.",
            "example": "2017-05-17T17:46:09+00:00",
            "type": "string"
          },
          "type": {
            "description": "The activity type.\n\nOption descriptions:\n * `appearance` - The activity is an appearance action.\n * `category` - The activity is a category action.\n * `channel` - The activity is a channel action.\n * `facebook_feed` - The activity is a Facebook feed action.\n * `group` - The activity is a group action.\n * `like` - The activity is a like action.\n * `ondemand` - The activity is a Vimeo On Demand action.\n * `share` - The activity is a share action.\n * `tag` - The activity is a tag action.\n * `twitter_timeline` - The activity is a Twitter timeline action.\n * `upload` - The activity is an upload action.\n",
            "enum": [
              "appearance",
              "category",
              "channel",
              "facebook_feed",
              "group",
              "like",
              "ondemand",
              "share",
              "tag",
              "twitter_timeline",
              "upload"
            ],
            "example": "appearance",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The user associated with the event. This field is present only when the activity type is `like`, `appearance`, or `share`."
          }
        },
        "required": [
          "clip",
          "metadata",
          "time",
          "type"
        ],
        "type": "object"
      },
      "album": {
        "title": "Album",
        "properties": {
          "allow_continuous_play": {
            "description": "Whether the showcase permits continuous play.",
            "example": true,
            "type": "boolean"
          },
          "allow_downloads": {
            "description": "Whether the showcase permits downloads.",
            "example": true,
            "type": "boolean"
          },
          "allow_share": {
            "description": "Whether the showcase permits sharing.",
            "example": true,
            "type": "boolean"
          },
          "allowed_privacies": {
            "description": "An array of privacy settings supported for this showcase and the requesting user.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-mill-non-default": true
          },
          "autoplay": {
            "description": "Whether to start playback of the next video in the showcase's embedded playlist immediately after the previous video finishes.",
            "example": true,
            "type": "boolean"
          },
          "brand_color": {
            "description": "The hexadecimal color code for the color of the player buttons and showcase controls.",
            "example": "ff66ee",
            "nullable": true,
            "type": "string"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the showcase was created.",
            "example": "2015-12-17T21:32:44+00:00",
            "type": "string"
          },
          "custom_logo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The custom logo of the showcase.",
            "nullable": true
          },
          "description": {
            "description": "A brief description of the showcase's content.",
            "example": "Vimeo holiday videos!",
            "nullable": true,
            "type": "string"
          },
          "domain": {
            "description": "The custom domain of the showcase.",
            "example": "mycustomdomain.com",
            "nullable": true,
            "type": "string"
          },
          "domain_certificate_state": {
            "description": "The state of the SSL certificate that is associated with the showcase's domain.\n\nOption descriptions:\n * `null` - There is no associated HTTPS domain with this showcase.\n * `0` - The new certificate has yet to be processed.\n * `1` - The new certificate is being processed in the queue.\n * `2` - The certificate is being processed for renewal in the queue.\n * `3` - The new certificate has failed to be issued in the queue.\n * `4` - The certificate has failed to be renewed in the queue.\n * `5` - The certificate has been successfully issued.\n * `6` - The certificate has been successfully renewed.\n * `7` - The certificate has failed in the polling flow.\n * `8` - The certificate has failed to be renewed in the polling flow.\n",
            "enum": [
              "null",
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8
            ],
            "example": "null",
            "type": "string"
          },
          "duration": {
            "description": "The total duration in seconds of all the videos in the showcase.",
            "example": 1163,
            "type": "number"
          },
          "embed": {
            "description": "Embed data for the showcase.",
            "properties": {
              "html": {
                "description": "The responsive HTML code to embed the showcase's playlist on a website. This field appears only when the showcase has embeddable videos.",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "html"
            ],
            "type": "object"
          },
          "embed_brand_color": {
            "description": "Whether to show the showcase's custom brand color in the player of the showcase's embedded playlist.",
            "example": true,
            "nullable": true,
            "type": "boolean"
          },
          "embed_custom_logo": {
            "description": "Whether to show the showcase's custom logo in the player of the showcase's embedded playlist.",
            "example": true,
            "nullable": true,
            "type": "boolean"
          },
          "has_chosen_thumbnail": {
            "description": "Whether the showcase has a thumbnail.",
            "example": true,
            "type": "boolean"
          },
          "has_featured_content": {
            "description": "Whether the showcase has featured content.",
            "example": false,
            "type": "boolean"
          },
          "hide_from_vimeo": {
            "description": "Whether the showcase should be hidden from Vimeo when unlisted.",
            "example": false,
            "type": "boolean"
          },
          "hide_nav": {
            "description": "Whether to hide Vimeo navigation when displaying the showcase.",
            "example": true,
            "type": "boolean"
          },
          "hide_upcoming": {
            "description": "Whether to include the upcoming event in the showcase.",
            "example": false,
            "type": "boolean"
          },
          "hide_vimeo_logo": {
            "description": "Whether to hide the Vimeo logo in the player of the showcase's embedded playlist.",
            "example": true,
            "nullable": true,
            "type": "boolean"
          },
          "layout": {
            "description": "The type of layout for presenting the showcase.\n\nOption descriptions:\n * `grid` - The showcase videos appear in a grid.\n * `player` - The showcase videos appear in the player.\n",
            "enum": [
              "grid",
              "player"
            ],
            "example": "grid",
            "type": "string"
          },
          "link": {
            "description": "The URL of the showcase.",
            "example": "https://vimeo.com/showcase/Vimeo Holiday Videos!",
            "type": "string"
          },
          "loop": {
            "description": "Whether automatic playback restarts at the top of the showcase's embedded playlist after reaching the end of the last video in the playlist.",
            "example": true,
            "type": "boolean"
          },
          "metadata": {
            "description": "Metadata about the showcase.",
            "properties": {
              "connections": {
                "description": "Information about showcase connections.",
                "properties": {
                  "available_videos": {
                    "description": "Information about the authenticated user's videos that can be added to or removed from this showcase. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection. This data requires a bearer token with the `private` scope.",
                        "example": 14,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/albums/3706071/available_videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "requested_clip": {
                    "description": "Information about the requested video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "videos/1232",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "videos": {
                    "description": "Information about the videos that belong to the showcase.",
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 6,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/albums/3706071/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "available_videos",
                  "requested_clip",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "A list of resource URIs related to the showcase.",
                "nullable": true,
                "properties": {
                  "add_custom_thumbnails": {
                    "description": "An action indicating that the authenticated user is an administrator of the showcase and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/users/123456/albums/654321/custom_thumbnails",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "add_live_events": {
                    "description": "An action indicating that the authenticated user is an administrator of the showcase and may therefore add events. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/users/123456/albums/654321/live_events",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "add_logos": {
                    "description": "An action indicating that the authenticated user is an administrator of the showcase and may therefore add custom logos. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/users/123456/albums/654321/logos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "add_to": {
                    "description": "Information about adding or removing a video from the showcase. This data requires a bearer token with the `private` scope.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/albums/1234/videos/5678",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "add_videos": {
                    "description": "An action indicating that the authenticated user is an administrator of the showcase and may therefore add videos. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/users/123456/albums/654321/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "can_update_privacy_to_public": {
                    "description": "Whether the user can update the showcase privacy to public.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "delete": {
                    "description": "Information about where and how to delete a showcase.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit": {
                    "description": "Information about where and how to edit a showcase.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit_live_events": {
                    "description": "An action indicating that the authenticated user can edit event videos inside the showcase. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/users/123456/albums/654321/live_events",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "invite": {
                    "description": "Information about where and how to invite a team member to a showcase.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "view_privacy": {
                    "description": "Information about whether a user has permissions to view the privacy of the showcase.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "add_custom_thumbnails",
                  "add_live_events",
                  "add_logos",
                  "add_to",
                  "add_videos",
                  "can_update_privacy_to_public",
                  "delete",
                  "edit",
                  "edit_live_events",
                  "invite",
                  "view_privacy"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the showcase was last modified.",
            "example": "2018-02-06T21:24:17+00:00",
            "type": "string"
          },
          "name": {
            "description": "The display name of the showcase.",
            "example": "Vimeo Holiday Videos!",
            "type": "string"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active image of the showcase."
          },
          "privacy": {
            "description": "The privacy settings of the showcase.",
            "properties": {
              "password": {
                "description": "The showcase's password. This field appears only when **privacy.view** is `password`.",
                "example": "hunter1",
                "type": "string"
              },
              "view": {
                "description": "The access level of the showcase.\n\nOption descriptions:\n * `anybody` - Anyone can access the showcase. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The showcase doesn't appear on Vimeo, but the owner can embed it on other sites.\n * `nobody` - No one can access the showacse, including the owner. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the showcase.\n * `team` - Only the owner and members of the owner's team can access the showcase.\n * `unlisted` - The showcase can't be accessed if the URL omits its unlisted hash.\n",
                "enum": [
                  "anybody",
                  "embed_only",
                  "nobody",
                  "password",
                  "team",
                  "unlisted"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "view"
            ],
            "type": "object"
          },
          "resource_key": {
            "description": "The resource key of the showcase.",
            "example": "e5595241643259c658ed6c85ca82985a6341edc7",
            "type": "string"
          },
          "review_mode": {
            "description": "Whether showcase videos use the review mode URL.",
            "example": true,
            "type": "boolean"
          },
          "seo_allow_indexed": {
            "description": "Whether search engines can index the showcase.",
            "example": false,
            "type": "boolean"
          },
          "seo_description": {
            "description": "The SEO description of the showcase.",
            "nullable": true,
            "type": "string"
          },
          "seo_keywords": {
            "description": "The SEO keywords of the showcase.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "seo_title": {
            "description": "The SEO title of the showcase.",
            "nullable": true,
            "type": "string"
          },
          "share_link": {
            "description": "The URL for sharing the showcase.",
            "type": "string"
          },
          "sort": {
            "description": "The sort order of the showcase.\n\nOption descriptions:\n * `added_first` - Sort the showcase videos in order of those most recently added.\n * `added_last` - Sort the showcase videos in order of those least recently added.\n * `alphabetical` - Sort the showcase videos alphabetically.\n * `arranged` - Sort the showcase videos according to their custom arrangement.\n * `comments` - Sort the showcase videos by number of comments.\n * `likes` - Sort the showcase videos by number of likes.\n * `newest` - Sort the showcase videos in order of creation date with the newest first.\n * `oldest` - Sort the showcase videos in order of creation date with the oldest first.\n * `plays` - Sort the showcase videos by number of plays.\n",
            "enum": [
              "added_first",
              "added_last",
              "alphabetical",
              "arranged",
              "comments",
              "likes",
              "newest",
              "oldest",
              "plays"
            ],
            "example": "added_first",
            "type": "string"
          },
          "theme": {
            "description": "The color theme of the showcase.\n\nOption descriptions:\n * `dark` - The showcase uses the dark theme.\n * `standard` - The showcase uses the standard theme.\n",
            "enum": [
              "dark",
              "standard"
            ],
            "example": "dark",
            "type": "string"
          },
          "unlisted_hash": {
            "description": "The unlisted hash of the showcase. Omit this hash from the showcase URL to prevent access to the showcase on Vimeo.",
            "type": "string",
            "x-mill-non-default": true
          },
          "uri": {
            "description": "The URI of the showcase.",
            "example": "/users/152184/albums/3706071",
            "type": "string"
          },
          "url": {
            "description": "The custom Vimeo URL of the showcase.",
            "example": "my-custom-url",
            "nullable": true,
            "type": "string"
          },
          "use_custom_domain": {
            "description": "Whether the showcase uses a custom domain.",
            "example": false,
            "type": "boolean"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the showcase."
          },
          "web_brand_color": {
            "description": "Whether to use the showcase's brand color in the web layout.",
            "example": true,
            "type": "boolean"
          },
          "web_custom_logo": {
            "description": "Whether to use the showcase's custom logo in the web layout.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "allow_continuous_play",
          "allow_downloads",
          "allow_share",
          "allowed_privacies",
          "autoplay",
          "brand_color",
          "created_time",
          "custom_logo",
          "description",
          "domain",
          "domain_certificate_state",
          "duration",
          "embed",
          "embed_brand_color",
          "embed_custom_logo",
          "has_chosen_thumbnail",
          "has_featured_content",
          "hide_from_vimeo",
          "hide_nav",
          "hide_upcoming",
          "hide_vimeo_logo",
          "layout",
          "link",
          "loop",
          "metadata",
          "modified_time",
          "name",
          "pictures",
          "privacy",
          "resource_key",
          "review_mode",
          "seo_allow_indexed",
          "seo_description",
          "seo_keywords",
          "seo_title",
          "share_link",
          "sort",
          "theme",
          "uri",
          "url",
          "use_custom_domain",
          "user",
          "web_brand_color",
          "web_custom_logo"
        ],
        "type": "object"
      },
      "alternate-audio-track": {
        "title": "Alternate Audio Track",
        "properties": {
          "active": {
            "description": "Whether the audio track is enabled.",
            "example": true,
            "type": "boolean"
          },
          "download": {
            "description": "The downloads that are available for the audio track.",
            "items": {
              "type": "object",
              "properties": {
                "expires": {
                  "description": "The time in ISO 8601 format when the audio track link expires.",
                  "example": "2017-05-15T18:42:07+00:00",
                  "type": "string"
                },
                "extension": {
                  "description": "The file extension of the audio file.",
                  "example": "mp3",
                  "type": "string"
                },
                "link": {
                  "description": "The URL of the audio track download.",
                  "type": "string"
                },
                "rendition": {
                  "description": "The rendition of the audio track.\n\nOption descriptions:\n * `source` - The audio is the source file.\n",
                  "enum": [
                    "source"
                  ],
                  "example": "source",
                  "type": "string"
                }
              },
              "required": [
                "expires",
                "extension",
                "link",
                "rendition"
              ]
            },
            "type": "array"
          },
          "language": {
            "description": "The language of the audio track.",
            "properties": {
              "code": {
                "description": "The standard ISO 639-1 code for the language.",
                "example": "en-US",
                "type": "string"
              },
              "name": {
                "description": "The name of the language.",
                "example": "English (United States)",
                "type": "string"
              }
            },
            "required": [
              "code",
              "name"
            ],
            "type": "object"
          },
          "provenance": {
            "description": "The origin of the audio track.\n\nOption descriptions:\n * `ai_generated` - The audio track is generated by AI.\n * `user_uploaded` - The audio track is uploaded by a user.\n * `user_uploaded_and_ai_generated` - The audio track is uploaded by a user and contains AI-generated content.\n",
            "enum": [
              "ai_generated",
              "user_uploaded",
              "user_uploaded_and_ai_generated"
            ],
            "example": "ai_generated",
            "type": "string"
          },
          "quota": {
            "description": "The quota parameters for the audio tracks available for this version.",
            "properties": {
              "free": {
                "description": "The number of audio tracks availible for this version.",
                "type": "number"
              },
              "has_reached_quota": {
                "description": "Whether the current version has reached its maximum quota for audio tracks.",
                "type": "boolean"
              },
              "max": {
                "description": "The maximum number of audio tracks that the user can upload per version based on their subscription tier.",
                "type": "number"
              },
              "used": {
                "description": "The number of audio tracks used for this version.",
                "type": "number"
              }
            },
            "required": [
              "free",
              "has_reached_quota",
              "max",
              "used"
            ],
            "type": "object"
          },
          "transcode": {
            "description": "The transcode information for the audio track.",
            "properties": {
              "status": {
                "description": "The transcode status of the audio track.\n\nOption descriptions:\n * `complete` - Transcoding is complete. The audio track is available.\n * `error` - There was a transcoding error. The audio track isn't available.\n * `in_progress` - Transcoding is in progress. The audio track isn't available yet.\n",
                "enum": [
                  "complete",
                  "error",
                  "in_progress"
                ],
                "example": "complete",
                "type": "string"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "type": {
            "description": "The type of audio track.\n\nOption descriptions:\n * `commentary` - The audio track is a commentary.\n * `descriptive` - The audio track is descriptive for accessibility.\n * `main` - The audio track is dubbed audio.\n * `unknown` - The audio track category is unknown.\n",
            "enum": [
              "commentary",
              "descriptive",
              "main",
              "unknown"
            ],
            "example": "commentary",
            "type": "string"
          },
          "upload": {
            "description": "The upload information for the audio track.",
            "type": "object"
          },
          "uri": {
            "description": "The audio track's canonical relative URI.",
            "example": "/videos/258684937/versions/12345/audiotracks/12s343sd3",
            "type": "string"
          }
        },
        "required": [
          "active",
          "download",
          "language",
          "provenance",
          "quota",
          "transcode",
          "type",
          "upload",
          "uri"
        ],
        "type": "object"
      },
      "analytics": {
        "title": "Analytics",
        "properties": {
          "average_percent_watched": {
            "description": "The average percent watched in seconds of the corresponding Vimeo content.",
            "example": 50,
            "type": "number"
          },
          "average_time_watched": {
            "description": "The average time watched in seconds of the corresponding Vimeo content.",
            "example": 200,
            "type": "number"
          },
          "browser_name": {
            "description": "The name of the browser.",
            "example": "Firefox",
            "type": "string"
          },
          "city_name": {
            "description": "The name of the city.",
            "example": "Newburgh",
            "type": "string"
          },
          "country": {
            "properties": {
              "code": {
                "description": "The country code in ISO-3166 format.",
                "example": "US",
                "type": "string"
              },
              "name": {
                "description": "The name of the country.",
                "example": "United States",
                "type": "string"
              }
            },
            "required": [
              "code",
              "name"
            ],
            "type": "object"
          },
          "country_code": {
            "description": "The country code in ISO-3166 format.",
            "example": "US",
            "type": "string"
          },
          "country_name": {
            "description": "The name of the country.",
            "example": "United States",
            "type": "string"
          },
          "device_type": {
            "description": "The type of device.",
            "example": "Desktop",
            "type": "string"
          },
          "downloads": {
            "description": "The number of downloads of the corresponding Vimeo content.",
            "example": 1,
            "type": "number"
          },
          "drm_licenses_used": {
            "description": "The number of DRM licenses used. _This field is available only to users with the DRM feature._",
            "example": 1,
            "type": "number",
            "x-mill-non-default": true
          },
          "embed_domain": {
            "description": "The domain name of the website.",
            "example": "vimeo.com",
            "type": "string"
          },
          "embed_domain_path": {
            "description": "The path of the website URL.",
            "example": "vimeo.com",
            "type": "string"
          },
          "end_date": {
            "description": "The end time of the time interval in ISO 8601 format.",
            "example": "2023-11-06T21:04:47+00:00",
            "type": "string"
          },
          "finishes": {
            "description": "The number of finishes of the corresponding Vimeo content.",
            "example": 1,
            "type": "number"
          },
          "impressions": {
            "description": "The number of impressions of the corresponding Vimeo content.",
            "example": 1,
            "type": "number"
          },
          "mean_percent_watched": {
            "description": "The average percent watched in seconds of the corresponding Vimeo content.",
            "example": 50,
            "type": "number"
          },
          "mean_seconds_watched": {
            "description": "The average time watched in seconds of the corresponding Vimeo content.",
            "example": 200,
            "type": "number"
          },
          "metadata": {
            "properties": {
              "connections": {
                "properties": {
                  "video": {
                    "description": "The associated video object. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "comments": {
                        "description": "The number of comments on the associated video. This data requires a bearer token with the `private` scope.",
                        "example": 73,
                        "type": "number"
                      },
                      "created_time": {
                        "description": "The time in ISO 8601 format when the video was created. This data requires a bearer token with the `private` scope.",
                        "example": "2018-03-05T21:04:47+00:00",
                        "type": "string"
                      },
                      "duration": {
                        "description": "The duration of the associated video. This data requires a bearer token with the `private` scope.",
                        "type": "number"
                      },
                      "likes": {
                        "description": "The number of likes on the associated video. This data requires a bearer token with the `private` scope.",
                        "example": 37,
                        "type": "number"
                      },
                      "manage_link": {
                        "description": "The link to the video management page. This data requires a bearer token with the `private` scope.",
                        "example": "/manage/videos/258684937",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "title": {
                        "description": "The title of the associated video. This data requires a bearer token with the `private` scope.",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/videos/152184",
                        "type": "string"
                      }
                    },
                    "required": [
                      "comments",
                      "created_time",
                      "duration",
                      "likes",
                      "manage_link",
                      "options",
                      "title",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "video"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "os_name": {
            "description": "The name of the operating system.",
            "example": "Windows",
            "type": "string"
          },
          "region_code": {
            "description": "The ISO 3166-2 region code.",
            "example": "US-NY",
            "type": "string"
          },
          "region_name": {
            "description": "The name of the region.",
            "example": "New York",
            "type": "string"
          },
          "start_date": {
            "description": "The start time of the time interval in ISO 8601 format.",
            "example": "2023-11-05T21:04:47+00:00",
            "type": "string"
          },
          "streaming_type": {
            "description": "The streaming type of the video.\n\nOption descriptions:\n * `live` - The video is streamed in real time.\n * `non-live` - The video isn't streamed in real time.\n",
            "enum": [
              "live",
              "non-live"
            ],
            "example": "live",
            "type": "string"
          },
          "third_party_impressions": {
            "description": "The number of impressions from all non-Vimeo players.",
            "example": 1,
            "type": "number"
          },
          "total_seconds_watched": {
            "description": "The total time watched in seconds of the corresponding Vimeo content.",
            "example": 200,
            "type": "number"
          },
          "total_time_watched": {
            "description": "The total time watched in seconds of the corresponding Vimeo content.",
            "example": 200,
            "type": "number"
          },
          "unique_impressions": {
            "description": "The number of unique impressions of the corresponding Vimeo content.",
            "example": 1,
            "type": "number"
          },
          "unique_viewers": {
            "description": "The number of unique viewers of the corresponding Vimeo content.",
            "example": 1,
            "type": "number"
          },
          "views": {
            "description": "The number of views of the corresponding Vimeo content.",
            "example": 1,
            "type": "number"
          }
        },
        "required": [
          "average_percent_watched",
          "average_time_watched",
          "browser_name",
          "city_name",
          "country",
          "country_code",
          "country_name",
          "device_type",
          "downloads",
          "drm_licenses_used",
          "embed_domain",
          "embed_domain_path",
          "end_date",
          "finishes",
          "impressions",
          "mean_percent_watched",
          "mean_seconds_watched",
          "metadata",
          "os_name",
          "region_code",
          "region_name",
          "start_date",
          "streaming_type",
          "third_party_impressions",
          "total_seconds_watched",
          "total_time_watched",
          "unique_impressions",
          "unique_viewers",
          "views"
        ],
        "type": "object"
      },
      "ancestor-path": {
        "title": "Ancestor Path",
        "properties": {
          "link": {
            "description": "The link to the folder.",
            "type": "string"
          },
          "name": {
            "description": "The name of the folder.",
            "type": "string"
          }
        },
        "required": [
          "link",
          "name"
        ],
        "type": "object"
      },
      "animated-thumbnail": {
        "title": "Animated Thumbnail",
        "properties": {
          "duration": {
            "description": "The duration of the animated thumbnail in seconds.",
            "example": 4,
            "type": "number"
          },
          "file_format": {
            "description": "The file format of the animated thumbnail.",
            "example": "gif",
            "type": "string"
          },
          "file_size": {
            "description": "The file size of the animated thumbnail in bytes.",
            "example": 1440000,
            "type": "number"
          },
          "height": {
            "description": "The height of the animated thumbnail in pixels.",
            "example": 450,
            "type": "number"
          },
          "is_downloadable": {
            "description": "Whether the animated thumbnail can be downloaded.",
            "example": true,
            "type": "boolean"
          },
          "link": {
            "description": "The URL of the animated thumbnail file.",
            "example": "https://videoapi-muybridge-dev.vimeocdn.com/animated-thumbnails/image/7005be96-e5ab-4c4c-9cdd-8b6dfc2b304",
            "type": "string"
          },
          "link_with_play_button": {
            "description": "The URL of the animated thumbnail file with a play button overlay.",
            "example": "https://videoapi-muybridge-dev.vimeocdn.com/animated-thumbnails/image/7005be96-e5ab-4c4c-9cdd-8b6dfc2b304",
            "type": "string"
          },
          "profile_id": {
            "description": "The profile ID of the animated thumbnail.",
            "example": "Low",
            "type": "string"
          },
          "start_time": {
            "description": "The time in the video, in seconds, corresponding to the start of the animation.",
            "example": 0,
            "type": "number"
          },
          "uuid": {
            "description": "The ID of the animated thumbnail.",
            "example": "b2f1-711515ecf",
            "type": "string"
          },
          "width": {
            "description": "The width of the animated thumbnail in pixels.",
            "example": 800,
            "type": "number"
          }
        },
        "required": [
          "duration",
          "file_format",
          "file_size",
          "height",
          "is_downloadable",
          "link",
          "link_with_play_button",
          "profile_id",
          "start_time",
          "uuid",
          "width"
        ],
        "type": "object"
      },
      "animated-thumbset": {
        "title": "Animated Thumbset",
        "properties": {
          "clip_uri": {
            "description": "The URI of the video from which the sets of animated thumbnails were created.",
            "example": "/videos/23456",
            "type": "string"
          },
          "created_on": {
            "description": "The time in ISO 8601 format when the GIF was created.",
            "example": "1494888499",
            "type": "string"
          },
          "sizes": {
            "description": "An array of all the animated thumbnails in the set.",
            "items": {
              "$ref": "#/components/schemas/animated-thumbnail"
            },
            "type": "array"
          },
          "status": {
            "description": "The availability of the animated thumbnail.\n\nOption descriptions:\n * `cancelled` - The animated thumbnail's creation has been cancelled.\n * `completed` - The animated thumbnail has been created.\n * `failed` - The animated thumbnail's creation has failed.\n * `started` - The animated thumbnail's creation has started.\n",
            "enum": [
              "cancelled",
              "completed",
              "failed",
              "started"
            ],
            "example": "cancelled",
            "type": "string"
          },
          "uri": {
            "description": "The URI of the set of animated thumbnails.",
            "example": "/videos/234/animated_thumbsets/ww-4c4c-9cdd",
            "type": "string"
          }
        },
        "required": [
          "clip_uri",
          "created_on",
          "sizes",
          "status",
          "uri"
        ],
        "type": "object"
      },
      "api-app": {
        "title": "API App",
        "properties": {
          "capabilities": {
            "description": "The app's capabilities list.",
            "type": "object",
            "x-mill-non-default": true
          },
          "name": {
            "description": "The name of the API app.",
            "example": "Vimeo Android",
            "type": "string"
          },
          "uri": {
            "description": "The canonical URI of the API app.",
            "example": "/apps/12345",
            "type": "string"
          }
        },
        "required": [
          "capabilities",
          "name",
          "uri"
        ],
        "type": "object"
      },
      "auth": {
        "title": "Auth",
        "properties": {
          "access_token": {
            "description": "The access token string.",
            "example": "01019a4a62aec63db077317ab7bb429db75652401e",
            "type": "string"
          },
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/api-app"
              }
            ],
            "description": "The API application associated with the token."
          },
          "expires_on": {
            "description": "The token's expiration date.",
            "example": "1495048954",
            "type": "string"
          },
          "refresh_token": {
            "description": "The refresh token string. The Vimeo API doesn't currently support refresh tokens, but we plan to add this support in the future.",
            "example": "3d3bc8a9cb7debfd01b270e419b2d265983362f9",
            "type": "string"
          },
          "scope": {
            "description": "The scope or scopes that the token supports.",
            "example": "private create edit upload public",
            "type": "string"
          },
          "token_type": {
            "description": "The token type.\n\nOption descriptions:\n * `bearer` - The token is of the `bearer` type.\n",
            "enum": [
              "bearer"
            ],
            "example": "bearer",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The user associated with the token."
          }
        },
        "required": [
          "access_token",
          "app",
          "scope",
          "token_type"
        ],
        "type": "object"
      },
      "auth-error": {
        "title": "Auth Error",
        "properties": {
          "error": {
            "description": "The name of the error.",
            "example": "server_error",
            "type": "string"
          },
          "error_description": {
            "description": "The description of the error.",
            "example": "An error has occurred on Vimeo's servers. Please try again.",
            "type": "string"
          }
        },
        "required": [
          "error",
          "error_description"
        ],
        "type": "object"
      },
      "category": {
        "title": "Category",
        "properties": {
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active icon for the category."
          },
          "is_deprecated": {
            "description": "Whether the category is deprecated and should not be used for new categorization.",
            "example": false,
            "type": "boolean"
          },
          "last_video_featured_time": {
            "description": "The most recent time in ISO 8601 format when the video was featured.",
            "example": "2017-05-17T17:46:09+00:00",
            "type": "string"
          },
          "link": {
            "description": "The URL to access the category in a browser.",
            "example": "https://vimeo.com/categories/animation",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the category.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "channels": {
                    "description": "Information about the channels related to this category.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of channels on this connection.",
                        "example": 90,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/categories/animation/channels",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "groups": {
                    "description": "Information about the groups related to this category.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of groups on this connection.",
                        "example": 15,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/categories/animation/groups",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "users": {
                    "description": "Information about the users related to this category.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection.",
                        "example": 140,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/categories/animation/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "Information about the videos related to this category.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 960,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/categories/animation/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "channels",
                  "groups",
                  "users",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "The permissible actions related to the category.",
                "properties": {
                  "follow": {
                    "description": "An action indicating if the authenticated user has followed the category.",
                    "properties": {
                      "added": {
                        "description": "Whether the authenticated user has followed the category.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the user followed the category, or the null value if the user hasn't followed the category.",
                        "example": "2017-05-17T17:46:09+00:00",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The URI for following or unfollowing the category: PUT to this URI to follow the category, or DELETE to this URI to unfollow the category.",
                        "example": "/users/152184/categories/animation",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "follow"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "name": {
            "description": "The display name that identifies the category.",
            "example": "Animation",
            "type": "string"
          },
          "parent": {
            "description": "The container of the category's parent category, if the current category is a subcategory.",
            "nullable": true,
            "properties": {
              "link": {
                "description": "The URL to access the parent category in a browser.",
                "example": "https://vimeo.com/categories/animation",
                "type": "string"
              },
              "name": {
                "description": "The display name that identifies the parent category.",
                "example": "Animation",
                "type": "string"
              },
              "uri": {
                "description": "The unique identifier to access the parent of the category resource.",
                "example": "/categories/animation",
                "type": "string"
              }
            },
            "required": [
              "link",
              "name",
              "uri"
            ],
            "type": "object"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active picture for this category. The default shows vertical color bars."
          },
          "resource_key": {
            "description": "The resource key of the category.",
            "example": "e5595241643259c658ed6c85ca82985a6341edc7",
            "type": "string"
          },
          "subcategories": {
            "description": "All the subcategories that belong to the category, if the current category is a top-level parent.",
            "items": {
              "type": "object",
              "properties": {
                "link": {
                  "description": "The URL to access the subcategory in a browser.",
                  "example": "https://vimeo.com/categories/animation/2d/videos",
                  "type": "string"
                },
                "name": {
                  "description": "The display name that identifies the subcategory.",
                  "example": "2D",
                  "type": "string"
                },
                "uri": {
                  "description": "The unique identifier to access the subcategory.",
                  "example": "/categories/animation/subcategories/2d",
                  "type": "string"
                }
              },
              "required": [
                "link",
                "name",
                "uri"
              ]
            },
            "type": "array"
          },
          "top_level": {
            "description": "Whether the category isn't a subcategory of another category.",
            "example": true,
            "type": "boolean"
          },
          "uri": {
            "description": "The unique identifier to access the category resource.",
            "example": "/categories/animation",
            "type": "string"
          }
        },
        "required": [
          "is_deprecated",
          "last_video_featured_time",
          "link",
          "metadata",
          "name",
          "parent",
          "pictures",
          "resource_key",
          "top_level",
          "uri"
        ],
        "type": "object"
      },
      "channel": {
        "title": "Channel",
        "properties": {
          "categories": {
            "description": "The categories to which the channel belongs as specified by the channel moderators.",
            "items": {
              "$ref": "#/components/schemas/category"
            },
            "type": "array"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the channel was created.",
            "example": "2007-10-23T17:00:43+00:00",
            "type": "string"
          },
          "description": {
            "description": "A brief explanation of the channel's content.",
            "example": "We really love videos, and these are the videos we really, really love.",
            "nullable": true,
            "type": "string"
          },
          "header": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The banner that appears by default at the top of the channel page."
          },
          "link": {
            "description": "The URL to access the channel in a browser.",
            "example": "https://vimeo.com/channels/staffpicks",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the channel.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "privacy_users": {
                    "description": "Information provided to channel moderators about which users they have specifically permitted to access this private channel. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection. This data requires a bearer token with the `private` scope.",
                        "example": 36,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/channels/927/privacy/users",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "requested_clip": {
                    "description": "Information about the requested video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "videos/1232",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "users": {
                    "description": "Information about the users following or moderating this channel.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection.",
                        "example": 794634,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/channels/927/users",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "Information about the videos that belong to this channel.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 12448,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/channels/927/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "privacy_users",
                  "requested_clip",
                  "users",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "A list of resource URIs related to the channel.",
                "nullable": true,
                "properties": {
                  "add_moderators": {
                    "description": "An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/channels/1234/moderators",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "add_to": {
                    "description": "When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/channels/1234/videos/5678",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "follow": {
                    "description": "An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "added": {
                        "description": "Whether the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format that the user followed this channel, or the null value if the user hasn't followed the channel. This data requires a bearer token with the `private` scope.",
                        "example": "2017-05-22T17:50:11+00:00",
                        "nullable": true,
                        "type": "string"
                      },
                      "type": {
                        "description": "The authenticated user's role type. This data requires a bearer token with the `private` scope.\n\nOption descriptions:\n * `moderator` - The authenticated user is a moderator.\n * `subscriber` - The authenticated user is a subscriber.\n",
                        "enum": [
                          "moderator",
                          "subscriber"
                        ],
                        "example": "moderator",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The URI for following or unfollowing this channel. PUT to this URI to follow the channel, or DELETE to this URI to unfollow the channel. This data requires a bearer token with the `private` scope.",
                        "example": "/users/1234/channels/927",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "type",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "moderate_videos": {
                    "description": "An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/channels/1234/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "add_moderators",
                  "add_to",
                  "follow",
                  "moderate_videos"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the channel was last modified.",
            "example": "2018-03-21T22:52:29+00:00",
            "type": "string"
          },
          "name": {
            "description": "The display name that identifies the channel.",
            "example": "Vimeo Staff Picks",
            "type": "string"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active image for the channel. The default is the thumbnail of the last video added to the channel."
          },
          "privacy": {
            "description": "The privacy settings of the channel.",
            "properties": {
              "view": {
                "description": "The privacy setting of the channel.\n\nOption descriptions:\n * `anybody` - Anyone can access the channel. This privacy setting appears as `Public` on the Vimeo front end.\n * `moderators` - Only moderators can access the channel.\n * `users` - Only registered users can access the channel. _This field is deprecated._\n",
                "enum": [
                  "anybody",
                  "moderators",
                  "users"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "view"
            ],
            "type": "object"
          },
          "resource_key": {
            "description": "The channel resource key.",
            "example": "e5595241643259c658ed6c85ca82985a6341edc7",
            "type": "string"
          },
          "tags": {
            "description": "An array of all tags assigned to the channel.",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "type": "array"
          },
          "uri": {
            "description": "The unique identifier to access the channel resource.",
            "example": "/channels/927",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The Vimeo user who owns the channel."
          }
        },
        "required": [
          "categories",
          "created_time",
          "description",
          "header",
          "link",
          "metadata",
          "modified_time",
          "name",
          "pictures",
          "privacy",
          "resource_key",
          "tags",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "chapter": {
        "title": "Chapter",
        "properties": {
          "active_thumbnail_uri": {
            "description": "The URI of the active thumbnail.",
            "example": "/videos/12345678/chapters/12345/pictures/24kjh4h4g38175db9f59fae9f7g9ekhg",
            "type": "string"
          },
          "thumbnails": {
            "description": "The thumbnails associated with the video chapter.",
            "items": {
              "$ref": "#/components/schemas/picture"
            },
            "type": "array"
          },
          "timecode": {
            "description": "The timecode of the chapter in seconds from the start of the video.",
            "example": 140,
            "type": "number"
          },
          "title": {
            "description": "The title of the chapter.",
            "example": "Chapter 1",
            "type": "string"
          },
          "uri": {
            "description": "The relative URI of the chapter.",
            "example": "/videos/258684937/chapters/12345",
            "type": "string"
          }
        },
        "required": [
          "thumbnails",
          "timecode",
          "title",
          "uri"
        ],
        "type": "object"
      },
      "comment": {
        "title": "Comment",
        "properties": {
          "created_on": {
            "description": "The time in ISO 8601 format when the comment was posted.",
            "example": "2018-03-05T21:04:47+00:00",
            "type": "string"
          },
          "deleted_on": {
            "description": "The time in ISO 8601 format when the comment was deleted.",
            "example": "2017-05-16T15:05:43+00:00",
            "nullable": true,
            "type": "string"
          },
          "last_edited_on": {
            "description": "The time in ISO 8601 format when the comment was last edited.",
            "example": "2017-05-16T15:05:43+00:00",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "description": "The permalink to the comment.",
            "example": "https://vimeo.com/258684937#comment_12345",
            "type": "string"
          },
          "metadata": {
            "properties": {
              "connections": {
                "properties": {
                  "guest_user": {
                    "description": "Information about the guest user who posted the comment.",
                    "properties": {
                      "name": {
                        "description": "The display name of the guest user who posted the comment.",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The unique identifier to access the guest user resource.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "replies": {
                    "description": "Information about the replies to the comment.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of replies on this connection.",
                        "example": 42,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/comments/12345/replies",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "user": {
                    "description": "Information about the user who posted the comment.",
                    "properties": {
                      "badge": {
                        "description": "The user's badge type, if applicable.",
                        "nullable": true,
                        "type": "string"
                      },
                      "is_staff_picked": {
                        "description": "Whether the user has had a staff-picked video.",
                        "type": "boolean"
                      },
                      "link": {
                        "description": "The absolute URL of the authenticated users's profile page.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The display name of the user who posted the comment.",
                        "type": "string"
                      },
                      "pictures": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/picture"
                          }
                        ],
                        "description": "Information about the user's portraits."
                      },
                      "uri": {
                        "description": "The unique identifier to access the user resource.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "badge",
                      "is_staff_picked",
                      "link",
                      "name",
                      "pictures",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "guest_user",
                  "replies",
                  "user"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "replies": {
            "description": "The list of replies to the comment.",
            "items": {
              "$ref": "#/components/schemas/reply"
            },
            "type": "array"
          },
          "resource_key": {
            "description": "The comment's resource key string.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "richtext": {
            "description": "The stringified Rich Text JSON.",
            "nullable": true,
            "type": "string"
          },
          "text": {
            "description": "The content of the comment.",
            "example": "I love this!",
            "type": "string"
          },
          "text_decorations": {
            "description": "An array of text decorations for the note.",
            "example": "[]",
            "items": {
              "type": "object",
              "properties": {
                "assets": {
                  "description": "The assets that are needed to decorate the text.",
                  "properties": {
                    "user": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/user"
                        }
                      ],
                      "description": "The user object associated with the note's text decoration."
                    },
                    "video": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/video"
                        }
                      ],
                      "description": "The video object associated with the note's text decoration."
                    }
                  },
                  "type": "object"
                },
                "text": {
                  "description": "The note text to decorate.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of text decoration.\n\nOption descriptions:\n * `url` - The URL of the Vimeo video.\n",
                  "enum": [
                    "url"
                  ],
                  "example": "url",
                  "type": "string"
                }
              },
              "required": [
                "text",
                "type"
              ]
            },
            "type": "array"
          },
          "type": {
            "description": "The Vimeo content to which the comment relates.\n\nOption descriptions:\n * `video` - The comment is about a video.\n",
            "enum": [
              "video"
            ],
            "example": "video",
            "type": "string"
          },
          "uri": {
            "description": "The unique identifier to access the comment resource.",
            "example": "/videos/258684937/comments/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The user who posted the comment. _This field is deprecated. Use the `metadata.connections.user` field instead._",
            "nullable": true
          }
        },
        "required": [
          "created_on",
          "deleted_on",
          "last_edited_on",
          "link",
          "metadata",
          "replies",
          "resource_key",
          "richtext",
          "text",
          "text_decorations",
          "type",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "content-rating": {
        "title": "Content Rating",
        "properties": {
          "code": {
            "description": "The reason for the content rating.\n\nOption descriptions:\n * `advertisement` - The content contains an advertisement.\n * `drugs` - The content contains drug or alcohol use.\n * `language` - The content contains profanity or sexually suggestive language.\n * `nudity` - The content contains nudity.\n * `safe` - The content is suitable for all audiences.\n * `unrated` - The content hasn't been rated.\n * `violence` - The content contains violence or is graphic.\n",
            "enum": [
              "advertisement",
              "drugs",
              "language",
              "nudity",
              "safe",
              "unrated",
              "violence"
            ],
            "example": "violence",
            "type": "string"
          },
          "name": {
            "description": "The name of the content rating.",
            "example": "Violence",
            "type": "string"
          },
          "uri": {
            "description": "The canonical relative URI of the content rating.",
            "example": "/contentrating/violence",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "code",
          "name",
          "uri"
        ],
        "type": "object"
      },
      "creative-commons": {
        "title": "Creative Commons",
        "properties": {
          "code": {
            "description": "The type of Creative Commons license.\n\nOption descriptions:\n * `by` - Attribution.\n * `by-nc` - Attribution Non-Commercial.\n * `by-nc-nd` - Attribution Non-Commercial No Derivatives.\n * `by-nc-sa` - Attribution Non-Commercial Share Alike.\n * `by-nd` - Attribution No Derivatives.\n * `by-sa` - Attribution Share Alike.\n * `cc0` - Public Domain Dedication.\n",
            "enum": [
              "by",
              "by-nc",
              "by-nc-nd",
              "by-nc-sa",
              "by-nd",
              "by-sa",
              "cc0"
            ],
            "example": "by-sa",
            "type": "string"
          },
          "name": {
            "description": "The description of the Creative Commons license.",
            "example": "Attribution Share Alike",
            "type": "string"
          },
          "uri": {
            "description": "The canonical relative URI of the Creative Commons license.",
            "example": "/creativecommons/by-sa",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "code",
          "name",
          "uri"
        ],
        "type": "object"
      },
      "credit": {
        "title": "Credit",
        "properties": {
          "name": {
            "description": "The name of the person credited.",
            "example": "Sam Doe",
            "type": "string"
          },
          "role": {
            "description": "The character that the person portrayed, or the job that the person performed.",
            "example": "Themselves",
            "type": "string"
          },
          "uri": {
            "description": "The unique identifier to access the credit resource.",
            "example": "/videos/258684937/credits/1234",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The Vimeo user associated with the credit."
          },
          "video": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The video associated with the credit."
          }
        },
        "required": [
          "name",
          "role",
          "uri"
        ],
        "type": "object"
      },
      "domain": {
        "title": "Domain",
        "properties": {
          "allow_hd": {
            "description": "Whether to permit HD embeds on this domain.",
            "example": true,
            "type": "boolean"
          },
          "domain": {
            "description": "The domain name.",
            "example": "example.com",
            "type": "string"
          },
          "uri": {
            "description": "The URI of the domain.",
            "example": "/videos/258684937/privacy/domains/example.com",
            "type": "string"
          }
        },
        "required": [
          "allow_hd",
          "domain",
          "uri"
        ],
        "type": "object"
      },
      "editing-session": {
        "title": "Editing Session",
        "properties": {
          "has_watermark": {
            "description": "Whether the video has a watermark.",
            "type": "boolean"
          },
          "is_edited_by_tve": {
            "description": "Whether the video has been edited by Transcript Video Editing.",
            "type": "boolean"
          },
          "is_max_resolution": {
            "description": "Whether the current version of the video is at the maximum resolution.",
            "type": "boolean"
          },
          "is_music_licensed": {
            "description": "Whether the video has licensed music.",
            "type": "boolean"
          },
          "is_rated": {
            "description": "Whether the video has been rated.",
            "example": false,
            "type": "boolean"
          },
          "min_tier_for_movie": {
            "description": "The minimum required Vimeo membership for the user to be able to share the video.",
            "type": "string"
          },
          "result_video_hash": {
            "description": "The result video hash for the created video.",
            "type": "string"
          },
          "status": {
            "description": "The status of the video.\n\nOption descriptions:\n * `done` - The video is finished processing.\n * `failed` - Video processing has failed.\n * `processing` - The video is still being processed.\n",
            "enum": [
              "done",
              "failed",
              "processing"
            ],
            "example": "done",
            "type": "string"
          },
          "upload_attempt_id_version_uri": {
            "description": "The version's canonical relative URI.",
            "example": "/videos/258684937/versions/12345",
            "type": "string"
          },
          "version_uri": {
            "description": "The version's canonical relative URI.",
            "example": "/videos/258684937/versions/12345",
            "type": "string"
          },
          "vsid": {
            "description": "The ID of the video's editing session.",
            "type": "number"
          }
        },
        "required": [
          "has_watermark",
          "is_edited_by_tve",
          "is_max_resolution",
          "is_music_licensed",
          "is_rated",
          "min_tier_for_movie",
          "result_video_hash",
          "status",
          "vsid"
        ],
        "type": "object"
      },
      "embed-settings": {
        "title": "Embed Settings",
        "properties": {
          "airplay": {
            "description": "Whether AirPlay is enabled in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "ask_ai": {
            "description": "Whether Ask AI is enabled in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "audio_tracks": {
            "description": "Whether multiple audio tracks can appear in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "autopip": {
            "description": "Whether automatic picture-in-picture is enabled.",
            "example": true,
            "type": "boolean"
          },
          "badges": {
            "description": "A collection of the video's badges.",
            "properties": {
              "dolby_vision": {
                "description": "Whether the video was filmed using Dolby Vision.",
                "type": "boolean",
                "x-mill-non-default": true
              },
              "hdr": {
                "description": "Whether the video has an HDR-compatible transcode.",
                "example": true,
                "type": "boolean"
              },
              "hdr_10": {
                "description": "Whether the video was filmed using HDR10.",
                "type": "boolean",
                "x-mill-non-default": true
              },
              "hdr_10_plus": {
                "description": "Whether the video was filmed using HDR10 Plus.",
                "type": "boolean",
                "x-mill-non-default": true
              },
              "live": {
                "properties": {
                  "archived": {
                    "description": "Whether the video was streamed live.",
                    "example": false,
                    "type": "boolean"
                  },
                  "streaming": {
                    "description": "Whether the video is currently streaming live.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "archived",
                  "streaming"
                ],
                "type": "object"
              },
              "ott_4k": {
                "description": "Whether the video has a 4K-quality transcode.",
                "example": true,
                "type": "boolean"
              },
              "ott_5_1_audio": {
                "description": "Whether the video has 5.1 audio.",
                "example": true,
                "type": "boolean"
              },
              "ott_hevc": {
                "description": "Whether the video has an HEVC-compatible transcode.",
                "example": true,
                "type": "boolean"
              },
              "staff_pick": {
                "properties": {
                  "best_of_the_month": {
                    "description": "Whether the video is a Vimeo Staff Pick Best of the Month.",
                    "example": false,
                    "type": "boolean"
                  },
                  "best_of_the_year": {
                    "description": "Whether the video is a Vimeo Staff Pick Best of the Year.",
                    "example": false,
                    "type": "boolean"
                  },
                  "normal": {
                    "description": "Whether the video is a Vimeo Staff Pick.",
                    "example": true,
                    "type": "boolean"
                  },
                  "premiere": {
                    "description": "Whether the video is a Vimeo Staff Pick Premiere.",
                    "example": false,
                    "type": "boolean"
                  }
                },
                "required": [
                  "best_of_the_month",
                  "best_of_the_year",
                  "normal",
                  "premiere"
                ],
                "type": "object"
              },
              "stereo_spatial": {
                "description": "Whether the video was filmed using stereo spatial.",
                "type": "boolean",
                "x-mill-non-default": true
              },
              "vod": {
                "description": "Whether the video is a Vimeo On Demand video.",
                "example": false,
                "type": "boolean"
              },
              "weekend_challenge": {
                "description": "Whether the video is a Vimeo Weekend Challenge.",
                "example": false,
                "type": "boolean"
              }
            },
            "required": [
              "hdr",
              "live",
              "staff_pick",
              "vod",
              "weekend_challenge"
            ],
            "type": "object"
          },
          "buttons": {
            "description": "A collection of information about the buttons that appear on the interface of the embeddable player.",
            "properties": {
              "embed": {
                "description": "Whether the button for embeds appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "fullscreen": {
                "description": "Whether the button for fullscreen mode appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "hd": {
                "description": "Whether the button for HD videos appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "like": {
                "description": "Whether the button for likes appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "reaction": {
                "description": "Whether the button for reactions appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "scaling": {
                "description": "Whether the button for scaling appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "share": {
                "description": "Whether the button for shares appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "watchlater": {
                "description": "Whether the button for watching later appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "embed",
              "fullscreen",
              "hd",
              "like",
              "reaction",
              "scaling",
              "share",
              "watchlater"
            ],
            "type": "object"
          },
          "cards": {
            "description": "A collection of cards associated with the selected video.",
            "items": {
              "type": "object",
              "properties": {
                "display_time": {
                  "description": "The number of seconds for which the card appears.",
                  "type": "number"
                },
                "headline": {
                  "description": "The title of the card.",
                  "type": "string"
                },
                "id": {
                  "description": "The UUID of the card.",
                  "type": "string"
                },
                "image_url": {
                  "description": "The URL of the thumbnail for the card.",
                  "type": "string"
                },
                "teaser": {
                  "description": "The description of the card.",
                  "type": "string"
                },
                "timecode": {
                  "description": "The playback timestamp, given in seconds, when the card appears.",
                  "type": "number"
                },
                "url": {
                  "description": "The URL of the card.",
                  "type": "string"
                }
              },
              "required": [
                "display_time",
                "headline",
                "id",
                "image_url",
                "teaser",
                "timecode",
                "url"
              ]
            },
            "type": "array"
          },
          "chapters": {
            "description": "Whether chapters are enabled in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "chromecast": {
            "description": "Whether the Chromecast button appears in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "closed_captions": {
            "description": "Whether closed captions are enabled in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "color": {
            "description": "The second player color, which controls the player accent color. _This field is identical to **colors.color_two**._",
            "example": "#0a0808",
            "type": "string"
          },
          "colors": {
            "description": "A collection of information about player colors.",
            "properties": {
              "color_four": {
                "description": "The fourth player color, which controls the player background color.",
                "example": "#aabbcc",
                "type": "string"
              },
              "color_one": {
                "description": "The first player color, which controls the color of the progress bar, buttons, and more.",
                "example": "#112233",
                "type": "string"
              },
              "color_three": {
                "description": "The third player color, which controls the color of text and icons.",
                "example": "#778899",
                "type": "string"
              },
              "color_two": {
                "description": "The second player color, which controls the player accent color. _This field is identical to **color**._",
                "example": "#445566",
                "type": "string"
              }
            },
            "required": [
              "color_four",
              "color_one",
              "color_three",
              "color_two"
            ],
            "type": "object"
          },
          "email_capture_form": {
            "description": "The email capture form settings associated with the video. _This field is deprecated._",
            "type": "object"
          },
          "end_screen": {
            "description": "A collection of information about the embeddable player's end screen.",
            "properties": {
              "type": {
                "description": "How the embeddable player handles the end screen.\n\nOption descriptions:\n * `empty` - The end screen is empty.\n * `loop` - The end screen loops the video playback.\n * `share` - The end screen includes sharing options.\n * `thumbnail` - The end screen includes the thumbnail of the video.\n",
                "enum": [
                  "empty",
                  "loop",
                  "share",
                  "thumbnail"
                ],
                "example": "empty",
                "type": "string"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "event_schedule": {
            "description": "Whether the embedded player should display the event schedule.",
            "example": true,
            "type": "boolean"
          },
          "has_cards": {
            "description": "Whether the video has cards.",
            "example": true,
            "type": "boolean"
          },
          "html": {
            "description": "The HTML code for embedding the video on a web page.",
            "type": "string"
          },
          "interactive": {
            "description": "Whether the video is an interactive video.",
            "example": true,
            "type": "boolean"
          },
          "logos": {
            "description": "A collection of information about the logo in the corner of the embeddable player.",
            "properties": {
              "custom": {
                "description": "A collection of information relating to custom logos in the embeddable player.",
                "properties": {
                  "active": {
                    "description": "Whether the custom logo appears in the embeddable player.",
                    "example": true,
                    "type": "boolean"
                  },
                  "link": {
                    "description": "The URL that loads upon clicking the custom logo.",
                    "example": "http://example.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "sticky": {
                    "description": "Whether the custom logo appears even when the player interface is hidden.",
                    "example": true,
                    "type": "boolean"
                  },
                  "url": {
                    "description": "The URL of the selected custom logo.",
                    "example": "http://example.com",
                    "nullable": true,
                    "type": "string"
                  },
                  "use_link": {
                    "description": "Whether the custom logo should use the URL link.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "active",
                  "link",
                  "sticky",
                  "url",
                  "use_link"
                ],
                "type": "object"
              },
              "vimeo": {
                "description": "Whether the Vimeo logo appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "custom",
              "vimeo"
            ],
            "type": "object"
          },
          "outro_type": {
            "description": "The type of the video outro.\n\nOption descriptions:\n * `beginning` - The outro is a thumbnail.\n * `custom` - The outro is custom.\n * `email` - The outro is an email form.\n * `image` - The outro is an image.\n * `link` - The outro is a link.\n * `loop` - The outro is a loop.\n * `nothing` - There is no outro.\n * `share` - The outro is a share button.\n * `text` - The outro is text.\n * `threevideos` - The outro is three video suggestions.\n * `videos` - The outro is video suggestions.\n",
            "enum": [
              "beginning",
              "custom",
              "email",
              "image",
              "link",
              "loop",
              "nothing",
              "share",
              "text",
              "threevideos",
              "videos"
            ],
            "example": "link",
            "type": "string"
          },
          "pip": {
            "description": "Whether picture-in-picture is enabled and the button appears in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "play_button": {
            "description": "A representation of the play button's settings.",
            "properties": {
              "position": {
                "description": "The position of the play button within the embeddable player.\n\nOption descriptions:\n * `auto` - Use Vimeo's default positioning for the play button.\n * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.\n * `center` - The play button is positioned in the center of the player.\n",
                "enum": [
                  "auto",
                  "bottom",
                  "center"
                ],
                "example": "auto",
                "type": "string"
              }
            },
            "required": [
              "position"
            ],
            "type": "object"
          },
          "playbar": {
            "description": "Whether the playbar appears in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "quality_selector": {
            "description": "Whether the quality selector appears in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "show_timezone": {
            "description": "Whether the embedded player displays the schedule timezone.",
            "example": false,
            "type": "boolean"
          },
          "skipping_forward": {
            "description": "Whether users can skip forward in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "speed": {
            "description": "Whether the speed controls appear in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "title": {
            "description": "A collection of information about the embeddable player's title bar.",
            "properties": {
              "name": {
                "description": "How the embeddable player handles the video title.\n\nOption descriptions:\n * `hide` - The title is hidden.\n * `show` - The title is shown.\n * `user` - The title can be toggled to `show` or `hide` by the user.\n",
                "enum": [
                  "hide",
                  "show",
                  "user"
                ],
                "example": "hide",
                "type": "string"
              },
              "owner": {
                "description": "How the embeddable player handles the video owner's information.\n\nOption descriptions:\n * `hide` - The owner's information is hidden.\n * `show` - The owner's information is shown.\n * `user` - The owner's information can be toggled to `show` or `hide` by the user.\n",
                "enum": [
                  "hide",
                  "show",
                  "user"
                ],
                "example": "hide",
                "type": "string"
              },
              "portrait": {
                "description": "How the embeddable player handles the video owner's portrait.\n\nOption descriptions:\n * `hide` - The owner's portrait is hidden\n * `show` - The owner's portrait is shown.\n * `user` - The owner's portrait can be toggled to `show` or `hide` by the user.\n",
                "enum": [
                  "hide",
                  "show",
                  "user"
                ],
                "example": "hide",
                "type": "string"
              }
            },
            "required": [
              "name",
              "owner",
              "portrait"
            ],
            "type": "object"
          },
          "transcript": {
            "description": "Whether the transcript controls appear in the embeddable player.",
            "example": true,
            "type": "boolean"
          },
          "uri": {
            "description": "The URI of the embed preset.",
            "example": "/videos/258684937/presets/12345",
            "type": "string"
          },
          "volume": {
            "description": "Whether the volume controls appear in the embeddable player.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "airplay",
          "ask_ai",
          "audio_tracks",
          "autopip",
          "badges",
          "buttons",
          "cards",
          "chapters",
          "chromecast",
          "closed_captions",
          "color",
          "colors",
          "email_capture_form",
          "end_screen",
          "event_schedule",
          "has_cards",
          "interactive",
          "logos",
          "outro_type",
          "pip",
          "play_button",
          "playbar",
          "quality_selector",
          "show_timezone",
          "skipping_forward",
          "speed",
          "title",
          "transcript",
          "volume"
        ],
        "type": "object"
      },
      "endpoint": {
        "title": "Endpoint",
        "properties": {
          "methods": {
            "description": "All HTTP methods permitted on this endpoint.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "path": {
            "description": "The path section of the URL, which, when appended to the API host `https:///api.vimeo.com`, builds a full API endpoint.",
            "example": "/me",
            "type": "string"
          }
        },
        "required": [
          "methods",
          "path"
        ],
        "type": "object"
      },
      "error": {
        "title": "Error",
        "properties": {
          "developer_message": {
            "description": "The error message that technical users receive.",
            "example": "The specified resource does not exist.",
            "type": "string"
          },
          "error": {
            "description": "The error message that general users receive.",
            "example": "Something strange occurred. Please try again.",
            "type": "string"
          },
          "error_code": {
            "description": "The error code.",
            "example": 5000,
            "type": "number"
          },
          "link": {
            "description": "A link to more information about the error.",
            "type": "string"
          }
        },
        "required": [
          "developer_message",
          "error",
          "error_code",
          "link"
        ],
        "type": "object"
      },
      "event": {
        "title": "Event",
        "properties": {
          "album": {
            "description": "Information about the associated showcase.",
            "nullable": true,
            "properties": {
              "embed_code": {
                "description": "The responsive embed code for the associated showcase.",
                "type": "string"
              },
              "id": {
                "description": "The ID of the associated showcase.",
                "type": "number"
              },
              "privacy": {
                "description": "The privacy setting of the associated showcase.",
                "type": "string"
              },
              "title": {
                "description": "The title of the associated showcase.",
                "type": "string"
              }
            },
            "required": [
              "embed_code",
              "id",
              "privacy",
              "title"
            ],
            "type": "object"
          },
          "allow_share_link": {
            "description": "Whether the share link for the videos generated by streaming to the event is usable.",
            "example": true,
            "type": "boolean"
          },
          "allowed_privacies": {
            "description": "An array of privacy settings supported for this event and the requesting user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "auto_cc_enabled": {
            "description": "Whether the automated closed captions feature is enabled.",
            "nullable": true,
            "type": "boolean"
          },
          "auto_cc_keywords": {
            "description": "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.",
            "nullable": true,
            "type": "string"
          },
          "auto_cc_language": {
            "description": "The language of the automated closed captions.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
            "enum": [
              "de-DE",
              "en-US",
              "es-ES",
              "fr-FR",
              "pt-BR"
            ],
            "example": "en-US",
            "nullable": true,
            "type": "string"
          },
          "auto_cc_remaining": {
            "description": "The amount of time remaining to the user to access the automated closed captions feature.",
            "nullable": true,
            "type": "number"
          },
          "automatically_title_stream": {
            "description": "When the value of this field is `true`, the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
            "example": true,
            "type": "boolean"
          },
          "chat_enabled": {
            "description": "Whether to display live chat on the event page on Vimeo.",
            "example": true,
            "type": "boolean"
          },
          "completed_on": {
            "description": "The time in ISO 8601 format when the event was completed.",
            "example": "2021-11-11T11:24:56+00:00",
            "type": "string"
          },
          "content_rating": {
            "description": "The event's granular content ratings.\n\nOption descriptions:\n * `advertisement` - The event contains advertisements.\n * `drugs` - The event contains drug or alcohol use.\n * `language` - The event contains profanity or sexually suggestive content.\n * `nudity` - The event contains nudity.\n * `safe` - The event is safe for all audiences.\n * `unrated` - The event hasn't been rated.\n * `violence` - The event contains violence.\n",
            "enum": [
              "advertisement",
              "drugs",
              "language",
              "nudity",
              "safe",
              "unrated",
              "violence"
            ],
            "items": {
              "type": "string",
              "example": "advertisement"
            },
            "type": "array",
            "x-mill-non-default": true
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the event was created.",
            "example": "2016-11-03T09:24:56+00:00",
            "type": "string"
          },
          "disable_auto_archiving": {
            "description": "Whether the feature for disabling auto-archiving is enabled.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "dvr": {
            "description": "Whether the DVR feature is enabled.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "email_quota": {
            "description": "Information about the event owner's email quota.",
            "properties": {
              "capping": {
                "description": "The maximum number of entity emails that the user can send.",
                "example": 400,
                "type": "number"
              },
              "total": {
                "description": "The current number of entity emails that the user has sent.",
                "example": 300,
                "type": "number"
              }
            },
            "required": [
              "capping",
              "total"
            ],
            "type": "object",
            "x-mill-non-default": true
          },
          "embed": {
            "description": "The event's embed data.",
            "properties": {
              "airplay": {
                "description": "Whether AirPlay is enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "autoplay": {
                "description": "Whether the embedded RLE player should autoplay the RLE content.",
                "example": true,
                "type": "boolean"
              },
              "available_player_logos": {
                "description": "The list of user-uploaded logos for configuration of the embed player.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "byline": {
                "description": "Whether the embedded RLE player should display the author's name.",
                "example": true,
                "type": "boolean"
              },
              "chat_embed_source": {
                "description": "The chat's iFrame source URL.",
                "nullable": true,
                "type": "string"
              },
              "chromecast": {
                "description": "Whether the Chromecast button appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "closed_captions": {
                "description": "Whether closed captions are enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "color": {
                "description": "The second player color, which controls the player accent color. _This field is identical to **colors.color_two**._",
                "example": "#0a0808",
                "type": "string"
              },
              "colors": {
                "description": "A collection of information about player colors.",
                "properties": {
                  "color_four": {
                    "description": "The fourth player color, which controls the player background color.",
                    "example": "#aabbcc",
                    "type": "string"
                  },
                  "color_one": {
                    "description": "The first player color, which controls the color of the progress bar, buttons, and more.",
                    "example": "#112233",
                    "type": "string"
                  },
                  "color_three": {
                    "description": "The third player color, which controls the color of text and icons.",
                    "example": "#778899",
                    "type": "string"
                  },
                  "color_two": {
                    "description": "The second player color, which controls the player accent color. _This field is identical to **color**._",
                    "example": "#445566",
                    "type": "string"
                  }
                },
                "required": [
                  "color_four",
                  "color_one",
                  "color_three",
                  "color_two"
                ],
                "type": "object"
              },
              "embed_chat": {
                "description": "The embed code for RLE chat.",
                "nullable": true,
                "type": "string"
              },
              "embed_properties": {
                "description": "The height, width, and source URL properties used to generate the fixed HTML embed code.",
                "nullable": true,
                "properties": {
                  "height": {
                    "description": "The height used to generate the fixed HTML embed code.",
                    "type": "string"
                  },
                  "source_url": {
                    "description": "The source URL used to generate the fixed HTML embed code.",
                    "type": "string"
                  },
                  "width": {
                    "description": "The width used to generate the fixed HTML embed code.",
                    "type": "string"
                  }
                },
                "required": [
                  "height",
                  "source_url",
                  "width"
                ],
                "type": "object"
              },
              "event_schedule": {
                "description": "Whether the embedded RLE player should display the event schedule.",
                "example": true,
                "type": "boolean"
              },
              "fullscreen_button": {
                "description": "Whether the embedded RLE player should include the fullscreen controls.",
                "example": true,
                "type": "boolean"
              },
              "hide_live_label": {
                "description": "Whether the Live label should be visible over the player.",
                "example": false,
                "type": "boolean"
              },
              "hide_viewer_count": {
                "description": "Whether the embedded RLE player should hide the viewer counter.",
                "example": true,
                "type": "boolean"
              },
              "html": {
                "description": "The fixed HTML code to embed the event's playlist on a website.",
                "nullable": true,
                "type": "string"
              },
              "like_button": {
                "description": "Whether the embedded RLE player should include the button for likes.",
                "example": true,
                "type": "boolean"
              },
              "logos": {
                "description": "A collection of information about the logo in the corner of the embeddable player.",
                "properties": {
                  "custom": {
                    "description": "A collection of information relating to custom logos in the embeddable player.",
                    "properties": {
                      "active": {
                        "description": "Whether the custom logo appears in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "link": {
                        "description": "The URL that loads upon clicking the custom logo.",
                        "example": "http://example.com",
                        "type": "string"
                      },
                      "sticky": {
                        "description": "Whether the custom logo appears even when the player interface is hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL source of the custom player logo.",
                        "example": "http://example.com",
                        "type": "string"
                      },
                      "use_link": {
                        "description": "Whether the custom logo should use the URL link.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "active",
                      "link",
                      "sticky",
                      "url",
                      "use_link"
                    ],
                    "type": "object"
                  },
                  "vimeo": {
                    "description": "Whether the Vimeo logo appears in the embeddable player for the video.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "custom",
                  "vimeo"
                ],
                "type": "object"
              },
              "loop": {
                "description": "Whether the embedded RLE player should loop back to the first video once content is exhausted.",
                "example": true,
                "type": "boolean"
              },
              "pip": {
                "description": "Whether picture-in-picture is enabled and the button appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "play_button_position": {
                "description": "The position of the player's play button.\n\nOption descriptions:\n * `0` - The play button has the default position.\n * `1` - The play button appears at the bottom of the interface.\n * `2` - The play button appears in the center of the interface.\n",
                "enum": [
                  0,
                  1,
                  2
                ],
                "type": "string"
              },
              "playbar": {
                "description": "Whether the embedded RLE player should include the playbar.",
                "example": true,
                "type": "boolean"
              },
              "playlist": {
                "description": "Whether the playlist component appears in the embeddable player for this RLE.",
                "example": true,
                "type": "boolean"
              },
              "portrait": {
                "description": "Whether the embedded RLE player should display the author's portrait.",
                "example": true,
                "type": "boolean"
              },
              "responsive_html": {
                "description": "The responsive HTML code to embed the event's playlist on a website.",
                "nullable": true,
                "type": "string"
              },
              "schedule": {
                "description": "Whether the schedule component appears in the embeddable player for this RLE.",
                "example": true,
                "type": "boolean"
              },
              "show_latest_archived_clip": {
                "description": "Whether the embedded RLE player should display the latest video placeholder.",
                "example": true,
                "type": "boolean"
              },
              "show_timezone": {
                "description": "Whether the embedded RLE player should display the schedule timezone.",
                "example": false,
                "type": "boolean"
              },
              "title": {
                "description": "Whether the embedded RLE player should display the video title.",
                "example": true,
                "type": "boolean"
              },
              "transcript": {
                "description": "Whether transcripts are enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "use_color": {
                "description": "Whether the embedded RLE player should use a custom color or the default Vimeo blue.",
                "example": "true",
                "type": "string"
              },
              "volume": {
                "description": "Whether the embedded RLE player should include the volume controls.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "airplay",
              "autoplay",
              "available_player_logos",
              "byline",
              "chat_embed_source",
              "chromecast",
              "closed_captions",
              "color",
              "colors",
              "embed_chat",
              "embed_properties",
              "event_schedule",
              "fullscreen_button",
              "hide_live_label",
              "hide_viewer_count",
              "html",
              "like_button",
              "logos",
              "loop",
              "pip",
              "play_button_position",
              "playbar",
              "playlist",
              "portrait",
              "responsive_html",
              "schedule",
              "show_latest_archived_clip",
              "show_timezone",
              "title",
              "transcript",
              "use_color",
              "volume"
            ],
            "type": "object"
          },
          "event_type": {
            "description": "The event type.",
            "example": "default",
            "type": "string"
          },
          "from_showcase": {
            "description": "Whether the event was created from a showcase.",
            "type": "boolean"
          },
          "from_webinar": {
            "description": "Whether the event was created from a webinar.",
            "type": "boolean"
          },
          "head_clip": {
            "description": "The first video to be played in the playlist.",
            "nullable": true,
            "type": "object"
          },
          "interaction_tools_settings": {
            "description": "The settings for the interaction tools.",
            "items": {
              "type": "object",
              "properties": {
                "is_anonymous_questions_disabled": {
                  "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                  "type": "boolean",
                  "x-mill-non-default": true
                },
                "is_qna_moderated": {
                  "description": "Whether the Q&A is moderated for the interaction tools settings.",
                  "type": "boolean",
                  "x-mill-non-default": true
                }
              },
              "required": [
                "is_anonymous_questions_disabled",
                "is_qna_moderated"
              ]
            },
            "nullable": true,
            "type": "array",
            "x-mill-non-default": true
          },
          "latency": {
            "description": "The type of latency.\n\nOption descriptions:\n * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.\n * `low` - The latency is low, with a delay of 5-7 seconds.\n * `standard` - The latency is standard, with a delay of 15-20 seconds.\n",
            "enum": [
              "fail-safe",
              "low",
              "standard"
            ],
            "example": "standard",
            "type": "string"
          },
          "lead_uuid": {
            "description": "The unique ID for the registered viewer.",
            "type": "string"
          },
          "link": {
            "description": "The URI to access the event on Vimeo.",
            "example": "/events/12345",
            "type": "string"
          },
          "live_clips": {
            "description": "A list of videos belonging to the event, including their video IDs and dates streamed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "live_destinations": {
            "description": "_This field is deprecated in favor of the following method: [Get all the destinations of a one-time event](https://developer.vimeo.com/api/reference/live#get_one_time_event_destinations)._",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "low_latency": {
            "description": "Whether the low-latency feature is enabled.",
            "example": false,
            "type": "boolean"
          },
          "metadata": {
            "description": "Metadata about the event.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "live_video": {
                    "description": "Information about the event's live video, where applicable.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "The status of the live video's RTMP link.\n\nOption descriptions:\n * `streaming` - The stream is open and receiving content.\n",
                        "enum": [
                          "streaming"
                        ],
                        "example": "streaming",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/videos/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "status",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "pictures": {
                    "description": "Information about the event's thumbnails.",
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/pictures",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "pre_live_video": {
                    "description": "Information about the event's pre-live video, where applicable. A pre-live video is either activated or in the process of being activated.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "The status of the pre-live video's RTMP link.\n\nOption descriptions:\n * `pending` - Vimeo is working on setting up the connection.\n * `ready` - Resources have been provisioned for the event.\n * `streaming` - Live video is currently streaming to the RTMP link.\n * `unavailable` - The connection is ready, but streaming to the RTMP link has not yet begun.\n",
                        "enum": [
                          "pending",
                          "ready",
                          "streaming",
                          "unavailable"
                        ],
                        "example": "pending",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/videos/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "status",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "team_member": {
                    "description": "Information about the team member who owns the event.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/123456789/team_users/123456",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "Information about the videos that belong to the event.",
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 6,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "live_video",
                  "pictures",
                  "pre_live_video",
                  "team_member",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "A list of resource URIs related to the event.",
                "properties": {
                  "activate": {
                    "description": "Information about where and how to activate the event.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "delete": {
                    "description": "Information about where and how to delete an item.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit": {
                    "description": "Information about where and how to edit an item.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "activate",
                  "delete",
                  "edit"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "next_occurrence_time": {
            "description": "The date in ISO 8601 format on which the next occurrence of the event is expected to be live.",
            "example": "2018-07-30T14:00:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "parent_folder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/project"
              }
            ],
            "description": "Information about the folder that contains the event.",
            "nullable": true,
            "x-mill-non-default": true
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active thumbnail image of the event."
          },
          "playlist_sort": {
            "description": "The order in which the videos inside the event appear in the playlist.\n\nOption descriptions:\n * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.\n * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.\n * `alphabetical` - The videos appear alphabetically by their title.\n * `arranged` - The videos appear as arranged by the owner of the event.\n * `comments` - The videos appear according to their number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear according to their number of likes.\n * `newest` - The videos appear in chronological order, with the newest first.\n * `oldest` - The videos appear in chronological order, with the oldest first.\n * `plays` - The videos appear according to their number of plays.\n",
            "enum": [
              "added_first",
              "added_last",
              "alphabetical",
              "arranged",
              "comments",
              "duration",
              "likes",
              "newest",
              "oldest",
              "plays"
            ],
            "example": "added_first",
            "type": "string"
          },
          "preferred_stream_method": {
            "description": "The preferred streaming method.\n\nOption descriptions:\n * `browser` - Stream in the browser.\n * `encoder` - Stream by the encoder.\n",
            "enum": [
              "browser",
              "encoder"
            ],
            "example": "encoder",
            "type": "string"
          },
          "rtmp_link": {
            "description": "The upstream RTMP link. Send your live content to this link to create a live video on the event.",
            "example": "rtmp://rtmp.cloud.vimeo.com/live",
            "nullable": true,
            "type": "string"
          },
          "rtmp_preview": {
            "description": "Whether to preview the RTMP stream before the event goes live.",
            "example": true,
            "type": "boolean"
          },
          "rtmps_link": {
            "description": "The upstream RTMPS link. Send your live content to this link to create a live video on the event.",
            "example": "rtmps://rtmp.cloud.vimeo.com/live",
            "nullable": true,
            "type": "string"
          },
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/event-schedule"
              }
            ],
            "description": "The description of the time or times that the event is expected to be live."
          },
          "scheduled_playback": {
            "description": "Whether the scheduled playback feature is enabled.",
            "example": false,
            "type": "boolean"
          },
          "settings_link": {
            "description": "The URI to access the event settings on Vimeo.",
            "example": "\"/live/rtmp/event/12345#event_settings\"",
            "type": "string"
          },
          "srt_link": {
            "description": "The upstream SRT link. To create a live video on the event, send your live content to this link.",
            "example": "srt://srt.vimeo.work:9999",
            "type": "string",
            "x-mill-non-default": true
          },
          "status": {
            "description": "The status of the event.\n\nOption descriptions:\n * `ended` - The user ended the event.\n * `started` - The user started the event.\n",
            "enum": [
              "ended",
              "started"
            ],
            "example": "started",
            "nullable": true,
            "type": "string"
          },
          "stream_description": {
            "description": "The description of the next video streamed to the event.",
            "example": "In this episode, we interview a surprise guest",
            "nullable": true,
            "type": "string"
          },
          "stream_key": {
            "description": "The stream key used in conjunction with the RTMP and RTMPS links.",
            "example": "ab9c8def-7a65-4321-b098-c7dd65e43f21",
            "nullable": true,
            "type": "string"
          },
          "stream_mode": {
            "description": "The stream mode of the event.\n\nOption descriptions:\n * `live` - The stream is live playback.\n * `record` - The stream is in record mode.\n * `simulive` - The stream is scheduled media playback.\n",
            "enum": [
              "live",
              "record",
              "simulive"
            ],
            "example": "live",
            "type": "string",
            "x-mill-non-default": true
          },
          "stream_password": {
            "description": "The password that anyone can use to access the videos generated by streaming to the event.",
            "example": "hunter1",
            "nullable": true,
            "type": "string"
          },
          "stream_privacy": {
            "description": "The initial privacy settings of videos generated by streaming to the event as well as the embed privacy of the entire collection.",
            "properties": {
              "embed": {
                "description": "The event's embed permission setting.\n\nOption descriptions:\n * `private` - The event can't be embedded on any domain.\n * `public` - The event can be embedded on any domain.\n * `whitelist` - The event can be embedded on permitted domains only.\n",
                "enum": [
                  "private",
                  "public",
                  "whitelist"
                ],
                "example": "public",
                "type": "string"
              },
              "unlisted_hash": {
                "description": "The hash for unlisted events.",
                "example": "1a2b3c4d5e",
                "nullable": true,
                "type": "string"
              },
              "view": {
                "description": "The general privacy setting for generated videos and the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The videos don't appear on Vimeo, but they can be embedded elsewhere.\n * `nobody` - Only the event owner can access the videos. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the videos.\n * `unlisted` - Only those with the private link can access the videos.\n",
                "enum": [
                  "anybody",
                  "embed_only",
                  "nobody",
                  "password",
                  "unlisted"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "embed",
              "unlisted_hash",
              "view"
            ],
            "type": "object"
          },
          "stream_title": {
            "description": "The title of the next video streamed to the event. This field applies only when **automatically_title_stream** is `false`.",
            "example": "Special Feature",
            "type": "string"
          },
          "streamable_clip": {
            "description": "The event's video. An event always has a video, which is either in a pre-live state (ready to be streamed to) or in a live state (which is currently being streamed to).",
            "nullable": true,
            "type": "object"
          },
          "streaming_auto_stop": {
            "description": "Whether the feature for automatically stopping the live stream is enabled.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "time_zone": {
            "description": "The time zone used in resolving the timestamps included in auto-generated video titles.",
            "example": "America/New_York",
            "type": "string"
          },
          "title": {
            "description": "The title of the event. This field is also optionally used as the base title for videos created by streaming to the event.",
            "example": "Live Content",
            "type": "string"
          },
          "unlimited_auto_cc": {
            "description": "Whether to ignore the time limit of the automated closed captions feature.",
            "nullable": true,
            "type": "boolean"
          },
          "unlimited_duration": {
            "description": "Whether the feature for 24/7 streaming is enabled.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "uri": {
            "description": "The event's canonical relative URI.",
            "example": "/live_events/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the event."
          },
          "venue_uuid": {
            "description": "The ID of the associated Venues API service database object. If this field has no value, there is no associated Venues object.",
            "nullable": true,
            "type": "string",
            "x-mill-non-default": true
          },
          "view_link": {
            "description": "The URI to access the event on Vimeo with or without an unlisted hash.",
            "example": "/events/12345",
            "type": "string"
          },
          "webinar": {
            "description": "Information about the associated webinar.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "whitelisted_domains": {
            "description": "The permitted domains for a video.",
            "items": {
              "type": "object",
              "properties": {
                "allow_hd": {
                  "description": "Whether to permit HD embeds on this domain.",
                  "example": true,
                  "type": "boolean",
                  "x-mill-non-default": true
                },
                "domain": {
                  "description": "The domain name.",
                  "example": "example.com",
                  "type": "string",
                  "x-mill-non-default": true
                },
                "uri": {
                  "description": "The URI of the domain.",
                  "example": "/videos/258684937/privacy/domains/example.com",
                  "type": "string",
                  "x-mill-non-default": true
                }
              },
              "required": [
                "allow_hd",
                "domain",
                "uri"
              ]
            },
            "nullable": true,
            "type": "array",
            "x-mill-non-default": true
          }
        },
        "required": [
          "album",
          "allow_share_link",
          "allowed_privacies",
          "auto_cc_enabled",
          "auto_cc_keywords",
          "auto_cc_language",
          "auto_cc_remaining",
          "automatically_title_stream",
          "chat_enabled",
          "completed_on",
          "content_rating",
          "created_time",
          "disable_auto_archiving",
          "dvr",
          "email_quota",
          "embed",
          "event_type",
          "from_showcase",
          "head_clip",
          "interaction_tools_settings",
          "latency",
          "lead_uuid",
          "link",
          "live_clips",
          "live_destinations",
          "low_latency",
          "metadata",
          "next_occurrence_time",
          "parent_folder",
          "pictures",
          "playlist_sort",
          "preferred_stream_method",
          "rtmp_link",
          "rtmp_preview",
          "rtmps_link",
          "schedule",
          "scheduled_playback",
          "settings_link",
          "status",
          "stream_description",
          "stream_key",
          "stream_mode",
          "stream_password",
          "stream_privacy",
          "stream_title",
          "streamable_clip",
          "streaming_auto_stop",
          "time_zone",
          "title",
          "unlimited_auto_cc",
          "unlimited_duration",
          "uri",
          "user",
          "venue_uuid",
          "view_link",
          "webinar",
          "whitelisted_domains"
        ],
        "type": "object"
      },
      "event-automated-closed-captions": {
        "title": "Event Automated Closed Captions",
        "properties": {
          "auto_cc_can_be_enabled": {
            "description": "Whether automated closed captions can be enabled.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "auto_cc_enabled": {
            "description": "Whether the option for automated closed captions is enabled.",
            "example": true,
            "type": "boolean"
          },
          "auto_cc_is_unlimited": {
            "description": "Whether automated closed captions are unlimited for the user.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "auto_cc_keywords": {
            "description": "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.",
            "example": "sun,water,wind",
            "type": "string"
          },
          "auto_cc_language": {
            "description": "The language of the automated closed captions.",
            "example": "en",
            "nullable": true,
            "type": "string"
          },
          "auto_cc_remaining": {
            "description": "The number of minutes remaining for automated closed captions in the user's current period.",
            "example": 300,
            "type": "number",
            "x-mill-non-default": true
          },
          "event_id": {
            "description": "The ID of the event.",
            "example": 1111,
            "type": "number"
          }
        },
        "required": [
          "auto_cc_can_be_enabled",
          "auto_cc_enabled",
          "auto_cc_is_unlimited",
          "auto_cc_keywords",
          "auto_cc_language",
          "auto_cc_remaining",
          "event_id"
        ],
        "type": "object"
      },
      "event-destination": {
        "title": "Event Destination",
        "properties": {
          "display_name": {
            "description": "The name of the destination target, whether a page, profile name, or the like.",
            "example": "Test page",
            "type": "string"
          },
          "id": {
            "description": "The ID of the destination.",
            "example": 1234,
            "type": "number"
          },
          "is_enabled": {
            "description": "Whether the destination is enabled.",
            "example": true,
            "type": "boolean"
          },
          "live_clip_id": {
            "description": "The ID of the live video.",
            "example": 123456,
            "type": "number"
          },
          "metadata": {
            "description": "Metadata about the event destination.",
            "properties": {
              "interactions": {
                "description": "A list of resource URIs related to the event destination.",
                "properties": {
                  "edit": {
                    "description": "Information about where and how to edit an item.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "edit"
                ],
                "type": "object"
              }
            },
            "required": [
              "interactions"
            ],
            "type": "object"
          },
          "privacy": {
            "description": "The privacy setting of the destination.\n\nOption descriptions:\n * `CONNECTIONS` - The privacy setting is `CONNECTIONS` for LinkedIn.\n * `PUBLIC` - The privacy setting is `PUBLIC` for LinkedIn.\n * `all_friends` - The privacy setting is `all_friends` for Facebook.\n * `everyone` - The privacy setting is `everyone` for Facebook.\n * `private` - The privacy setting is `private` for YouTube.\n * `public` - The privacy setting is `public` for YouTube.\n * `self` - The privacy setting is `self` for Facebook.\n * `unlisted` - The privacy setting is `unlisted` for YouTube.\n",
            "enum": [
              "CONNECTIONS",
              "PUBLIC",
              "all_friends",
              "everyone",
              "private",
              "public",
              "self",
              "unlisted"
            ],
            "example": "public",
            "nullable": true,
            "type": "string"
          },
          "provider_broadcast_id": {
            "description": "The broadcast ID of the destination service.",
            "example": "9fe254b7d55e7542da9fbd46a5deb947",
            "nullable": true,
            "type": "string"
          },
          "provider_destination_id": {
            "description": "The destination ID of the destination service.",
            "example": "fm4m34gm5oirbkjfkfnkkdhgfi45v3df34oz",
            "nullable": true,
            "type": "string"
          },
          "provider_user_id": {
            "description": "The user ID of the destination service.",
            "example": "a6378de4995a",
            "nullable": true,
            "type": "string"
          },
          "provider_video_id": {
            "description": "The ID of the scheduled live video.",
            "example": "6817807391346708000",
            "nullable": true,
            "type": "string"
          },
          "scheduled_at": {
            "description": "The time in Unix timestamp format when live streaming is scheduled to start.",
            "example": 1625754461,
            "nullable": true,
            "type": "number"
          },
          "service_name": {
            "description": "The name of the destination service.\n\nOption descriptions:\n * `custom_rtmp` - The destination service is custom RTMP.\n * `facebook` - The destination service is Facebook Live.\n * `linkedin` - The destination service is LinkedIn Live.\n * `youtube` - The destination service is YouTube Live.\n",
            "enum": [
              "custom_rtmp",
              "facebook",
              "linkedin",
              "youtube"
            ],
            "example": "facebook",
            "type": "string"
          },
          "state": {
            "description": "The status of the destination.\n\nOption descriptions:\n * `0` - The status is OK.\n * `1` - An error occurred. Check the `state_message` field for details.\n",
            "enum": [
              0,
              1
            ],
            "type": "string"
          },
          "state_message": {
            "description": "The message that describes the state of the destination.",
            "example": "\"Couldn't connect to rtmp://1.2.3.4/live\"",
            "nullable": true,
            "type": "string"
          },
          "stream_key": {
            "description": "The stream key for the simulcast destination.",
            "example": "b624fa1e-23d8-4d27-90f9-fe7d0ad700ed",
            "nullable": true,
            "type": "string"
          },
          "stream_url": {
            "description": "The RTMP URL to stream to.",
            "example": "rtmp://cooldomain.com/live",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the simulcast destination.\n\nOption descriptions:\n * `channel` - The destination is a YouTube channel.\n * `custom` - The destination is custom.\n * `organization` - The destination is a LinkedIn organization.\n * `page` - The destination is a Facebook page.\n * `profile` - The destination is a Facebook or LinkedIn profile.\n",
            "enum": [
              "channel",
              "custom",
              "organization",
              "page",
              "profile"
            ],
            "example": "channel",
            "type": "string"
          },
          "user_id": {
            "description": "The ID of the destination's owner.",
            "example": 123456,
            "type": "number"
          }
        },
        "required": [
          "display_name",
          "id",
          "is_enabled",
          "live_clip_id",
          "metadata",
          "privacy",
          "provider_broadcast_id",
          "provider_destination_id",
          "provider_user_id",
          "provider_video_id",
          "scheduled_at",
          "service_name",
          "state",
          "state_message",
          "stream_key",
          "stream_url",
          "type",
          "user_id"
        ],
        "type": "object"
      },
      "event-schedule": {
        "title": "Event Schedule",
        "properties": {
          "daily_time": {
            "description": "When **schedule.type** is `weekly`, the time in ISO 8601 format when the event is expected to be live.",
            "example": "14:00:00Z",
            "type": "string"
          },
          "end_time": {
            "description": "The time in ISO 8601 format when the event is expected to end.",
            "example": "2018-06-21T14:00:00+00:00",
            "type": "string"
          },
          "rrule": {
            "description": "The recurrence rule for the event's schedule according to [RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545).",
            "type": "string"
          },
          "scheduled_time": {
            "description": "When **schedule.type** is `weekly`, the time in ISO 8601 format when the first occurrence of the event is expected to be live.",
            "example": "2018-06-21T14:00:00+00:00",
            "type": "string"
          },
          "start_time": {
            "description": "The time in ISO 8601 format when the event is expected to be live.",
            "example": "2018-06-21T14:00:00+00:00",
            "type": "string"
          },
          "time_zone": {
            "description": "The time zone of the event.",
            "type": "string"
          },
          "type": {
            "description": "The schedule of the event.\n\nOption descriptions:\n * `single` - The event is live only once.\n * `weekly` - The event is live on a recurring weekly basis.\n",
            "enum": [
              "single",
              "weekly"
            ],
            "example": "weekly",
            "type": "string"
          },
          "weekdays": {
            "description": "When **schedule.type** is `weekly`, the weekdays in UTC when the event is expected to be live. The value of this field ranges from `1` to `7`, where `1` is Monday and `7` is Sunday.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "event-session-status": {
        "title": "Event Session Status",
        "properties": {
          "archive": {
            "description": "Information about the archive data.",
            "properties": {
              "clip_id": {
                "description": "The ID of the archived video.",
                "example": 1111,
                "type": "number"
              },
              "status": {
                "description": "The status of the archive data.",
                "example": 0,
                "nullable": true,
                "type": "number"
              }
            },
            "required": [
              "clip_id",
              "status"
            ],
            "type": "object"
          },
          "can_manage": {
            "description": "Whether the current user can manage the event.",
            "example": true,
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the live video.",
            "example": 1111,
            "type": "number"
          },
          "ingest": {
            "description": "The ingest of the video.",
            "properties": {
              "encoder_type": {
                "description": "The protocol used for this session.\n\nOption descriptions:\n * `dash` - The protocol is DASH.\n * `rtmp` - The protocol is RTMP.\n * `simple_live` - The protocol is Simplelive.\n * `srt` - The protocol is SRT.\n * `studio_cloud` - The protocol is StudioCloud.\n * `unknown` - The protocol is unknown or not set.\n * `webrtc` - The protocol is WebRTC.\n",
                "enum": [
                  "dash",
                  "rtmp",
                  "simple_live",
                  "srt",
                  "studio_cloud",
                  "unknown",
                  "webrtc"
                ],
                "example": "rtmp",
                "type": "string"
              },
              "end_time": {
                "description": "The timestamp in UTC format when the live stream ended.",
                "example": 1612451704,
                "nullable": true,
                "type": "number"
              },
              "height": {
                "description": "The height of the live video in pixels.",
                "example": 100,
                "nullable": true,
                "type": "number"
              },
              "is_rtmp_session": {
                "description": "Whether the session is using RTMP.",
                "example": true,
                "type": "boolean"
              },
              "is_scheduled_playback": {
                "description": "Whether the stream is scheduled media playback.",
                "example": true,
                "nullable": true,
                "type": "boolean"
              },
              "rtmp_expires_at": {
                "description": "The time in ISO 8601 format when the RTMP expires.",
                "example": "2018-07-30T14:00:00+00:00",
                "nullable": true,
                "type": "string"
              },
              "rtmp_link": {
                "description": "The upstream RTMP link. Send your live content to this link to create a live video on the event.",
                "example": "rtmp://rtmp.cloud.vimeo.com/live",
                "nullable": true,
                "type": "string"
              },
              "rtmps_link": {
                "description": "The upstream RTMPS link. Send your live content to this secure link to create a live video on the event.",
                "example": "rtmps://rtmp.cloud.vimeo.com/live",
                "nullable": true,
                "type": "string"
              },
              "scheduled_start_time": {
                "description": "The scheduled start time of the live video in ISO 8601 format.",
                "example": "2018-07-30T14:00:00+00:00",
                "nullable": true,
                "type": "string"
              },
              "session_id": {
                "description": "The session ID.",
                "nullable": true,
                "type": "string"
              },
              "start_time": {
                "description": "The timestamp in UTC format when the live video started.",
                "example": 1612451704,
                "nullable": true,
                "type": "number"
              },
              "status": {
                "description": "The ingest status of the live video.\n\nOption descriptions:\n * `0` - There’s a live video, but no RMTP URL or key.\n * `1` - There’s an RMTP URL and key, but the machine is provisioning.\n * `2` - There’s an RMTP URL and key, and the machine is provisioned, but the stream hasn’t started yet.\n * `3` - There’s an RMTP URL and key, and the machine is provisioned, but the stream didn’t start before the machine timed out.\n * `4` - The stream has started and is currently underway.\n * `5` - The stream has ended.\n",
                "enum": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "example": "1",
                "nullable": true,
                "type": "string"
              },
              "stream_ended_reason": {
                "description": "The reason why the stream ended. If the stream hasn't ended, this field is empty.",
                "nullable": true,
                "type": "number"
              },
              "stream_key": {
                "description": "The stream key used in conjunction with the RTMP and RTMPS links.",
                "example": "ab9c8def-7a65-4321-b098-c7dd65e43f21",
                "nullable": true,
                "type": "string"
              },
              "width": {
                "description": "The width of the live video in pixels.",
                "example": 100,
                "nullable": true,
                "type": "number"
              }
            },
            "required": [
              "encoder_type",
              "end_time",
              "height",
              "is_rtmp_session",
              "is_scheduled_playback",
              "rtmp_expires_at",
              "rtmp_link",
              "rtmps_link",
              "scheduled_start_time",
              "session_id",
              "start_time",
              "status",
              "stream_ended_reason",
              "stream_key",
              "width"
            ],
            "type": "object"
          },
          "metering": {
            "description": "The metering status of the live video.",
            "properties": {
              "seconds_max": {
                "description": "The maximum number of seconds.",
                "example": 0,
                "type": "number"
              },
              "seconds_remaining": {
                "description": "The number of seconds remaining.",
                "example": 0,
                "type": "number"
              }
            },
            "required": [
              "seconds_max",
              "seconds_remaining"
            ],
            "type": "object"
          },
          "status": {
            "description": "The status of the event.\n\nOption descriptions:\n * `ended` - The event has ended.\n * `started` - The event has started.\n",
            "enum": [
              "ended",
              "started"
            ],
            "example": "started",
            "nullable": true,
            "type": "string"
          },
          "stream_mode": {
            "description": "The stream mode of the event.\n\nOption descriptions:\n * `live` - The stream is live playback.\n * `record` - The stream is in record mode.\n * `simulive` - The stream is scheduled media playback.\n",
            "enum": [
              "live",
              "record",
              "simulive"
            ],
            "example": "live",
            "type": "string",
            "x-mill-non-default": true
          }
        },
        "required": [
          "archive",
          "can_manage",
          "id",
          "ingest",
          "metering",
          "status",
          "stream_mode"
        ],
        "type": "object"
      },
      "federated-search-items": {
        "title": "Federated Search Items",
        "properties": {
          "folder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/project"
              }
            ],
            "description": "The project item folder."
          },
          "live_event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/recurring-event"
              }
            ],
            "description": "The project item event."
          },
          "showcase": {
            "allOf": [
              {
                "$ref": "#/components/schemas/album"
              }
            ],
            "description": "The project item showcase."
          },
          "type": {
            "description": "The project item type.\n\nOption descriptions:\n * `folder` - The project item is a folder.\n * `live_event` - The project item is an event.\n * `showcase` - The project item is a showcase.\n * `video` - The project item is a video.\n",
            "enum": [
              "folder",
              "live_event",
              "showcase",
              "video"
            ],
            "example": "folder",
            "type": "string"
          },
          "video": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The project item video."
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "fragments": {
        "title": "Fragments",
        "properties": {
          "created_on": {
            "description": "The time in ISO 8601 format when the fragment was created.",
            "example": "2022-05-23T15:24:31+00:00",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the fragments.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "clip": {
                    "description": "Information about the videos that belong to this channel.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/710320868",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "clip"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "modified_on": {
            "description": "The time in ISO 8601 format when the fragment was last updated.",
            "example": "2022-05-23T15:24:31+00:00",
            "type": "string"
          },
          "timecode": {
            "description": "The time in milliseconds of the fragment's _inpoint_, or the time from the start of the video that marks the beginning of the fragment.",
            "example": 11145,
            "type": "number"
          },
          "uri": {
            "description": "The URI of the video fragment.",
            "example": "/videos/!clip_id/fragments",
            "type": "string"
          }
        },
        "required": [
          "created_on",
          "metadata",
          "modified_on",
          "timecode",
          "uri"
        ],
        "type": "object"
      },
      "group": {
        "title": "Group",
        "properties": {
          "created_time": {
            "description": "The time in ISO 8601 format when the group was created.",
            "example": "2008-07-05T14:52:43+00:00",
            "type": "string"
          },
          "description": {
            "description": "The group's description.",
            "example": "Want to participate in our weekly challenges? Join the group to receive messages and new challenges!",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "description": "The link to the group.",
            "example": "https://vimeo.com/groups/weekendchallenge",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the group.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "requested_clip": {
                    "description": "Information about the requested video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "videos/1232",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "users": {
                    "description": "Information about the members or moderators of the group.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection.",
                        "example": 25798,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/groups/1108/users",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "Information about the videos contained within the group.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 7252,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/groups/1108/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "requested_clip",
                  "users",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "User actions that have involved the group. This data requires a bearer token with the `private` scope.",
                "properties": {
                  "join": {
                    "description": "An action indicating that someone has joined the group. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "added": {
                        "description": "Whether the user has followed the group. This data requires a bearer token with the `private` scope.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the user joined the group. This data requires a bearer token with the `private` scope.",
                        "nullable": true,
                        "type": "string"
                      },
                      "title": {
                        "description": "The user's title. If this field isn't applicable, it takes the null value. This data requires a bearer token with the `private` scope.",
                        "example": "Vimeo Staff",
                        "nullable": true,
                        "type": "string"
                      },
                      "type": {
                        "description": "The user's role type. This data requires a bearer token with the `private` scope.\n\nOption descriptions:\n * `member` - The user is a member.\n * `moderator` - The user is a moderator.\n",
                        "enum": [
                          "member",
                          "moderator"
                        ],
                        "example": "member",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The URI for following the group. PUT to this URI to follow the group, or DELETE to this URI to unfollow the group. This data requires a bearer token with the `private` scope.",
                        "example": "/users/152184/groups/1108",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "title",
                      "type",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "join"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the group was last modified.",
            "example": "2018-09-16T15:41:45+00:00",
            "type": "string"
          },
          "name": {
            "description": "The group's display name.",
            "example": "Vimeo Weekend Challenge",
            "type": "string"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active picture for the group."
          },
          "privacy": {
            "description": "The group's privacy settings.",
            "properties": {
              "comment": {
                "description": "Who can comment on the group.\n\nOption descriptions:\n * `all` - Anyone can comment on the group.\n * `members` - Only group members can comment on the group.\n",
                "enum": [
                  "all",
                  "members"
                ],
                "example": "all",
                "type": "string"
              },
              "invite": {
                "description": "Who can invite new members to the group.\n\nOption descriptions:\n * `all` - Anyone can invite new members to the group.\n * `members` - Only group members can invite new members to the group.\n",
                "enum": [
                  "all",
                  "members"
                ],
                "example": "all",
                "type": "string"
              },
              "join": {
                "description": "Who can join the group.\n\nOption descriptions:\n * `anybody` - Anyone can join the group.\n * `members` - Only people with a Vimeo account can join the group.\n",
                "enum": [
                  "anybody",
                  "members"
                ],
                "example": "anybody",
                "type": "string"
              },
              "videos": {
                "description": "Who can add videos to the group.\n\nOption descriptions:\n * `all` - Anyone can add videos to the group.\n * `members` - Only group members can add videos to the group.\n",
                "enum": [
                  "all",
                  "members"
                ],
                "example": "all",
                "type": "string"
              },
              "view": {
                "description": "Who can access the group.\n\nOption descriptions:\n * `anybody` - Anyone can access the group. This privacy setting appears as `Public` on the Vimeo front end.\n * `members` - Only group members can access the group.\n",
                "enum": [
                  "anybody",
                  "members"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "comment",
              "invite",
              "join",
              "videos",
              "view"
            ],
            "type": "object"
          },
          "resource_key": {
            "description": "The resource key of the group.",
            "example": "dc724af18fbdd4e59189f5fe768a5f8311527050",
            "type": "string"
          },
          "uri": {
            "description": "The canonical relative URI of the group.",
            "example": "/groups/1108",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the group.",
            "nullable": true
          }
        },
        "required": [
          "created_time",
          "description",
          "link",
          "metadata",
          "modified_time",
          "name",
          "pictures",
          "privacy",
          "resource_key",
          "uri"
        ],
        "type": "object"
      },
      "hls-dash-video-file": {
        "title": "HLS/DASH Video File",
        "properties": {
          "link": {
            "description": "The direct link to the video file.",
            "example": "https://player.vimeo.com/play/965853365?s=258684937_1537",
            "nullable": true,
            "type": "string"
          },
          "link_expiration_time": {
            "description": "The time in ISO 8601 format when the link to the video file expires.",
            "example": "2017-05-16T17:21:51+00:00",
            "type": "string"
          },
          "log": {
            "description": "The URL for logging events.",
            "example": "https:/api.vimeo.com/videos/258684937/log/12337123/76af42bfd",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "link",
          "link_expiration_time"
        ],
        "type": "object"
      },
      "language": {
        "title": "Language",
        "properties": {
          "code": {
            "description": "The standard ISO 639-1 code for the language.",
            "example": "en-US",
            "type": "string"
          },
          "name": {
            "description": "The name of the language.",
            "example": "English (United States)",
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ],
        "type": "object"
      },
      "legacy-error": {
        "title": "Legacy Error",
        "properties": {
          "error": {
            "description": "The error message.",
            "example": "Something strange occurred. Please try again.",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "location": {
        "title": "Location",
        "properties": {
          "city": {
            "description": "The authenticated user's city.",
            "example": "New York City",
            "nullable": true,
            "type": "string"
          },
          "country": {
            "description": "The authenticated user's country.",
            "example": "United States",
            "nullable": true,
            "type": "string"
          },
          "country_iso_code": {
            "description": "The ISO code of the authenticated user's country.",
            "example": "US",
            "type": "string"
          },
          "formatted_address": {
            "description": "The authenticated user's formatted address string.",
            "example": "123 Street, NY",
            "type": "string"
          },
          "latitude": {
            "description": "The authenticated user's latitude.",
            "example": 20.2960586,
            "type": "number"
          },
          "longitude": {
            "description": "The authenticated user's longitude.",
            "example": 185.8245392,
            "type": "number"
          },
          "neighborhood": {
            "description": "The authenticated user's neighborhood.",
            "example": "Brooklyn",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "description": "The authenticated user's state.",
            "example": "New York",
            "nullable": true,
            "type": "string"
          },
          "state_iso_code": {
            "description": "The ISO code of the authenticated user's state.",
            "example": "NY",
            "nullable": true,
            "type": "string"
          },
          "sub_locality": {
            "description": "The authenticated user's sub-locality.",
            "example": "Brooklyn",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "city",
          "country",
          "country_iso_code",
          "formatted_address",
          "latitude",
          "longitude",
          "neighborhood",
          "state",
          "state_iso_code",
          "sub_locality"
        ],
        "type": "object"
      },
      "money": {
        "title": "Money",
        "properties": {
          "amount": {
            "description": "The amount expressed as a numeral without currency formatting.",
            "example": 12,
            "type": "number"
          },
          "currency": {
            "description": "The currency in which the amount is expressed.",
            "example": "USD",
            "type": "string"
          },
          "formatted": {
            "description": "The amount expressed as a numeral with currency formatting.",
            "example": "$12",
            "type": "string"
          },
          "unit": {
            "description": "The amount expressed as a numeral in the lowest denomination. For example, 12 USD is expressed as 1200.",
            "example": 1200,
            "type": "number"
          }
        },
        "required": [
          "amount",
          "currency",
          "formatted",
          "unit"
        ],
        "type": "object"
      },
      "on-demand-genre": {
        "title": "On Demand Genre",
        "properties": {
          "canonical": {
            "description": "The canonical name or URL slug of the genre.",
            "example": "horror",
            "type": "string"
          },
          "interactions": {
            "properties": {
              "page": {
                "description": "Interactions for On Demand pages that belong to the genre.",
                "properties": {
                  "added": {
                    "description": "Whether the On Demand genre was added.",
                    "example": true,
                    "type": "boolean"
                  },
                  "options": {
                    "description": "An array of HTTP methods permitted on this URI.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "uri": {
                    "description": "The URI to access the On Demand page.",
                    "example": "/ondemand/genres/horror/pages/12345",
                    "type": "string"
                  }
                },
                "required": [
                  "added",
                  "options",
                  "uri"
                ],
                "type": "object"
              }
            },
            "required": [
              "page"
            ],
            "type": "object"
          },
          "link": {
            "description": "The Vimeo URL for the genre.",
            "example": "http://vimeo.com/ondemand/browse/horror",
            "type": "string"
          },
          "metadata": {
            "properties": {
              "connections": {
                "description": "A collection of information connected to this resource.",
                "properties": {
                  "pages": {
                    "description": "Information about the On Demand pages related to this group.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/genres/horror/pages",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "pages"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "name": {
            "description": "The descriptive name of the genre.",
            "example": "Horror",
            "type": "string"
          },
          "uri": {
            "description": "The relative URI of the On Demand genre.",
            "example": "/ondemand/genres/horror",
            "type": "string"
          }
        },
        "required": [
          "canonical",
          "interactions",
          "link",
          "metadata",
          "name",
          "uri"
        ],
        "type": "object"
      },
      "on-demand-page": {
        "title": "On Demand Page",
        "properties": {
          "background": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The background image for the On Demand page.",
            "nullable": true
          },
          "colors": {
            "description": "The first and second colors of the On Demand page.",
            "properties": {
              "primary": {
                "description": "The hexadecimal color code for the On Demand page's first color.",
                "example": "#0a0808",
                "type": "string"
              },
              "secondary": {
                "description": "The hexadecimal color code for the On Demand page's second color.",
                "example": "#ba4a17",
                "type": "string"
              }
            },
            "required": [
              "primary",
              "secondary"
            ],
            "type": "object"
          },
          "content_rating": {
            "description": "An array of the On Demand page's content ratings.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the On Demand page was created.",
            "example": "2017-05-15T13:42:25+00:00",
            "type": "string"
          },
          "description": {
            "description": "The description of the On Demand page.",
            "example": "DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\"",
            "nullable": true,
            "type": "string"
          },
          "domain_link": {
            "description": "The link to the On Demand page on its own domain.",
            "example": "https://example.com",
            "nullable": true,
            "type": "string"
          },
          "episodes": {
            "description": "Information about the On Demand page's episodes, if the page is for a series.",
            "properties": {
              "buy": {
                "properties": {
                  "active": {
                    "description": "Whether all the videos on the On Demand page can be purchased as a whole.",
                    "example": true,
                    "type": "boolean"
                  },
                  "price": {
                    "description": "The default price to buy an episode.",
                    "example": 9.99,
                    "nullable": true,
                    "type": "number"
                  }
                },
                "required": [
                  "active",
                  "price"
                ],
                "type": "object"
              },
              "rent": {
                "properties": {
                  "active": {
                    "description": "Whether all the videos on the On Demand page can be rented as a whole.",
                    "example": true,
                    "type": "boolean"
                  },
                  "period": {
                    "description": "The rental period for the video.\n\nOption descriptions:\n * `1 day` - The rental period is one day.\n * `1 month` - The rental period is one month.\n * `1 week` - The rental period is one week.\n * `1 year` - The rental period is one year.\n * `2 day` - The rental period is two days.\n * `24 hour` - The rental period is 24 hours.\n * `3 day` - The rental period is three days.\n * `3 month` - The rental period is three months.\n * `30 day` - The rental period is 30 days.\n * `48 hour` - The rental period is 48 hours.\n * `6 month` - The rental period is six months.\n * `60 day` - The rental period is 60 days.\n * `7 day` - The rental period is seven days.\n * `72 hour` - The rental period is 72 hours.\n",
                    "enum": [
                      "1 day",
                      "1 month",
                      "1 week",
                      "1 year",
                      "2 day",
                      "24 hour",
                      "3 day",
                      "3 month",
                      "30 day",
                      "48 hour",
                      "6 month",
                      "60 day",
                      "7 day",
                      "72 hour"
                    ],
                    "example": "1 day",
                    "nullable": true,
                    "type": "string"
                  },
                  "price": {
                    "description": "The default price to rent an episode.",
                    "example": 2.99,
                    "nullable": true,
                    "type": "number"
                  }
                },
                "required": [
                  "active",
                  "period",
                  "price"
                ],
                "type": "object"
              }
            },
            "required": [
              "buy",
              "rent"
            ],
            "type": "object"
          },
          "film": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The On Demand page's film, if the page is for a film."
          },
          "genres": {
            "description": "An array of the genres assigned to the On Demand page.",
            "items": {
              "$ref": "#/components/schemas/on-demand-genre"
            },
            "type": "array"
          },
          "link": {
            "description": "The link to the On Demand page.",
            "example": "https://vimeo.com/ondemand/darbyforever",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the On Demand page.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource, including videos, genres, and pictures connections.",
                "properties": {
                  "metadata": {
                    "properties": {
                      "connections": {
                        "properties": {
                          "comments": {
                            "description": "Information about the comments associated with the On Demand page.",
                            "properties": {
                              "options": {
                                "description": "An array of HTTP methods permitted on this URI.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "The total number of comments on this connection.",
                                "example": 4,
                                "type": "number"
                              },
                              "uri": {
                                "description": "The API URI that resolves to the connection data.",
                                "example": "/ondemand/pages/61326/comments",
                                "type": "string"
                              }
                            },
                            "required": [
                              "options",
                              "total",
                              "uri"
                            ],
                            "type": "object"
                          },
                          "genres": {
                            "description": "Information about the genres associated with the On Demand page.",
                            "properties": {
                              "options": {
                                "description": "An array of HTTP methods permitted on this URI.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "The total number of genres on this connection.",
                                "example": 9,
                                "type": "number"
                              },
                              "uri": {
                                "description": "The API URI that resolves to the connection data.",
                                "example": "/ondemand/pages/61326/genres",
                                "type": "string"
                              }
                            },
                            "required": [
                              "options",
                              "total",
                              "uri"
                            ],
                            "type": "object"
                          },
                          "likes": {
                            "description": "Information about the likes associated with the On Demand page.",
                            "properties": {
                              "options": {
                                "description": "An array of HTTP methods permitted on this URI.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "The total number of likes on this connection.",
                                "example": 15,
                                "type": "number"
                              },
                              "uri": {
                                "description": "The API URI that resolves to the connection data.",
                                "example": "/ondemand/pages/61326/likes",
                                "type": "string"
                              }
                            },
                            "required": [
                              "options",
                              "total",
                              "uri"
                            ],
                            "type": "object"
                          },
                          "pictures": {
                            "description": "Information about the pictures associated with the On Demand page.",
                            "properties": {
                              "options": {
                                "description": "An array of HTTP methods permitted on this URI.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "The total number of pictures on this connection.",
                                "example": 3,
                                "type": "number"
                              },
                              "uri": {
                                "description": "The API URI that resolves to the connection data.",
                                "example": "/ondemand/pages/61326/pictures",
                                "type": "string"
                              }
                            },
                            "required": [
                              "options",
                              "total",
                              "uri"
                            ],
                            "type": "object"
                          },
                          "seasons": {
                            "description": "Information about the seasons associated with the On Demand page.",
                            "properties": {
                              "options": {
                                "description": "An array of HTTP methods permitted on this URI.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "The total number of seasons on this connection.",
                                "example": 3,
                                "type": "number"
                              },
                              "uri": {
                                "description": "The API URI that resolves to the connection data.",
                                "example": "/ondemand/pages/61326/seasons",
                                "type": "string"
                              }
                            },
                            "required": [
                              "options",
                              "total",
                              "uri"
                            ],
                            "type": "object"
                          },
                          "videos": {
                            "description": "Information about the videos associated with the On Demand page.",
                            "properties": {
                              "extra_total": {
                                "description": "The total number of extra videos on the On Demand page.",
                                "example": 14,
                                "type": "number"
                              },
                              "main_total": {
                                "description": "The total number of main videos on the On Demand page.",
                                "example": 36,
                                "type": "number"
                              },
                              "options": {
                                "description": "An array of HTTP methods permitted on this URI.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "The total number of videos on this connection.",
                                "example": 50,
                                "type": "number"
                              },
                              "uri": {
                                "description": "The API URI that resolves to the connection data.",
                                "example": "/ondemand/pages/61326/videos",
                                "type": "string"
                              },
                              "viewable_total": {
                                "description": "The total number of viewable videos on the On Demand page.",
                                "example": 50,
                                "type": "number"
                              }
                            },
                            "required": [
                              "extra_total",
                              "main_total",
                              "options",
                              "total",
                              "uri",
                              "viewable_total"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "comments",
                          "genres",
                          "likes",
                          "pictures",
                          "seasons",
                          "videos"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "connections"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "metadata"
                ],
                "type": "object"
              },
              "interactions": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/purchase-interaction"
                  }
                ],
                "description": "The user's available purchase interactions."
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the On Demand page was last modified.",
            "example": "2017-05-15T13:42:25+00:00",
            "type": "string"
          },
          "name": {
            "description": "The descriptive title of the On Demand page.",
            "example": "Darby Forever",
            "type": "string"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active poster for the On Demand page.",
            "nullable": true
          },
          "preorder": {
            "properties": {
              "active": {
                "description": "Whether the On Demand page is available for preorder.",
                "example": true,
                "type": "boolean"
              },
              "cancel_time": {
                "description": "The time in ISO 8601 format when the preorder was cancelled.",
                "example": "2017-05-16T13:13:46+00:00",
                "type": "string"
              },
              "publish_time": {
                "description": "The time in ISO 8601 format when the preorder was released to the public.",
                "example": "2017-05-15T13:12:52+00:00",
                "type": "string"
              },
              "time": {
                "description": "The time in ISO 8601 format when the preorder started.",
                "example": "2017-05-15T13:13:31+00:00",
                "type": "string"
              }
            },
            "required": [
              "active",
              "cancel_time",
              "publish_time",
              "time"
            ],
            "type": "object"
          },
          "published": {
            "properties": {
              "enabled": {
                "description": "Whether the On Demand page has been published.",
                "example": true,
                "type": "boolean"
              },
              "time": {
                "description": "The time in ISO 8601 format when this page was published.",
                "example": "2017-05-15T13:12:52+00:00",
                "type": "string"
              }
            },
            "required": [
              "enabled",
              "time"
            ],
            "type": "object"
          },
          "rating": {
            "description": "The rating of the On Demand page.",
            "example": 7,
            "nullable": true,
            "type": "number"
          },
          "resource_key": {
            "description": "The On Demand resource key.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "sku": {
            "description": "The creator-designated SKU for the On Demand page.",
            "example": "VIME0001",
            "nullable": true,
            "type": "string"
          },
          "subscription": {
            "description": "Information about subscribing to the On Demand page, if subscription is enabled.",
            "nullable": true,
            "properties": {
              "active": {
                "description": "Whether the On Demand product is active.",
                "example": true,
                "type": "boolean"
              },
              "link": {
                "description": "The link to the On Demand product.",
                "example": "https://vimeo.com/ondemand/darbyforever",
                "nullable": true,
                "type": "string"
              },
              "period": {
                "description": "The On Demand product's rental period.",
                "type": "string"
              },
              "price": {
                "description": "The accepted currencies and respective pricing for the On Demand product.",
                "type": "object"
              }
            },
            "required": [
              "active",
              "link",
              "price"
            ],
            "type": "object"
          },
          "theme": {
            "description": "The graphical theme for the On Demand page.",
            "example": "vader",
            "type": "string"
          },
          "thumbnail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The thumbnail image for the On Demand page.",
            "nullable": true
          },
          "trailer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The trailer for the On Demand page.",
            "nullable": true
          },
          "type": {
            "description": "The type of the On Demand page.\n\nOption descriptions:\n * `film` - The On Demand page is for a film.\n * `series` - The On Demand page is for a series.\n",
            "enum": [
              "film",
              "series"
            ],
            "example": "film",
            "type": "string"
          },
          "uri": {
            "description": "The relative URI of the On Demand page.",
            "example": "/ondemand/pages/61326",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The user who created the On Demand page.",
            "nullable": true
          }
        },
        "required": [
          "background",
          "colors",
          "content_rating",
          "description",
          "domain_link",
          "episodes",
          "genres",
          "link",
          "metadata",
          "name",
          "pictures",
          "preorder",
          "published",
          "rating",
          "resource_key",
          "subscription",
          "theme",
          "thumbnail",
          "trailer",
          "type",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "on-demand-promotion": {
        "title": "On Demand Promotion",
        "properties": {
          "access_type": {
            "description": "The type of access that the promotion grants.\n\nOption descriptions:\n * `default` - The promotion grants discounts on existing product offerings.\n * `vip` - The promotion grants free access to On Demand content before it's released, or to access types that aren't part of the existing product offerings.\n",
            "enum": [
              "default",
              "vip"
            ],
            "example": "default",
            "type": "string"
          },
          "discount_type": {
            "description": "The type of discount that the promotion provides.\n\nOption descriptions:\n * `dollars` - The promotion discounts a fixed amount from the full purchase price.\n * `free` - The promotion discounts the full purchase price. When **access_type** is `vip`, **discount_type** is always `free`.\n * `percent` - The promotion discounts a percentage of the full purchase price.\n",
            "enum": [
              "dollars",
              "free",
              "percent"
            ],
            "example": "free",
            "type": "string"
          },
          "download": {
            "description": "Whether the promotion grants download access to On Demand content.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "description": "The prefix string for batch codes, or the null value for single codes.",
            "example": "8jgaieumbzstujhn8k304iwwezawkvwm",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "description": "The video's metadata.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the promotion.",
                "properties": {
                  "codes": {
                    "description": "Information about the codes associated with the promotion.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of uses on this connection.",
                        "example": 1,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/pages/61326/promotion/12345/codes",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "codes"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "percent_off": {
            "description": "When **discount_type** is `percent`, the percentage amount that is deducted from the product price.",
            "example": 100,
            "type": "number"
          },
          "product_type": {
            "description": "The type of product to which the promotion can be applied. Only the `buy` and `rent` options are available when **access_type** is `vip`.\n\nOption descriptions:\n * `any` - The promotion can be applied to any product.\n * `buy` - The promotion can be applied to a buyable single video.\n * `buy_episode` - The promotion can be applied to a buyable single episode.\n * `rent` - The promotion can be applied to a rentable single video.\n * `rent_episode` - The promotion can be applied to a rentable single episode.\n * `subscribe` - The promotion can be applied to a subscription.\n",
            "enum": [
              "any",
              "buy",
              "buy_episode",
              "rent",
              "rent_episode",
              "subscribe"
            ],
            "example": "any",
            "type": "string"
          },
          "stream_period": {
            "description": "The amount of time that the user has access to the On Demand content after redeeming a promotional code.\n\nOption descriptions:\n * `1_week` - Access lasts for one week.\n * `1_year` - Access lasts for one year.\n * `24_hour` - Access lasts for 24 hours.\n * `30_days` - Access lasts for 30 days.\n * `3_month` - Access lasts for three months.\n * `48_hour` - Access lasts for 48 hours.\n * `6_month` - Access lasts for six months.\n * `72_hour` - Access lasts for 72 hours.\n",
            "enum": [
              "1_week",
              "1_year",
              "24_hour",
              "30_days",
              "3_month",
              "48_hour",
              "6_month",
              "72_hour"
            ],
            "example": "1_week",
            "nullable": true,
            "type": "string"
          },
          "total": {
            "description": "When **type** is `single`, the total number of times that the promotion can be used. When **type** is `batch` or `batch_prefix`, the total number of promo codes that have been generated.",
            "example": 1,
            "type": "number"
          },
          "type": {
            "description": "The way in which the promotion generates promo codes.\n\nOption descriptions:\n * `batch` - The promotion provides a unique promotional code for each user.\n * `batch_prefix` - Like `batch`, except that all codes have a similar prefix string. _This option is deprecated, yet it may still appear for some users._\n * `single` - The promotion provides a single promotional code for all users.\n",
            "enum": [
              "batch",
              "batch_prefix",
              "single"
            ],
            "example": "batch",
            "type": "string"
          },
          "uri": {
            "description": "The promotion's canonical relative URI.",
            "example": "/ondemand/pages/61326/promotions/12345",
            "type": "string"
          }
        },
        "required": [
          "access_type",
          "discount_type",
          "download",
          "label",
          "metadata",
          "percent_off",
          "product_type",
          "stream_period",
          "total",
          "type",
          "uri"
        ],
        "type": "object"
      },
      "on-demand-promotion-code": {
        "title": "On Demand Promotion Code",
        "properties": {
          "code": {
            "description": "The Vimeo promotion code.",
            "example": "8jgaieumbzstujhn8k304iwwezawkvwm",
            "type": "string"
          },
          "link": {
            "description": "The link to redeem the promotion code.",
            "example": "https://vimeo.com/r/0trBLg/OGpnYWlldW",
            "type": "string"
          },
          "max_uses": {
            "description": "The total number of times that this code can be used.",
            "example": 1,
            "type": "number"
          },
          "uses": {
            "description": "The current number of times that this code has been used.",
            "example": 0,
            "type": "number"
          }
        },
        "required": [
          "code",
          "link",
          "max_uses",
          "uses"
        ],
        "type": "object"
      },
      "on-demand-region": {
        "title": "On Demand Region",
        "properties": {
          "country_code": {
            "description": "The ISO 3166-1 alpha-2 code for this country.",
            "example": "US",
            "type": "string"
          },
          "country_name": {
            "description": "The descriptive name of this country.",
            "example": "United States",
            "type": "string"
          },
          "uri": {
            "description": "The region container's relative URI.",
            "example": "/ondemand/pages/61326/regions/US",
            "type": "string"
          }
        },
        "required": [
          "country_code",
          "country_name",
          "uri"
        ],
        "type": "object"
      },
      "on-demand-season": {
        "title": "On Demand Season",
        "properties": {
          "description": {
            "description": "The description of the season.",
            "example": "Season 1",
            "type": "string"
          },
          "metadata": {
            "properties": {
              "connections": {
                "properties": {
                  "videos": {
                    "description": "The connection to the associated videos.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 13,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/pages/61326/season/12345/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "videos"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "name": {
            "description": "The name of the season.",
            "example": "Season 1",
            "type": "string"
          },
          "position": {
            "description": "The position of the season relative to other seasons in the series.",
            "example": 1,
            "type": "number"
          },
          "resource_key": {
            "description": "The unique identifier of the On Demand season.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "type": {
            "description": "The type of the season.",
            "example": "main",
            "type": "string"
          },
          "uri": {
            "description": "The season container's relative URI.",
            "example": "/ondemand/pages/61326/seasons/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The creator of the season's On Demand page.",
            "nullable": true
          }
        },
        "required": [
          "description",
          "metadata",
          "name",
          "position",
          "resource_key",
          "type",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "on-demand-video": {
        "title": "On Demand Video",
        "properties": {
          "buy": {
            "description": "Information about purchasing the video.",
            "nullable": true,
            "properties": {
              "active": {
                "description": "Whether the video can be purchased.",
                "example": true,
                "type": "boolean"
              },
              "price": {
                "description": "The purchase price of the video by currency type.",
                "type": "object"
              },
              "purchased": {
                "description": "Whether the video has been purchased.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "active",
              "price"
            ],
            "type": "object"
          },
          "description": {
            "description": "The description of the video.",
            "example": "This video provides in-depth instruction in the use of the Vimeo API.",
            "type": "string"
          },
          "duration": {
            "description": "The duration of the video.",
            "example": "1197",
            "type": "string"
          },
          "episode": {
            "description": "The episode number of the video.",
            "example": 1,
            "type": "number"
          },
          "interactions": {
            "description": "An object containing information about how the authenticated user can interact with the video's On Demand page.",
            "properties": {
              "page": {
                "description": "Information about how the authenticated user can interact with the connection to the video's On Demand page.",
                "properties": {
                  "added": {
                    "description": "Whether the On Demand page was added.",
                    "example": true,
                    "type": "boolean"
                  },
                  "options": {
                    "description": "An array of HTTP methods permitted on this URI.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "uri": {
                    "description": "The URI to access the On Demand page.",
                    "example": "/ondemand/pages/61326",
                    "type": "string"
                  }
                },
                "required": [
                  "added",
                  "options",
                  "uri"
                ],
                "type": "object"
              }
            },
            "required": [
              "page"
            ],
            "type": "object"
          },
          "link": {
            "description": "The link to the video on Vimeo.",
            "example": "https://vimeo.com/ondemand/darbyforever/12345",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata information about the video.",
            "properties": {
              "connections": {
                "properties": {
                  "season": {
                    "description": "Information about the video's season.",
                    "properties": {
                      "name": {
                        "description": "The name of the season on this connection.",
                        "example": "Season 1",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/pages/61326/seasons/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "season"
                ],
                "type": "object"
              },
              "interactions": {
                "properties": {
                  "likes": {
                    "description": "Information about the authenticated user's interaction to like the video.",
                    "properties": {
                      "added": {
                        "description": "Whether the authenticated user has liked the video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the authenticated user liked the video.",
                        "example": "2017-05-12T21:42:42+00:00",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The URI for the authenticated user to like the video.",
                        "example": "/users/152184/likes/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "watchlater": {
                    "description": "Information about the authenticated user's interaction to watch the video later.",
                    "properties": {
                      "added": {
                        "description": "Whether the authenticated user has added the video to their Watch Later queue.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the authenticated user added the video to their Watch Later queue.",
                        "example": "2017-05-12T21:42:42+00:00",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The URI for the authenticated user to add the video to their Watch Later queue.",
                        "example": "/users/152184/watchlater/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "likes",
                  "watchlater"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "name": {
            "description": "The title of the video.",
            "example": "Darby Forever",
            "type": "string"
          },
          "options": {
            "description": "An array of HTTP methods permitted on this URI.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active picture of the video."
          },
          "play_progress": {
            "description": "The authenticated user's most recent play position in the video, in seconds.",
            "example": 30,
            "type": "number"
          },
          "position": {
            "description": "The position of the video relative to the other videos on the On Demand page.",
            "example": 1,
            "type": "number"
          },
          "release_date": {
            "description": "The time in ISO 8601 format when the video was created or published.",
            "example": "2017-05-12T21:06:42+00:00",
            "type": "string"
          },
          "release_year": {
            "description": "The year that the video was released.",
            "example": 2016,
            "nullable": true,
            "type": "number"
          },
          "rent": {
            "description": "Information about renting the video.",
            "nullable": true,
            "properties": {
              "active": {
                "description": "Whether the video can be rented.",
                "example": true,
                "type": "boolean"
              },
              "price": {
                "description": "The rental price of the video by currency type.",
                "type": "object"
              },
              "purchased": {
                "description": "Whether the video has been rented.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "active",
              "price"
            ],
            "type": "object"
          },
          "type": {
            "description": "The type of video.\n\nOption descriptions:\n * `extra` - The video is an extra feature.\n * `main` - The video is a main feature.\n * `trailer` - The video is a trailer.\n",
            "enum": [
              "extra",
              "main",
              "trailer"
            ],
            "example": "main",
            "type": "string"
          },
          "uri": {
            "description": "The video container's relative URI.",
            "example": "/ondemand/pages/61326/videos/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the video."
          }
        },
        "required": [
          "buy",
          "interactions",
          "link",
          "metadata",
          "play_progress",
          "release_year",
          "rent",
          "type",
          "uri"
        ],
        "type": "object"
      },
      "ott-destination": {
        "title": "OTT Destination",
        "properties": {
          "id": {
            "description": "The OTT destination's canonical relative URI.",
            "example": "/ott/destination/1111",
            "type": "string"
          },
          "ott_channel_id": {
            "description": "The ID of the OTT channel.",
            "example": 1111,
            "type": "number"
          },
          "ott_channel_name": {
            "description": "The name of the OTT channel.",
            "example": "Channel One",
            "type": "string"
          },
          "ott_channel_subdomain": {
            "description": "The subdomain of the OTT channel.",
            "example": "subdomain",
            "type": "string"
          },
          "ott_event_id": {
            "description": "The ID of the OTT event.",
            "example": 1111,
            "type": "number"
          },
          "recurring_live_event_id": {
            "description": "The ID of the current recurring event.",
            "example": 1111,
            "type": "number"
          }
        },
        "required": [
          "id",
          "ott_channel_id",
          "ott_channel_name",
          "ott_channel_subdomain",
          "ott_event_id",
          "recurring_live_event_id"
        ],
        "type": "object"
      },
      "payment-method": {
        "title": "Payment Method",
        "properties": {
          "account_id": {
            "description": "The ID of the account.",
            "example": "abc12345",
            "type": "string"
          },
          "card": {
            "description": "Information about the card used to make the payment.",
            "properties": {
              "billing_address": {
                "description": "The billing address of the card.",
                "properties": {
                  "address": {
                    "description": "The street address of the billing address.",
                    "example": "123 Main St.",
                    "type": "string"
                  },
                  "city": {
                    "description": "The city of the billing address.",
                    "example": "New York",
                    "type": "string"
                  },
                  "country": {
                    "description": "The country of the billing address.",
                    "example": "US",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "The postal code of the billing address.",
                    "example": "10001",
                    "type": "string"
                  },
                  "state": {
                    "description": "The state of the billing address.",
                    "example": "NY",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "bin": {
                "description": "The bank identification number of the card.",
                "example": "123456",
                "type": "string"
              },
              "brand": {
                "description": "The brand of the card.\n\nOption descriptions:\n * `CARD_BRAND_AMERICAN_EXPRESS` - The card brand is American Express.\n * `CARD_BRAND_DISCOVER` - The card brand is Discover.\n * `CARD_BRAND_JCB` - The card brand is JCB.\n * `CARD_BRAND_MASTER_CARD` - The card brand is Mastercard.\n * `CARD_BRAND_UNION_PAY` - The card brand is UnionPay.\n * `CARD_BRAND_UNSPECIFIED` - The card brand is unspecified.\n * `CARD_BRAND_VISA` - The card brand is Visa.\n",
                "enum": [
                  "CARD_BRAND_AMERICAN_EXPRESS",
                  "CARD_BRAND_DISCOVER",
                  "CARD_BRAND_JCB",
                  "CARD_BRAND_MASTER_CARD",
                  "CARD_BRAND_UNION_PAY",
                  "CARD_BRAND_UNSPECIFIED",
                  "CARD_BRAND_VISA"
                ],
                "example": "CARD_BRAND_VISA",
                "type": "string"
              },
              "cardholder_name": {
                "description": "The name of the cardholder.",
                "example": "John Doe",
                "type": "string"
              },
              "expiration_month": {
                "description": "The expiration month of the card.",
                "example": 1,
                "type": "number"
              },
              "expiration_year": {
                "description": "The expiration year of the card.",
                "example": 2020,
                "type": "number"
              },
              "last_four_digits": {
                "description": "The last four digits of the card.",
                "example": "1234",
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "description": "The time when the payment method was created.",
            "example": "2019-01-01T00:00:00+00:00",
            "type": "string"
          },
          "disabled_at": {
            "description": "The time when the payment method was disabled.",
            "example": "2019-01-01T00:00:00+00:00",
            "type": "string"
          },
          "id": {
            "description": "The ID of the payment method.",
            "example": "abc12345",
            "type": "string"
          },
          "is_default": {
            "description": "Whether the payment method is the default payment method for the account.",
            "example": true,
            "type": "boolean"
          },
          "type": {
            "description": "The type of payment method.\n\nOption descriptions:\n * `PAYMENT_METHOD_TYPES_APPLEPAY` - The payment method is Apple Pay.\n * `PAYMENT_METHOD_TYPES_BANK_ACCOUNT` - The payment method is a bank account.\n * `PAYMENT_METHOD_TYPES_CARD` - The payment method is a card.\n * `PAYMENT_METHOD_TYPES_GOOGLEPAY` - The payment method is Google Pay.\n * `PAYMENT_METHOD_TYPES_PAYPAL` - The payment method is a PayPal account.\n * `PAYMENT_METHOD_TYPES_TYPES_UNSPECIFIED` - The payment method type is unspecified.\n",
            "enum": [
              "PAYMENT_METHOD_TYPES_APPLEPAY",
              "PAYMENT_METHOD_TYPES_BANK_ACCOUNT",
              "PAYMENT_METHOD_TYPES_CARD",
              "PAYMENT_METHOD_TYPES_GOOGLEPAY",
              "PAYMENT_METHOD_TYPES_PAYPAL",
              "PAYMENT_METHOD_TYPES_TYPES_UNSPECIFIED"
            ],
            "example": "PAYMENT_METHOD_TYPES_CARD",
            "type": "string"
          },
          "updated_at": {
            "description": "The time when the payment method was last updated.",
            "example": "2019-01-01T00:00:00+00:00",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "created_at",
          "disabled_at",
          "id",
          "is_default",
          "type",
          "updated_at"
        ],
        "type": "object"
      },
      "permission-policy": {
        "title": "Permission Policy",
        "properties": {
          "created_on": {
            "description": "The time at which the permission policy was created.",
            "type": "string"
          },
          "display_description": {
            "description": "The display description of the permission policy, translated where applicable.",
            "type": "string"
          },
          "display_name": {
            "description": "The display name of the permission policy, translated where applicable.",
            "type": "string"
          },
          "modified_on": {
            "description": "The time at which the permission policy was last modified.",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the permission policy.",
            "type": "string"
          },
          "permission_actions": {
            "description": "The permission actions associated with the policy.",
            "type": "object"
          },
          "uri": {
            "description": "The URI of the permission policy.",
            "example": "/users/12345/permission_policies/56789",
            "type": "string"
          }
        },
        "required": [
          "created_on",
          "display_description",
          "display_name",
          "modified_on",
          "name",
          "permission_actions",
          "uri"
        ],
        "type": "object"
      },
      "picture": {
        "title": "Picture",
        "properties": {
          "active": {
            "description": "Whether the picture is currently active.",
            "example": true,
            "type": "boolean"
          },
          "base_link": {
            "description": "The base link to the image file, without any parameters.",
            "example": "https://i.vimeocdn.com/video/1130929417-276se668248611ce41e6f7d438196e3412863bad9a5c3bcaf1a14453454cc5-d",
            "type": "string"
          },
          "default_picture": {
            "description": "Whether the picture is Vimeo's default.",
            "example": false,
            "type": "boolean"
          },
          "link": {
            "description": "The upload URL of the picture. This field appears upon the initial creation of a picture resource.",
            "type": "string"
          },
          "resource_key": {
            "description": "The resource key string of the picture.",
            "example": "dc724af18fbdd4e59189f5fe768a5f8311527050",
            "type": "string"
          },
          "sizes": {
            "description": "An array containing reference information about all available image files.",
            "items": {
              "type": "object",
              "properties": {
                "height": {
                  "description": "The height of the picture in pixels.",
                  "example": 720,
                  "type": "number"
                },
                "link": {
                  "description": "The direct link to the image file. For information about the format of the image file, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#returning-the-link-to-a-thumbnail) guide.",
                  "example": "https://i.vimeocdn.com/video/581495283_1280x720?r=pad&subrect=0,12,21,22&r=cover",
                  "type": "string"
                },
                "link_with_play_button": {
                  "description": "The direct link to the image file with a play button overlay. For information about the format of the image file, see our [Working with Thumbnail Uploads](https://developer.vimeo.com/api/upload/thumbnails#returning-the-link-to-a-thumbnail) guide.",
                  "example": "https://i.vimeocdn.com/filter/overlay?src0=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F581495283_1280x720&src1=http%3A%2F%2Ff.vimeocdn.com%2Fp%2Fimages%2Fcrawler_play.png",
                  "type": "string"
                },
                "width": {
                  "description": "The width of the picture in pixels.",
                  "example": 1280,
                  "type": "number"
                }
              },
              "required": [
                "height",
                "link",
                "width"
              ]
            },
            "type": "array"
          },
          "type": {
            "description": "The type of picture.\n\nOption descriptions:\n * `caution` - The picture isn't appropriate for all ages.\n * `custom` - The picture is a custom video image.\n * `default` - The picture is the default video image.\n",
            "enum": [
              "caution",
              "custom",
              "default"
            ],
            "example": "caution",
            "type": "string"
          },
          "uri": {
            "description": "The URI of the picture.",
            "example": "/users/152184/pictures/12345",
            "type": "string"
          }
        },
        "required": [
          "active",
          "base_link",
          "default_picture",
          "resource_key",
          "sizes",
          "type",
          "uri"
        ],
        "type": "object"
      },
      "play": {
        "title": "Play",
        "properties": {
          "dash": {
            "allOf": [
              {
                "$ref": "#/components/schemas/hls-dash-video-file"
              }
            ],
            "description": "The DASH video file."
          },
          "hls": {
            "allOf": [
              {
                "$ref": "#/components/schemas/hls-dash-video-file"
              }
            ],
            "description": "The HLS video file."
          },
          "player_fairplay_certificate_url": {
            "description": "The player URL hosting the FairPlay certification that's required for the digital rights management playback.",
            "example": "https://vimeocdn.com/fairplay/cert",
            "type": "string",
            "x-mill-non-default": true
          },
          "player_license_url": {
            "description": "The player license URL related to DRM playback.",
            "example": "https://player_license_url",
            "type": "string",
            "x-mill-non-default": true
          },
          "progressive": {
            "description": "The progressive video files.",
            "items": {
              "type": "object",
              "properties": {
                "codec": {
                  "description": "The codec of the video file.\n\nOption descriptions:\n * `AV1` - The codec is AV1.\n * `H264` - The codec is H264.\n * `HEVC` - The codec is HEVC.\n",
                  "enum": [
                    "AV1",
                    "H264",
                    "HEVC"
                  ],
                  "example": "AV1",
                  "nullable": true,
                  "type": "string"
                },
                "created_time": {
                  "description": "The time in ISO 8601 format when the video file was created.",
                  "example": "2017-05-16T17:21:51+00:00",
                  "type": "string"
                },
                "fps": {
                  "description": "The frames per second of the video.",
                  "example": 30,
                  "type": "number"
                },
                "height": {
                  "description": "The height of the video in pixels.",
                  "example": 720,
                  "nullable": true,
                  "type": "number"
                },
                "link": {
                  "description": "The direct link to the video file.",
                  "type": "string"
                },
                "link_expiration_time": {
                  "description": "The time in ISO 8601 format when the link to the video file expires.",
                  "example": "2017-05-16T17:21:51+00:00",
                  "type": "string"
                },
                "log": {
                  "description": "The URLs for logging events.",
                  "type": "object"
                },
                "md5": {
                  "description": "The MD5 hash of the video file.",
                  "example": "1bc29b36f623ba82aaf6724fd3b16718",
                  "type": "string"
                },
                "rendition": {
                  "description": "The video rendition.\n\nOption descriptions:\n * `1080p` - The video has 1080p resolution.\n * `240p` - The video has 240p resolution.\n * `2k` - The video has 2K resolution.\n * `360p` - The video has 360p resolution.\n * `480p` - The video has 480p resolution.\n * `4k` - The video has 4K resolution.\n * `540p` - The video has 540p resolution.\n * `5k` - The video has 5K resolution.\n * `6k` - The video has 6K resolution.\n * `720p` - The video has 720p resolution.\n * `7k` - The video has 7K resolution.\n * `8k` - The video has 8K resolution.\n",
                  "enum": [
                    "1080p",
                    "240p",
                    "2k",
                    "360p",
                    "480p",
                    "4k",
                    "540p",
                    "5k",
                    "6k",
                    "720p",
                    "7k",
                    "8k"
                  ],
                  "example": "1080p",
                  "type": "string"
                },
                "size": {
                  "description": "The size in bytes of the video file.",
                  "example": 5000000,
                  "nullable": true,
                  "type": "number"
                },
                "type": {
                  "description": "The type of video file.\n\nOption descriptions:\n * `source` - The video file is a source file.\n * `video/mp4` - The video file is in MP4 format.\n * `video/webm` - The video file is in WebM format.\n * `vp6/x-video` - The video file is in VP6 format.\n",
                  "enum": [
                    "source",
                    "video/mp4",
                    "video/webm",
                    "vp6/x-video"
                  ],
                  "example": "source",
                  "nullable": true,
                  "type": "string"
                },
                "width": {
                  "description": "The width of the video in pixels.",
                  "example": 1280,
                  "nullable": true,
                  "type": "number"
                }
              },
              "required": [
                "codec",
                "created_time",
                "fps",
                "height",
                "link",
                "link_expiration_time",
                "md5",
                "rendition",
                "size",
                "type",
                "width"
              ]
            },
            "type": "array"
          },
          "status": {
            "description": "The play status of the video.\n\nOption descriptions:\n * `drm_plays_exceeded` - The user's quota for DRM plays has been exceeded.\n * `playable` - The video is playable.\n * `purchase_required` - The video must be purchased.\n * `restricted` - Playback for the video is restricted.\n * `unavailable` - The video is unavailable.\n",
            "enum": [
              "drm_plays_exceeded",
              "playable",
              "purchase_required",
              "restricted",
              "unavailable"
            ],
            "example": "drm_plays_exceeded",
            "type": "string"
          }
        },
        "required": [
          "player_fairplay_certificate_url",
          "player_license_url",
          "status"
        ],
        "type": "object"
      },
      "portfolio": {
        "title": "Portfolio",
        "properties": {
          "created_time": {
            "description": "The time in ISO 8601 format when the portfolio was created.",
            "example": "2017-05-16T19:56:07+00:00",
            "type": "string"
          },
          "description": {
            "description": "The description of the portfolio.",
            "example": "The Vimeo Staff original productions.",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "description": "The link to the portfolio.",
            "example": "https://vimeopro.com/staff/originals",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the portfolio.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the portfolio.",
                "properties": {
                  "videos": {
                    "description": "Information about the videos contained within the portfolio.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 18,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/portfolios/12345/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "videos"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the portfolio's data was last modified.",
            "example": "2017-05-17T19:56:07+00:00",
            "type": "string"
          },
          "name": {
            "description": "The display name of the portfolio.",
            "example": "Vimeo Originals!",
            "type": "string"
          },
          "sort": {
            "description": "The default video sort order of the portfolio.\n\nOption descriptions:\n * `alphabetical` - The default sort order is alphabetical by name.\n * `clips` - The default sort order is video creation date.\n * `modified` - The default sort order is the order in which the videos were modified.\n * `recent` - The default sort order is the order in which the videos were added.\n",
            "enum": [
              "alphabetical",
              "clips",
              "modified",
              "recent"
            ],
            "example": "alphabetical",
            "type": "string"
          },
          "uri": {
            "description": "The canonical relative URI of the portfolio.",
            "example": "/users/152184/portfolios/12345",
            "type": "string"
          }
        },
        "required": [
          "created_time",
          "description",
          "link",
          "metadata",
          "modified_time",
          "name",
          "sort",
          "uri"
        ],
        "type": "object"
      },
      "preset": {
        "title": "Preset",
        "properties": {
          "metadata": {
            "description": "Metadata about the preset.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the preset.",
                "properties": {
                  "videos": {
                    "description": "Information about the videos in the preset.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 13,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/presets/12345/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "videos"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "name": {
            "description": "The display name of the preset group.",
            "example": "Minimalism",
            "type": "string"
          },
          "settings": {
            "description": "The contents of the preset group.",
            "properties": {
              "airplay": {
                "description": "Whether AirPlay is enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "ask_ai": {
                "description": "Whether Ask AI is enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "audio_tracks": {
                "description": "Whether multiple audio tracks can appear in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "buttons": {
                "properties": {
                  "embed": {
                    "description": "Whether the preset includes settings for the embed button.",
                    "example": true,
                    "type": "boolean"
                  },
                  "fullscreen": {
                    "description": "Whether the preset includes settings for the fullscreen button.",
                    "example": true,
                    "type": "boolean"
                  },
                  "hd": {
                    "description": "Whether the preset includes settings for the HD button.",
                    "example": true,
                    "type": "boolean"
                  },
                  "like": {
                    "description": "Whether the preset includes settings for the like button.",
                    "example": true,
                    "type": "boolean"
                  },
                  "reaction": {
                    "description": "Whether the preset includes settings for the reaction button.",
                    "example": true,
                    "nullable": true,
                    "type": "boolean"
                  },
                  "share": {
                    "description": "Whether the preset includes settings for the share button.",
                    "example": true,
                    "type": "boolean"
                  },
                  "vote": {
                    "description": "Whether the preset includes settings for the vote button.",
                    "example": true,
                    "type": "boolean"
                  },
                  "watchlater": {
                    "description": "Whether the preset includes settings for the watch later button.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "embed",
                  "fullscreen",
                  "hd",
                  "like",
                  "reaction",
                  "share",
                  "vote",
                  "watchlater"
                ],
                "type": "object"
              },
              "byline": {
                "description": "How the embeddable player handles the video owner's information.\n\nOption descriptions:\n * `hide` - The owner's information is hidden.\n * `show` - The owner's information is shown.\n * `user` - The owner's information can be toggled to `show` or `hide` by the user.\n",
                "enum": [
                  "hide",
                  "show",
                  "user"
                ],
                "example": "hide",
                "type": "string"
              },
              "chapters": {
                "description": "Whether chapters are enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "chromecast": {
                "description": "Whether the Chromecast button appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "closed_captions": {
                "description": "Whether closed captions are enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "color": {
                "description": "The second player color, which controls the player accent color. _This field is identical to **colors.color_two**._",
                "example": "#0a0808",
                "type": "string"
              },
              "colors": {
                "properties": {
                  "color_four": {
                    "description": "The fourth player color, which controls the player background color.",
                    "example": "#aabbcc",
                    "type": "string"
                  },
                  "color_one": {
                    "description": "The first player color, which controls the color of the progress bar, buttons, and more.",
                    "example": "#112233",
                    "type": "string"
                  },
                  "color_three": {
                    "description": "The third player color, which controls the color of text and icons.",
                    "example": "#778899",
                    "type": "string"
                  },
                  "color_two": {
                    "description": "The second player color, which controls the player accent color. _This field is identical to **color**._",
                    "example": "#445566",
                    "type": "string"
                  }
                },
                "required": [
                  "color_four",
                  "color_one",
                  "color_three",
                  "color_two"
                ],
                "type": "object"
              },
              "outro": {
                "properties": {
                  "clips": {
                    "description": "A comma-separated list of video URIs. This field appears only when **type** is `uploaded_clips`.",
                    "example": "/videos/258684937,/videos/273576296",
                    "nullable": true,
                    "type": "string"
                  },
                  "link": {
                    "description": "The outro link settings. These fields appear only when **type** is `link`.",
                    "nullable": true,
                    "properties": {
                      "name": {
                        "description": "The name of the outro link.",
                        "example": "Example Outro",
                        "type": "string"
                      },
                      "url": {
                        "description": "The URL of the outro link.",
                        "example": "https://example.com",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "text": {
                    "description": "The outro text. This appears only when **type** is `text`.",
                    "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                    "nullable": true,
                    "type": "string"
                  },
                  "type": {
                    "description": "The preset outro type.\n\nOption descriptions:\n * `link` - The outro includes a link.\n * `no idea` - The outro type is `no idea`. The outro includes uploaded videos.\n * `text` - The outro includes text.\n * `uploaded_clips` - The outro includes uploaded videos.\n * `uploaded_videos` - The outro includes uploaded videos.\n",
                    "enum": [
                      "link",
                      "no idea",
                      "text",
                      "uploaded_clips",
                      "uploaded_videos"
                    ],
                    "example": "link",
                    "type": "string"
                  },
                  "videos": {
                    "description": "A comma-separated list of video URIs. This field appears only when **type** is `no idea`.",
                    "example": "/videos/258684937,/videos/273576296",
                    "nullable": true,
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ],
                "type": "object"
              },
              "pip": {
                "description": "Whether picture-in-picture is enabled and the button appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "play_button": {
                "description": "A representation of the play button's settings.",
                "properties": {
                  "position": {
                    "description": "The position of the play button within the embeddable player.\n\nOption descriptions:\n * `auto` - Use Vimeo's default positioning for the play button.\n * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.\n * `center` - The play button is positioned in the center of the player.\n",
                    "enum": [
                      "auto",
                      "bottom",
                      "center"
                    ],
                    "example": "auto",
                    "type": "string"
                  }
                },
                "required": [
                  "position"
                ],
                "type": "object"
              },
              "playbar": {
                "description": "Whether the playbar appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "portrait": {
                "description": "How the embeddable player handles the video owner's portrait.\n\nOption descriptions:\n * `hide` - The owner's portrait is hidden.\n * `show` - The owner's portrait is shown.\n * `user` - The owner's portrait can be toggled to `show` or `hide` by the user.\n",
                "enum": [
                  "hide",
                  "show",
                  "user"
                ],
                "example": "hide",
                "type": "string"
              },
              "quality_selector": {
                "description": "Whether to show the quality selector in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "skipping_forward": {
                "description": "Whether users can skip forward in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "speed": {
                "description": "Whether the speed controls appear in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "title": {
                "description": "How the embeddable player handles the video title.\n\nOption descriptions:\n * `hide` - The title is hidden.\n * `show` - The title is shown.\n * `user` - The title can be toggled to `show` or `hide` by the user.\n",
                "enum": [
                  "hide",
                  "show",
                  "user"
                ],
                "example": "hide",
                "type": "string"
              },
              "transcript": {
                "description": "Whether the transcript controls appear in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "volume": {
                "description": "Whether the volume controls appear in the embeddable player.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "airplay",
              "ask_ai",
              "audio_tracks",
              "buttons",
              "byline",
              "chapters",
              "chromecast",
              "closed_captions",
              "color",
              "colors",
              "outro",
              "pip",
              "play_button",
              "playbar",
              "portrait",
              "quality_selector",
              "skipping_forward",
              "speed",
              "title",
              "transcript",
              "volume"
            ],
            "type": "object"
          },
          "uri": {
            "description": "The canonical relative URI of the preset object.",
            "example": "/users/152184/presets/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the preset.",
            "nullable": true
          }
        },
        "required": [
          "metadata",
          "name",
          "settings",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "project": {
        "title": "Project",
        "properties": {
          "access_grant": {
            "description": "The access grant response that applies to the team member. _This field is deprecated because grants are no longer exposed via API responses._",
            "type": "object"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the folder was created.",
            "example": "2017-05-23T14:36:22+00:00",
            "type": "string"
          },
          "creator_uri": {
            "description": "The URI for the user who created the folder.",
            "example": "/users/112233",
            "type": "string",
            "x-mill-non-default": true
          },
          "has_subfolder": {
            "description": "Whether this folder has at least one subfolder.",
            "example": true,
            "type": "boolean"
          },
          "is_pinned": {
            "description": "Whether the folder is pinned.",
            "example": true,
            "type": "boolean"
          },
          "is_private_to_user": {
            "description": "Whether the folder is a private-to-me folder for the user.",
            "example": true,
            "type": "boolean"
          },
          "last_user_action_event_date": {
            "description": "The time in ISO 8601 format when a user last performed an action on the folder.",
            "example": "2018-03-21T23:08:22+00:00",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "description": "The link to the folder on Vimeo.",
            "example": "https://vimeo.com/user/112233/folders/12345",
            "type": "string"
          },
          "manage_link": {
            "description": "The link to the folder management page.",
            "example": "https://vimeo.com/user/112233/folder/12345",
            "type": "string"
          },
          "metadata": {
            "description": "Information about the folders's metadata.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the folder.",
                "properties": {
                  "ancestor_path": {
                    "description": "Information about the folder's ancestry ordered from the direct parent to higher-level ancestors.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "can_upload": {
                          "description": "Whether the user can upload to this ancestor folder.",
                          "type": "boolean"
                        },
                        "name": {
                          "description": "The name of the folder.",
                          "type": "string"
                        },
                        "uri": {
                          "description": "The URI of the ancestor folder.",
                          "example": "/users/112233/projects/12345",
                          "type": "string"
                        }
                      },
                      "required": [
                        "can_upload",
                        "name",
                        "uri"
                      ]
                    },
                    "type": "array"
                  },
                  "data_retention": {
                    "properties": {
                      "policy": {
                        "description": "Information about the folder's data retention policy. This data requires a bearer token with the `private` scope.",
                        "properties": {
                          "options": {
                            "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "x-mill-non-default": true
                          },
                          "title": {
                            "description": "The title of the data retention policy. This data requires a bearer token with the `private` scope.",
                            "example": "Policy title",
                            "type": "string",
                            "x-mill-non-default": true
                          },
                          "uri": {
                            "description": "The URI of the data retention policy. This data requires a bearer token with the `private` scope.",
                            "example": "/teams/112233/data_retention/policies/12345",
                            "type": "string",
                            "x-mill-non-default": true
                          }
                        },
                        "required": [
                          "options",
                          "title",
                          "uri"
                        ],
                        "type": "object",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "policy"
                    ],
                    "type": "object"
                  },
                  "folders": {
                    "description": "A standard connection object indicating how to return all the subfolders in the folder.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of subfolders on this connection.",
                        "example": 12,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/12345/items",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "group_folder_grants": {
                    "description": "Information about the folder's group access grants.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of group access grants on this connection.",
                        "example": 5,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/folders/98765/group_folder_grants",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "items": {
                    "description": "A standard connection object indicating how to return all the items in the folder.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of items on this connection.",
                        "example": 12,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/12345/items",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "parent_folder": {
                    "description": "A standard connection object indicating how to return the folder's parent folder.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/12345/items",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "personal_team_folder_owner": {
                    "description": "Information about the owner of the personal team folder.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI of the owner of the personal team folder.",
                        "example": "/users/112233",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "resource_creator_team_user": {
                    "description": "Information about the team user who created the folder. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "uri": {
                        "description": "The URI for the team user who created the folder. This data requires a bearer token with the `private` scope.",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "team_permissions": {
                    "description": "Information about the folder's team permissions list. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "options"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "user_folder_access_grants": {
                    "description": "Information about the folder's user folder access grants.",
                    "properties": {
                      "folder_permission_policies": {
                        "description": "Information about the owner's folder permission policies.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The permission policy's name.",
                              "example": "Folder Viewer",
                              "type": "string"
                            },
                            "uri": {
                              "description": "The permission policy's API URI.",
                              "example": "/users/152184/permission_policies/12345",
                              "type": "string"
                            }
                          },
                          "required": [
                            "name",
                            "uri"
                          ]
                        },
                        "type": "array"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of user folder access grants on this connection.",
                        "example": 5,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/folders/98765/user_folder_access_grants",
                        "type": "string"
                      }
                    },
                    "required": [
                      "folder_permission_policies",
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "A standard connection object indicating how to return all the videos in the folder.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 12,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/12345/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "ancestor_path",
                  "data_retention",
                  "folders",
                  "group_folder_grants",
                  "items",
                  "parent_folder",
                  "personal_team_folder_owner",
                  "resource_creator_team_user",
                  "team_permissions",
                  "user_folder_access_grants",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "A list of permitted interactions related to the folder.",
                "properties": {
                  "add_subfolder": {
                    "description": "Information about adding a subfolder to the current folder.",
                    "properties": {
                      "can_add_subfolders": {
                        "description": "Whether the folder can contain a subfolder.",
                        "type": "boolean"
                      },
                      "content_type": {
                        "description": "The subfolder content type.",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "properties": {
                        "description": "Properties that can be added to the request body.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "subfolder_depth_limit_reached": {
                        "description": "Whether the user has reached the maximum subfolder depth.",
                        "type": "boolean"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "can_add_subfolders",
                      "subfolder_depth_limit_reached"
                    ],
                    "type": "object"
                  },
                  "can_comment": {
                    "description": "Whether the user can comment on the videos of the current folder.",
                    "type": "boolean",
                    "x-mill-non-default": true
                  },
                  "delete": {
                    "description": "The user's delete permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/46345352",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "delete_video": {
                    "description": "The user's delete permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit": {
                    "description": "The user's edit permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit_settings": {
                    "description": "The user's edit settings permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/46345352",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "invite": {
                    "description": "The user's invite permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "move_video": {
                    "description": "The user's move permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "upload_video": {
                    "description": "The user's upload permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "view": {
                    "description": "The user's view permissions information for this project.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "add_subfolder",
                  "delete",
                  "delete_video",
                  "edit",
                  "edit_settings",
                  "invite",
                  "move_video",
                  "upload_video",
                  "view"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the folder was last modified.",
            "example": "2017-05-23T14:36:22+00:00",
            "type": "string"
          },
          "name": {
            "description": "The name of the folder.",
            "example": "Rough cuts",
            "type": "string"
          },
          "pinned_on": {
            "description": "The time in ISO 8601 format when the folder was pinned.",
            "example": "2017-05-23T14:36:22+00:00",
            "nullable": true,
            "type": "string"
          },
          "privacy": {
            "description": "The privacy settings of the folder.",
            "properties": {
              "view": {
                "description": "The privacy setting for accessing the folder.\n\nOption descriptions:\n * `anybody` - Anyone with the link can access the contents of the folder. This privacy setting appears as `Public` on the Vimeo front end.\n * `nobody` - Only the owner and those team members that the owner has explicitly invited can access the contents of the folder. This privacy setting appears as `Private` on the Vimeo front end.\n * `team` - Only those team members with the link can access the contents of the folder.\n",
                "enum": [
                  "anybody",
                  "nobody",
                  "team"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "view"
            ],
            "type": "object"
          },
          "resource_key": {
            "description": "The resource key string of the folder.",
            "example": "dc724af18fbdd4e59189f5fe768a5f8311527050",
            "type": "string"
          },
          "settings": {
            "description": "The settings of the folder.",
            "properties": {
              "color": {
                "description": "The hexadecimal color code of the folder color.",
                "example": "#c0c0c0",
                "type": "string"
              },
              "folder_uri": {
                "description": "The URI of the folder.",
                "example": "/users/112233/projects/12345",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "color",
              "folder_uri"
            ],
            "type": "object"
          },
          "should_show_team_library_notification": {
            "description": "Whether to display a folder notification that directs the current user to the team library page.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "uri": {
            "description": "The URI of the folder.",
            "example": "/users/112233/projects/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the folder."
          }
        },
        "required": [
          "access_grant",
          "created_time",
          "creator_uri",
          "has_subfolder",
          "is_pinned",
          "is_private_to_user",
          "last_user_action_event_date",
          "link",
          "manage_link",
          "metadata",
          "modified_time",
          "name",
          "pinned_on",
          "privacy",
          "resource_key",
          "settings",
          "should_show_team_library_notification",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "project-item": {
        "title": "Project Item",
        "properties": {
          "folder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/project"
              }
            ],
            "description": "The project item folder."
          },
          "live_event": {
            "allOf": [
              {
                "$ref": "#/components/schemas/recurring-event"
              }
            ],
            "description": "The project item event."
          },
          "metadata": {
            "description": "The item's metadata.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the item.",
                "properties": {
                  "shared_team": {
                    "description": "Information about the team of the shared item.",
                    "nullable": true,
                    "properties": {
                      "link": {
                        "description": "The absolute URL of the authenticated users's profile page.",
                        "type": "string"
                      },
                      "logo_url": {
                        "description": "The team logo URL.",
                        "nullable": true,
                        "type": "string"
                      },
                      "name": {
                        "description": "The display name of the team of the shared item.",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The unique identifier to access the team owner user resource.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "shared_user": {
                    "description": "Information about the user who shared the item.",
                    "nullable": true,
                    "properties": {
                      "link": {
                        "description": "The absolute URL of the users's profile page.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The display name of the user who shared the item.",
                        "type": "string"
                      },
                      "pictures": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/picture"
                          }
                        ],
                        "description": "Information about the user's portraits."
                      },
                      "uri": {
                        "description": "The unique identifier to access the user resource.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "shared_date": {
            "description": "The time in ISO 8601 format when the item was shared.",
            "example": "2018-03-05T21:04:47+00:00",
            "type": "string"
          },
          "showcase": {
            "allOf": [
              {
                "$ref": "#/components/schemas/album"
              }
            ],
            "description": "The project item showcase."
          },
          "type": {
            "description": "The project item type.\n\nOption descriptions:\n * `folder` - The project item is a folder.\n * `live_event` - The project item is an event.\n * `showcase` - The project item is a showcase.\n * `video` - The project item is a video.\n",
            "enum": [
              "folder",
              "live_event",
              "showcase",
              "video"
            ],
            "example": "folder",
            "type": "string"
          },
          "video": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The project item video."
          }
        },
        "required": [
          "metadata",
          "type"
        ],
        "type": "object"
      },
      "purchase-interaction": {
        "title": "Purchase Interaction",
        "properties": {
          "buy": {
            "description": "Information on purchasing the On Demand video.",
            "nullable": true,
            "type": "object"
          },
          "rent": {
            "description": "Information on renting the On Demand video.",
            "nullable": true,
            "type": "object"
          },
          "subscribe": {
            "description": "Information on subscribing to the On Demand video.",
            "nullable": true,
            "properties": {
              "drm": {
                "description": "Whether the On Demand subscription has DRM.",
                "example": true,
                "type": "boolean"
              },
              "expires_time": {
                "description": "The time in ISO 8601 format when the On Demand video expires.",
                "example": "2018-03-05T21:04:47+00:00",
                "nullable": true,
                "type": "string"
              },
              "link": {
                "description": "The URL to purchase the On Demand subscription on Vimeo.",
                "example": "https://vimeo.com/ondemand/darbyforever",
                "nullable": true,
                "type": "string"
              },
              "purchase_time": {
                "description": "The time in ISO 8601 format when the On Demand video was purchased.",
                "example": "2018-03-05T21:04:47+00:00",
                "nullable": true,
                "type": "string"
              },
              "stream": {
                "description": "The user's streaming access to the On Demand subscription.\n\nOption descriptions:\n * `available` - The On Demand subscription is available for streaming.\n * `purchased` - The On Demand subscription has been purchased.\n * `restricted` - Streaming for the On Demand subscription is restricted.\n * `unavailable` - The On Demand subscription is unavailable.\n",
                "enum": [
                  "available",
                  "purchased",
                  "restricted",
                  "unavailable"
                ],
                "example": "available",
                "type": "string"
              },
              "uri": {
                "description": "The On Demand subscription's product URI.",
                "example": "/ondemand/pages/61326/products/12345",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "recurring-event": {
        "title": "Recurring Event",
        "properties": {
          "album": {
            "description": "Information about the associated showcase.",
            "nullable": true,
            "properties": {
              "embed_code": {
                "description": "The responsive embed code for the associated showcase.",
                "type": "string"
              },
              "id": {
                "description": "The ID of the associated showcase.",
                "type": "number"
              },
              "privacy": {
                "description": "The privacy setting of the associated showcase.",
                "type": "string"
              },
              "title": {
                "description": "The title of the associated showcase.",
                "type": "string"
              }
            },
            "required": [
              "embed_code",
              "id",
              "privacy",
              "title"
            ],
            "type": "object"
          },
          "allow_share_link": {
            "description": "Whether the share link for the videos generated by streaming to the event is usable.",
            "example": true,
            "type": "boolean"
          },
          "allowed_privacies": {
            "description": "An array of privacy settings supported for this event and the requesting user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "auto_cc_enabled": {
            "description": "Whether the automated closed captions feature is enabled.",
            "nullable": true,
            "type": "boolean"
          },
          "auto_cc_keywords": {
            "description": "A comma-separated list of keywords for enhancing the speech detection of automated closed captions.",
            "nullable": true,
            "type": "string"
          },
          "auto_cc_language": {
            "description": "The language of the automated closed captions.\n\nOption descriptions:\n * `de-DE` - The language is German.\n * `en-US` - The language is English.\n * `es-ES` - The language is Spanish.\n * `fr-FR` - The language is French.\n * `pt-BR` - The language is Portuguese.\n",
            "enum": [
              "de-DE",
              "en-US",
              "es-ES",
              "fr-FR",
              "pt-BR"
            ],
            "example": "en-US",
            "nullable": true,
            "type": "string"
          },
          "auto_cc_remaining": {
            "description": "The amount of time remaining to the user to access the automated closed captions feature.",
            "nullable": true,
            "type": "number"
          },
          "automatically_title_stream": {
            "description": "When the value of this field is `true`, the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.",
            "example": true,
            "type": "boolean"
          },
          "chat_enabled": {
            "description": "Whether to display live chat on the event page on Vimeo.",
            "example": true,
            "type": "boolean"
          },
          "completed_on": {
            "description": "The time in ISO 8601 format when the event was completed.",
            "example": "2021-11-11T11:24:56+00:00",
            "type": "string"
          },
          "content_rating": {
            "description": "The event's granular content ratings.\n\nOption descriptions:\n * `advertisement` - The event contains advertisements.\n * `drugs` - The event contains drug or alcohol use.\n * `language` - The event contains profanity or sexually suggestive content.\n * `nudity` - The event contains nudity.\n * `safe` - The event is safe for all audiences.\n * `unrated` - The event hasn't been rated.\n * `violence` - The event contains violence.\n",
            "enum": [
              "advertisement",
              "drugs",
              "language",
              "nudity",
              "safe",
              "unrated",
              "violence"
            ],
            "items": {
              "type": "string",
              "example": "advertisement"
            },
            "type": "array",
            "x-mill-non-default": true
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the event was created.",
            "example": "2016-11-03T09:24:56+00:00",
            "type": "string"
          },
          "disable_auto_archiving": {
            "description": "Whether the feature for disabling auto-archiving is enabled.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "dvr": {
            "description": "Whether the DVR feature is enabled.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "email_quota": {
            "description": "Information about the event owner's email quota.",
            "properties": {
              "capping": {
                "description": "The maximum number of entity emails that the user can send.",
                "example": 400,
                "type": "number"
              },
              "total": {
                "description": "The current number of entity emails that the user has sent.",
                "example": 300,
                "type": "number"
              }
            },
            "required": [
              "capping",
              "total"
            ],
            "type": "object",
            "x-mill-non-default": true
          },
          "embed": {
            "description": "The event's embed data.",
            "properties": {
              "airplay": {
                "description": "Whether AirPlay is enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "autoplay": {
                "description": "Whether the embedded RLE player should autoplay the RLE content.",
                "example": true,
                "type": "boolean"
              },
              "available_player_logos": {
                "description": "The list of user-uploaded logos for configuration of the embed player.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "byline": {
                "description": "Whether the embedded RLE player should display the author's name.",
                "example": true,
                "type": "boolean"
              },
              "chat_embed_source": {
                "description": "The chat's iFrame source URL.",
                "nullable": true,
                "type": "string"
              },
              "chromecast": {
                "description": "Whether the Chromecast button appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "closed_captions": {
                "description": "Whether closed captions are enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "color": {
                "description": "The second player color, which controls the player accent color. _This field is identical to **colors.color_two**._",
                "example": "#0a0808",
                "type": "string"
              },
              "colors": {
                "description": "A collection of information about player colors.",
                "properties": {
                  "color_four": {
                    "description": "The fourth player color, which controls the player background color.",
                    "example": "#aabbcc",
                    "type": "string"
                  },
                  "color_one": {
                    "description": "The first player color, which controls the color of the progress bar, buttons, and more.",
                    "example": "#112233",
                    "type": "string"
                  },
                  "color_three": {
                    "description": "The third player color, which controls the color of text and icons.",
                    "example": "#778899",
                    "type": "string"
                  },
                  "color_two": {
                    "description": "The second player color, which controls the player accent color. _This field is identical to **color**._",
                    "example": "#445566",
                    "type": "string"
                  }
                },
                "required": [
                  "color_four",
                  "color_one",
                  "color_three",
                  "color_two"
                ],
                "type": "object"
              },
              "embed_chat": {
                "description": "The embed code for RLE chat.",
                "nullable": true,
                "type": "string"
              },
              "embed_properties": {
                "description": "The height, width, and source URL properties used to generate the fixed HTML embed code.",
                "nullable": true,
                "properties": {
                  "height": {
                    "description": "The height used to generate the fixed HTML embed code.",
                    "type": "string"
                  },
                  "source_url": {
                    "description": "The source URL used to generate the fixed HTML embed code.",
                    "type": "string"
                  },
                  "width": {
                    "description": "The width used to generate the fixed HTML embed code.",
                    "type": "string"
                  }
                },
                "required": [
                  "height",
                  "source_url",
                  "width"
                ],
                "type": "object"
              },
              "event_schedule": {
                "description": "Whether the embedded RLE player should display the event schedule.",
                "example": true,
                "type": "boolean"
              },
              "fullscreen_button": {
                "description": "Whether the embedded RLE player should include the fullscreen controls.",
                "example": true,
                "type": "boolean"
              },
              "hide_live_label": {
                "description": "Whether the Live label should be visible over the player.",
                "example": false,
                "type": "boolean"
              },
              "hide_viewer_count": {
                "description": "Whether the embedded RLE player should hide the viewer counter.",
                "example": true,
                "type": "boolean"
              },
              "html": {
                "description": "The fixed HTML code to embed the event's playlist on a website.",
                "nullable": true,
                "type": "string"
              },
              "like_button": {
                "description": "Whether the embedded RLE player should include the button for likes.",
                "example": true,
                "type": "boolean"
              },
              "logos": {
                "description": "A collection of information about the logo in the corner of the embeddable player.",
                "properties": {
                  "custom": {
                    "description": "A collection of information relating to custom logos in the embeddable player.",
                    "properties": {
                      "active": {
                        "description": "Whether the custom logo appears in the embeddable player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "link": {
                        "description": "The URL that loads upon clicking the custom logo.",
                        "example": "http://example.com",
                        "type": "string"
                      },
                      "sticky": {
                        "description": "Whether the custom logo appears even when the player interface is hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL source of the custom player logo.",
                        "example": "http://example.com",
                        "type": "string"
                      },
                      "use_link": {
                        "description": "Whether the custom logo should use the URL link.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "active",
                      "link",
                      "sticky",
                      "url",
                      "use_link"
                    ],
                    "type": "object"
                  },
                  "vimeo": {
                    "description": "Whether the Vimeo logo appears in the embeddable player for the video.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "required": [
                  "custom",
                  "vimeo"
                ],
                "type": "object"
              },
              "loop": {
                "description": "Whether the embedded RLE player should loop back to the first video once content is exhausted.",
                "example": true,
                "type": "boolean"
              },
              "pip": {
                "description": "Whether picture-in-picture is enabled and the button appears in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "play_button_position": {
                "description": "The position of the player's play button.\n\nOption descriptions:\n * `0` - The play button has the default position.\n * `1` - The play button appears at the bottom of the interface.\n * `2` - The play button appears in the center of the interface.\n",
                "enum": [
                  0,
                  1,
                  2
                ],
                "type": "string"
              },
              "playbar": {
                "description": "Whether the embedded RLE player should include the playbar.",
                "example": true,
                "type": "boolean"
              },
              "playlist": {
                "description": "Whether the playlist component appears in the embeddable player for this RLE.",
                "example": true,
                "type": "boolean"
              },
              "portrait": {
                "description": "Whether the embedded RLE player should display the author's portrait.",
                "example": true,
                "type": "boolean"
              },
              "responsive_html": {
                "description": "The responsive HTML code to embed the event's playlist on a website.",
                "nullable": true,
                "type": "string"
              },
              "schedule": {
                "description": "Whether the schedule component appears in the embeddable player for this RLE.",
                "example": true,
                "type": "boolean"
              },
              "show_latest_archived_clip": {
                "description": "Whether the embedded RLE player should display the latest video placeholder.",
                "example": true,
                "type": "boolean"
              },
              "show_timezone": {
                "description": "Whether the embedded RLE player should display the schedule timezone.",
                "example": false,
                "type": "boolean"
              },
              "title": {
                "description": "Whether the embedded RLE player should display the video title.",
                "example": true,
                "type": "boolean"
              },
              "transcript": {
                "description": "Whether transcripts are enabled in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "use_color": {
                "description": "Whether the embedded RLE player should use a custom color or the default Vimeo blue.",
                "example": "true",
                "type": "string"
              },
              "volume": {
                "description": "Whether the embedded RLE player should include the volume controls.",
                "example": true,
                "type": "boolean"
              }
            },
            "required": [
              "airplay",
              "autoplay",
              "available_player_logos",
              "byline",
              "chat_embed_source",
              "chromecast",
              "closed_captions",
              "color",
              "colors",
              "embed_chat",
              "embed_properties",
              "event_schedule",
              "fullscreen_button",
              "hide_live_label",
              "hide_viewer_count",
              "html",
              "like_button",
              "logos",
              "loop",
              "pip",
              "play_button_position",
              "playbar",
              "playlist",
              "portrait",
              "responsive_html",
              "schedule",
              "show_latest_archived_clip",
              "show_timezone",
              "title",
              "transcript",
              "use_color",
              "volume"
            ],
            "type": "object"
          },
          "event_type": {
            "description": "The event type.",
            "example": "default",
            "type": "string"
          },
          "from_showcase": {
            "description": "Whether the event was created from a showcase.",
            "type": "boolean"
          },
          "from_webinar": {
            "description": "Whether the event was created from a webinar.",
            "type": "boolean"
          },
          "head_clip": {
            "description": "The first video to be played in the playlist.",
            "nullable": true,
            "type": "object"
          },
          "interaction_tools_settings": {
            "description": "The settings for the interaction tools.",
            "items": {
              "type": "object",
              "properties": {
                "is_anonymous_questions_disabled": {
                  "description": "Whether anonymous questions are disabled for the interaction tools settings.",
                  "type": "boolean",
                  "x-mill-non-default": true
                },
                "is_qna_moderated": {
                  "description": "Whether the Q&A is moderated for the interaction tools settings.",
                  "type": "boolean",
                  "x-mill-non-default": true
                }
              },
              "required": [
                "is_anonymous_questions_disabled",
                "is_qna_moderated"
              ]
            },
            "nullable": true,
            "type": "array",
            "x-mill-non-default": true
          },
          "latency": {
            "description": "The type of latency.\n\nOption descriptions:\n * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.\n * `low` - The latency is low, with a delay of 5-7 seconds.\n * `standard` - The latency is standard, with a delay of 15-20 seconds.\n",
            "enum": [
              "fail-safe",
              "low",
              "standard"
            ],
            "example": "standard",
            "type": "string"
          },
          "lead_uuid": {
            "description": "The unique ID for the registered viewer.",
            "type": "string"
          },
          "link": {
            "description": "The URI to access the event on Vimeo.",
            "example": "/events/12345",
            "type": "string"
          },
          "live_clips": {
            "description": "A list of videos belonging to the event, including their video IDs and dates streamed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "live_destinations": {
            "description": "_This field is deprecated in favor of the following method: [Get all the destinations of a one-time event](https://developer.vimeo.com/api/reference/live#get_one_time_event_destinations)._",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "low_latency": {
            "description": "Whether the low-latency feature is enabled.",
            "example": false,
            "type": "boolean"
          },
          "metadata": {
            "description": "Metadata about the event.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "live_video": {
                    "description": "Information about the event's live video, where applicable.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "The status of the live video's RTMP link.\n\nOption descriptions:\n * `streaming` - The stream is open and receiving content.\n",
                        "enum": [
                          "streaming"
                        ],
                        "example": "streaming",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/videos/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "status",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "pictures": {
                    "description": "Information about the event's thumbnails.",
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/pictures",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "pre_live_video": {
                    "description": "Information about the event's pre-live video, where applicable. A pre-live video is either activated or in the process of being activated.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "status": {
                        "description": "The status of the pre-live video's RTMP link.\n\nOption descriptions:\n * `pending` - Vimeo is working on setting up the connection.\n * `ready` - Resources have been provisioned for the event.\n * `streaming` - Live video is currently streaming to the RTMP link.\n * `unavailable` - The connection is ready, but streaming to the RTMP link has not yet begun.\n",
                        "enum": [
                          "pending",
                          "ready",
                          "streaming",
                          "unavailable"
                        ],
                        "example": "pending",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/videos/12345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "status",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "team_member": {
                    "description": "Information about the team member who owns the event.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/123456789/team_users/123456",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "Information about the videos that belong to the event.",
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 6,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/live_events/12345/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "live_video",
                  "pictures",
                  "pre_live_video",
                  "team_member",
                  "videos"
                ],
                "type": "object"
              },
              "interactions": {
                "description": "A list of resource URIs related to the event.",
                "properties": {
                  "activate": {
                    "description": "Information about where and how to activate the event.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "delete": {
                    "description": "Information about where and how to delete an item.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit": {
                    "description": "Information about where and how to edit an item.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "activate",
                  "delete",
                  "edit"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions"
            ],
            "type": "object"
          },
          "next_occurrence_time": {
            "description": "The date in ISO 8601 format on which the next occurrence of the event is expected to be live.",
            "example": "2018-07-30T14:00:00+00:00",
            "nullable": true,
            "type": "string"
          },
          "parent_folder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/project"
              }
            ],
            "description": "Information about the folder that contains the event.",
            "nullable": true,
            "x-mill-non-default": true
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active thumbnail image of the event."
          },
          "playlist_sort": {
            "description": "The order in which the videos inside the event appear in the playlist.\n\nOption descriptions:\n * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.\n * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.\n * `alphabetical` - The videos appear alphabetically by their title.\n * `arranged` - The videos appear as arranged by the owner of the event.\n * `comments` - The videos appear according to their number of comments.\n * `duration` - The videos appear in order of duration.\n * `likes` - The videos appear according to their number of likes.\n * `newest` - The videos appear in chronological order, with the newest first.\n * `oldest` - The videos appear in chronological order, with the oldest first.\n * `plays` - The videos appear according to their number of plays.\n",
            "enum": [
              "added_first",
              "added_last",
              "alphabetical",
              "arranged",
              "comments",
              "duration",
              "likes",
              "newest",
              "oldest",
              "plays"
            ],
            "example": "added_first",
            "type": "string"
          },
          "preferred_stream_method": {
            "description": "The preferred streaming method.\n\nOption descriptions:\n * `browser` - Stream in the browser.\n * `encoder` - Stream by the encoder.\n",
            "enum": [
              "browser",
              "encoder"
            ],
            "example": "encoder",
            "type": "string"
          },
          "rtmp_link": {
            "description": "The upstream RTMP link. Send your live content to this link to create a live video on the event.",
            "example": "rtmp://rtmp.cloud.vimeo.com/live",
            "nullable": true,
            "type": "string"
          },
          "rtmp_preview": {
            "description": "Whether to preview the RTMP stream before the event goes live.",
            "example": true,
            "type": "boolean"
          },
          "rtmps_link": {
            "description": "The upstream RTMPS link. Send your live content to this link to create a live video on the event.",
            "example": "rtmps://rtmp.cloud.vimeo.com/live",
            "nullable": true,
            "type": "string"
          },
          "schedule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/event-schedule"
              }
            ],
            "description": "The description of the time or times that the event is expected to be live."
          },
          "scheduled_playback": {
            "description": "Whether the scheduled playback feature is enabled.",
            "example": false,
            "type": "boolean"
          },
          "settings_link": {
            "description": "The URI to access the event settings on Vimeo.",
            "example": "\"/live/rtmp/event/12345#event_settings\"",
            "type": "string"
          },
          "srt_link": {
            "description": "The upstream SRT link. To create a live video on the event, send your live content to this link.",
            "example": "srt://srt.vimeo.work:9999",
            "type": "string",
            "x-mill-non-default": true
          },
          "status": {
            "description": "The status of the event.\n\nOption descriptions:\n * `ended` - The user ended the event.\n * `started` - The user started the event.\n",
            "enum": [
              "ended",
              "started"
            ],
            "example": "started",
            "nullable": true,
            "type": "string"
          },
          "stream_description": {
            "description": "The description of the next video streamed to the event.",
            "example": "In this episode, we interview a surprise guest",
            "nullable": true,
            "type": "string"
          },
          "stream_key": {
            "description": "The stream key used in conjunction with the RTMP and RTMPS links.",
            "example": "ab9c8def-7a65-4321-b098-c7dd65e43f21",
            "nullable": true,
            "type": "string"
          },
          "stream_mode": {
            "description": "The stream mode of the event.\n\nOption descriptions:\n * `live` - The stream is live playback.\n * `record` - The stream is in record mode.\n * `simulive` - The stream is scheduled media playback.\n",
            "enum": [
              "live",
              "record",
              "simulive"
            ],
            "example": "live",
            "type": "string",
            "x-mill-non-default": true
          },
          "stream_password": {
            "description": "The password that anyone can use to access the videos generated by streaming to the event.",
            "example": "hunter1",
            "nullable": true,
            "type": "string"
          },
          "stream_privacy": {
            "description": "The initial privacy settings of videos generated by streaming to the event as well as the embed privacy of the entire collection.",
            "properties": {
              "embed": {
                "description": "The event's embed permission setting.\n\nOption descriptions:\n * `private` - The event can't be embedded on any domain.\n * `public` - The event can be embedded on any domain.\n * `whitelist` - The event can be embedded on permitted domains only.\n",
                "enum": [
                  "private",
                  "public",
                  "whitelist"
                ],
                "example": "public",
                "type": "string"
              },
              "unlisted_hash": {
                "description": "The hash for unlisted events.",
                "example": "1a2b3c4d5e",
                "nullable": true,
                "type": "string"
              },
              "view": {
                "description": "The general privacy setting for generated videos and the embed privacy of the entire collection.\n\nOption descriptions:\n * `anybody` - Anyone can access the videos. This privacy setting appears as `Public` on the Vimeo front end.\n * `embed_only` - The videos don't appear on Vimeo, but they can be embedded elsewhere.\n * `nobody` - Only the event owner can access the videos. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can access the videos.\n * `unlisted` - Only those with the private link can access the videos.\n",
                "enum": [
                  "anybody",
                  "embed_only",
                  "nobody",
                  "password",
                  "unlisted"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "embed",
              "unlisted_hash",
              "view"
            ],
            "type": "object"
          },
          "stream_title": {
            "description": "The title of the next video streamed to the event. This field applies only when **automatically_title_stream** is `false`.",
            "example": "Special Feature",
            "type": "string"
          },
          "streamable_clip": {
            "description": "The event's video. An event always has a video, which is either in a pre-live state (ready to be streamed to) or in a live state (which is currently being streamed to).",
            "nullable": true,
            "type": "object"
          },
          "streaming_auto_stop": {
            "description": "Whether the feature for automatically stopping the live stream is enabled.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "time_zone": {
            "description": "The time zone used in resolving the timestamps included in auto-generated video titles.",
            "example": "America/New_York",
            "type": "string"
          },
          "title": {
            "description": "The title of the event. This field is also optionally used as the base title for videos created by streaming to the event.",
            "example": "Live Content",
            "type": "string"
          },
          "unlimited_auto_cc": {
            "description": "Whether to ignore the time limit of the automated closed captions feature.",
            "nullable": true,
            "type": "boolean"
          },
          "unlimited_duration": {
            "description": "Whether the feature for 24/7 streaming is enabled.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "uri": {
            "description": "The event's canonical relative URI.",
            "example": "/live_events/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the event."
          },
          "venue_uuid": {
            "description": "The ID of the associated Venues API service database object. If this field has no value, there is no associated Venues object.",
            "nullable": true,
            "type": "string",
            "x-mill-non-default": true
          },
          "view_link": {
            "description": "The URI to access the event on Vimeo with or without an unlisted hash.",
            "example": "/events/12345",
            "type": "string"
          },
          "webinar": {
            "description": "Information about the associated webinar.",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "whitelisted_domains": {
            "description": "The permitted domains for a video.",
            "items": {
              "type": "object",
              "properties": {
                "allow_hd": {
                  "description": "Whether to permit HD embeds on this domain.",
                  "example": true,
                  "type": "boolean",
                  "x-mill-non-default": true
                },
                "domain": {
                  "description": "The domain name.",
                  "example": "example.com",
                  "type": "string",
                  "x-mill-non-default": true
                },
                "uri": {
                  "description": "The URI of the domain.",
                  "example": "/videos/258684937/privacy/domains/example.com",
                  "type": "string",
                  "x-mill-non-default": true
                }
              },
              "required": [
                "allow_hd",
                "domain",
                "uri"
              ]
            },
            "nullable": true,
            "type": "array",
            "x-mill-non-default": true
          }
        },
        "required": [
          "album",
          "allow_share_link",
          "allowed_privacies",
          "auto_cc_enabled",
          "auto_cc_keywords",
          "auto_cc_language",
          "auto_cc_remaining",
          "automatically_title_stream",
          "chat_enabled",
          "completed_on",
          "content_rating",
          "created_time",
          "disable_auto_archiving",
          "dvr",
          "email_quota",
          "embed",
          "event_type",
          "from_showcase",
          "head_clip",
          "interaction_tools_settings",
          "latency",
          "lead_uuid",
          "link",
          "live_clips",
          "live_destinations",
          "low_latency",
          "metadata",
          "next_occurrence_time",
          "parent_folder",
          "pictures",
          "playlist_sort",
          "preferred_stream_method",
          "rtmp_link",
          "rtmp_preview",
          "rtmps_link",
          "schedule",
          "scheduled_playback",
          "settings_link",
          "status",
          "stream_description",
          "stream_key",
          "stream_mode",
          "stream_password",
          "stream_privacy",
          "stream_title",
          "streamable_clip",
          "streaming_auto_stop",
          "time_zone",
          "title",
          "unlimited_auto_cc",
          "unlimited_duration",
          "uri",
          "user",
          "venue_uuid",
          "view_link",
          "webinar",
          "whitelisted_domains"
        ],
        "type": "object"
      },
      "recurring-event-low-latency": {
        "title": "Recurring Event Low Latency",
        "properties": {
          "lowLatency": {
            "description": "Whether the low-latency option is enabled.",
            "example": false,
            "type": "boolean"
          }
        },
        "required": [
          "lowLatency"
        ],
        "type": "object"
      },
      "reply": {
        "title": "Reply",
        "properties": {
          "created_on": {
            "description": "The time in ISO 8601 format when the reply was posted.",
            "example": "2018-03-05T21:04:47+00:00",
            "type": "string"
          },
          "deleted_on": {
            "description": "The time in ISO 8601 format when the reply was deleted.",
            "example": "2017-05-16T15:05:43+00:00",
            "nullable": true,
            "type": "string"
          },
          "last_edited_on": {
            "description": "The time in ISO 8601 format when the reply was last edited.",
            "example": "2017-05-17T15:10:05+00:00",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "description": "The permalink to the reply.",
            "example": "https://vimeo.com/258684937#comment_12345",
            "type": "string"
          },
          "metadata": {
            "properties": {
              "connections": {
                "properties": {
                  "guest_user": {
                    "description": "Information about the guest user who posted the comment.",
                    "properties": {
                      "name": {
                        "description": "The display name of the guest user who posted the comment.",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The unique identifier to access the guest user resource.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "user": {
                    "description": "Information about the user who posted the reply.",
                    "properties": {
                      "badge": {
                        "description": "The user's badge type, if applicable.",
                        "nullable": true,
                        "type": "string"
                      },
                      "is_staff_picked": {
                        "description": "Whether the user has had a staff-picked video.",
                        "type": "boolean"
                      },
                      "link": {
                        "description": "The absolute URL of the authenticated users's profile page.",
                        "type": "string"
                      },
                      "name": {
                        "description": "The display name of the user who posted the reply.",
                        "type": "string"
                      },
                      "pictures": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/picture"
                          }
                        ],
                        "description": "Information about the user's portraits."
                      },
                      "uri": {
                        "description": "The unique identifier to access the user resource.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "badge",
                      "is_staff_picked",
                      "link",
                      "name",
                      "pictures",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "guest_user",
                  "user"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "resource_key": {
            "description": "The comment's resource key string.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "richtext": {
            "description": "The stringified Rich Text JSON.",
            "nullable": true,
            "type": "string"
          },
          "text": {
            "description": "The content of the reply.",
            "example": "I love this!",
            "type": "string"
          },
          "text_decorations": {
            "description": "An array of text decorations for the note.",
            "example": "[]",
            "items": {
              "type": "object",
              "properties": {
                "assets": {
                  "description": "The assets that are needed to decorate the text.",
                  "properties": {
                    "user": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/user"
                        }
                      ],
                      "description": "The user object associated with the note's text decoration."
                    },
                    "video": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/video"
                        }
                      ],
                      "description": "The video object associated with the note's text decoration."
                    }
                  },
                  "type": "object"
                },
                "text": {
                  "description": "The note text to decorate.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of text decoration.\n\nOption descriptions:\n * `url` - The URL of the Vimeo video.\n",
                  "enum": [
                    "url"
                  ],
                  "example": "url",
                  "type": "string"
                }
              },
              "required": [
                "text",
                "type"
              ]
            },
            "type": "array"
          },
          "type": {
            "description": "The Vimeo content to which the reply relates.\n\nOption descriptions:\n * `video` - The comment is about a video.\n",
            "enum": [
              "video"
            ],
            "example": "video",
            "type": "string"
          },
          "uri": {
            "description": "The unique identifier to access the reply resource.",
            "example": "/videos/258684937/comments/12345/replies/7890",
            "type": "string"
          }
        },
        "required": [
          "created_on",
          "deleted_on",
          "last_edited_on",
          "link",
          "metadata",
          "resource_key",
          "richtext",
          "text",
          "text_decorations",
          "type",
          "uri"
        ],
        "type": "object"
      },
      "segment": {
        "title": "Segment",
        "properties": {
          "autogenerated": {
            "description": "Whether the segment is autogenerated.",
            "example": true,
            "type": "boolean"
          },
          "cue_end": {
            "description": "The cue end timestamp in milliseconds from the start of the video.",
            "example": 103200,
            "type": "number"
          },
          "cue_start": {
            "description": "The cue start timestamp in milliseconds from the start of the video.",
            "example": 101800,
            "type": "number"
          },
          "enabled": {
            "description": "Whether the segment is enabled.",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "The segment identifier.",
            "example": "9854acd6-9c48-4244-9851-162dd52e9d74#25409003#101800",
            "type": "string"
          },
          "kind": {
            "description": "The type of caption that the segment originates from.\n\nOption descriptions:\n * `captions` - The segment originates from a captions file.\n * `subtitles` - The segment originates from a captions and subtitles file.\n",
            "enum": [
              "captions",
              "subtitles"
            ],
            "example": "captions",
            "type": "string"
          },
          "language": {
            "description": "The language of the segment.",
            "example": "en-x-autogenerated",
            "type": "string"
          },
          "lines": {
            "description": "The line data for the segment.",
            "items": {
              "$ref": "#/components/schemas/segment-line"
            },
            "type": "array"
          },
          "speaker": {
            "description": "The speaker identifier.",
            "example": "1",
            "nullable": true,
            "type": "string"
          },
          "text_track_uri": {
            "description": "The relative URI of the text track that the segment comes from.",
            "example": "/videos/668723010/texttracks/12345",
            "type": "string"
          },
          "video_uri": {
            "description": "The canonical relative URI of the segment's video.",
            "example": "/videos/668723010",
            "type": "string"
          },
          "words": {
            "description": "The word data for the segment.",
            "items": {
              "$ref": "#/components/schemas/segment-words"
            },
            "type": "array"
          }
        },
        "required": [
          "autogenerated",
          "cue_end",
          "cue_start",
          "enabled",
          "id",
          "kind",
          "language",
          "lines",
          "speaker",
          "text_track_uri",
          "words"
        ],
        "type": "object"
      },
      "segment-line": {
        "title": "Segment Line",
        "properties": {
          "text": {
            "description": "The text from the segment line.",
            "example": "Hello World!",
            "type": "string"
          },
          "voice": {
            "description": "The speaker of the segment line.",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "text",
          "voice"
        ],
        "type": "object"
      },
      "segment-words": {
        "title": "Segment Words",
        "properties": {
          "end_time": {
            "description": "The end time of the word in milliseconds.",
            "nullable": true,
            "type": "number"
          },
          "start_time": {
            "description": "The start time of the word in milliseconds.",
            "nullable": true,
            "type": "number"
          },
          "word": {
            "description": "The word text.",
            "type": "string"
          }
        },
        "required": [
          "end_time",
          "start_time",
          "word"
        ],
        "type": "object"
      },
      "skill": {
        "title": "Skill",
        "properties": {
          "name": {
            "description": "The skill's display name.",
            "example": "Director",
            "type": "string"
          },
          "uri": {
            "description": "The skill's canonical relative URI.",
            "example": "/marketplace/skills/152184",
            "type": "string"
          }
        },
        "required": [
          "name",
          "uri"
        ],
        "type": "object"
      },
      "subscription": {
        "title": "Subscription",
        "properties": {
          "account_id": {
            "description": "The ID of the account.",
            "example": "abc12345",
            "type": "string"
          },
          "auto_renew": {
            "description": "Whether the subscription is set to renew automatically.",
            "example": true,
            "type": "boolean"
          },
          "can_renew_now": {
            "description": "Whether the user can extend their subscription's expiration date by an additional billing period for the same product tier.",
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "description": "The time in ISO 8601 format when the subscription was created.",
            "example": "2020-01-01T00:00:00Z",
            "type": "string"
          },
          "disabled_at": {
            "description": "The time in ISO 8601 format when the subscription was disabled.",
            "example": "2020-01-01T00:00:00Z",
            "type": "string"
          },
          "end_date": {
            "description": "The time in ISO 8601 format when the subscription ended.",
            "example": "2020-01-01T00:00:00Z",
            "type": "string"
          },
          "grace_period_id": {
            "description": "The ID of the grace period.",
            "example": "abc12345",
            "type": "string"
          },
          "id": {
            "description": "The ID of the subscription.",
            "example": "abc12345",
            "type": "string"
          },
          "is_latest": {
            "description": "Whether the subscription is the latest version.",
            "example": true,
            "type": "boolean"
          },
          "payment_method_id": {
            "description": "The ID of the payment method.",
            "example": "abc12345",
            "type": "string"
          },
          "plans": {
            "description": "An array of plans in the subscription.",
            "items": {
              "type": "object",
              "properties": {
                "amount": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/money"
                    }
                  ],
                  "description": "The amount of the plan.",
                  "example": "1.00"
                },
                "billing_plan_id": {
                  "description": "The ID of the billing plan.",
                  "example": "abc12345",
                  "type": "string"
                },
                "billing_plan_product_id": {
                  "description": "The ID of the billing plan product.",
                  "example": "abc12345",
                  "type": "string"
                },
                "billing_plan_type": {
                  "description": "The type of the billing plan.",
                  "example": "abc12345",
                  "type": "string"
                },
                "created_at": {
                  "description": "The time in 8601 format when the plan was created.",
                  "example": "2020-01-01T00:00:00Z",
                  "type": "string"
                },
                "id": {
                  "description": "The ID of the plan.",
                  "example": "abc12345",
                  "type": "string"
                },
                "items": {
                  "description": "An array of items in the plan.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "amount": {
                        "description": "The amount of the item.",
                        "example": 1,
                        "items": {
                          "amount": {
                            "description": "The amount in actual currency.",
                            "example": 12,
                            "required": false,
                            "type": "number"
                          },
                          "currency": {
                            "description": "The currency of the amount.",
                            "example": "USD",
                            "required": false,
                            "type": "string"
                          },
                          "formatted": {
                            "description": "The formatted amount.",
                            "example": "12.00",
                            "required": false,
                            "type": "string"
                          },
                          "unit": {
                            "description": "The money amount in the lowest denomination. For instance, for USD, the lowest denomination is cents, so $12 is represented as 1200.",
                            "example": 1200,
                            "required": true,
                            "type": "number"
                          }
                        },
                        "type": "number"
                      },
                      "created_at": {
                        "description": "The time in 8601 format when the item was created.",
                        "example": "2020-01-01T00:00:00Z",
                        "type": "string"
                      },
                      "end_date": {
                        "description": "The time in 8601 format when the item ended.",
                        "example": "2020-01-01T00:00:00Z",
                        "type": "string"
                      },
                      "id": {
                        "description": "The ID of the item.",
                        "example": "abc12345",
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The metadata of the item.",
                        "type": "object"
                      },
                      "price_id": {
                        "description": "The ID of the price.",
                        "example": "abc12345",
                        "type": "string"
                      },
                      "quantity": {
                        "description": "The quantity of the item.",
                        "example": 1,
                        "type": "number"
                      },
                      "start_date": {
                        "description": "The time in 8601 format when the item started.",
                        "example": "2020-01-01T00:00:00Z",
                        "type": "string"
                      },
                      "subscription_item_id": {
                        "description": "The ID of the subscription item.",
                        "example": "abc12345",
                        "type": "string"
                      },
                      "subscription_item_number": {
                        "description": "The number of the subscription item.",
                        "example": "12345",
                        "type": "string"
                      },
                      "subscription_plan_id": {
                        "description": "The ID of the subscription plan.",
                        "example": "abc12345",
                        "type": "string"
                      },
                      "synced_at": {
                        "description": "The time in 8601 format when the item was synced.",
                        "example": "2020-01-01T00:00:00Z",
                        "type": "string"
                      },
                      "updated_at": {
                        "description": "The time in 8601 format when the item was updated.",
                        "example": "2020-01-01T00:00:00Z",
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount",
                      "created_at",
                      "id",
                      "price_id",
                      "quantity",
                      "subscription_item_id",
                      "subscription_item_number",
                      "subscription_plan_id",
                      "synced_at",
                      "updated_at"
                    ]
                  },
                  "type": "array"
                },
                "metadata": {
                  "description": "The metadata of the plan.",
                  "type": "object"
                },
                "plan_id": {
                  "description": "The ID of the plan.",
                  "example": "abc12345",
                  "type": "string"
                },
                "product_id": {
                  "description": "The ID of the product.",
                  "example": "abc12345",
                  "type": "string"
                },
                "promo_code": {
                  "description": "The promotional code.",
                  "example": "abc12345",
                  "type": "string"
                },
                "promo_code_id": {
                  "description": "The ID of the promotional code.",
                  "example": "abc12345",
                  "type": "string"
                },
                "quantity": {
                  "description": "The quantity of the plan.",
                  "example": 1,
                  "type": "number"
                },
                "subscription_plan_id": {
                  "description": "The ID of the subscription plan.",
                  "example": "abc12345",
                  "type": "string"
                },
                "subscription_plan_number": {
                  "description": "The number of the subscription plan.",
                  "example": "12345",
                  "type": "string"
                },
                "subscription_plan_type": {
                  "description": "The type of the subscription plan.",
                  "example": "abc12345",
                  "type": "string"
                },
                "synced_at": {
                  "description": "The time in 8601 format when the plan was synced.",
                  "example": "2020-01-01T00:00:00Z",
                  "type": "string"
                },
                "updated_at": {
                  "description": "The time in 8601 format when the plan was updated.",
                  "example": "2020-01-01T00:00:00Z",
                  "type": "string"
                }
              },
              "required": [
                "created_at",
                "id",
                "items",
                "plan_id",
                "product_id",
                "subscription_plan_id",
                "subscription_plan_number",
                "subscription_plan_type",
                "synced_at",
                "updated_at"
              ]
            },
            "type": "array"
          },
          "start_date": {
            "description": "The time in ISO 8601 format when the subscription started.",
            "example": "2020-01-01T00:00:00Z",
            "type": "string"
          },
          "status": {
            "description": "The status of the subscription.\n\nOption descriptions:\n * `SUBSCRIPTION_STATUS_ACTIVE` - The subscription is active.\n * `SUBSCRIPTION_STATUS_CANCELLED` - The subscription is canceled.\n * `SUBSCRIPTION_STATUS_DRAFT` - The subscription is a draft.\n * `SUBSCRIPTION_STATUS_EXPIRED` - The subscription is expired.\n * `SUBSCRIPTION_STATUS_PAUSED` - The subscription is paused.\n * `SUBSCRIPTION_STATUS_PENDING_ACCEPTANCE` - The subscription is pending acceptance.\n * `SUBSCRIPTION_STATUS_PENDING_ACTIVATION` - The subscription is pending activation.\n * `SUBSCRIPTION_STATUS_UNSPECIFIED` - The subscription status is unspecified.\n",
            "enum": [
              "SUBSCRIPTION_STATUS_ACTIVE",
              "SUBSCRIPTION_STATUS_CANCELLED",
              "SUBSCRIPTION_STATUS_DRAFT",
              "SUBSCRIPTION_STATUS_EXPIRED",
              "SUBSCRIPTION_STATUS_PAUSED",
              "SUBSCRIPTION_STATUS_PENDING_ACCEPTANCE",
              "SUBSCRIPTION_STATUS_PENDING_ACTIVATION",
              "SUBSCRIPTION_STATUS_UNSPECIFIED"
            ],
            "example": "SUBSCRIPTION_STATUS_ACTIVE",
            "type": "string"
          },
          "subscription_number": {
            "description": "The number of the subscription.",
            "example": "12345",
            "type": "string"
          },
          "subscription_version": {
            "description": "The version of the subscription.",
            "example": 1,
            "type": "number"
          },
          "updated_at": {
            "description": "The time in ISO 8601 format when the subscription was updated.",
            "example": "2020-01-01T00:00:00Z",
            "type": "string"
          },
          "vendor": {
            "description": "The vendor of the subscription.",
            "example": "vimeo",
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "auto_renew",
          "can_renew_now",
          "created_at",
          "end_date",
          "id",
          "is_latest",
          "payment_method_id",
          "plans",
          "start_date",
          "status",
          "subscription_number",
          "subscription_version",
          "updated_at",
          "vendor"
        ],
        "type": "object"
      },
      "subscription-plans": {
        "title": "Subscription Plans",
        "properties": {
          "currency": {
            "description": "Information about the currency in which the price of the plan is expressed.",
            "properties": {
              "currency_code": {
                "description": "The ISO code of the associated currency.",
                "example": "USD",
                "type": "string"
              },
              "symbol": {
                "description": "The symbol of the associated currency.",
                "example": "$",
                "type": "string"
              }
            },
            "required": [
              "currency_code",
              "symbol"
            ],
            "type": "object"
          },
          "discount": {
            "description": "Information about the plan discount.",
            "properties": {
              "annual": {
                "description": "The annual discount.",
                "type": "number"
              }
            },
            "required": [
              "annual"
            ],
            "type": "object"
          },
          "id": {
            "description": "The SKUs of the plans.",
            "properties": {
              "annual": {
                "description": "The SKU of the annual plan.",
                "nullable": true,
                "type": "string"
              },
              "monthly": {
                "description": "The SKU of the monthly plan.",
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "annual",
              "monthly"
            ],
            "type": "object"
          },
          "metadata": {
            "description": "The URLs and entitlements of the associated products in the store.",
            "properties": {
              "entitlements": {
                "description": "The URLs and entitlements of the associated products in the store.",
                "properties": {
                  "id": {
                    "description": "The entitlement plan ID.",
                    "nullable": true,
                    "type": "number"
                  },
                  "params": {
                    "description": "The list of entitlement parameters corresponding to the tier.",
                    "properties": {
                      "ai": {
                        "description": "AI credits entitlements information.",
                        "properties": {
                          "credits_period": {
                            "description": "The quota period unit for the user's AI credits quota.\n\nOption descriptions:\n * `month` - The product has a monthly AI credits quota period.\n * `week` - The product has a weekly AI credits quota period.\n * `year` - The product has a yearly AI credits quota period.\n",
                            "enum": [
                              "month",
                              "week",
                              "year"
                            ],
                            "example": "month",
                            "type": "string"
                          },
                          "periodic_credits": {
                            "description": "The number of AI credits for the user's period.",
                            "nullable": true,
                            "type": "number"
                          }
                        },
                        "required": [
                          "credits_period",
                          "periodic_credits"
                        ],
                        "type": "object"
                      },
                      "bandwidth": {
                        "description": "Bandwidth entitlement information.",
                        "properties": {
                          "periodic_quota": {
                            "description": "The amount of bandwidth for the user's period.",
                            "nullable": true,
                            "type": "string"
                          },
                          "quota_period": {
                            "description": "The quota period unit for the user's bandwidth quota.\n\nOption descriptions:\n * `month` - The product has a monthly bandwidth quota period.\n * `week` - The product has a weekly bandwidth quota period.\n * `year` - The product has a yearly bandwidth quota period.\n",
                            "enum": [
                              "month",
                              "week",
                              "year"
                            ],
                            "example": "month",
                            "type": "string"
                          }
                        },
                        "required": [
                          "periodic_quota",
                          "quota_period"
                        ],
                        "type": "object"
                      },
                      "seats": {
                        "description": "Team seats entitlement information.",
                        "properties": {
                          "admin": {
                            "description": "The number of admin team seats included with the tier.",
                            "nullable": true,
                            "type": "number"
                          },
                          "authenticated": {
                            "description": "The number of authenticated team seats included with the tier.",
                            "nullable": true,
                            "type": "number"
                          },
                          "mode": {
                            "description": "The team seats mode for the user's team.\n\nOption descriptions:\n * `admin_and_authenticated` - The mode for Enterprise-Base Platform, Enterprise-Marketing, and Enterprise-Central users.\n * `global` - The default mode for legacy and self-serve users.\n * `per_seat_type` - The mode for sales-assisted users, including Enterprise, Custom, and Custom OTT.\n",
                            "enum": [
                              "admin_and_authenticated",
                              "global",
                              "per_seat_type"
                            ],
                            "example": "admin_and_authenticated",
                            "type": "string"
                          },
                          "team": {
                            "description": "The number of team seats included with the tier for the monthly plan.",
                            "nullable": true,
                            "type": "number"
                          }
                        },
                        "required": [
                          "admin",
                          "authenticated",
                          "mode",
                          "team"
                        ],
                        "type": "object"
                      },
                      "storage": {
                        "description": "Video storage entitlement information.",
                        "properties": {
                          "periodic_quota": {
                            "description": "The amount of video storage for the user's periodic quota for the annual plan.",
                            "nullable": true,
                            "type": "string"
                          },
                          "quota_cap": {
                            "description": "The video storage total lifetime cap for the annual plan.",
                            "nullable": true,
                            "type": "string"
                          },
                          "quota_period": {
                            "description": "The video storage quota period for the annual plan.\n\nOption descriptions:\n * `lifetime` - The product has a lifetime video storage quota period.\n * `month` - The product has a monthly video storage quota period.\n * `week` - The product has a weekly video storage quota period.\n * `year` - The product has a yearly video storage quota period.\n",
                            "enum": [
                              "lifetime",
                              "month",
                              "week",
                              "year"
                            ],
                            "example": "lifetime",
                            "type": "string"
                          },
                          "quota_unit": {
                            "description": "The unit of the video storage for the user's periodic quota for the annual plan.\n\nOption descriptions:\n * `video_count` - The product has video storage based on video count.\n * `video_size` - The product has video storage based on video size.\n",
                            "enum": [
                              "video_count",
                              "video_size"
                            ],
                            "example": "video_count",
                            "type": "string"
                          }
                        },
                        "required": [
                          "periodic_quota",
                          "quota_cap",
                          "quota_period",
                          "quota_unit"
                        ],
                        "type": "object"
                      },
                      "team_seats": {
                        "description": "The number of team seats included with the tier for the monthly plan.",
                        "nullable": true,
                        "type": "number"
                      },
                      "video_storage_periodic_quota": {
                        "description": "The amount of video storage for the user's periodic quota for the annual plan.",
                        "nullable": true,
                        "type": "string"
                      },
                      "video_storage_quota_cap": {
                        "description": "The video storage total lifetime cap for the annual plan.",
                        "nullable": true,
                        "type": "string"
                      },
                      "video_storage_quota_period": {
                        "description": "The video storage quota period for the annual plan.\n\nOption descriptions:\n * `lifetime` - The product has a lifetime video storage quota period.\n * `month` - The product has a monthly video storage quota period.\n * `week` - The product has a weekly video storage quota period.\n * `year` - The product has a yearly video storage quota period.\n",
                        "enum": [
                          "lifetime",
                          "month",
                          "week",
                          "year"
                        ],
                        "example": "lifetime",
                        "type": "string"
                      },
                      "video_storage_quota_unit": {
                        "description": "The unit of the video storage for the user's periodic quota for the annual plan.\n\nOption descriptions:\n * `video_count` - The product has video storage based on video count.\n * `video_size` - The product has video storage based on video size.\n",
                        "enum": [
                          "video_count",
                          "video_size"
                        ],
                        "example": "video_count",
                        "type": "string"
                      }
                    },
                    "required": [
                      "ai",
                      "bandwidth",
                      "seats",
                      "storage",
                      "team_seats",
                      "video_storage_periodic_quota",
                      "video_storage_quota_cap",
                      "video_storage_quota_period",
                      "video_storage_quota_unit"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "id",
                  "params"
                ],
                "type": "object"
              },
              "interactions": {
                "properties": {
                  "purchase": {
                    "properties": {
                      "status": {
                        "description": "The purchase status of the product.\n\nOption descriptions:\n * `available` - The product is available for purchase.\n * `purchased` - The product is already purchased.\n * `unavailable` - The product isn't available for purchase.\n",
                        "enum": [
                          "available",
                          "purchased",
                          "unavailable"
                        ],
                        "example": "available",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The redirect URIs associated with the plan.",
                        "properties": {
                          "annual": {
                            "description": "The redirect URI for the annual plan in the user's cart.",
                            "nullable": true,
                            "type": "string"
                          },
                          "free_trial": {
                            "description": "The redirect URI for the free trial in the user's cart.",
                            "nullable": true,
                            "type": "string"
                          },
                          "monthly": {
                            "description": "The redirect URI for the monthly plan in the user's cart.",
                            "nullable": true,
                            "type": "string"
                          }
                        },
                        "required": [
                          "annual",
                          "free_trial",
                          "monthly"
                        ],
                        "type": "object"
                      }
                    },
                    "required": [
                      "status",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "purchase"
                ],
                "type": "object"
              },
              "is_ps_plan": {
                "description": "Whether the product is a Vimeo payments service product.",
                "type": "boolean"
              },
              "purchased_product": {
                "description": "Information about the purchased product.",
                "properties": {
                  "display_price": {
                    "description": "The display price of the purchased product.",
                    "type": "number"
                  },
                  "is_monthly": {
                    "description": "Whether the purchased product is billed as a monthly subscription.",
                    "type": "boolean"
                  }
                },
                "required": [
                  "display_price",
                  "is_monthly"
                ],
                "type": "object"
              }
            },
            "required": [
              "entitlements",
              "interactions",
              "is_ps_plan",
              "purchased_product"
            ],
            "type": "object"
          },
          "name": {
            "description": "The name of the plan.",
            "example": "Pro",
            "type": "string"
          },
          "price": {
            "description": "Information about the prices associated with the plan.",
            "properties": {
              "annual": {
                "description": "The annual price, charged annually.",
                "type": "number"
              },
              "annual_monthly": {
                "description": "The monthly price, charged annually.",
                "type": "number"
              },
              "monthly": {
                "description": "The monthly price, charged monthly.",
                "type": "number"
              }
            },
            "required": [
              "annual",
              "annual_monthly"
            ],
            "type": "object"
          },
          "promotion": {
            "description": "Information about the plan's promotion.",
            "properties": {
              "code": {
                "description": "The promotion code.",
                "type": "string"
              },
              "discount": {
                "description": "The promotion discount percentage.",
                "type": "number"
              },
              "price": {
                "description": "The price map of the promotion.",
                "properties": {
                  "annual": {
                    "description": "The promotional annual price, charged annually.",
                    "type": "number"
                  },
                  "annual_monthly": {
                    "description": "The promotional monthly price, charged annually.",
                    "type": "number"
                  },
                  "monthly": {
                    "description": "The promotional monthly price, charged monthly.",
                    "type": "number"
                  }
                },
                "type": "object"
              },
              "uri": {
                "description": "Information about the URIs associated with the promotion.",
                "properties": {
                  "annual": {
                    "description": "The URI of the annual promotion.",
                    "type": "string"
                  },
                  "monthly": {
                    "description": "The URI of the monthly promotion.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "code",
              "discount",
              "price",
              "uri"
            ],
            "type": "object"
          },
          "tier": {
            "description": "The plan type.\n\nOption descriptions:\n * `advanced` - The plan type is Vimeo Advanced.\n * `basic` - The plan type is Vimeo Basic.\n * `business` - The plan type is Vimeo Business.\n * `customSelfServe` - The plan type is Vimeo Custom.\n * `enterprise` - The plan type is Vimeo Enterprise.\n * `free` - The plan type is Vimeo Free.\n * `livePremium` - The plan type is Vimeo Premium.\n * `ott` - The plan type is Vimeo OTT.\n * `plus` - The plan type is Vimeo Plus.\n * `pro` - The plan type is Vimeo Pro.\n * `proSolution` - The plan type is Vimeo Pro Solution.\n * `proUnlimited` - The plan type is Vimeo Pro Unlimited.\n * `standard` - The plan type is Vimeo Standard.\n * `starter` - The plan type is Vimeo Starter.\n * `team` - The plan type is Vimeo Team.\n * `teamLive` - The plan type is Vimeo Team Live.\n",
            "enum": [
              "advanced",
              "basic",
              "business",
              "customSelfServe",
              "enterprise",
              "free",
              "livePremium",
              "ott",
              "plus",
              "pro",
              "proSolution",
              "proUnlimited",
              "standard",
              "starter",
              "team",
              "teamLive"
            ],
            "example": "pro",
            "type": "string"
          },
          "uri": {
            "description": "The URI of the plan.",
            "example": "/plans/pro",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "discount",
          "id",
          "metadata",
          "name",
          "price",
          "promotion",
          "tier",
          "uri"
        ],
        "type": "object"
      },
      "tag": {
        "title": "Tag",
        "properties": {
          "canonical": {
            "description": "The normalized canonical tag name.",
            "example": "awesome",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the tag.",
            "properties": {
              "connections": {
                "description": "A collection of information that is connected to this resource.",
                "properties": {
                  "videos": {
                    "description": "Information about the videos related to this tag.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 34371,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/tags/awesome/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "videos"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "name": {
            "description": "The tag value.",
            "example": "awesome",
            "type": "string"
          },
          "resource_key": {
            "description": "The tag's resource key string.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "uri": {
            "description": "The canonical relative URI of the tag.",
            "example": "/videos/258684937/tags/awesome",
            "type": "string"
          }
        },
        "required": [
          "canonical",
          "metadata",
          "name",
          "resource_key",
          "uri"
        ],
        "type": "object"
      },
      "team-membership": {
        "title": "Team Membership",
        "properties": {
          "access_grant": {
            "description": "Information about an access grant that applies to the team member on the folder. _This field is deprecated because grants are no longer exposed via API responses._",
            "nullable": true,
            "type": "object"
          },
          "active": {
            "description": "Whether the team membership is currently active.",
            "example": true,
            "type": "boolean"
          },
          "applicable_permission_policies": {
            "description": "Information about permission policies that can apply to the team member.",
            "properties": {
              "folder": {
                "description": "An array of folder permission policies that can apply to the team member.",
                "items": {
                  "$ref": "#/components/schemas/permission-policy"
                },
                "type": "array"
              },
              "regional_delivery": {
                "description": "An array of regional delivery permission policies that can apply to the team member.",
                "items": {
                  "$ref": "#/components/schemas/permission-policy"
                },
                "type": "array"
              },
              "video": {
                "description": "An array of video permission policies that can apply to the team member.",
                "items": {
                  "$ref": "#/components/schemas/permission-policy"
                },
                "type": "array"
              }
            },
            "required": [
              "folder",
              "regional_delivery",
              "video"
            ],
            "type": "object"
          },
          "applicable_roles": {
            "description": "An array of the team roles this team member can have.",
            "items": {
              "$ref": "#/components/schemas/team-role"
            },
            "type": "array"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the invite was sent.",
            "example": "2017-05-15T17:42:07+00:00",
            "type": "string"
          },
          "email": {
            "description": "The team member's email.",
            "example": "user@example.com",
            "type": "string"
          },
          "exclude_sso": {
            "description": "Whether the team member should be excluded from single sign-on.",
            "nullable": true,
            "type": "boolean"
          },
          "has_folder_access": {
            "description": "Whether the team member has folder access.",
            "example": true,
            "type": "boolean"
          },
          "invite_url": {
            "description": "The URL for the invited user to join the team. The value of this field is null if the invited user has already joined.",
            "example": "https://vimeo.com/user/seat?code=e7c71ae7f4dc5d71a3bceb4d1d9e",
            "nullable": true,
            "type": "string"
          },
          "joined_time": {
            "description": "The time in ISO 8601 format when the invite was accepted.",
            "example": "2017-05-15T17:42:07+00:00",
            "type": "string"
          },
          "metadata": {
            "description": "The metadata of the team membership.",
            "properties": {
              "connections": {
                "description": "A list of resource URIs related to the user.",
                "properties": {
                  "groups": {
                    "description": "A standard connection object indicating how to return groups that this team user is a part of.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/178786123/team_groups/1129133?inspected_team_user_uri=%2Fusers%2F17886123%2Fteam_users%2F1369296",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "owner": {
                    "description": "Information about the team owner.",
                    "properties": {
                      "display_name": {
                        "description": "The display name of the team owner.",
                        "example": "Example Team Name",
                        "type": "string"
                      },
                      "email": {
                        "description": "The team owner's email address.",
                        "example": "user@example.com",
                        "type": "string"
                      },
                      "invites_remaining": {
                        "description": "The total number of remaining team member invites.",
                        "example": 5,
                        "type": "number"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of owners on this connection.",
                        "example": 1,
                        "type": "number"
                      },
                      "total_members": {
                        "description": "The total number of team members for the specified team owner.",
                        "example": 3,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184",
                        "type": "string"
                      }
                    },
                    "required": [
                      "display_name",
                      "email",
                      "invites_remaining",
                      "options",
                      "total",
                      "total_members",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "personal_team_folder": {
                    "description": "A standard connection object indicating how to return personal team folders.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of personal team folders on this connection.",
                        "example": 12,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/178786123/projects/1129133",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "groups",
                  "owner",
                  "personal_team_folder"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the team membership was last modified.",
            "example": "2017-05-15T17:42:07+00:00",
            "type": "string"
          },
          "permission_actions": {
            "description": "The allowable permission actions of the team user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permission_level": {
            "description": "The team member's permission level.\n\nOption descriptions:\n * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.\n * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can't perform team administration tasks.\n * `Contributor Plus` - The team member has contributor plus permissions. They can upload and edit videos for the entire team, and have additional sets of permissions, but can't perform team administration tasks.\n * `Owner` - The team member has owner permissions.\n * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can't edit videos.\n * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can't upload or edit videos.\n",
            "enum": [
              "Admin",
              "Contributor",
              "Contributor Plus",
              "Owner",
              "Uploader",
              "Viewer"
            ],
            "example": "Admin",
            "type": "string"
          },
          "recently_reminded": {
            "description": "Whether the team member has been reminded about the invite.",
            "example": true,
            "type": "boolean"
          },
          "resource_key": {
            "description": "The resource key of the team membership.",
            "example": "dc724af18fbdd4e59189f5fe768a5f8311527050",
            "type": "string"
          },
          "role": {
            "description": "The team member's role, translated.",
            "type": "string"
          },
          "status": {
            "description": "The status of the team membership invite.\n\nOption descriptions:\n * `accepted` - Team membership has been accepted.\n * `pending` - Team membership has been offered but not yet accepted.\n",
            "enum": [
              "accepted",
              "pending"
            ],
            "example": "accepted",
            "type": "string"
          },
          "uri": {
            "description": "The URI of the team membership resource.",
            "example": "/users/152184/team_users/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The team member. The value of this field is null if the user hasn't joined the team yet.",
            "nullable": true
          }
        },
        "required": [
          "access_grant",
          "active",
          "applicable_permission_policies",
          "applicable_roles",
          "created_time",
          "email",
          "exclude_sso",
          "invite_url",
          "joined_time",
          "metadata",
          "modified_time",
          "permission_actions",
          "permission_level",
          "resource_key",
          "role",
          "status",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "team-role": {
        "title": "Team Role",
        "properties": {
          "applicable_permission_policies": {
            "description": "The applicable permission policies for the role.",
            "properties": {
              "folder": {
                "description": "The applicable folder-related permission policies for the role.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "regional_delivery": {
                "description": "The applicable permission policies related to regional delivery for the role.",
                "items": {
                  "type": "object",
                  "properties": {
                    "display_description": {
                      "description": "The translated display description of the regional delivery permission policy.",
                      "example": "This policy allows the user to restrict the delivery of videos to specific regions.",
                      "type": "string"
                    },
                    "display_name": {
                      "description": "The translated display name of the regional delivery permission policy.",
                      "example": "Regional delivery",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the regional delivery permission policy.",
                      "example": "regional_delivery",
                      "type": "string"
                    }
                  },
                  "required": [
                    "display_description",
                    "display_name",
                    "name"
                  ]
                },
                "type": "array"
              },
              "video": {
                "description": "The applicable video-related permission policies for the role.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "count": {
            "description": "The total number of team members with this role.",
            "example": 3,
            "type": "number"
          },
          "display_description": {
            "description": "The translated display description of the role.",
            "example": "Can view and manage all videos, folders, people, and analytics on the account.",
            "type": "string"
          },
          "display_name": {
            "description": "The translated display name of the role.",
            "example": "Admin",
            "type": "string"
          },
          "is_disabled": {
            "description": "Whether the role is disabled for certain team members.",
            "example": false,
            "type": "boolean"
          },
          "permission_level": {
            "description": "The untranslated role of the user who made the request.\n\nOption descriptions:\n * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.\n * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can’t perform team administration tasks.\n * `Contributor Plus` - The team member has contributor-plus permissions. They can upload and edit videos for the entire team and have additional sets of permissions but can't perform team administration tasks.\n * `Owner` - The team member has owner permissions.\n * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can't edit videos.\n * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can't upload or edit videos.\n",
            "enum": [
              "Admin",
              "Contributor",
              "Contributor Plus",
              "Owner",
              "Uploader",
              "Viewer"
            ],
            "example": "Admin",
            "nullable": true,
            "type": "string"
          },
          "role": {
            "description": "The untranslated role of the user who made the request.\n\nOption descriptions:\n * `Admin` - The team member has admin permissions. They can upload and edit videos for the entire team and perform team administration tasks.\n * `Contributor` - The team member has contributor permissions. They can upload and edit videos for the entire team but can’t perform team administration tasks.\n * `Contributor Plus` - The team member has contributor-plus permissions. They can upload and edit videos for the entire team and have additional sets of permissions but can't perform team administration tasks.\n * `Owner` - The team member has owner permissions.\n * `Uploader` - The team member has uploader permissions. They can upload videos for the entire team but can’t edit videos.\n * `Viewer` - The team member has viewer permissions. They can access team videos and specific team folders but can’t upload or edit videos.\n",
            "enum": [
              "Admin",
              "Contributor",
              "Contributor Plus",
              "Owner",
              "Uploader",
              "Viewer"
            ],
            "example": "Admin",
            "nullable": true,
            "type": "string"
          },
          "uri": {
            "description": "The URI of the team role.",
            "example": "/users/152184/team/role",
            "type": "string"
          }
        },
        "required": [
          "permission_level",
          "role",
          "uri"
        ],
        "type": "object"
      },
      "text-track": {
        "title": "Text Track",
        "properties": {
          "active": {
            "description": "Whether the text track is active.",
            "example": true,
            "type": "boolean"
          },
          "display_language": {
            "description": "The name of the language.",
            "example": "English (United States)",
            "type": "string"
          },
          "hls_link": {
            "description": "The read-only URL of the text track file, intended for use with HLS playback.",
            "type": "string"
          },
          "hls_link_expires_time": {
            "description": "The time in ISO 8601 format when the read-only HLS playback text track file expires.",
            "example": "1494888499",
            "type": "string"
          },
          "id": {
            "description": "The text track identifier.",
            "example": 12345,
            "type": "number"
          },
          "language": {
            "description": "The language code for the text track. To see a full list, request `/languages?filter=texttrack`.",
            "example": "en-US",
            "nullable": true,
            "type": "string"
          },
          "link": {
            "description": "The read-only URL of the text track file. You can upload to this link when you create it for the first time.",
            "type": "string"
          },
          "link_expires_time": {
            "description": "The time in ISO 8601 format when the text track link expires.",
            "example": "1494888499",
            "type": "string"
          },
          "metadata": {
            "properties": {
              "connections": {
                "properties": {
                  "parent_text_track": {
                    "description": "Metadata for the parent text track.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/texttracks/12345",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "name": {
            "description": "The descriptive name of the text track.",
            "example": "English Subtitles",
            "nullable": true,
            "type": "string"
          },
          "provenance": {
            "description": "The upload source of the text track.\n\nOption descriptions:\n * `autogen_alternate_audio` - The text track is automatically generated from alternate audio.\n * `autogen_dubbed` - The text track is automatically generated from AI dubbing.\n * `autogen_live_audio` - The text track is automatically generated from live audio.\n * `autogen_source_audio` - The text track is automatically generated from source audio.\n * `autogen_translated` - The text track is automatically generated from AI translation.\n * `user_uploaded` - The text track is uploaded by a user.\n",
            "enum": [
              "autogen_alternate_audio",
              "autogen_dubbed",
              "autogen_live_audio",
              "autogen_source_audio",
              "autogen_translated",
              "user_uploaded"
            ],
            "example": "autogen_alternate_audio",
            "type": "string"
          },
          "source_link": {
            "description": "The read-only URL of the source text track file that was originally uploaded.",
            "type": "string"
          },
          "source_link_expires_time": {
            "description": "The time in ISO 8601 format when the read-only source text track link expires.",
            "example": "1494888499",
            "type": "string"
          },
          "type": {
            "description": "The type of text track.\n\nOption descriptions:\n * `captions` - The text track is for captions.\n * `subtitles` - The text track is for subtitles.\n",
            "enum": [
              "captions",
              "subtitles"
            ],
            "example": "captions",
            "nullable": true,
            "type": "string"
          },
          "uri": {
            "description": "The relative URI of the text track.",
            "example": "/videos/258684937/texttracks/12345",
            "type": "string"
          },
          "version": {
            "description": "The version of the text track. This data requires a bearer token with the `private` scope.",
            "example": 2,
            "nullable": true,
            "type": "number",
            "x-mill-non-default": true
          }
        },
        "required": [
          "active",
          "display_language",
          "hls_link",
          "hls_link_expires_time",
          "id",
          "language",
          "link",
          "link_expires_time",
          "name",
          "provenance",
          "source_link",
          "source_link_expires_time",
          "type",
          "uri",
          "version"
        ],
        "type": "object"
      },
      "transcript-metadata": {
        "title": "Transcript Metadata",
        "properties": {
          "autogenerated": {
            "description": "Whether the transcript was automatically generated using AI.",
            "type": "boolean"
          },
          "clip_id": {
            "description": "The ID of the video.",
            "type": "number"
          },
          "container_id": {
            "description": "The ID of the container.",
            "type": "string"
          },
          "deleted": {
            "description": "Whether the transcript has been marked as deleted.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Whether the transcript is enabled.",
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the transcript.",
            "type": "string"
          },
          "kind": {
            "description": "The kind of transcript. The value of this field can be `captions` for caption transcripts or `subtitles` for subtitle transcripts.",
            "type": "string"
          },
          "language": {
            "description": "The language in which the transcript appears.",
            "type": "string"
          },
          "speaker_count": {
            "description": "The total number of speakers in the transcript.",
            "type": "number"
          },
          "texttrack_id": {
            "description": "The ID of the text track.",
            "type": "number"
          },
          "transcript_status_uuid": {
            "description": "The UUID of the transcript status.",
            "type": "string"
          },
          "word_count": {
            "description": "The total number of words in the transcript.",
            "type": "number"
          }
        },
        "required": [
          "autogenerated",
          "clip_id",
          "container_id",
          "deleted",
          "enabled",
          "id",
          "kind",
          "language",
          "speaker_count",
          "texttrack_id",
          "transcript_status_uuid",
          "word_count"
        ],
        "type": "object"
      },
      "trimmed-video": {
        "title": "Trimmed Video",
        "properties": {
          "clip_id": {
            "description": "The ID of the video. _This field is deprecated._",
            "example": 258684937,
            "type": "number"
          },
          "created_on": {
            "description": "The time in ISO 8601 format when the trim was created.",
            "type": "string"
          },
          "created_version_id": {
            "description": "The most recent version of the trimmed video. _This field is deprecated._",
            "example": "12354",
            "type": "string"
          },
          "end": {
            "description": "The end of the trim from the last trim, in seconds.",
            "example": "5.0",
            "type": "string"
          },
          "is_clip_finished_transcoding": {
            "description": "Whether the transcoding jobs for the video file have finished. _This field is deprecated._",
            "example": true,
            "type": "boolean"
          },
          "metadata": {
            "properties": {
              "connections": {
                "properties": {
                  "created_version": {
                    "description": "Information about the video version that is created from the trim operation.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/1234/versions/2345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "root_version": {
                    "description": "Information about the video version that is the source of the trimmed video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/1234/versions/2345",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "video": {
                    "description": "Information about the video associated with the trim.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/3706071",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "created_version",
                  "root_version",
                  "video"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "modified_on": {
            "description": "The time in ISO 8601 format when the trim policy was last modified.",
            "nullable": true,
            "type": "string"
          },
          "root_version_id": {
            "description": "The video version that is the source of the trimmed video. _This field is deprecated._",
            "example": "12354",
            "type": "string"
          },
          "start": {
            "description": "The start of the trim from the last trim, in seconds.",
            "example": "1.0",
            "type": "string"
          },
          "uri": {
            "description": "The URI of the player or the trim service. _This field is deprecated._",
            "example": "https://player.vimeo.com/video/1234",
            "type": "string"
          },
          "version_quality": {
            "description": "The quality of the root version video file.",
            "example": "5",
            "type": "string"
          }
        },
        "required": [
          "clip_id",
          "created_on",
          "created_version_id",
          "end",
          "is_clip_finished_transcoding",
          "metadata",
          "modified_on",
          "root_version_id",
          "start",
          "uri",
          "version_quality"
        ],
        "type": "object"
      },
      "tutorial": {
        "title": "Tutorial",
        "properties": {
          "message": {
            "description": "The success message.",
            "example": "Success!",
            "type": "string"
          },
          "next_steps_link": {
            "description": "The link to the next tutorial.",
            "example": "https://developer.vimeo.com/api/guides/videos/upload",
            "type": "string"
          },
          "token_is_authenticated": {
            "description": "Whether the current access token is authenticated.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "message",
          "next_steps_link",
          "token_is_authenticated"
        ],
        "type": "object"
      },
      "upload-attempt": {
        "title": "Upload Attempt",
        "properties": {
          "clip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video"
              }
            ],
            "description": "The video to upload."
          },
          "form": {
            "description": "The HTML upload form.",
            "type": "string"
          },
          "ticket_id": {
            "description": "The ticket identifier string for the upload.",
            "example": "3da5dac09",
            "type": "string"
          },
          "upload_link": {
            "description": "The upload URL.",
            "example": "https://global.upload.vimeo.com/uploads/1234asdf?token=xyz",
            "type": "string"
          },
          "uri": {
            "description": "The upload URI.",
            "example": "/users/152184/uploads/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the uploaded video."
          }
        },
        "required": [
          "ticket_id",
          "upload_link",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "user": {
        "title": "User",
        "properties": {
          "account": {
            "description": "The authenticated user's account type.\n\nOption descriptions:\n * `advanced` - The user has a Vimeo Advanced subscription.\n * `basic` - The user has a Vimeo Basic subscription.\n * `business` - The user has a Vimeo Business subscription.\n * `enterprise` - The user has a Vimeo Enterprise subscription.\n * `free` - The user has a Vimeo Free subscription.\n * `live_business` - The user has a Vimeo Business Live subscription.\n * `live_premium` - The user has a Vimeo Premium subscription.\n * `live_pro` - The user has a Vimeo PRO Live subscription.\n * `plus` - The user has a Vimeo Plus subscription.\n * `pro` - The user has a Vimeo Pro subscription.\n * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.\n * `producer` - The user has a Vimeo Producer subscription.\n * `standard` - The user has a Vimeo Standard subscription.\n * `starter` - The user has a Vimeo Starter subscription.\n",
            "enum": [
              "advanced",
              "basic",
              "business",
              "enterprise",
              "free",
              "live_business",
              "live_premium",
              "live_pro",
              "plus",
              "pro",
              "pro_unlimited",
              "producer",
              "standard",
              "starter"
            ],
            "example": "advanced",
            "type": "string"
          },
          "ai_credits_quota": {
            "description": "Information about the user's AI credits quota.",
            "properties": {
              "available": {
                "description": "The maximum number of AI credits granted to the authenticated user.",
                "example": 1234,
                "type": "number",
                "x-mill-non-default": true
              },
              "balances": {
                "description": "An array of objects listing the balances and expiration dates for the user's AI credits quota.",
                "items": {
                  "type": "object",
                  "properties": {
                    "expiration_date": {
                      "description": "The expiration date of the balance in ISO 8601 format.",
                      "example": "2025-09-04T00:00:00-04:00",
                      "type": "string",
                      "x-mill-non-default": true
                    },
                    "remaining": {
                      "description": "The number of AI credits that are remaining for the balance.",
                      "example": 1234,
                      "type": "number",
                      "x-mill-non-default": true
                    }
                  }
                },
                "type": "array",
                "x-mill-non-default": true
              },
              "period": {
                "description": "The time period for which the AI credit activity is evaluated.\n\nOption descriptions:\n * `lifetime` - The quota period is for the lifetime of the account.\n * `month` - The quota period is one month.\n * `week` - The quota period is one week.\n * `year` - The quota period is one year.\n",
                "enum": [
                  "lifetime",
                  "month",
                  "week",
                  "year"
                ],
                "example": "year",
                "type": "string",
                "x-mill-non-default": true
              },
              "remaining": {
                "description": "The number of AI credits that are remaining for the authenticated user.",
                "example": 1234,
                "type": "number",
                "x-mill-non-default": true
              },
              "reset_date": {
                "description": "The date of the user's next AI credits reset.",
                "example": "2025-09-04T00:00:00-04:00",
                "type": "string",
                "x-mill-non-default": true
              },
              "used": {
                "description": "The number of AI credits that have been spent.",
                "example": 1234,
                "type": "number",
                "x-mill-non-default": true
              }
            },
            "type": "object",
            "x-mill-non-default": true
          },
          "available_for_hire": {
            "description": "Whether the authenticated user is available for hire.",
            "example": false,
            "type": "boolean"
          },
          "bandwidth": {
            "properties": {
              "period": {
                "description": "The quota period for which the bandwidth is evaluated.\n\nOption descriptions:\n * `month` - The quota period is one month.\n * `year` - The quota period is one year.\n",
                "enum": [
                  "month",
                  "year"
                ],
                "example": "year",
                "type": "string"
              }
            },
            "type": "object"
          },
          "bio": {
            "description": "The authenticated user's long biography text.",
            "example": "This is where you will find videos and news updates from the staff.",
            "type": "string"
          },
          "can_work_remotely": {
            "description": "Whether the authenticated user can work remotely.",
            "example": false,
            "type": "boolean"
          },
          "capabilities": {
            "description": "The users's capabilities list.",
            "type": "object"
          },
          "clients": {
            "description": "The comma-separated list of clients.",
            "example": "vimeo",
            "type": "string"
          },
          "content_filter": {
            "description": "The authenticated user's content filters.\n\nOption descriptions:\n * `drugs` - The content contains drug or alcohol use.\n * `language` - The content contains profanity or sexually suggestive language.\n * `nudity` - The content contains nudity.\n * `safe` - The content is suitable for all audiences.\n * `unrated` - The content hasn't been rated.\n * `violence` - The content contains violence or is graphic.\n",
            "enum": [
              "drugs",
              "language",
              "nudity",
              "safe",
              "unrated",
              "violence"
            ],
            "items": {
              "type": "string",
              "example": "drugs"
            },
            "type": "array"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the user account was created.",
            "example": "2007-01-18T16:40:11+00:00",
            "type": "string"
          },
          "gender": {
            "description": "The authenticated user's gender.",
            "example": "m",
            "type": "string"
          },
          "has_invalid_email": {
            "description": "Whether the user's email is invalid.",
            "type": "boolean"
          },
          "is_expert": {
            "description": "Whether the creator enrolled in and successfully completed the Vimeo Experts program.",
            "example": false,
            "type": "boolean"
          },
          "is_staff_picked": {
            "description": "Whether the user has had a staff-picked video.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "link": {
            "description": "The absolute URL of the authenticated users's profile page.",
            "example": "https://vimeo.com/staff",
            "type": "string"
          },
          "lms_learner_seats_quota": {
            "description": "Information about the user's learning management system learner seats quota.",
            "properties": {
              "available": {
                "description": "The maximum number of learning management system learner seats granted to the authenticated user.",
                "example": 50,
                "type": "number"
              },
              "used": {
                "description": "The number of learning management system learner seats already used by the authenticated user.",
                "example": 33,
                "type": "number"
              }
            },
            "type": "object",
            "x-mill-non-default": true
          },
          "location": {
            "description": "The authenticated user's location.",
            "example": "New York City",
            "type": "string"
          },
          "location_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/location"
              }
            ],
            "description": "The authenticated user's location details."
          },
          "metadata": {
            "description": "The authenticated user's metadata.",
            "properties": {
              "connections": {
                "description": "The list of resource URIs related to the authenticated user.",
                "properties": {
                  "albums": {
                    "description": "Information about the showcases created by the authenticated user.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of showcases on this connection.",
                        "example": 3,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/albums",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "appearances": {
                    "description": "Information about the appearances of the authenticated user in other videos.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of appearances on this connection.",
                        "example": 6,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/appearances",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "block": {
                    "description": "Information about the users who have been blocked by the authenticated user. This data requires a bearer token with the `private` scope. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.",
                        "example": 73,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/me/block",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "categories": {
                    "description": "Information about the categories that the authenticated user is following.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of categories on this connection.",
                        "example": 5,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/categories",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "channels": {
                    "description": "Information about the channels to which the authenticated user subscribes.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of channels on this connection.",
                        "example": 4,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/channels",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "connected_apps": {
                    "description": "Information about the authenticated user's connected apps.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of connected apps on this connection.",
                        "example": 4,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/me/connected_apps",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "feed": {
                    "description": "Information about the authenticated user's feed.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/feed",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "folders": {
                    "description": "Information about the authenticated user's folders.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of folders on this connection.",
                        "example": 9,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/folders",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "folders_root": {
                    "description": "Information about the authenticated user's root level folders and videos.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/123456789/folders/root",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "followers": {
                    "description": "Information about the authenticated user's followers.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of followers on this connection.",
                        "example": 12,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/followers",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "following": {
                    "description": "Information about the users who are followed by the authenticated user.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection.",
                        "example": 47,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/following",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "groups": {
                    "description": "Information about the groups created by the authenticated user.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of groups on this connection.",
                        "example": 2,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/groups",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "import_apps": {
                    "description": "Information about the authenticated user's auto upload apps.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "total": {
                        "description": "The total number of auto upload apps on this connection.",
                        "example": 4,
                        "type": "number",
                        "x-mill-non-default": true
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/me/import_apps",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "lead_capture_form": {
                    "description": "Information about the authenticated user's lead capture form. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      }
                    },
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "likes": {
                    "description": "Information about the videos that the authenticated user has liked.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of likes on this connection.",
                        "example": 300,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/likes",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "moderated_channels": {
                    "description": "Information about the channels that the authenticated user moderates.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of channels on this connection.",
                        "example": 1,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/channels?filter=moderated",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "ms_teams_team_folder_id": {
                    "description": "Information about the upload folder for Microsoft Teams recordings.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/projects/1234",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "ms_teams_tenant_token_id": {
                    "description": "Information about the Microsoft Teams tenant token ID.",
                    "nullable": true,
                    "type": "string",
                    "x-mill-non-default": true
                  },
                  "pictures": {
                    "description": "Information about the authenticated user's portraits.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of pictures on this connection.",
                        "example": 3,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/pictures",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "portfolios": {
                    "description": "Information about the authenticated user's portfolios.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of portfolios on this connection.",
                        "example": 5,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/portfolios",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "recommended_channels": {
                    "description": "A collection of recommended channels for the authenticated user to follow. This data requires a bearer token with the `private` scope. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of channels on this connection. This data requires a bearer token with the `private` scope.",
                        "example": 4,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/me/recommendations/channels",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "recommended_users": {
                    "description": "A collection of recommended users for the authenticated user to follow. This data requires a bearer token with the `private` scope. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection. This data requires a bearer token with the `private` scope.",
                        "example": 6,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/me/recommendations/users",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "shared": {
                    "description": "Information about the videos that have been shared with the authenticated user.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 15,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/shared/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "videos": {
                    "description": "Information about the videos that the authenticated user has uploaded.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 36,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/videos",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "watched_videos": {
                    "description": "Information about the videos that the authenticated user has watched.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 322,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/me/watched/videos",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "watchlater": {
                    "description": "Information about the videos that the authenticated user has marked to watch later.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 14,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/watchlater",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "albums",
                  "appearances",
                  "categories",
                  "channels",
                  "feed",
                  "folders_root",
                  "followers",
                  "following",
                  "groups",
                  "likes",
                  "moderated_channels",
                  "ms_teams_team_folder_id",
                  "ms_teams_tenant_token_id",
                  "pictures",
                  "portfolios",
                  "shared",
                  "videos",
                  "watchlater"
                ],
                "type": "object"
              },
              "interactions": {
                "properties": {
                  "add_privacy_user": {
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/channels/152184/privacy/users",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "block": {
                    "description": "Information about the block status of the authenticated user.",
                    "properties": {
                      "added": {
                        "description": "Whether the authenticated user is blocking the requested user.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the block occurred, or the null value if no block exists.",
                        "example": "2017-05-16T15:05:43+00:00",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI to block or unblock the requested user.",
                        "example": "/me/block/3766357",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "connected_apps": {
                    "properties": {
                      "all_scopes": {
                        "description": "The list of all the scopes on the connected app that are needed for a particular Vimeo feature.",
                        "type": "object"
                      },
                      "is_connected": {
                        "description": "Whether the authenticated user is connected to the connected app.",
                        "example": true,
                        "type": "boolean"
                      },
                      "needed_scopes": {
                        "description": "The list of the remaining scopes on the connected app that the authenticated user needs for a particular Vimeo feature.",
                        "type": "object"
                      },
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI of the connected app.",
                        "example": "/me/connected_apps/facebook",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "follow": {
                    "description": "Information about the followed status of the authenticated user.",
                    "properties": {
                      "added": {
                        "description": "Whether the authenticated user is following the requested user.",
                        "example": true,
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI to follow the requested user.",
                        "example": "/users/152184/following/3766357",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "report": {
                    "description": "Information about where and how to report the requested user.",
                    "properties": {
                      "options": {
                        "description": "An array of the HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "A list of valid reasons for reporting a video.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/users/152184/report",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "block",
                  "report"
                ],
                "type": "object"
              },
              "ms_teams_encrypted_team_id": {
                "description": "Information about the Microsoft Teams encrypted team ID.",
                "nullable": true,
                "type": "string",
                "x-mill-non-default": true
              },
              "public_videos": {
                "properties": {
                  "total": {
                    "description": "The total number of public videos that the authenticated user has uploaded.",
                    "example": 100,
                    "type": "number"
                  }
                },
                "required": [
                  "total"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections",
              "interactions",
              "ms_teams_encrypted_team_id",
              "public_videos"
            ],
            "type": "object"
          },
          "name": {
            "description": "The authenticated user's display name.",
            "example": "Vimeo Staff",
            "type": "string"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The active portrait of the authenticated user."
          },
          "preferences": {
            "properties": {
              "videos": {
                "properties": {
                  "password": {
                    "description": "The password for viewing the authenticated user's videos.",
                    "example": "hunter1",
                    "type": "string"
                  },
                  "privacy": {
                    "properties": {
                      "add": {
                        "description": "Whether other users can add the authenticated user's videos.",
                        "example": true,
                        "type": "boolean"
                      },
                      "allow_share_link": {
                        "description": "Whether unlisted videos are hidden from Vimeo.",
                        "example": true,
                        "type": "boolean"
                      },
                      "clip_embed_allowed_domains": {
                        "description": "The list of domains where the authenticated user can embed the video.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "comments": {
                        "description": "The authenticated user's privacy preference for comments.\n\nOption descriptions:\n * `anybody` - Anyone can comment on the user's videos.\n * `contacts` - Only contacts can comment on the user's videos.\n * `nobody` - No one can comment on the user's videos.\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "nobody"
                        ],
                        "example": "anybody",
                        "type": "string"
                      },
                      "download": {
                        "description": "Whether other users can download the authenticated user's videos.",
                        "example": true,
                        "type": "boolean"
                      },
                      "embed": {
                        "description": "The authenticated user's privacy preference for embeds.\n\nOption descriptions:\n * `private` - Only the user can embed their own videos.\n * `public` - Anyone can embed the user's videos.\n * `whitelist` - Only specified users can embed the user's videos.\n",
                        "enum": [
                          "private",
                          "public",
                          "whitelist"
                        ],
                        "example": "private",
                        "type": "string"
                      },
                      "password": {
                        "description": "The default password for the video.",
                        "example": "videopassword",
                        "type": "string"
                      },
                      "view": {
                        "description": "The authenticated user's privacy preference for views.\n\nOption descriptions:\n * `anybody` - Anyone can view the user's videos. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only contacts can view the user's videos. _This field is deprecated._\n * `disable` - Views are disabled for the user's videos. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one except the user can view the user's videos. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Only those with the password can view the user's videos.\n * `unlisted` - Anybody can view the user's videos if they have a link.\n * `users` - Only other Vimeo members can view the user's videos. _This field is deprecated._\n",
                        "enum": [
                          "anybody",
                          "contacts",
                          "disable",
                          "nobody",
                          "password",
                          "unlisted",
                          "users"
                        ],
                        "example": "anybody",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "rating": {
                    "description": "An array of the authorized user's default content ratings.\n\nOption descriptions:\n * `drugs` - The video contains drug or alcohol use.\n * `language` - The video contains profanity or sexually suggestive content.\n * `nudity` - The video contains nudity.\n * `safe` - The video is suitable for all audiences.\n * `unrated` - The video hasn't been rated.\n * `violence` - The video contains violent or graphic content.\n",
                    "enum": [
                      "drugs",
                      "language",
                      "nudity",
                      "safe",
                      "unrated",
                      "violence"
                    ],
                    "items": {
                      "type": "string",
                      "example": "drugs"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "rating"
                ],
                "type": "object"
              }
            },
            "required": [
              "videos"
            ],
            "type": "object"
          },
          "profile_discovery": {
            "description": "Whether the user has enabled profile discovery from their profile settings.",
            "example": true,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "resource_key": {
            "description": "The authenticated user's resource key string.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "short_bio": {
            "description": "The authenticated user's short biography text.",
            "example": "This is a short biography about me!",
            "type": "string"
          },
          "skills": {
            "description": "A list of the authenticated user's skills.",
            "items": {
              "$ref": "#/components/schemas/skill"
            },
            "type": "array"
          },
          "transcript_phrases_limit": {
            "description": "The maximum number of transcript phrases permitted for the user.",
            "example": 50,
            "type": "number",
            "x-mill-non-default": true
          },
          "upload_quota": {
            "description": "The upload quota. This information appears only when the authenticated user has upload access and is looking at their own user record.",
            "properties": {
              "lifetime": {
                "description": "Information about the authenticated user's lifetime upload usage.",
                "properties": {
                  "free": {
                    "description": "The number of bytes or videos remaining in the authenticated user's lifetime maximum.",
                    "example": 5000000,
                    "nullable": true,
                    "type": "number"
                  },
                  "max": {
                    "description": "The total number of bytes or videos that the authenticated user can upload across the lifetime of their account.",
                    "example": 5368709120,
                    "nullable": true,
                    "type": "number"
                  },
                  "unit": {
                    "description": "The unit that's used to compute quota.\n\nOption descriptions:\n * `video_count` - The quota is calculated using the count of the videos.\n * `video_size` - The quota is calculated using the byte size of the videos.\n",
                    "enum": [
                      "video_count",
                      "video_size"
                    ],
                    "example": "video_count",
                    "nullable": true,
                    "type": "string"
                  },
                  "used": {
                    "description": "The number of bytes or videos that the authenticated user has already uploaded against their lifetime limit.",
                    "example": 5368704120,
                    "nullable": true,
                    "type": "number"
                  }
                },
                "required": [
                  "free",
                  "max",
                  "unit",
                  "used"
                ],
                "type": "object"
              },
              "periodic": {
                "description": "Information about the authenticated user's usage for the current period.",
                "properties": {
                  "free": {
                    "description": "The number of bytes or video count remaining in the authenticated user's upload quota for the current period.",
                    "example": 5000000,
                    "nullable": true,
                    "type": "number"
                  },
                  "max": {
                    "description": "The total number of bytes or videos that the authenticated user can upload per period.",
                    "example": 5368709120,
                    "nullable": true,
                    "type": "number"
                  },
                  "period": {
                    "description": "The renewal frequency of the quota.\n\nOption descriptions:\n * `lifetime` - The user doesn't have a periodic quota.\n * `month` - The quota renews monthly.\n * `week` - The quota renews weekly.\n * `year` - The quota renews yearly.\n",
                    "enum": [
                      "lifetime",
                      "month",
                      "week",
                      "year"
                    ],
                    "example": "lifetime",
                    "nullable": true,
                    "type": "string"
                  },
                  "reset_date": {
                    "description": "The time in ISO 8601 format when the authenticated user's upload quota resets.",
                    "example": "2029-03-13T02:35:13-04:00",
                    "nullable": true,
                    "type": "string"
                  },
                  "unit": {
                    "description": "The unit that's used to compute quota.\n\nOption descriptions:\n * `video_count` - The quota is calculated using the count of the videos.\n * `video_size` - The quota is calculated using the byte size of the videos.\n",
                    "enum": [
                      "video_count",
                      "video_size"
                    ],
                    "example": "video_count",
                    "nullable": true,
                    "type": "string"
                  },
                  "used": {
                    "description": "The number of bytes or video count that the authenticated user has already uploaded against their quota in the current period.",
                    "example": 5368704120,
                    "nullable": true,
                    "type": "number"
                  }
                },
                "required": [
                  "free",
                  "max",
                  "period",
                  "reset_date",
                  "unit",
                  "used"
                ],
                "type": "object"
              },
              "space": {
                "description": "Information about the authenticated user's upload space remaining for the current period.",
                "properties": {
                  "free": {
                    "description": "The number of bytes or videos remaining in the authenticated user's upload quota.",
                    "example": 5000000,
                    "type": "number"
                  },
                  "max": {
                    "description": "The maximum number of bytes or videos allotted to the authenticated user's upload quota.",
                    "example": 5368709120,
                    "nullable": true,
                    "type": "number"
                  },
                  "showing": {
                    "description": "The type of quota for the values of the **upload_quota.space** field.\n\nOption descriptions:\n * `lifetime` - The quota type is lifetime.\n * `periodic` - The quota type is periodic.\n",
                    "enum": [
                      "lifetime",
                      "periodic"
                    ],
                    "example": "lifetime",
                    "type": "string"
                  },
                  "unit": {
                    "description": "The unit that's used to compute quota.\n\nOption descriptions:\n * `video_count` - The quota is calculated using the count of the videos.\n * `video_size` - The quota is calculated using the byte size of the videos.\n",
                    "enum": [
                      "video_count",
                      "video_size"
                    ],
                    "example": "video_count",
                    "nullable": true,
                    "type": "string"
                  },
                  "used": {
                    "description": "The number of bytes or videos that the authenticated user has already uploaded against their quota.",
                    "example": 5368704120,
                    "type": "number"
                  }
                },
                "required": [
                  "free",
                  "max",
                  "showing",
                  "unit",
                  "used"
                ],
                "type": "object"
              }
            },
            "required": [
              "lifetime",
              "periodic",
              "space"
            ],
            "type": "object"
          },
          "uri": {
            "description": "The authenticated user's canonical relative URI.",
            "example": "/users/152184",
            "type": "string"
          },
          "websites": {
            "description": "The authenticated user's websites.",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "description": "The website's description.",
                  "example": "Follow us on Twitter!",
                  "type": "string"
                },
                "link": {
                  "description": "The URL of the website.",
                  "example": "https://twitter.com/vimeo",
                  "type": "string"
                },
                "name": {
                  "description": "The name of the website.",
                  "example": "Twitter",
                  "type": "string"
                },
                "type": {
                  "description": "The URL type of the website.",
                  "example": "facebook",
                  "type": "string"
                },
                "uri": {
                  "description": "The URI of the custom website or social media page belonging to the user.",
                  "example": "/users/1234/links/1",
                  "type": "string"
                }
              },
              "required": [
                "link",
                "type",
                "uri"
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "account",
          "available_for_hire",
          "can_work_remotely",
          "capabilities",
          "clients",
          "created_time",
          "is_expert",
          "is_staff_picked",
          "link",
          "metadata",
          "name",
          "pictures",
          "preferences",
          "profile_discovery",
          "resource_key",
          "upload_quota",
          "uri",
          "websites"
        ],
        "type": "object"
      },
      "version-transcode-status": {
        "title": "Version Transcode Status",
        "properties": {
          "is_complete": {
            "description": "Whether the video has finished transcoding.",
            "type": "boolean"
          },
          "is_fully_playable": {
            "description": "Whether the video is playable in all resolutions, up to either the source quality or 4K, whichever is lower, at standard definition.",
            "type": "boolean"
          },
          "is_playable": {
            "description": "Whether the video is playable.",
            "type": "boolean"
          }
        },
        "required": [
          "is_complete",
          "is_fully_playable",
          "is_playable"
        ],
        "type": "object"
      },
      "video": {
        "title": "Video",
        "properties": {
          "allowed_privacies": {
            "description": "An array of privacy settings supported for this video and the requesting user.",
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-mill-non-default": true
          },
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/api-app"
              }
            ],
            "description": "The API application associated with the video owner's token."
          },
          "can_move_to_project": {
            "description": "Whether the video can be moved to a folder. This data requires a bearer token with the `private` scope.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "categories": {
            "description": "The categories that the video belongs to.",
            "items": {
              "$ref": "#/components/schemas/category"
            },
            "type": "array"
          },
          "content_rating": {
            "description": "The video's granular content rating.\n\nOption descriptions:\n * `advertisement` - The video contains advertisements.\n * `drugs` - The video contains drug or alcohol use.\n * `language` - The video contains profanity or sexually suggestive content.\n * `nudity` - The video contains nudity.\n * `safe` - The video is safe for all audiences.\n * `unrated` - The video hasn't been rated.\n * `violence` - The video contains violence.\n",
            "enum": [
              "advertisement",
              "drugs",
              "language",
              "nudity",
              "safe",
              "unrated",
              "violence"
            ],
            "items": {
              "type": "string",
              "example": "advertisement"
            },
            "type": "array"
          },
          "content_rating_class": {
            "description": "The video's high-level content rating class.\n\nOption descriptions:\n * `explicit` - The video contains one or more explicit content rating types.\n * `safe` - The video contains no explicit content rating types.\n * `unrated` - The video doesn't belong to a content rating class.\n",
            "enum": [
              "explicit",
              "safe",
              "unrated"
            ],
            "example": "explicit",
            "type": "string"
          },
          "context": {
            "description": "The context of the video's subscription, if the video is part of a subscription.",
            "properties": {
              "action": {
                "description": "The relevant contextual action.\n\nOption descriptions:\n * `Added to` - An Added To action.\n * `Appearance by` - An Appearance By action.\n * `Liked by` - A Liked By action.\n * `Uploaded by` - An Uploaded By action.\n",
                "enum": [
                  "Added to",
                  "Appearance by",
                  "Liked by",
                  "Uploaded by"
                ],
                "example": "Added to",
                "type": "string"
              },
              "resource": {
                "description": "The contextual resource: a user, group, or channel representation, or an object of a tag.",
                "nullable": true,
                "type": "object"
              },
              "resource_type": {
                "description": "The contextual resource type.",
                "example": "clip",
                "type": "string"
              }
            },
            "required": [
              "action",
              "resource",
              "resource_type"
            ],
            "type": "object"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the video was created.",
            "example": "2018-03-05T21:04:47+00:00",
            "type": "string"
          },
          "custom_url": {
            "description": "The custom URL of the video.",
            "nullable": true,
            "type": "string",
            "x-mill-non-default": true
          },
          "description": {
            "description": "A brief explanation of the video's content.",
            "example": "A celebration of 10 years of Staff Picks.",
            "nullable": true,
            "type": "string"
          },
          "description_html": {
            "description": "A brief explanation of the video's content, formatted with HTML entities.",
            "example": "<p>A celebration of <b>10 years</b> of Staff Picks.</p>",
            "type": "string",
            "x-mill-non-default": true
          },
          "description_rich": {
            "description": "A JSON representation of the description.",
            "example": "{\"ops\":[{\"insert\": \"Text\"}]}",
            "type": "string",
            "x-mill-non-default": true
          },
          "download": {
            "description": "The list of downloadable files for the video. This data requires a bearer token with the `private` scope.",
            "items": {
              "$ref": "#/components/schemas/video-file"
            },
            "type": "array"
          },
          "duration": {
            "description": "The video's duration in seconds. A value of `0` indicates the duration hasn't been calculated yet.",
            "example": 81,
            "type": "number"
          },
          "edit_session": {
            "allOf": [
              {
                "$ref": "#/components/schemas/editing-session"
              }
            ],
            "description": "Information about the video's Vimeo Create editing session. This data requires a bearer token with the `private` scope."
          },
          "embed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/embed-settings"
              }
            ],
            "description": "Information about embedding the video."
          },
          "files": {
            "description": "The list of files for the video. This data requires a bearer token with the `private` scope.",
            "items": {
              "$ref": "#/components/schemas/video-file"
            },
            "type": "array"
          },
          "files_size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video-versions-size"
              }
            ],
            "description": "The total combined file size for all versions of the video, and the file size type.",
            "x-mill-non-default": true
          },
          "has_audio": {
            "description": "Whether the video has audio.",
            "type": "boolean"
          },
          "has_audio_tracks": {
            "description": "Whether the video has alternate audio tracks.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "has_chapters": {
            "description": "Whether the video has chapters.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "has_interactive": {
            "description": "Whether the video has interactive capability.",
            "example": false,
            "type": "boolean"
          },
          "has_text_tracks": {
            "description": "Whether the video has text tracks.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "height": {
            "description": "The video's height in pixels.",
            "example": 1080,
            "type": "number"
          },
          "is_copyright_restricted": {
            "description": "Whether the video is privacy restricted due to a copyright infringement. This data requires a bearer token with the `private` scope.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "is_free": {
            "description": "Whether the video is a free Vimeo Stock video.",
            "example": true,
            "type": "boolean"
          },
          "is_playable": {
            "description": "Whether the video is playable.",
            "type": "boolean"
          },
          "language": {
            "description": "The video's primary language.",
            "example": "en-US",
            "nullable": true,
            "type": "string"
          },
          "last_user_action_event_date": {
            "description": "The time in ISO 8601 format when the user last modified the video.",
            "example": "2018-03-21T23:08:22+00:00",
            "nullable": true,
            "type": "string"
          },
          "license": {
            "description": "The [Creative Commons](http://creativecommons.org/licenses/) license that the video is given under.\n\nOption descriptions:\n * `by` - The video is given under the Attribution license.\n * `by-nc` - The video is given under the Attribution Non-Commercial license.\n * `by-nc-nd` - The video is given under the Attribution Non-Commercial No Derivatives license.\n * `by-nc-sa` - The video is given under the Attribution Non-Commercial Share Alike license.\n * `by-nd` - The video is given under the Attribution No Derivatives license.\n * `by-sa` - The video is given under the Attribution Share Alike license.\n * `cc0` - The video is given under the Public Domain Dedication license.\n",
            "enum": [
              "by",
              "by-nc",
              "by-nc-nd",
              "by-nc-sa",
              "by-nd",
              "by-sa",
              "cc0"
            ],
            "example": "by",
            "type": "string"
          },
          "link": {
            "description": "The link to the video.",
            "example": "https://vimeo.com/258684937",
            "type": "string"
          },
          "manage_link": {
            "description": "The link to the video management page. This data requires a bearer token with the `private` scope.",
            "example": "/manage/videos/258684937",
            "type": "string"
          },
          "metadata": {
            "description": "The video's metadata.",
            "properties": {
              "ai_content": {
                "description": "Information about the video's AI content.",
                "properties": {
                  "audio": {
                    "description": "Whether the video contains AI-generated audio.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-non-default": true
                  },
                  "audio_auto": {
                    "description": "Whether the video contains AI-generated audio that is marked automatically.",
                    "example": true,
                    "type": "boolean",
                    "x-mill-non-default": true
                  },
                  "visual": {
                    "description": "Whether the video contains AI-generated visuals.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-non-default": true
                  },
                  "visual_auto": {
                    "description": "Whether the video contains AI-generated visuals that are marked automatically.",
                    "example": false,
                    "type": "boolean",
                    "x-mill-non-default": true
                  }
                },
                "type": "object",
                "x-mill-non-default": true
              },
              "can_be_replaced": {
                "description": "Whether the video can be replaced.",
                "example": true,
                "type": "boolean",
                "x-mill-non-default": true
              },
              "connections": {
                "description": "A list of resource URIs related to the video.",
                "properties": {
                  "ancestor_path": {
                    "description": "Information about the video's ancestry, ordered from the direct parent folder to higher-level ancestors.",
                    "items": {
                      "$ref": "#/components/schemas/ancestor-path"
                    },
                    "type": "array",
                    "x-mill-non-default": true
                  },
                  "available_channels": {
                    "description": "Information about the channels to which the video can be added. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of channels on this connection. This data requires a bearer token with the `private` scope.",
                        "example": 14,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.",
                        "example": "/videos/258684937/videos/available_channels",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "comments": {
                    "description": "Information about the comments on the video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of comments on this connection.",
                        "example": 14,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/comments",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "credits": {
                    "description": "Information about the users credited in the video.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection.",
                        "example": 4,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/credits",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "likes": {
                    "description": "Information about the users who have liked the video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of likes on this connection.",
                        "example": 230,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/likes",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "ondemand": {
                    "description": "Information about the video's On Demand data.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "resource_key": {
                        "description": "The On Demand connection resource key.",
                        "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/pages/61326",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "pictures": {
                    "description": "Information about the video's thumbnails.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "Total number of thumbnails on this connection.",
                        "example": 1,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/pictures",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "recommendations": {
                    "description": "Information about the recommendations for the video.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "resource_signature": {
                        "description": "The signature for the recommendations resource.",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/recommendations",
                        "type": "string"
                      }
                    },
                    "required": [
                      "resource_signature"
                    ],
                    "type": "object"
                  },
                  "related": {
                    "description": "Information about the video's related content.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937?offset=10",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "resource_creator_team_user": {
                    "description": "Information about the team user who uploaded the video. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "uri": {
                        "description": "The URI for the team user who uploaded the video. This data requires a bearer token with the `private` scope.",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "season": {
                    "description": "Information about the video's season.",
                    "properties": {
                      "name": {
                        "description": "The name of the season.",
                        "example": "Season 1",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/pages/61326/season/12345",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "team_permissions": {
                    "description": "Information about the video's team permissions list. This data requires a bearer token with the `private` scope.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      }
                    },
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "texttracks": {
                    "description": "Information about the video's text tracks.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of text tracks on this connection.",
                        "example": 2,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/texttracks",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "trailer": {
                    "description": "Information about the video's Vimeo On Demand trailer.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "resource_key": {
                        "description": "The trailer connection resource key.",
                        "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/ondemand/pages/61326/videos/12345",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "users_with_access": {
                    "description": "Information about the user privacy of the video, if the video privacy setting is `users`.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of users on this connection.",
                        "example": 8,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/privacy/users",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "versions": {
                    "description": "Information about the video's versions.",
                    "properties": {
                      "current_uri": {
                        "description": "The URI of the current version of the video.",
                        "example": "/videos/258684937/versions/12345",
                        "type": "string"
                      },
                      "has_interactive": {
                        "description": "Whether the video has interactive capability.",
                        "example": false,
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "origin_variable_frame_resolution": {
                        "description": "Whether the video has unified resolution. If the value of this field is `false`, the video requires transcoding.",
                        "example": false,
                        "type": "boolean"
                      },
                      "resource_key": {
                        "description": "The resource key string of the current version of the video.",
                        "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
                        "type": "string"
                      },
                      "total": {
                        "description": "The total number of versions on this connection.",
                        "example": 3,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937/versions",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "ancestor_path",
                  "comments",
                  "credits",
                  "likes",
                  "pictures",
                  "recommendations",
                  "related",
                  "resource_creator_team_user",
                  "texttracks"
                ],
                "type": "object"
              },
              "edit_session_vsid": {
                "description": "The video's Vimeo Create ID.",
                "example": 12345,
                "type": "number",
                "x-mill-non-default": true
              },
              "has_chapter_suggestions": {
                "description": "Whether the video has chapter suggestions.",
                "example": true,
                "type": "boolean",
                "x-mill-non-default": true
              },
              "has_email_capture": {
                "description": "Whether the video has the email capture feature.",
                "example": true,
                "type": "boolean",
                "x-mill-non-default": true
              },
              "interactions": {
                "description": "A list of resource URIs related to the video.",
                "properties": {
                  "album": {
                    "description": "Information about adding or removing a video from the showcase. This information is included only when the video is referenced by the URI of a showcase that's moderated by the user.",
                    "nullable": true,
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "ask_ai": {
                    "description": "Information about where and how to submit questions to the AI service for this video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "ask_ai_manager": {
                    "description": "Information about where and how to submit questions by managers to the AI service for this video.",
                    "properties": {
                      "disabled": {
                        "description": "Whether the summary method is disabled.",
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "The reason why the summary method is disabled.\n\nOption descriptions:\n * `transcript_ready_but_not_english` - The transcript is ready, but it isn't in English.\n * `transcript_status_does_not_exist` - The transcript doesn't exist.\n * `transcript_status_exceeds_maximum_duration` - The transcript duration is too long.\n * `transcript_status_failed` - The transcript job failed.\n * `transcript_status_in_progress` - The transcript job is in progress.\n * `transcript_status_language_not_supported` - The transcript's language isn't supported.\n * `transcript_status_no_speech` - There's no speech detected for the transcript.\n * `transcript_status_not_started` - The transcript job hasn't started.\n * `transcript_status_unknown` - The transcript job status is unknown.\n * `video_not_ready` - The video isn't ready.\n * `video_too_short` - The video is too short.\n * `video_transcript_too_short` - The video transcript is too short.\n",
                        "enum": [
                          "transcript_ready_but_not_english",
                          "transcript_status_does_not_exist",
                          "transcript_status_exceeds_maximum_duration",
                          "transcript_status_failed",
                          "transcript_status_in_progress",
                          "transcript_status_language_not_supported",
                          "transcript_status_no_speech",
                          "transcript_status_not_started",
                          "transcript_status_unknown",
                          "video_not_ready",
                          "video_too_short",
                          "video_transcript_too_short"
                        ],
                        "example": "transcript_ready_but_not_english",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "disabled",
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "ask_ai_viewer": {
                    "description": "Information about where and how to submit questions by viewers to the AI service for this video.",
                    "properties": {
                      "disabled": {
                        "description": "Whether Ask AI is disabled.",
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "The reason why Ask AI is disabled.\n\nOption descriptions:\n * `transcript_ready_but_not_english` - The transcript is ready, but isn't in English.\n * `transcript_status_does_not_exist` - The transcript doesn't exist.\n * `transcript_status_exceeds_maximum_duration` - The transcript duration is too long.\n * `transcript_status_failed` - The transcript job failed.\n * `transcript_status_in_progress` - The transcript job is in progress.\n * `transcript_status_language_not_supported` - The transcript's language isn't supported.\n * `transcript_status_no_speech` - There's no speech detected for the transcript.\n * `transcript_status_not_started` - The transcript job hasn't started.\n * `transcript_status_unknown` - The transcript job status is unknown.\n * `video_not_ready` - The video isn't ready.\n * `video_too_short` - The video is too short.\n * `video_transcript_too_short` - The video transcript is too short.\n",
                        "enum": [
                          "transcript_ready_but_not_english",
                          "transcript_status_does_not_exist",
                          "transcript_status_exceeds_maximum_duration",
                          "transcript_status_failed",
                          "transcript_status_in_progress",
                          "transcript_status_language_not_supported",
                          "transcript_status_no_speech",
                          "transcript_status_not_started",
                          "transcript_status_unknown",
                          "video_not_ready",
                          "video_too_short",
                          "video_transcript_too_short"
                        ],
                        "example": "transcript_ready_but_not_english",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "disabled",
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "buy": {
                    "description": "The Buy interaction for the On Demand video.",
                    "nullable": true,
                    "properties": {
                      "currency": {
                        "description": "The currency code for the user's region.",
                        "example": "USD",
                        "nullable": true,
                        "type": "string"
                      },
                      "display_price": {
                        "description": "The formatted display price for buying the On Demand video.",
                        "example": "5.99",
                        "nullable": true,
                        "type": "string"
                      },
                      "download": {
                        "description": "The user's download access to the On Demand video.\n\nOption descriptions:\n * `available` - The video is available for download.\n * `purchased` - The user has purchased the video.\n * `restricted` - The user isn't permitted to download the video.\n * `unavailable` - The video isn't available for download.\n",
                        "enum": [
                          "available",
                          "purchased",
                          "restricted",
                          "unavailable"
                        ],
                        "example": "available",
                        "type": "string"
                      },
                      "drm": {
                        "description": "Whether the On Demand video has DRM.",
                        "example": true,
                        "type": "boolean"
                      },
                      "link": {
                        "description": "The URL to buy the On Demand video on Vimeo.",
                        "example": "https://vimeo.com/ondemand/darbyforever",
                        "nullable": true,
                        "type": "string"
                      },
                      "price": {
                        "description": "The price to buy the On Demand video.",
                        "example": 5.99,
                        "nullable": true,
                        "type": "number"
                      },
                      "purchase_time": {
                        "description": "The time in ISO 8601 format when the On Demand video was purchased.",
                        "example": "2018-03-05T21:04:47+00:00",
                        "nullable": true,
                        "type": "string"
                      },
                      "stream": {
                        "description": "The user's streaming access to the On Demand video.\n\nOption descriptions:\n * `available` - The video is available for streaming.\n * `purchased` - The user has purchased the video.\n * `restricted` - The user isn't permitted to stream the video.\n * `unavailable` - The video isn't available for streaming\n",
                        "enum": [
                          "available",
                          "purchased",
                          "restricted",
                          "unavailable"
                        ],
                        "example": "available",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The product URI to purchase the On Demand video.",
                        "example": "/ondemand/pages/61326/products/12345",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "currency",
                      "display_price",
                      "download",
                      "drm",
                      "link",
                      "price",
                      "purchase_time",
                      "stream",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "can_comment": {
                    "description": "Whether the current user can comment on the video on the video management page.",
                    "type": "boolean",
                    "x-mill-non-default": true
                  },
                  "can_request_team_role_upgrade": {
                    "description": "Information about whether the user can request a team upgrade from the Viewer role.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "properties": {
                        "description": "An object of suggested fields to be used for this interaction.",
                        "properties": {
                          "folder_uri": {
                            "description": "An object containing data on the value of **folder_uri** and whether it's required for the interaction.",
                            "properties": {
                              "required": {
                                "description": "Whether the URI of the folder must be sent to achieve the desired action.",
                                "type": "boolean"
                              },
                              "value": {
                                "description": "The URI of the folder to which the team member should have access.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "required",
                              "value"
                            ],
                            "type": "object"
                          },
                          "status": {
                            "description": "An object containing data on the value of **status** and whether it's required for the interaction.",
                            "properties": {
                              "required": {
                                "description": "Whether the status of the role upgrade request must be sent to achieve the desired action.",
                                "type": "boolean"
                              },
                              "value": {
                                "description": "The status of the role upgrade request to which the team member should have access.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "required",
                              "value"
                            ],
                            "type": "object"
                          },
                          "upgrade_to_role": {
                            "description": "An object containing data on the value of **upgrade_to_role** and whether it's required for the interaction.",
                            "properties": {
                              "required": {
                                "description": "Whether the upgrade role must be sent to achieve the desired action.",
                                "type": "boolean"
                              },
                              "value": {
                                "description": "The value of the team role to which the user should be upgraded.",
                                "type": "number"
                              }
                            },
                            "required": [
                              "required",
                              "value"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "folder_uri",
                          "status",
                          "upgrade_to_role"
                        ],
                        "type": "object"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "properties",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "can_update_privacy_to_public": {
                    "description": "Whether a user can update the video privacy to public.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "channel": {
                    "description": "Information about removing a video from the channel. This information is included only when the video is referenced by the URI of a channel that's moderated by the user.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "create_editor": {
                    "description": "Information about where and how to edit a video using the Vimeo Create editor.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "delete": {
                    "description": "Information about where and how to delete a video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit": {
                    "description": "Information about where and how to edit a video.",
                    "properties": {
                      "blocked_fields": {
                        "description": "An array of video fields that a user can't interact with.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "blocked_fields",
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "edit_privacy": {
                    "description": "Information about editing the privacy of the video.",
                    "properties": {
                      "content_rating": {
                        "description": "A list of valid content rating flags for the video.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "properties": {
                        "description": "An array of suggested fields to be used for this interaction.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "description": "The name of the property to be sent.",
                              "type": "string"
                            },
                            "options": {
                              "description": "An array of the field's selectable options.",
                              "items": {
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "required": {
                              "description": "Whether the field must be sent to achieve the desired action.",
                              "type": "boolean"
                            }
                          },
                          "required": [
                            "name",
                            "options",
                            "required"
                          ]
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content_rating",
                      "options",
                      "properties",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "flag_clip": {
                    "description": "Whether the current user can report the video.",
                    "type": "boolean"
                  },
                  "has_restricted_privacy_options": {
                    "description": "Information about whether the video has restricted privacy options.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "highlights": {
                    "description": "Information about where and how to create a highlight for the video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "interact": {
                    "description": "Whether the user can interact with the video.",
                    "type": "boolean"
                  },
                  "invite": {
                    "description": "Information about where and how to get a list of team members\nor groups who were explicitly invited to a video, and where and how to invite a team member to a video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "legal_hold": {
                    "description": "The associated legal hold object.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "like": {
                    "description": "Information about whether the user has liked this video.",
                    "properties": {
                      "added": {
                        "description": "Whether the user has liked the video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the user liked the video.",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "show_count": {
                        "description": "Whether the user can access the video's number of likes.",
                        "type": "boolean"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "options",
                      "show_count",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "lms_export": {
                    "description": "Information about whether the video owner has LMS export enabled.",
                    "type": "object"
                  },
                  "rent": {
                    "description": "The Rent interaction for the On Demand video.",
                    "nullable": true,
                    "properties": {
                      "currency": {
                        "description": "The currency code for the user's region.",
                        "example": "USD",
                        "nullable": true,
                        "type": "string"
                      },
                      "display_price": {
                        "description": "The formatted display price for renting the On Demand video.",
                        "example": "5.99",
                        "nullable": true,
                        "type": "string"
                      },
                      "drm": {
                        "description": "Whether the On Demand video has DRM.",
                        "example": true,
                        "type": "boolean"
                      },
                      "expires_time": {
                        "description": "The time in ISO 8601 format when the rental period for the On Demand video expires.",
                        "example": "2018-03-05T21:04:47+00:00",
                        "nullable": true,
                        "type": "string"
                      },
                      "link": {
                        "description": "The URL to rent the On Demand video on Vimeo.",
                        "example": "https://vimeo.com/ondemand/darbyforever",
                        "nullable": true,
                        "type": "string"
                      },
                      "price": {
                        "description": "The price to buy the On Demand video.",
                        "example": 5.99,
                        "nullable": true,
                        "type": "number"
                      },
                      "purchase_time": {
                        "description": "The time in ISO 8601 format when the On Demand video was rented.",
                        "example": "2018-09-16T09:02:40+00:00",
                        "nullable": true,
                        "type": "string"
                      },
                      "stream": {
                        "description": "The user's streaming access to the On Demand video.\n\nOption descriptions:\n * `available` - The video is available for streaming.\n * `purchased` - The user has purchased the video.\n * `restricted` - The user isn't permitted to stream the video.\n * `unavailable` - The video isn't available for streaming.\n",
                        "enum": [
                          "available",
                          "purchased",
                          "restricted",
                          "unavailable"
                        ],
                        "example": "available",
                        "type": "string"
                      },
                      "uri": {
                        "description": "The product URI to rent the On Demand video.",
                        "example": "/ondemand/pages/61326/products/12345",
                        "nullable": true,
                        "type": "string"
                      }
                    },
                    "required": [
                      "currency",
                      "display_price",
                      "drm",
                      "expires_time",
                      "link",
                      "price",
                      "purchase_time",
                      "stream",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "report": {
                    "description": "Information about where and how to report a video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "A list of valid reasons for reporting a video.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "set_content_rating": {
                    "description": "Information about setting a content rating for the video.",
                    "properties": {
                      "content_rating": {
                        "description": "A list of valid content rating flags for the video.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "content_rating",
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "subscribe": {
                    "description": "Subscription information for an On Demand video.",
                    "nullable": true,
                    "properties": {
                      "drm": {
                        "description": "Whether the On Demand video has DRM.",
                        "example": true,
                        "type": "boolean"
                      },
                      "expires_time": {
                        "description": "The time in ISO 8601 format when the subscription expires.",
                        "example": "2018-03-05T21:04:47+00:00",
                        "type": "string"
                      },
                      "purchase_time": {
                        "description": "The time in ISO 8601 format when the subscription was purchased.",
                        "example": "2018-03-02T21:04:47+00:00",
                        "type": "string"
                      },
                      "stream": {
                        "description": "The stream type.",
                        "example": "purchased",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "summary": {
                    "description": "Information about whether the current user can create or get a summary for the video.",
                    "properties": {
                      "disabled": {
                        "description": "Whether the summary method is disabled.",
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "The reason why the summary method is disabled.\n\nOption descriptions:\n * `transcript_ready_but_not_english` - The transcript is ready, but isn't in English.\n * `transcript_status_does_not_exist` - The transcript doesn't exist.\n * `transcript_status_exceeds_maximum_duration` - The transcript duration is too long.\n * `transcript_status_failed` - The transcript job failed.\n * `transcript_status_in_progress` - The transcript job is in progress.\n * `transcript_status_language_not_supported` - The transcript's language isn't supported.\n * `transcript_status_no_speech` - There's no speech detected for the transcript.\n * `transcript_status_not_started` - The transcript job hasn't started.\n * `transcript_status_unknown` - The transcript job status is unknown.\n * `video_not_ready` - The video isn't ready.\n * `video_too_short` - The video is too short.\n * `video_transcript_too_short` - The video transcript is too short.\n",
                        "enum": [
                          "transcript_ready_but_not_english",
                          "transcript_status_does_not_exist",
                          "transcript_status_exceeds_maximum_duration",
                          "transcript_status_failed",
                          "transcript_status_in_progress",
                          "transcript_status_language_not_supported",
                          "transcript_status_no_speech",
                          "transcript_status_not_started",
                          "transcript_status_unknown",
                          "video_not_ready",
                          "video_too_short",
                          "video_transcript_too_short"
                        ],
                        "example": "transcript_ready_but_not_english",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "disabled",
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "team_mentions": {
                    "description": "Information about whether a user can mention the team members and commented users associated with a video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array",
                        "x-mill-non-default": true
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string",
                        "x-mill-non-default": true
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "text_translations": {
                    "description": "Information about where and how to create a text translation for the video.",
                    "properties": {
                      "disabled": {
                        "description": "Whether the translation method is disabled.",
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "The reason why the translation method is disabled.\n\nOption descriptions:\n * `owner_account_blocked` - The owner account is blocked due to billing issues.\n * `owner_payment_disabled` - The owner account can't use the payments service.\n * `transcript_status_does_not_exist` - The video transcript doesn't exist.\n",
                        "enum": [
                          "owner_account_blocked",
                          "owner_payment_disabled",
                          "transcript_status_does_not_exist"
                        ],
                        "example": "owner_account_blocked",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "disabled",
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "transcript_video_editor": {
                    "description": "Information about where and how to edit a video using the Transcription-based Video Editor editor.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "translations": {
                    "description": "Information about where and how to create a translation for the video.",
                    "properties": {
                      "disabled": {
                        "description": "Whether the translation method is disabled.",
                        "type": "boolean"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "reason": {
                        "description": "The reason why the translation method is disabled.\n\nOption descriptions:\n * `language_not_supported` - The video language isn't supported.\n * `owner_account_blocked` - The owner account is blocked due to billing issues.\n * `video_too_long` - The video is too long.\n",
                        "enum": [
                          "language_not_supported",
                          "owner_account_blocked",
                          "video_too_long"
                        ],
                        "example": "language_not_supported",
                        "nullable": true,
                        "type": "string"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "disabled",
                      "options",
                      "reason",
                      "uri"
                    ],
                    "type": "object",
                    "x-mill-non-default": true
                  },
                  "trim": {
                    "description": "Information about where and how to trim the video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "validate": {
                    "description": "Information about where and how to validate a video field.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "view_privacy": {
                    "description": "Information about whether a user has permissions to view the privacy of the video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "view_team_members": {
                    "description": "Information about whether a user can view the team members associated with a video.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "watched": {
                    "description": "Information about removing this video from the user's list of watched videos.",
                    "properties": {
                      "added": {
                        "description": "Whether the user has watched the video.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the user watched the video.",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  },
                  "watchlater": {
                    "description": "Information about whether this video appears on the user's Watch Later list.",
                    "properties": {
                      "added": {
                        "description": "Whether the user has added the video to their Watch Later list.",
                        "example": true,
                        "type": "boolean"
                      },
                      "added_time": {
                        "description": "The time in ISO 8601 format when the user added the video to their Watch Later list.",
                        "type": "string"
                      },
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "added",
                      "added_time",
                      "options",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "album",
                  "ask_ai",
                  "ask_ai_manager",
                  "ask_ai_viewer",
                  "buy",
                  "can_request_team_role_upgrade",
                  "can_update_privacy_to_public",
                  "channel",
                  "create_editor",
                  "delete",
                  "edit",
                  "edit_privacy",
                  "has_restricted_privacy_options",
                  "highlights",
                  "invite",
                  "legal_hold",
                  "like",
                  "rent",
                  "report",
                  "set_content_rating",
                  "summary",
                  "team_mentions",
                  "text_translations",
                  "transcript_video_editor",
                  "translations",
                  "trim",
                  "validate",
                  "view_privacy",
                  "view_team_members",
                  "watched",
                  "watchlater"
                ],
                "type": "object"
              },
              "is_screen_record": {
                "description": "Whether the video is a screen recording.",
                "example": true,
                "type": "boolean"
              },
              "is_vimeo_create": {
                "description": "Whether the video is a Vimeo Create video.",
                "example": true,
                "type": "boolean"
              },
              "is_zoom_upload": {
                "description": "Whether the video is a Zoom upload.",
                "example": true,
                "type": "boolean",
                "x-mill-non-default": true
              }
            },
            "required": [
              "connections",
              "has_chapter_suggestions",
              "interactions",
              "is_screen_record",
              "is_vimeo_create",
              "is_zoom_upload"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the video metadata was last modified.",
            "example": "2018-09-16T09:02:40+00:00",
            "type": "string"
          },
          "name": {
            "description": "The video's title.",
            "example": "Celebrating 10 Years of Staff Picks",
            "type": "string"
          },
          "origin_variable_frame_resolution": {
            "description": "Whether the video has unified resolution. If the value of this field is `false`, the video requires transcoding.",
            "example": false,
            "type": "boolean"
          },
          "page": {
            "allOf": [
              {
                "$ref": "#/components/schemas/video-page-settings"
              }
            ],
            "description": "Information about the video's page settings. This data requires a bearer token with the `private` scope.",
            "x-mill-non-default": true
          },
          "parent_folder": {
            "allOf": [
              {
                "$ref": "#/components/schemas/project"
              }
            ],
            "description": "Information about the folder that contains the video.",
            "nullable": true
          },
          "password": {
            "description": "The privacy-enabled password to watch the video. Only the video's owner and team members with permission can access the video's password. This data requires a bearer token with the `private` scope.",
            "example": "hunter1",
            "type": "string"
          },
          "pictures": {
            "allOf": [
              {
                "$ref": "#/components/schemas/picture"
              }
            ],
            "description": "The video's active picture."
          },
          "play": {
            "allOf": [
              {
                "$ref": "#/components/schemas/play"
              }
            ],
            "description": "The `Play` representation."
          },
          "player_embed_url": {
            "description": "The video's player embed URL.",
            "example": "https://player.vimeo.com/video/258684937?h=c893f64dd6",
            "type": "string"
          },
          "privacy": {
            "description": "The video's privacy setting.",
            "properties": {
              "add": {
                "description": "Whether the video can be added to collections.",
                "example": true,
                "type": "boolean"
              },
              "allow_share_link": {
                "description": "Whether the share link is usable.",
                "type": "boolean",
                "x-mill-non-default": true
              },
              "comments": {
                "description": "The video's comment permission setting.\n\nOption descriptions:\n * `anybody` - Anyone can comment on the video.\n * `contacts` - Only contacts can comment on the video.\n * `nobody` - No one can comment on the video.\n",
                "enum": [
                  "anybody",
                  "contacts",
                  "nobody"
                ],
                "example": "anybody",
                "type": "string"
              },
              "download": {
                "description": "Whether the video can be downloaded.",
                "example": true,
                "type": "boolean"
              },
              "embed": {
                "description": "The video's embed permission setting.\n\nOption descriptions:\n * `private` - The video is private.\n * `public` - Anyone can embed the video.\n * `whitelist` - The video can be embedded on specific domains.\n",
                "enum": [
                  "private",
                  "public",
                  "whitelist"
                ],
                "example": "private",
                "type": "string"
              },
              "view": {
                "description": "The general privacy setting of the video.\n\nOption descriptions:\n * `anybody` - Anyone can access the video. This privacy setting appears as `Public` on the Vimeo front end.\n * `contacts` - Only contacts can access the video. _This field is deprecated._\n * `disable` - The video is hidden from Vimeo. This privacy setting appears as `Hide from Vimeo` on the Vimeo front end.\n * `nobody` - No one besides the owner can access the video. This privacy setting appears as `Private` on the Vimeo front end.\n * `password` - Anyone with the video's password can access the video.\n * `ptv` - The Vimeo On Demand video is accessible and searchable from Vimeo. _This field is deprecated._\n * `ptvhide` - The Vimeo On Demand video is hidden from Vimeo. _This field is deprecated._\n * `stock` - The stock footage is accessible and searchable from Vimeo. _This field is deprecated._\n * `stock_purchased` - The purchased stock footage is accessible and searchable from Vimeo. _This field is deprecated._\n * `unlisted` - The video is accessible but not searchable from Vimeo.\n * `users` - Only Vimeo members can access the video. _This field is deprecated._\n",
                "enum": [
                  "anybody",
                  "contacts",
                  "disable",
                  "nobody",
                  "password",
                  "ptv",
                  "ptvhide",
                  "stock",
                  "stock_purchased",
                  "unlisted",
                  "users"
                ],
                "example": "anybody",
                "type": "string"
              }
            },
            "required": [
              "add",
              "allow_share_link",
              "comments",
              "download",
              "embed",
              "view"
            ],
            "type": "object"
          },
          "rating_mod_locked": {
            "description": "Whether the video's content rating is locked by a moderator.",
            "type": "boolean"
          },
          "release_time": {
            "description": "The time in ISO 8601 format when the video was released.",
            "example": "2018-03-05T21:04:47+00:00",
            "type": "string"
          },
          "resource_key": {
            "description": "The resource key string of the video.",
            "example": "bac1033deba2310ebba2caec33c23e4beea67aba",
            "type": "string"
          },
          "review_status": {
            "description": "The review status of the video.\n\nOption descriptions:\n * `approved` - The video review was approved.\n * `in_progress` - The video review is in progress.\n * `needs_review` - The video needs to be reviewed.\n",
            "enum": [
              "approved",
              "in_progress",
              "needs_review"
            ],
            "example": "approved",
            "type": "string",
            "x-mill-non-default": true
          },
          "show_review_page": {
            "description": "Whether to show the button for reviews on single video view recipient pages. This data requires a bearer token with the `private` scope.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "show_svv_footer_banner": {
            "description": "Whether to show the single video view footer banner on recipient pages. This data requires a bearer token with the `private` scope.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "show_svv_timecoded_comments": {
            "description": "Whether to enable timecoded comments on the single video view recipient page. This data requires a bearer token with the `private` scope.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "spatial": {
            "description": "The video's 360 spatial data.",
            "properties": {
              "director_timeline": {
                "description": "The video's 360 director timeline.",
                "items": {
                  "type": "object",
                  "properties": {
                    "pitch": {
                      "description": "The timeline pitch value, ranging from a minimum of `-90` to a maximum of `90`.",
                      "example": 70,
                      "type": "number"
                    },
                    "roll": {
                      "description": "The timeline roll value.",
                      "example": 0,
                      "type": "number"
                    },
                    "time_code": {
                      "description": "The timeline time code.",
                      "example": 300,
                      "type": "number"
                    },
                    "yaw": {
                      "description": "The timeline yaw value, ranging from a minimum of `0` to a maximum of `360`.",
                      "example": 125,
                      "type": "number"
                    }
                  }
                },
                "type": "array"
              },
              "field_of_view": {
                "description": "The video's 360 field of view value, ranging from a mininum of `30` to a maximum of `90`. The default value is `50`.",
                "example": 50,
                "nullable": true,
                "type": "number"
              },
              "projection": {
                "description": "The video's 360 spatial projection.\n\nOption descriptions:\n * `cubical` - The spatial projection is cubical.\n * `cylindrical` - The spatial projection is cylindrical.\n * `dome` - The spatial projection is dome-shaped.\n * `equirectangular` - The spatial projection is equirectangular.\n * `pyramid` - The spatial projection is pyramid-shaped.\n",
                "enum": [
                  "cubical",
                  "cylindrical",
                  "dome",
                  "equirectangular",
                  "pyramid"
                ],
                "example": "cubical",
                "nullable": true,
                "type": "string"
              },
              "stereo_format": {
                "description": "The video's 360 stereo format.\n\nOption descriptions:\n * `left-right` - The stereo format is left-right.\n * `mono` - The audio is monaural.\n * `top-bottom` - The stereo format is top-bottom.\n",
                "enum": [
                  "left-right",
                  "mono",
                  "top-bottom"
                ],
                "example": "left-right",
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "stats": {
            "description": "A collection of analytics associated with the video.",
            "properties": {
              "plays": {
                "description": "The current total number of times that the video has been played.",
                "example": 20,
                "nullable": true,
                "type": "number"
              }
            },
            "required": [
              "plays"
            ],
            "type": "object"
          },
          "status": {
            "description": "The status code for the availability of the video.\n\nOption descriptions:\n * `available` - The video is available.\n * `failed` - There was an error in rendering the video.\n * `processing` - Rendering has started and is currently underway for the video.\n * `quota_exceeded` - The user's weekly upload quota is exceeded with this video.\n * `total_cap_exceeded` - The user's total storage limit is exceeded with this video.\n * `transcode_starting` - Transcoding is starting for the video.\n * `transcoding` - Transcoding has started and is currently underway for the video.\n * `transcoding_error` - There was an error in transcoding the video.\n * `unavailable` - The video is unavailable.\n * `uploading` - The video is being uploaded.\n * `uploading_error` - There was an error in uploading the video.\n",
            "enum": [
              "available",
              "failed",
              "processing",
              "quota_exceeded",
              "total_cap_exceeded",
              "transcode_starting",
              "transcoding",
              "transcoding_error",
              "unavailable",
              "uploading",
              "uploading_error"
            ],
            "example": "available",
            "type": "string"
          },
          "tags": {
            "description": "An array of all tags assigned to the video.",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "type": "array"
          },
          "transcode": {
            "description": "The transcode information of the video upload.",
            "nullable": true,
            "properties": {
              "status": {
                "description": "The video's availability status.\n\nOption descriptions:\n * `complete` - Transcoding is complete. The video is available.\n * `error` - There was a transcoding error. The video isn't available.\n * `in_progress` - Transcoding is currently underway. The video isn't available yet.\n",
                "enum": [
                  "complete",
                  "error",
                  "in_progress"
                ],
                "example": "complete",
                "type": "string"
              }
            },
            "type": "object"
          },
          "transcript": {
            "description": "The transcript information of the video. This data requires a bearer token with the `private` scope.",
            "properties": {
              "language": {
                "description": "The video transcript's language. This data requires a bearer token with the `private` scope.",
                "example": "en",
                "nullable": true,
                "type": "string"
              },
              "status": {
                "description": "The video transcript's availability status. This data requires a bearer token with the `private` scope.\n\nOption descriptions:\n * `blocked` - The transcription is blocked.\n * `completed` - Transcription is completed. The transcript is available.\n * `exceeds_maximum_duration` - The audio track is too long to be transcribed.\n * `failed` - There was a transcription error. The transcript isn't available.\n * `in_progress` - Transcription is currently underway. The transcript isn't available yet.\n * `language_not_supported` - We currently don't support transcribing audio for this video's language.\n * `no_speech` - Transcription was completed, but there were no words in the audio to transcribe.\n * `not_started` - The transcript job hasn't started.\n * `unknown` - There isn't a record of this video's transcription job.\n",
                "enum": [
                  "blocked",
                  "completed",
                  "exceeds_maximum_duration",
                  "failed",
                  "in_progress",
                  "language_not_supported",
                  "no_speech",
                  "not_started",
                  "unknown"
                ],
                "example": "blocked",
                "type": "string"
              }
            },
            "required": [
              "language"
            ],
            "type": "object",
            "x-mill-non-default": true
          },
          "type": {
            "description": "The type of the video.\n\nOption descriptions:\n * `live` - The video is or was an event.\n * `stock` - The video is a Vimeo Stock video.\n * `video` - The video is a standard Vimeo video.\n",
            "enum": [
              "live",
              "stock",
              "video"
            ],
            "example": "video",
            "type": "string"
          },
          "upload": {
            "description": "The video's upload information.",
            "nullable": true,
            "properties": {
              "approach": {
                "description": "The approach for uploading the video.\n\nOption descriptions:\n * `post` - The video upload uses the POST approach.\n * `pull` - The video upload uses the pull approach.\n * `tus` - The video upload uses the tus approach.\n",
                "enum": [
                  "post",
                  "pull",
                  "tus"
                ],
                "example": "post",
                "type": "string"
              },
              "form": {
                "description": "The HTML form for uploading a video through the POST approach.",
                "type": "string"
              },
              "gcs_uid": {
                "description": "The ID of the Google Cloud Storage upload.",
                "type": "string"
              },
              "link": {
                "description": "The link of the video to capture through the pull approach.",
                "type": "string"
              },
              "redirect_url": {
                "description": "The redirect URL for the upload app.",
                "type": "string"
              },
              "size": {
                "description": "The file size in bytes of the uploaded video.",
                "example": 60000,
                "type": "number"
              },
              "status": {
                "description": "The status code for the availability of the uploaded video.\n\nOption descriptions:\n * `complete` - The upload is complete.\n * `error` - The upload ended with an error.\n * `in_progress` - The upload is underway.\n",
                "enum": [
                  "complete",
                  "error",
                  "in_progress"
                ],
                "example": "complete",
                "type": "string"
              },
              "upload_link": {
                "description": "The link for sending video file data.",
                "type": "string"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "uploader": {
            "description": "The video's uploader.",
            "properties": {
              "link": {
                "description": "The profile link of the user who uploaded the video.",
                "type": "string",
                "x-mill-non-default": true
              },
              "name": {
                "description": "The display name of the user who uploaded the video.",
                "type": "string",
                "x-mill-non-default": true
              },
              "pictures": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/picture"
                  }
                ],
                "description": "The active portrait of the user who uploaded the video."
              }
            },
            "required": [
              "link",
              "name",
              "pictures"
            ],
            "type": "object"
          },
          "uri": {
            "description": "The video's canonical relative URI.",
            "example": "/videos/258684937",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The video's owner."
          },
          "uses_drm": {
            "description": "Whether the video uses digital rights management.",
            "type": "boolean",
            "x-mill-non-default": true
          },
          "version_transcode_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/version-transcode-status"
              }
            ],
            "description": "Detailed transcode status information for the current version of the video upload.",
            "x-mill-non-default": true
          },
          "vod": {
            "description": "The video's Vimeo On Demand information.",
            "properties": {
              "id": {
                "description": "The video's Vimeo On Demand ID.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "width": {
            "description": "The video's width in pixels.",
            "example": 1920,
            "type": "number"
          }
        },
        "required": [
          "app",
          "can_move_to_project",
          "categories",
          "content_rating",
          "content_rating_class",
          "context",
          "created_time",
          "custom_url",
          "description",
          "description_html",
          "duration",
          "embed",
          "files_size",
          "has_audio",
          "has_audio_tracks",
          "has_chapters",
          "has_text_tracks",
          "height",
          "is_copyright_restricted",
          "is_playable",
          "language",
          "license",
          "link",
          "metadata",
          "modified_time",
          "name",
          "pictures",
          "player_embed_url",
          "privacy",
          "rating_mod_locked",
          "release_time",
          "resource_key",
          "show_review_page",
          "show_svv_footer_banner",
          "show_svv_timecoded_comments",
          "stats",
          "status",
          "tags",
          "transcode",
          "transcript",
          "type",
          "upload",
          "uploader",
          "uri",
          "user",
          "uses_drm",
          "version_transcode_status",
          "width"
        ],
        "type": "object"
      },
      "video-file": {
        "title": "Video File",
        "properties": {
          "codec": {
            "description": "The codec of the video file.\n\nOption descriptions:\n * `AV1` - The codec is AV1.\n * `H264` - The codec is H264.\n * `HEVC` - The codec is HEVC.\n",
            "enum": [
              "AV1",
              "H264",
              "HEVC"
            ],
            "example": "AV1",
            "nullable": true,
            "type": "string"
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the video file was created.",
            "example": "2017-05-16T15:41:36+00:00",
            "type": "string"
          },
          "expires": {
            "description": "The time in ISO 8601 format when the video file expires.",
            "example": "2017-05-17T15:41:00+00:00",
            "type": "string"
          },
          "fps": {
            "description": "The frames per second of the video.",
            "example": 30,
            "type": "number"
          },
          "height": {
            "description": "The height of the video in pixels.",
            "example": 1080,
            "type": "number"
          },
          "link": {
            "description": "The direct link to the video file.",
            "example": "https://player.vimeo.com/play/965853365?s=258684937_1537148280_a749040a9205",
            "type": "string"
          },
          "log": {
            "properties": {
              "play": {
                "description": "The URL to record a Play logging event.",
                "example": "https://api.vimeo.com/videos/258684937/stats/play/ts/1537137531:d8a2bbf8617cf/887133875",
                "type": "string"
              }
            },
            "type": "object"
          },
          "md5": {
            "description": "The MD5 hash of the video file.",
            "example": "1bc29b36f623ba82aaf6724fd3b16718",
            "type": "string"
          },
          "public_name": {
            "description": "The public name of the video file.",
            "example": "HD 720p",
            "type": "string"
          },
          "quality": {
            "description": "The video quality as determined by height and width.\n\nOption descriptions:\n * `hd` - The video is in high definition.\n * `hls` - The video is suitable for HTTP live streaming.\n * `mobile` - The video is mobile quality.\n * `sd` - The video is in standard definition.\n * `source` - The video's source file.\n * `uhd` - The video resolution is 2K or higher.\n",
            "enum": [
              "hd",
              "hls",
              "mobile",
              "sd",
              "source",
              "uhd"
            ],
            "example": "hd",
            "type": "string"
          },
          "rendition": {
            "description": "The video rendition.\n\nOption descriptions:\n * `1080p` - The video has 1080p resolution.\n * `240p` - The video has 240p resolution.\n * `2k` - The video has 2K resolution.\n * `360p` - The video has 360p resolution.\n * `480p` - The video has 480p resolution.\n * `4k` - The video has 4K resolution.\n * `540p` - The video has 540p resolution.\n * `5k` - The video has 5K resolution.\n * `6k` - The video has 6K resolution.\n * `720p` - The video has 720p resolution.\n * `7k` - The video has 7K resolution.\n * `8k` - The video has 8K resolution.\n * `adaptive` - The video rendition is adaptive (for example, HLS or DASH).\n * `source` - The video is the source file.\n",
            "enum": [
              "1080p",
              "240p",
              "2k",
              "360p",
              "480p",
              "4k",
              "540p",
              "5k",
              "6k",
              "720p",
              "7k",
              "8k",
              "adaptive",
              "source"
            ],
            "example": "1080p",
            "type": "string"
          },
          "size": {
            "description": "The approximate size in bytes of the video file.",
            "example": 9932503,
            "type": "number"
          },
          "size_short": {
            "description": "The converted size of the video file rounded to two decimal places.",
            "example": "17.89MB",
            "type": "string"
          },
          "source_link": {
            "description": "The source link of the video file.",
            "example": "https://player.vimeo.com/source/965853365?s=258684937",
            "type": "string"
          },
          "type": {
            "description": "The type of video file.\n\nOption descriptions:\n * `source` - The video file is a source file.\n * `video/mp4` - The video file is in MP4 format.\n * `video/webm` - The video file is in WebM format.\n * `vp6/x-video` - The video file is in VP6 format.\n",
            "enum": [
              "source",
              "video/mp4",
              "video/webm",
              "vp6/x-video"
            ],
            "example": "source",
            "nullable": true,
            "type": "string"
          },
          "video_file_id": {
            "description": "The ID of the video file.",
            "example": "b9ec9728-aa28-4fcd-9cc8-02944798c712",
            "type": "string"
          },
          "width": {
            "description": "The width of the video in pixels.",
            "example": 1920,
            "type": "number"
          }
        },
        "required": [
          "codec",
          "created_time",
          "fps",
          "height",
          "link",
          "md5",
          "public_name",
          "quality",
          "rendition",
          "size",
          "size_short",
          "type",
          "width"
        ],
        "type": "object"
      },
      "video-page-settings": {
        "title": "Video Page Settings",
        "properties": {
          "ask_ai": {
            "description": "Whether to display the button for Vimeo AI on the video page.",
            "example": true,
            "type": "boolean"
          },
          "categories": {
            "description": "Whether to display video categories on the video page.",
            "example": true,
            "type": "boolean"
          },
          "chapters": {
            "description": "Whether to display the button for chapters on the video page.",
            "example": true,
            "type": "boolean"
          },
          "collections": {
            "description": "Whether to display collections on the video page.",
            "example": true,
            "type": "boolean"
          },
          "comments": {
            "description": "Whether to display comments on the video page.",
            "example": true,
            "type": "boolean"
          },
          "creative_commons": {
            "description": "Whether to display the video's Creative Commons license on the video page.",
            "example": true,
            "type": "boolean"
          },
          "credits": {
            "description": "Whether to display credits for the video on the video page.",
            "example": true,
            "type": "boolean"
          },
          "date_added": {
            "description": "Whether to display the date when the video was added on the video page.",
            "example": true,
            "type": "boolean"
          },
          "description": {
            "description": "Whether to display the video's description on the video page.",
            "example": true,
            "type": "boolean"
          },
          "download": {
            "description": "Whether to display the button for downloads on the video page.",
            "example": true,
            "type": "boolean"
          },
          "like": {
            "description": "Whether to display the button for likes on the video page.",
            "example": true,
            "type": "boolean"
          },
          "owner": {
            "description": "Whether to display the video owner's user name on the video page.",
            "example": false,
            "type": "boolean"
          },
          "player": {
            "description": "The contents of the player group.",
            "properties": {
              "airplay": {
                "description": "Whether AirPlay is enabled in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "audio_tracks": {
                "description": "Whether multiple audio tracks can appear in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "chromecast": {
                "description": "Whether the Chromecast button appears in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "closed_captions": {
                "description": "Whether closed captions are enabled in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "colors": {
                "description": "A collection of information about the colors in the video page player.",
                "properties": {
                  "color_four": {
                    "description": "The fourth player color, which controls the player background color.",
                    "example": "#00adef",
                    "type": "string"
                  },
                  "color_one": {
                    "description": "The first player color, which controls the color of the progress bar, buttons, and more.",
                    "example": "#00adef",
                    "type": "string"
                  },
                  "color_three": {
                    "description": "The third player color, which controls the color of text and icons.",
                    "example": "#000000",
                    "type": "string"
                  },
                  "color_two": {
                    "description": "The second player color, which controls the player accent color.",
                    "example": "#00adef",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "fullscreen": {
                "description": "Whether to display the button for fullscreen mode on the video page.",
                "example": true,
                "type": "boolean"
              },
              "logos": {
                "description": "A collection of information about the logo in the corner of the onsite player.",
                "properties": {
                  "custom": {
                    "description": "A collection of information relating to custom logos in the onsite player.",
                    "properties": {
                      "active": {
                        "description": "Whether the custom logo appears in the video page player.",
                        "example": true,
                        "type": "boolean"
                      },
                      "link": {
                        "description": "The URL that loads upon clicking the custom logo.",
                        "example": "http://example.com",
                        "nullable": true,
                        "type": "string"
                      },
                      "sticky": {
                        "description": "Whether the custom logo appears even when the player interface is hidden.",
                        "example": true,
                        "type": "boolean"
                      },
                      "url": {
                        "description": "The URL of the selected custom logo.",
                        "example": "http://example.com",
                        "nullable": true,
                        "type": "string"
                      },
                      "use_link": {
                        "description": "Whether the custom logo should use the URL link.",
                        "example": true,
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "vimeo": {
                    "description": "Whether the Vimeo logo appears in the onsite player.",
                    "example": true,
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "pip": {
                "description": "Whether picture-in-picture is enabled in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "play_button": {
                "description": "A representation of the play button's settings.",
                "properties": {
                  "position": {
                    "description": "The position of the play button within the video page player.\n\nOption descriptions:\n * `auto` - Use Vimeo's default positioning for the play button.\n * `bottom` - The play button is positioned at the bottom of the player, except when in tiny mode.\n * `center` - The play button is positioned in the center of the player.\n",
                    "enum": [
                      "auto",
                      "bottom",
                      "center"
                    ],
                    "example": "auto",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "playbar": {
                "description": "Whether to display the playbar on the video page.",
                "example": true,
                "type": "boolean"
              },
              "quality_selector": {
                "description": "Whether the quality selector appears in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "skipping_forward": {
                "description": "Whether to enable users to skip forward in the embeddable player.",
                "example": true,
                "type": "boolean"
              },
              "speed": {
                "description": "Whether to display speed options in the video page player.",
                "example": true,
                "type": "boolean"
              },
              "volume": {
                "description": "Whether to display the volume control on the video page.",
                "example": true,
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "portrait": {
            "description": "Whether to display the video owner's avatar on the video page.",
            "example": true,
            "type": "boolean"
          },
          "share": {
            "description": "Whether to display the button for shares on the video page.",
            "example": true,
            "type": "boolean"
          },
          "tags": {
            "description": "Whether to display tags for the video on the video page.",
            "example": true,
            "type": "boolean"
          },
          "title": {
            "description": "Whether to display the video title on the video page.",
            "example": true,
            "type": "boolean"
          },
          "transcript": {
            "description": "Whether to display the button for transcripts on the video page.",
            "example": true,
            "type": "boolean"
          },
          "uploader": {
            "description": "Whether to display the video's uploader on the video page.",
            "example": true,
            "type": "boolean"
          },
          "uri": {
            "description": "The URI of the page preset.",
            "example": "/users/258684937/page_presets/12345",
            "type": "string"
          },
          "views": {
            "description": "Whether to display the number of views that the video has received on the video page.",
            "example": true,
            "type": "boolean"
          },
          "watch_later": {
            "description": "Whether to display the button for watching later on the video page.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "ask_ai",
          "categories",
          "collections",
          "comments",
          "creative_commons",
          "credits",
          "date_added",
          "description",
          "download",
          "like",
          "owner",
          "portrait",
          "share",
          "tags",
          "uploader",
          "views",
          "watch_later"
        ],
        "type": "object"
      },
      "video-version": {
        "title": "Video Version",
        "properties": {
          "active": {
            "description": "Whether the video version is currently active.",
            "example": true,
            "type": "boolean"
          },
          "app": {
            "allOf": [
              {
                "$ref": "#/components/schemas/api-app"
              }
            ],
            "description": "The API app associated with the video version."
          },
          "audio_track_quota": {
            "description": "The quota parameters for the audio tracks available for this version.",
            "properties": {
              "free": {
                "description": "The number of audio tracks availible for this version.",
                "type": "number",
                "x-mill-non-default": true
              },
              "has_reached_quota": {
                "description": "Whether the current version has reached its maximum quota for audio tracks.",
                "type": "boolean",
                "x-mill-non-default": true
              },
              "max": {
                "description": "The maximum number of audio tracks that the user can upload per version based on their subscription tier.",
                "type": "number",
                "x-mill-non-default": true
              },
              "used": {
                "description": "The number of audio tracks used for this version.",
                "type": "number",
                "x-mill-non-default": true
              }
            },
            "required": [
              "free",
              "has_reached_quota",
              "max",
              "used"
            ],
            "type": "object",
            "x-mill-non-default": true
          },
          "can_restore_create": {
            "description": "Whether the version can be restored.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "create_storyboard_id": {
            "description": "The storyboard ID of the video version.",
            "example": "storyboard_123456_1000",
            "type": "string",
            "x-mill-non-default": true
          },
          "created_time": {
            "description": "The time in ISO 8601 format when the video version was created.",
            "example": "2018-03-05T21:04:47+00:00",
            "type": "string"
          },
          "description": {
            "description": "A description of the video version. This description can make use of the full unicode character set. This field appears in the response only when a corresponding value is present.",
            "example": "description with emoji",
            "type": "string",
            "x-mill-non-default": true
          },
          "download_config": {
            "description": "The download configuration associated with the version.",
            "type": "object",
            "x-mill-non-default": true
          },
          "duration": {
            "description": "The duration in seconds of the video version.",
            "example": 81,
            "nullable": true,
            "type": "number"
          },
          "edit_session": {
            "description": "Information about the video's Vimeo Create editing session. This data requires a bearer token with the `private` scope.",
            "properties": {
              "status": {
                "description": "The status of the video's edit session. This data requires a bearer token with the `private` scope.\n\nOption descriptions:\n * `done` - The video is finished processing.\n * `failed` - Video processing has failed.\n * `processing` - The video is still being processed.\n",
                "enum": [
                  "done",
                  "failed",
                  "processing"
                ],
                "example": "done",
                "type": "string"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "filename": {
            "description": "The file name of the video version.",
            "example": "rev2.mp4",
            "type": "string"
          },
          "filesize": {
            "description": "The size in byes of the video version file.",
            "example": 4025322521,
            "nullable": true,
            "type": "number"
          },
          "has_interactive": {
            "description": "Whether the video has interactive capability.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "metadata": {
            "description": "The video version's metadata.",
            "properties": {
              "connections": {
                "properties": {
                  "video": {
                    "description": "Data from the video associated with the version.",
                    "properties": {
                      "options": {
                        "description": "An array of HTTP methods permitted on this URI.",
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "total": {
                        "description": "The total number of videos on this connection.",
                        "example": 5,
                        "type": "number"
                      },
                      "uri": {
                        "description": "The API URI that resolves to the connection data.",
                        "example": "/videos/258684937",
                        "type": "string"
                      }
                    },
                    "required": [
                      "options",
                      "total",
                      "uri"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "video"
                ],
                "type": "object"
              }
            },
            "required": [
              "connections"
            ],
            "type": "object"
          },
          "modified_time": {
            "description": "The time in ISO 8601 format when the video version was last modified.",
            "example": "2018-09-16T09:02:40+00:00",
            "type": "string"
          },
          "origin_variable_frame_resolution": {
            "description": "Whether the video has unified resolution. If the value of this field is `false`, the video requires transcoding.",
            "example": false,
            "type": "boolean",
            "x-mill-non-default": true
          },
          "play": {
            "allOf": [
              {
                "$ref": "#/components/schemas/play"
              }
            ],
            "description": "The `Play` representation."
          },
          "transcode": {
            "description": "The version's transcode information.",
            "nullable": true,
            "properties": {
              "status": {
                "description": "The status code for the availability of the video version.\n\nOption descriptions:\n * `complete` - Transcoding is complete. The video version is available.\n * `error` - There was a transcoding error. The video version isn't available.\n * `in_progress` - Transcoding is in progress. The video version isn't available yet.\n",
                "enum": [
                  "complete",
                  "error",
                  "in_progress"
                ],
                "example": "complete",
                "type": "string"
              }
            },
            "type": "object"
          },
          "upload": {
            "description": "The version's upload information.",
            "nullable": true,
            "properties": {
              "approach": {
                "description": "The approach for uploading the video.\n\nOption descriptions:\n * `post` - The video upload uses the POST approach.\n * `pull` - The video upload uses the pull approach.\n * `tus` - The video upload uses the tus approach.\n",
                "enum": [
                  "post",
                  "pull",
                  "tus"
                ],
                "example": "post",
                "type": "string"
              },
              "form": {
                "description": "The HTML form for uploading a video through the POST approach.",
                "type": "string"
              },
              "gcs_uid": {
                "description": "The ID of the Google Cloud Storage upload.",
                "type": "string"
              },
              "link": {
                "description": "The link of the video to capture through the pull approach.",
                "type": "string"
              },
              "redirect_url": {
                "description": "The redirect URL for the upload app.",
                "type": "string"
              },
              "size": {
                "description": "The file size in bytes of the uploaded video.",
                "example": 60000,
                "type": "number"
              },
              "status": {
                "description": "The status code for the availability of the uploaded video.\n\nOption descriptions:\n * `complete` - The upload is complete.\n * `error` - The upload ended with an error.\n * `in_progress` - The upload is underway.\n",
                "enum": [
                  "complete",
                  "error",
                  "in_progress"
                ],
                "example": "complete",
                "type": "string"
              },
              "upload_link": {
                "description": "The link for sending video file data.",
                "type": "string"
              }
            },
            "required": [
              "status"
            ],
            "type": "object"
          },
          "upload_date": {
            "description": "The time in ISO 8601 format when the video version was uploaded.",
            "example": "2018-09-16T09:02:40+00:00",
            "nullable": true,
            "type": "string"
          },
          "uri": {
            "description": "The version's canonical relative URI.",
            "example": "/videos/258684937/versions/12345",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ],
            "description": "The owner of the video version.",
            "nullable": true
          }
        },
        "required": [
          "active",
          "app",
          "audio_track_quota",
          "can_restore_create",
          "created_time",
          "download_config",
          "duration",
          "edit_session",
          "filename",
          "filesize",
          "has_interactive",
          "metadata",
          "modified_time",
          "transcode",
          "upload",
          "upload_date",
          "uri",
          "user"
        ],
        "type": "object"
      },
      "video-versions-size": {
        "title": "Video Versions Size",
        "properties": {
          "file_size_type": {
            "description": "The status of the video and its corresponding file size type.\n\nOption descriptions:\n * `PROCESSING` - The video is still processing or transcoding, and its file size isn't available yet.\n * `QUOTA_EXEMPT_CLIP` - The video is exempt from the user's storage quota.\n * `QUOTA_EXEMPT_USER` - The user is on an unlimited plan, and the video doesn't count against their storage quota.\n * `STOCK` - The video is stock footage. Stock videos don't count against the user's storage quota.\n * `UPLOAD` - The video is a regular upload, and its file size counts against the user's storage quota.\n * `UPLOAD_FAILURE` - The video failed to upload, and its file size doesn't count against the user's storage quota.\n * `VIMEO_CREATE` - The video was created using the Vimeo Create app. Vimeo Create videos don't count against the user's storage quota.\n * `VIMEO_RECORD` - The video was recorded using the Vimeo Record app. Videos for some Vimeo Record API apps don't count against the user's storage quota.\n",
            "enum": [
              "PROCESSING",
              "QUOTA_EXEMPT_CLIP",
              "QUOTA_EXEMPT_USER",
              "STOCK",
              "UPLOAD",
              "UPLOAD_FAILURE",
              "VIMEO_CREATE",
              "VIMEO_RECORD"
            ],
            "example": "Upload",
            "type": "string"
          },
          "num_versions": {
            "description": "The number of versions for the video.",
            "example": 2,
            "type": "number"
          },
          "total_size": {
            "description": "The total combined file size for all versions of the video.",
            "example": 132414,
            "type": "number"
          }
        },
        "required": [
          "file_size_type",
          "num_versions",
          "total_size"
        ],
        "type": "object"
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "create",
        "delete",
        "edit",
        "email",
        "interact",
        "private",
        "promo_codes",
        "public",
        "purchase",
        "purchased",
        "scim",
        "stats",
        "upload",
        "video_files"
      ]
    }
  ]
}