import gleam/option.{type Option, None}
import gleam/json
import gleam/dynamic/decode

pub type TeamFull {
  TeamFull(
    ldap_dn: Option(String),
    privacy: Option(String),
    members_url: String,
    members_count: Int,
    parent: Option(NullableTeamSimple),
    created_at: String,
    name: String,
    slug: String,
    url: String,
    permission: String,
    repos_count: Int,
    organization: TeamOrganization,
    updated_at: String,
    node_id: String,
    repositories_url: String,
    id: Int,
    html_url: String,
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type ProjectsV2SingleSelectOption {
  ProjectsV2SingleSelectOption(
    color: Option(String),
    name: String,
    id: String,
    description: Option(String),
  )
}

pub type RepositoryWebhooks {
  RepositoryWebhooks(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    custom_properties: Option(Nil),
    forks_count: Int,
    fork: Bool,
    allow_update_branch: Option(Bool),
    git_url: String,
    archived: Bool,
    private: Bool,
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Bool,
    blobs_url: String,
    squash_merge_commit_message: Option(String),
    has_discussions: Option(Bool),
    teams_url: String,
    merge_commit_message: Option(String),
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    template_repository: Option(Nil),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    use_squash_pr_title_as_default: Option(Bool),
    forks: Int,
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    organization: Option(NullableSimpleUser),
    owner: SimpleUser,
    starred_at: Option(String),
    allow_merge_commit: Option(Bool),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    squash_merge_commit_title: Option(String),
    merge_commit_title: Option(String),
    updated_at: Option(String),
    watchers: Int,
    node_id: String,
    anonymous_access_enabled: Option(Bool),
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    subscribers_count: Option(Int),
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    network_count: Option(Int),
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type WebhookDeploymentProtectionRuleRequested {
  WebhookDeploymentProtectionRuleRequested(
    deployment: Option(Deployment),
    repository: Option(RepositoryWebhooks),
    deployment_callback_url: Option(String),
    organization: Option(OrganizationSimpleWebhooks),
    environment: Option(String),
    sender: Option(SimpleUser),
    action: Option(String),
    installation: Option(SimpleInstallation),
    event: Option(String),
    pull_requests: Option(List(PullRequest)),
  )
}

pub type EmptyObject {
  EmptyObject()
}

pub type Workflow {
  Workflow(
    path_: String,
    created_at: String,
    name: String,
    url: String,
    state: String,
    badge_url: String,
    updated_at: String,
    node_id: String,
    deleted_at: Option(String),
    id: Int,
    html_url: String,
  )
}

pub type RepositoryRule {
  RepositoryRule()
}

pub type PersonalAccessTokenRequest {
  PersonalAccessTokenRequest(
    token_id: Int,
    permissions_upgraded: Nil,
    token_expires_at: Option(String),
    permissions_added: Nil,
    repositories: Option(List(Nil)),
    created_at: String,
    token_name: String,
    token_last_used_at: Option(String),
    owner: SimpleUser,
    repository_selection: String,
    permissions_result: Nil,
    repository_count: Option(Int),
    id: Int,
    token_expired: Bool,
  )
}

pub type SecurityAndAnalysis {
  SecurityAndAnalysis(
    secret_scanning: Option(Nil),
    secret_scanning_non_provider_patterns: Option(Nil),
    secret_scanning_ai_detection: Option(Nil),
    dependabot_security_updates: Option(Nil),
    advanced_security: Option(Nil),
    secret_scanning_push_protection: Option(Nil),
  )
}

pub type WebhookRepositoryPrivatized {
  WebhookRepositoryPrivatized(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPersonalAccessTokenRequestDenied {
  WebhookPersonalAccessTokenRequestDenied(
    enterprise: Option(EnterpriseWebhooks),
    personal_access_token_request: PersonalAccessTokenRequest,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: SimpleInstallation,
  )
}

pub type TimelineCrossReferencedEvent {
  TimelineCrossReferencedEvent(
    created_at: String,
    actor: Option(SimpleUser),
    updated_at: String,
    event: String,
    source: Nil,
  )
}

pub type GitTag {
  GitTag(
    message: String,
    sha: String,
    url: String,
    node_id: String,
    tagger: Nil,
    tag: String,
    verification: Option(Verification),
    object: Nil,
  )
}

pub type ActionsBillingUsage {
  ActionsBillingUsage(
    total_paid_minutes_used: Int,
    total_minutes_used: Int,
    included_minutes: Int,
    minutes_used_breakdown: Nil,
  )
}

pub type WebhookPublic {
  WebhookPublic(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
  )
}

pub type OrgMembership {
  OrgMembership(
    organization_url: String,
    permissions: Option(Nil),
    user: NullableSimpleUser,
    url: String,
    state: String,
    organization: OrganizationSimple,
    role: String,
  )
}

pub type Key {
  Key(
    verified: Bool,
    created_at: String,
    url: String,
    read_only: Bool,
    title: String,
    id: Int,
    key: String,
  )
}

pub type CommitComparison {
  CommitComparison(
    total_commits: Int,
    base_commit: Commit,
    url: String,
    status: String,
    diff_url: String,
    ahead_by: Int,
    files: Option(List(DiffEntry)),
    patch_url: String,
    permalink_url: String,
    html_url: String,
    behind_by: Int,
    commits: List(Commit),
    merge_base_commit: Commit,
  )
}

pub type RenamedIssueEvent {
  RenamedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
    rename: Nil,
  )
}

pub type WebhookCodeScanningAlertReopened {
  WebhookCodeScanningAlertReopened(
    enterprise: Option(EnterpriseWebhooks),
    commit_oid: Option(String),
    repository: RepositoryWebhooks,
    ref: Option(String),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Option(Nil),
  )
}

pub type WebhookInstallationSuspend {
  WebhookInstallationSuspend(
    enterprise: Option(EnterpriseWebhooks),
    repositories: Option(WebhooksRepositories),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Installation,
  )
}

pub type WebhookPullRequestAutoMergeDisabled {
  WebhookPullRequestAutoMergeDisabled(
    enterprise: Option(EnterpriseWebhooks),
    reason: String,
    number: Int,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhooksProjectColumn {
  WebhooksProjectColumn(
    project_url: String,
    created_at: String,
    name: String,
    url: String,
    cards_url: String,
    updated_at: String,
    node_id: String,
    id: Int,
    after_id: Option(Int),
  )
}

pub type WebhookMilestoneClosed {
  WebhookMilestoneClosed(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    milestone: WebhooksMilestone,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookMembershipAdded {
  WebhookMembershipAdded(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    scope: String,
    sender: Option(Nil),
    action: String,
    installation: Option(SimpleInstallation),
    member: WebhooksUser,
    team: WebhooksTeam,
  )
}

pub type WebhookMembershipRemoved {
  WebhookMembershipRemoved(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    scope: String,
    sender: Option(Nil),
    action: String,
    installation: Option(SimpleInstallation),
    member: WebhooksUser,
    team: WebhooksTeam,
  )
}

pub type WebhooksRule {
  WebhooksRule(
    signature_requirement_enforcement_level: String,
    strict_required_status_checks_policy: Bool,
    linear_history_requirement_enforcement_level: String,
    authorized_actors_only: Bool,
    created_at: String,
    create_protected: Option(Bool),
    name: String,
    required_conversation_resolution_level: String,
    merge_queue_enforcement_level: String,
    repository_id: Int,
    ignore_approvals_from_contributors: Bool,
    admin_enforced: Bool,
    required_deployments_enforcement_level: String,
    allow_deletions_enforcement_level: String,
    lock_allows_fork_sync: Option(Bool),
    updated_at: String,
    pull_request_reviews_enforcement_level: String,
    required_status_checks: List(String),
    allow_force_pushes_enforcement_level: String,
    require_last_push_approval: Option(Bool),
    authorized_actor_names: List(String),
    dismiss_stale_reviews_on_push: Bool,
    id: Int,
    lock_branch_enforcement_level: String,
    require_code_owner_review: Bool,
    required_approving_review_count: Int,
    required_status_checks_enforcement_level: String,
    authorized_dismissal_actors_only: Bool,
  )
}

pub type WebhookProjectCardConverted {
  WebhookProjectCardConverted(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    project_card: WebhooksProjectCard,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDeploymentStatusCreated {
  WebhookDeploymentStatusCreated(
    enterprise: Option(EnterpriseWebhooks),
    deployment: Nil,
    repository: RepositoryWebhooks,
    workflow_run: Option(Nil),
    deployment_status: Nil,
    organization: Option(OrganizationSimpleWebhooks),
    check_run: Option(Nil),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow: Option(WebhooksWorkflow),
  )
}

pub type SimpleClassroomRepository {
  SimpleClassroomRepository(
    default_branch: String,
    private: Bool,
    node_id: String,
    id: Int,
    full_name: String,
    html_url: String,
  )
}

pub type WebhookTeamDeleted {
  WebhookTeamDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(Nil),
    organization: OrganizationSimpleWebhooks,
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    team: WebhooksTeam1,
  )
}

pub type BaseGist {
  BaseGist(
    forks_url: String,
    git_pull_url: String,
    comments_url: String,
    public: Bool,
    created_at: String,
    user: NullableSimpleUser,
    commits_url: String,
    url: String,
    owner: Option(SimpleUser),
    comments: Int,
    git_push_url: String,
    updated_at: String,
    files: Nil,
    node_id: String,
    id: String,
    html_url: String,
    description: Option(String),
    truncated: Option(Bool),
  )
}

pub type WebhookSecretScanningAlertResolved {
  WebhookSecretScanningAlertResolved(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    alert: SecretScanningAlertWebhook,
  )
}

pub type RepositoryRuleDetailed {
  RepositoryRuleDetailed()
}

pub type WebhookPullRequestAssigned {
  WebhookPullRequestAssigned(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    assignee: WebhooksUser,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPackageUpdated {
  WebhookPackageUpdated(
    enterprise: Option(EnterpriseWebhooks),
    package: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookSecurityAdvisoryUpdated {
  WebhookSecurityAdvisoryUpdated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    security_advisory: WebhooksSecurityAdvisory,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeSearchResultItem {
  CodeSearchResultItem(
    last_modified_at: Option(String),
    text_matches: Option(SearchResultTextMatches),
    git_url: String,
    file_size: Option(Int),
    path_: String,
    repository: MinimalRepository,
    name: String,
    sha: String,
    url: String,
    score: Float,
    language: Option(String),
    html_url: String,
    line_numbers: Option(List(String)),
  )
}

pub type Feed {
  Feed(
    current_user_url: Option(String),
    current_user_organization_urls: Option(List(String)),
    repository_discussions_url: Option(String),
    security_advisories_url: Option(String),
    current_user_public_url: Option(String),
    current_user_organization_url: Option(String),
    timeline_url: String,
    current_user_actor_url: Option(String),
    repository_discussions_category_url: Option(String),
    links: Nil,
    user_url: String,
  )
}

pub type TimelineLineCommentedEvent {
  TimelineLineCommentedEvent(
    comments: Option(List(PullRequestReviewComment)),
    node_id: Option(String),
    event: Option(String),
  )
}

pub type HookDelivery {
  HookDelivery(
    installation_id: Option(Int),
    response: Nil,
    redelivery: Bool,
    guid: String,
    delivered_at: String,
    url: Option(String),
    request: Nil,
    repository_id: Option(Int),
    status: String,
    duration: Float,
    action: Option(String),
    throttled_at: Option(String),
    status_code: Int,
    event: String,
    id: Int,
  )
}

pub type WebhookCheckSuiteRequested {
  WebhookCheckSuiteRequested(
    check_suite: Nil,
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type PullRequestReview {
  PullRequestReview(
    body: String,
    commit_id: Option(String),
    pull_request_url: String,
    body_html: Option(String),
    body_text: Option(String),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    state: String,
    submitted_at: Option(String),
    node_id: String,
    links: Nil,
    id: Int,
    html_url: String,
  )
}

pub type WebhookProjectCreated {
  WebhookProjectCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    project: WebhooksProject,
    installation: Option(SimpleInstallation),
  )
}

pub type LicenseSimple {
  LicenseSimple(
    spdx_id: Option(String),
    name: String,
    url: Option(String),
    node_id: String,
    html_url: Option(String),
    key: String,
  )
}

pub type WebhookCheckRunRerequested {
  WebhookCheckRunRerequested(
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    check_run: CheckRunWithSimpleCheckSuite,
    sender: SimpleUser,
    action: Option(String),
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDependabotAlertFixed {
  WebhookDependabotAlertFixed(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type BranchRestrictionPolicy {
  BranchRestrictionPolicy(
    apps_url: String,
    teams_url: String,
    users: List(Nil),
    url: String,
    apps: List(Nil),
    teams: List(Nil),
    users_url: String,
  )
}

pub type WebhookMarketplacePurchasePendingChangeCancelled {
  WebhookMarketplacePurchasePendingChangeCancelled(
    enterprise: Option(EnterpriseWebhooks),
    effective_date: String,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    marketplace_purchase: Nil,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    previous_marketplace_purchase: Option(WebhooksPreviousMarketplacePurchase),
  )
}

pub type WebhookPullRequestAutoMergeEnabled {
  WebhookPullRequestAutoMergeEnabled(
    enterprise: Option(EnterpriseWebhooks),
    reason: Option(String),
    number: Int,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ActionsSetDefaultWorkflowPermissions {
  ActionsSetDefaultWorkflowPermissions(
    default_workflow_permissions: Option(ActionsDefaultWorkflowPermissions),
    can_approve_pull_request_reviews: Option(ActionsCanApprovePullRequestReviews),
  )
}

pub type Job {
  Job(
    head_branch: Option(String),
    check_run_url: String,
    completed_at: Option(String),
    steps: Option(List(Nil)),
    runner_id: Option(Int),
    created_at: String,
    runner_group_id: Option(Int),
    name: String,
    workflow_name: Option(String),
    head_sha: String,
    url: String,
    run_id: Int,
    started_at: String,
    status: String,
    node_id: String,
    run_attempt: Option(Int),
    runner_group_name: Option(String),
    runner_name: Option(String),
    id: Int,
    run_url: String,
    html_url: Option(String),
    conclusion: Option(String),
    labels: List(String),
  )
}

pub type Blob {
  Blob(
    size: Option(Int),
    sha: String,
    highlighted_content: Option(String),
    url: String,
    encoding: String,
    node_id: String,
    content: String,
  )
}

pub type TimelineCommittedEvent {
  TimelineCommittedEvent(
    message: String,
    parents: List(Nil),
    committer: Nil,
    author: Nil,
    sha: String,
    url: String,
    node_id: String,
    event: Option(String),
    verification: Nil,
    html_url: String,
    tree: Nil,
  )
}

pub type WorkflowRun {
  WorkflowRun(
    triggering_actor: Option(SimpleUser),
    head_branch: Option(String),
    path_: String,
    run_started_at: Option(String),
    jobs_url: String,
    rerun_url: String,
    head_repository: MinimalRepository,
    created_at: String,
    cancel_url: String,
    repository: MinimalRepository,
    name: Option(String),
    head_sha: String,
    referenced_workflows: Option(List(ReferencedWorkflow)),
    workflow_url: String,
    url: String,
    artifacts_url: String,
    check_suite_url: String,
    head_repository_id: Option(Int),
    status: Option(String),
    actor: Option(SimpleUser),
    previous_attempt_url: Option(String),
    head_commit: NullableSimpleCommit,
    updated_at: String,
    node_id: String,
    check_suite_id: Option(Int),
    run_attempt: Option(Int),
    event: String,
    check_suite_node_id: Option(String),
    display_title: String,
    id: Int,
    workflow_id: Int,
    html_url: String,
    run_number: Int,
    pull_requests: Option(List(PullRequestMinimal)),
    conclusion: Option(String),
    logs_url: String,
  )
}

pub type WebhookIssuesUnlabeled {
  WebhookIssuesUnlabeled(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: Option(WebhooksLabel),
    sender: SimpleUser,
    action: String,
    issue: WebhooksIssue,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookRepositoryVulnerabilityAlertResolve {
  WebhookRepositoryVulnerabilityAlertResolve(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type Team {
  Team(
    permissions: Option(Nil),
    privacy: Option(String),
    members_url: String,
    parent: NullableTeamSimple,
    name: String,
    slug: String,
    url: String,
    permission: String,
    node_id: String,
    repositories_url: String,
    id: Int,
    html_url: String,
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type CodespaceExportDetails {
  CodespaceExportDetails(
    branch: Option(String),
    export_url: Option(String),
    completed_at: Option(String),
    sha: Option(String),
    state: Option(String),
    id: Option(String),
    html_url: Option(String),
  )
}

pub type Traffic {
  Traffic(uniques: Int, count: Int, timestamp: String)
}

pub type OrganizationSimpleWebhooks {
  OrganizationSimpleWebhooks(
    hooks_url: String,
    members_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    issues_url: String,
    url: String,
    repos_url: String,
    public_members_url: String,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type SecretScanningAlert {
  SecretScanningAlert(
    push_protection_bypass_request_html_url: Option(String),
    push_protection_bypassed: Option(Bool),
    number: Option(AlertNumber),
    secret_type: Option(String),
    created_at: Option(AlertCreatedAt),
    push_protection_bypassed_at: Option(String),
    push_protection_bypass_request_reviewer: Option(NullableSimpleUser),
    publicly_leaked: Option(Bool),
    resolution: Option(SecretScanningAlertResolution),
    resolution_comment: Option(String),
    locations_url: Option(String),
    push_protection_bypassed_by: Option(NullableSimpleUser),
    url: Option(AlertUrl),
    secret: Option(String),
    state: Option(SecretScanningAlertState),
    validity: Option(String),
    updated_at: Option(NullableAlertUpdatedAt),
    multi_repo: Option(Bool),
    push_protection_bypass_request_comment: Option(String),
    resolved_at: Option(String),
    html_url: Option(AlertHtmlUrl),
    secret_type_display_name: Option(String),
    resolved_by: Option(NullableSimpleUser),
  )
}

pub type NullableCodeOfConductSimple {
  NullableCodeOfConductSimple(
    name: String,
    url: String,
    html_url: Option(String),
    key: String,
  )
}

pub type WebhookRepositoryRulesetEdited {
  WebhookRepositoryRulesetEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: Option(RepositoryWebhooks),
    repository_ruleset: RepositoryRuleset,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookReleaseDeleted {
  WebhookReleaseDeleted(
    enterprise: Option(EnterpriseWebhooks),
    release: WebhooksRelease,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type NullableCommunityHealthFile {
  NullableCommunityHealthFile(url: String, html_url: String)
}

pub type WebhookMarketplacePurchaseCancelled {
  WebhookMarketplacePurchaseCancelled(
    enterprise: Option(EnterpriseWebhooks),
    effective_date: String,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    marketplace_purchase: WebhooksMarketplacePurchase,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    previous_marketplace_purchase: Option(WebhooksPreviousMarketplacePurchase),
  )
}

pub type ReactionRollup {
  ReactionRollup(
    confused: Int,
    laugh: Int,
    eyes: Int,
    hooray: Int,
    one: Int,
    heart: Int,
    plusone: Int,
    url: String,
    total_count: Int,
    rocket: Int,
  )
}

pub type GistSimple {
  GistSimple(
    forks_url: Option(String),
    git_pull_url: Option(String),
    comments_url: Option(String),
    public: Option(Bool),
    created_at: Option(String),
    user: Option(String),
    commits_url: Option(String),
    url: Option(String),
    forks: Option(List(Nil)),
    owner: Option(SimpleUser),
    history: Option(List(GistHistory)),
    comments: Option(Int),
    fork_of: Option(Nil),
    git_push_url: Option(String),
    updated_at: Option(String),
    files: Option(Nil),
    node_id: Option(String),
    id: Option(String),
    html_url: Option(String),
    description: Option(String),
    truncated: Option(Bool),
  )
}

pub type WebhookMilestoneOpened {
  WebhookMilestoneOpened(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    milestone: WebhooksMilestone3,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryAdvisory {
  RepositoryAdvisory(
    cwes: Option(List(Nil)),
    published_at: Option(String),
    summary: String,
    closed_at: Option(String),
    cvss_severities: Option(CvssSeverities),
    cve_id: Option(String),
    collaborating_users: Option(List(SimpleUser)),
    created_at: Option(String),
    identifiers: List(Nil),
    cwe_ids: Option(List(String)),
    ghsa_id: String,
    author: Nil,
    submission: Option(Nil),
    withdrawn_at: Option(String),
    url: String,
    state: String,
    cvss: Option(Nil),
    credits_detailed: Option(List(RepositoryAdvisoryCredit)),
    collaborating_teams: Option(List(Team)),
    updated_at: Option(String),
    credits: Option(List(Nil)),
    vulnerabilities: Option(List(RepositoryAdvisoryVulnerability)),
    html_url: String,
    publisher: Nil,
    description: Option(String),
    severity: Option(String),
    private_fork: Nil,
  )
}

pub type WebhookMilestoneEdited {
  WebhookMilestoneEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    milestone: WebhooksMilestone,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Email {
  Email(primary: Bool, verified: Bool, visibility: Option(String), email: String)
}

pub type TopicSearchResultItem {
  TopicSearchResultItem(
    text_matches: Option(SearchResultTextMatches),
    display_name: Option(String),
    created_at: String,
    related: Option(List(Nil)),
    name: String,
    featured: Bool,
    created_by: Option(String),
    curated: Bool,
    score: Float,
    updated_at: String,
    short_description: Option(String),
    repository_count: Option(Int),
    logo_url: Option(String),
    description: Option(String),
    released: Option(String),
    aliases: Option(List(Nil)),
  )
}

pub type CopilotIdeChat {
  CopilotIdeChat(editors: Option(List(Nil)), total_engaged_users: Option(Int))
}

pub type MergedUpstream {
  MergedUpstream(
    merge_type: Option(String),
    message: Option(String),
    base_branch: Option(String),
  )
}

pub type WebhookPullRequestReviewCommentEdited {
  WebhookPullRequestReviewCommentEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: WebhooksChanges,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
    comment: WebhooksReviewComment,
  )
}

pub type WebhookSecretScanningAlertLocationCreatedFormEncoded {
  WebhookSecretScanningAlertLocationCreatedFormEncoded(payload: String)
}

pub type WebhookPullRequestClosed {
  WebhookPullRequestClosed(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: PullRequestWebhook,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleDeletion {
  RepositoryRuleDeletion(type_: String)
}

pub type RemovedFromProjectIssueEvent {
  RemovedFromProjectIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    project_card: Option(Nil),
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type WebhookIssuesDeleted {
  WebhookIssuesDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryInvitation {
  RepositoryInvitation(
    permissions: String,
    expired: Option(Bool),
    inviter: NullableSimpleUser,
    created_at: String,
    repository: MinimalRepository,
    url: String,
    node_id: String,
    id: Int,
    html_url: String,
    invitee: NullableSimpleUser,
  )
}

pub type WebhooksComment {
  WebhooksComment(
    body: String,
    created_at: String,
    reactions: Nil,
    user: Option(Nil),
    child_comment_count: Int,
    author_association: String,
    parent_id: Option(Int),
    discussion_id: Int,
    updated_at: String,
    node_id: String,
    repository_url: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookProjectsV2StatusUpdateDeleted {
  WebhookProjectsV2StatusUpdateDeleted(
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    projects_v2_status_update: ProjectsV2StatusUpdate,
    installation: Option(SimpleInstallation),
  )
}

pub type CustomDeploymentRuleApp {
  CustomDeploymentRuleApp(
    integration_url: String,
    slug: String,
    node_id: String,
    id: Int,
  )
}

pub type WebhookInstallationDeleted {
  WebhookInstallationDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repositories: Option(WebhooksRepositories),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Installation,
  )
}

pub type WebhookProjectsV2ItemRestored {
  WebhookProjectsV2ItemRestored(
    changes: WebhooksProjectChanges,
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectCardEdited {
  WebhookProjectCardEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    project_card: WebhooksProjectCard,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Vulnerability {
  Vulnerability(
    vulnerable_functions: Option(List(String)),
    package: Option(Nil),
    first_patched_version: Option(String),
    vulnerable_version_range: Option(String),
  )
}

pub type WebhookDiscussionCommentDeleted {
  WebhookDiscussionCommentDeleted(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    comment: WebhooksComment,
  )
}

pub type WebhookWorkflowJobQueued {
  WebhookWorkflowJobQueued(
    enterprise: Option(EnterpriseWebhooks),
    deployment: Option(Deployment),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow_job: Nil,
  )
}

pub type WebhookRepositoryVulnerabilityAlertDismiss {
  WebhookRepositoryVulnerabilityAlertDismiss(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type WebhookBranchProtectionRuleEdited {
  WebhookBranchProtectionRuleEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    rule: WebhooksRule,
  )
}

pub type WebhookRepositoryCreated {
  WebhookRepositoryCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleRequiredSignatures {
  RepositoryRuleRequiredSignatures(type_: String)
}

pub type CopilotIdeCodeCompletions {
  CopilotIdeCodeCompletions(
    editors: Option(List(Nil)),
    total_engaged_users: Option(Int),
    languages: Option(List(Nil)),
  )
}

pub type WebhooksReviewComment {
  WebhooksReviewComment(
    body: String,
    original_line: Int,
    commit_id: String,
    diff_hunk: String,
    path_: String,
    pull_request_url: String,
    position: Option(Int),
    created_at: String,
    reactions: Nil,
    user: Option(Nil),
    subject_type: Option(String),
    author_association: String,
    url: String,
    in_reply_to_id: Option(Int),
    start_line: Option(Int),
    start_side: Option(String),
    line: Option(Int),
    original_commit_id: String,
    side: String,
    updated_at: String,
    original_position: Int,
    node_id: String,
    pull_request_review_id: Option(Int),
    links: Nil,
    id: Int,
    html_url: String,
    original_start_line: Option(Int),
  )
}

pub type WebhookWorkflowRunInProgress {
  WebhookWorkflowRunInProgress(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    workflow_run: Nil,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow: WebhooksWorkflow,
  )
}

pub type Verification {
  Verification(
    reason: String,
    verified: Bool,
    payload: Option(String),
    signature: Option(String),
  )
}

pub type DependabotAlertSecurityVulnerability {
  DependabotAlertSecurityVulnerability(
    package: DependabotAlertPackage,
    first_patched_version: Option(Nil),
    severity: String,
    vulnerable_version_range: String,
  )
}

pub type WebhookDeployKeyDeleted {
  WebhookDeployKeyDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    key: WebhooksDeployKey,
  )
}

pub type WebhookPersonalAccessTokenRequestApproved {
  WebhookPersonalAccessTokenRequestApproved(
    enterprise: Option(EnterpriseWebhooks),
    personal_access_token_request: PersonalAccessTokenRequest,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: SimpleInstallation,
  )
}

pub type SecretScanningLocationWikiCommit {
  SecretScanningLocationWikiCommit(
    commit_sha: String,
    path_: String,
    commit_url: String,
    blob_sha: String,
    start_line: Float,
    start_column: Float,
    end_line: Float,
    end_column: Float,
    page_url: String,
  )
}

pub type PullRequestMinimal {
  PullRequestMinimal(head: Nil, number: Int, url: String, base_: Nil, id: Int)
}

pub type RepositoryRulesetConditionsRepositoryNameTarget {
  RepositoryRulesetConditionsRepositoryNameTarget(repository_name: Nil)
}

pub type Contributor {
  Contributor(
    user_view_type: Option(String),
    gists_url: Option(String),
    following_url: Option(String),
    contributions: Int,
    followers_url: Option(String),
    subscriptions_url: Option(String),
    received_events_url: Option(String),
    events_url: Option(String),
    avatar_url: Option(String),
    login: Option(String),
    name: Option(String),
    url: Option(String),
    starred_url: Option(String),
    organizations_url: Option(String),
    repos_url: Option(String),
    gravatar_id: Option(String),
    site_admin: Option(Bool),
    node_id: Option(String),
    type_: String,
    id: Option(Int),
    html_url: Option(String),
    email: Option(String),
  )
}

pub type CopilotSeatDetails {
  CopilotSeatDetails(
    pending_cancellation_date: Option(String),
    assigning_team: Option(Nil),
    created_at: String,
    assignee: SimpleUser,
    plan_type: Option(String),
    organization: Option(NullableOrganizationSimple),
    last_activity_editor: Option(String),
    updated_at: Option(String),
    last_activity_at: Option(String),
  )
}

pub type WebhookDiscussionClosed {
  WebhookDiscussionClosed(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectColumnCreated {
  WebhookProjectColumnCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    project_column: WebhooksProjectColumn,
  )
}

pub type PendingDeployment {
  PendingDeployment(
    reviewers: List(Nil),
    current_user_can_approve: Bool,
    environment: Nil,
    wait_timer_started_at: Option(String),
    wait_timer: Int,
  )
}

pub type RepositoryRulesetConditionsRepositoryPropertySpec {
  RepositoryRulesetConditionsRepositoryPropertySpec(
    name: String,
    property_values: List(String),
    source: Option(String),
  )
}

pub type Stargazer {
  Stargazer(user: NullableSimpleUser, starred_at: String)
}

pub type DeploymentBranchPolicySettings {
  DeploymentBranchPolicySettings(
    protected_branches: Bool,
    custom_branch_policies: Bool,
  )
}

pub type WebhookCheckSuiteCompleted {
  WebhookCheckSuiteCompleted(
    check_suite: Nil,
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhooksReview {
  WebhooksReview(
    body: Option(String),
    commit_id: String,
    pull_request_url: String,
    user: Option(Nil),
    author_association: String,
    state: String,
    submitted_at: Option(String),
    node_id: String,
    links: Nil,
    id: Int,
    html_url: String,
  )
}

pub type WebhookSponsorshipCreated {
  WebhookSponsorshipCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type DeploymentStatus {
  DeploymentStatus(
    target_url: String,
    environment_url: Option(String),
    created_at: String,
    creator: NullableSimpleUser,
    url: String,
    state: String,
    environment: Option(String),
    log_url: Option(String),
    deployment_url: String,
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    repository_url: String,
    id: Int,
    description: String,
  )
}

pub type Link {
  Link(href: String)
}

pub type RepositoryAdvisoryUpdate {
  RepositoryAdvisoryUpdate(
    cvss_vector_string: Option(String),
    summary: Option(String),
    cve_id: Option(String),
    collaborating_users: Option(List(String)),
    cwe_ids: Option(List(String)),
    state: Option(String),
    collaborating_teams: Option(List(String)),
    credits: Option(List(Nil)),
    vulnerabilities: Option(List(Nil)),
    description: Option(String),
    severity: Option(String),
  )
}

pub type DependabotAlertSecurityAdvisory {
  DependabotAlertSecurityAdvisory(
    cwes: List(Nil),
    published_at: String,
    summary: String,
    cvss_severities: Option(CvssSeverities),
    cve_id: Option(String),
    references: List(Nil),
    identifiers: List(Nil),
    ghsa_id: String,
    withdrawn_at: Option(String),
    cvss: Nil,
    updated_at: String,
    vulnerabilities: List(DependabotAlertSecurityVulnerability),
    description: String,
    severity: String,
  )
}

pub type WebhookDeploymentReviewApproved {
  WebhookDeploymentReviewApproved(
    enterprise: Option(EnterpriseWebhooks),
    approver: Option(WebhooksApprover),
    workflow_job_run: Option(WebhooksWorkflowJobRun),
    workflow_job_runs: Option(List(Nil)),
    repository: RepositoryWebhooks,
    workflow_run: Option(Nil),
    reviewers: Option(WebhooksReviewers),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    since: String,
    comment: Option(String),
  )
}

pub type Tag {
  Tag(
    name: String,
    zipball_url: String,
    tarball_url: String,
    commit: Nil,
    node_id: String,
  )
}

pub type WebhookRepositoryAdvisoryReported {
  WebhookRepositoryAdvisoryReported(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    repository_advisory: RepositoryAdvisory,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookRegistryPackageUpdated {
  WebhookRegistryPackageUpdated(
    enterprise: Option(EnterpriseWebhooks),
    registry_package: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type PrivateVulnerabilityReportCreate {
  PrivateVulnerabilityReportCreate(
    cvss_vector_string: Option(String),
    summary: String,
    cwe_ids: Option(List(String)),
    vulnerabilities: Option(List(Nil)),
    start_private_fork: Option(Bool),
    description: String,
    severity: Option(String),
  )
}

pub type WebhookPullRequestConvertedToDraft {
  WebhookPullRequestConvertedToDraft(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: PullRequestWebhook,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Event {
  Event(
    org: Option(Actor),
    public: Bool,
    created_at: Option(String),
    payload: Nil,
    repo: Nil,
    actor: Actor,
    type_: Option(String),
    id: String,
  )
}

pub type NullableSimpleUser {
  NullableSimpleUser(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    name: Option(String),
    url: String,
    starred_url: String,
    organizations_url: String,
    repos_url: String,
    starred_at: Option(String),
    gravatar_id: Option(String),
    site_admin: Bool,
    node_id: String,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
  )
}

pub type AutoMerge {
  AutoMerge(
    merge_method: String,
    commit_title: String,
    enabled_by: SimpleUser,
    commit_message: String,
  )
}

pub type CopilotSeatBreakdown {
  CopilotSeatBreakdown(
    pending_invitation: Option(Int),
    added_this_cycle: Option(Int),
    total: Option(Int),
    pending_cancellation: Option(Int),
    inactive_this_cycle: Option(Int),
    active_this_cycle: Option(Int),
  )
}

pub type WebhookInstallationNewPermissionsAccepted {
  WebhookInstallationNewPermissionsAccepted(
    enterprise: Option(EnterpriseWebhooks),
    repositories: Option(WebhooksRepositories),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Installation,
  )
}

pub type Installation {
  Installation(
    single_file_paths: Option(List(String)),
    permissions: AppPermissions,
    access_tokens_url: String,
    target_type: String,
    app_slug: String,
    target_id: Int,
    created_at: String,
    has_multiple_single_files: Option(Bool),
    account: Nil,
    single_file_name: Option(String),
    suspended_at: Option(String),
    updated_at: String,
    repository_selection: String,
    repositories_url: String,
    events: List(String),
    app_id: Int,
    id: Int,
    suspended_by: NullableSimpleUser,
    html_url: String,
    contact_email: Option(String),
  )
}

pub type WebhooksProjectChanges {
  WebhooksProjectChanges(archived_at: Option(Nil))
}

pub type RepositoryRulesetBypassActor {
  RepositoryRulesetBypassActor(
    actor_type: String,
    actor_id: Option(Int),
    bypass_mode: Option(String),
  )
}

pub type DeploymentSimple {
  DeploymentSimple(
    original_environment: Option(String),
    task: String,
    created_at: String,
    production_environment: Option(Bool),
    url: String,
    statuses_url: String,
    environment: String,
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    repository_url: String,
    id: Int,
    description: Option(String),
    transient_environment: Option(Bool),
  )
}

pub type ActionsOrganizationPermissions {
  ActionsOrganizationPermissions(
    allowed_actions: Option(AllowedActions),
    enabled_repositories: EnabledRepositories,
    selected_actions_url: Option(SelectedActionsUrl),
    selected_repositories_url: Option(String),
  )
}

pub type OrganizationActionsSecret {
  OrganizationActionsSecret(
    created_at: String,
    name: String,
    visibility: String,
    updated_at: String,
    selected_repositories_url: Option(String),
  )
}

pub type DeploymentBranchPolicyNamePatternWithType {
  DeploymentBranchPolicyNamePatternWithType(name: String, type_: Option(String))
}

pub type WebhookMarketplacePurchasePendingChange {
  WebhookMarketplacePurchasePendingChange(
    enterprise: Option(EnterpriseWebhooks),
    effective_date: String,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    marketplace_purchase: WebhooksMarketplacePurchase,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    previous_marketplace_purchase: Option(Nil),
  )
}

pub type WebhookCommitCommentCreated {
  WebhookCommitCommentCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    comment: Nil,
  )
}

pub type TeamRepository {
  TeamRepository(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    forks_count: Int,
    fork: Bool,
    git_url: String,
    archived: Bool,
    private: Bool,
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Bool,
    blobs_url: String,
    teams_url: String,
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    forks: Int,
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    owner: NullableSimpleUser,
    allow_merge_commit: Option(Bool),
    role_name: Option(String),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    updated_at: Option(String),
    watchers: Int,
    node_id: String,
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    subscribers_count: Option(Int),
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    network_count: Option(Int),
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type WebhooksPreviousMarketplacePurchase {
  WebhooksPreviousMarketplacePurchase(
    billing_cycle: String,
    on_free_trial: Bool,
    plan: Nil,
    account: Nil,
    unit_count: Int,
    next_billing_date: Option(String),
  )
}

pub type DependabotAlertPackage {
  DependabotAlertPackage(ecosystem: String, name: String)
}

pub type WebhookPullRequestLocked {
  WebhookPullRequestLocked(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ActionsCacheUsageByRepository {
  ActionsCacheUsageByRepository(
    active_caches_size_in_bytes: Int,
    active_caches_count: Int,
    full_name: String,
  )
}

pub type ReviewCustomGatesCommentRequired {
  ReviewCustomGatesCommentRequired(environment_name: String, comment: String)
}

pub type WebhookSubIssuesParentIssueRemoved {
  WebhookSubIssuesParentIssueRemoved(
    sub_issue_id: Float,
    parent_issue: Issue,
    repository: Option(RepositoryWebhooks),
    parent_issue_repo: Repository,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    parent_issue_id: Float,
    action: String,
    sub_issue: Issue,
    installation: Option(SimpleInstallation),
  )
}

pub type Codespace {
  Codespace(
    idle_timeout_notice: Option(String),
    recent_folders: List(String),
    retention_period_minutes: Option(Int),
    web_url: String,
    machine: NullableCodespaceMachine,
    pending_operation_disabled_reason: Option(String),
    environment_id: Option(String),
    display_name: Option(String),
    created_at: String,
    repository: MinimalRepository,
    prebuild: Option(Bool),
    name: String,
    last_used_at: String,
    runtime_constraints: Option(Nil),
    url: String,
    last_known_stop_notice: Option(String),
    state: String,
    start_url: String,
    stop_url: String,
    owner: SimpleUser,
    billable_owner: SimpleUser,
    location: String,
    idle_timeout_minutes: Option(Int),
    updated_at: String,
    devcontainer_path: Option(String),
    id: Int,
    machines_url: String,
    pulls_url: Option(String),
    pending_operation: Option(Bool),
    retention_expires_at: Option(String),
    git_status: Nil,
    publish_url: Option(String),
  )
}

pub type Project {
  Project(
    body: Option(String),
    private: Option(Bool),
    owner_url: String,
    number: Int,
    created_at: String,
    name: String,
    creator: NullableSimpleUser,
    columns_url: String,
    url: String,
    state: String,
    updated_at: String,
    node_id: String,
    organization_permission: Option(String),
    id: Int,
    html_url: String,
  )
}

pub type WebhooksMembership {
  WebhooksMembership(
    organization_url: String,
    user: Option(Nil),
    url: String,
    state: String,
    role: String,
  )
}

pub type WebhooksProjectCard {
  WebhooksProjectCard(
    archived: Bool,
    column_id: Int,
    column_url: String,
    content_url: Option(String),
    project_url: String,
    created_at: String,
    creator: Option(Nil),
    url: String,
    note: Option(String),
    updated_at: String,
    node_id: String,
    id: Int,
    after_id: Option(Int),
  )
}

pub type WebhookRepositoryTransferred {
  WebhookRepositoryTransferred(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ActionsCacheList {
  ActionsCacheList(actions_caches: List(Nil), total_count: Int)
}

pub type WebhookIssuesReopened {
  WebhookIssuesReopened(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type TimelineIssueEvents {
  TimelineIssueEvents()
}

pub type WebhookDiscussionLocked {
  WebhookDiscussionLocked(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ApiInsightsSummaryStats {
  ApiInsightsSummaryStats(
    total_request_count: Option(Int),
    rate_limited_request_count: Option(Int),
  )
}

pub type WebhookReleaseUnpublished {
  WebhookReleaseUnpublished(
    enterprise: Option(EnterpriseWebhooks),
    release: WebhooksRelease1,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ClassroomAcceptedAssignment {
  ClassroomAcceptedAssignment(
    commit_count: Int,
    repository: SimpleClassroomRepository,
    assignment: SimpleClassroomAssignment,
    passing: Bool,
    grade: String,
    students: List(SimpleClassroomUser),
    submitted: Bool,
    id: Int,
  )
}

pub type WebhookSubIssuesParentIssueAdded {
  WebhookSubIssuesParentIssueAdded(
    sub_issue_id: Float,
    parent_issue: Issue,
    repository: Option(RepositoryWebhooks),
    parent_issue_repo: Repository,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    parent_issue_id: Float,
    action: String,
    sub_issue: Issue,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhooksChanges8 {
  WebhooksChanges8(tier: Nil)
}

pub type WebhookPullRequestOpened {
  WebhookPullRequestOpened(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: PullRequestWebhook,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestEdited {
  WebhookPullRequestEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    pull_request: PullRequestWebhook,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDiscussionCreated {
  WebhookDiscussionCreated(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookReleaseReleased {
  WebhookReleaseReleased(
    enterprise: Option(EnterpriseWebhooks),
    release: WebhooksRelease,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Issue {
  Issue(
    draft: Option(Bool),
    body: Option(String),
    assignees: Option(List(SimpleUser)),
    comments_url: String,
    closed_at: Option(String),
    body_html: Option(String),
    events_url: String,
    number: Int,
    closed_by: Option(NullableSimpleUser),
    created_at: String,
    body_text: Option(String),
    locked: Bool,
    repository: Option(Repository),
    reactions: Option(ReactionRollup),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    labels_url: String,
    url: String,
    assignee: NullableSimpleUser,
    milestone: NullableMilestone,
    timeline_url: Option(String),
    state: String,
    state_reason: Option(String),
    comments: Int,
    pull_request: Option(Nil),
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    title: String,
    repository_url: String,
    id: Int,
    html_url: String,
    active_lock_reason: Option(String),
    labels: List(Nil),
  )
}

pub type GitTree {
  GitTree(sha: String, url: String, tree: List(Nil), truncated: Bool)
}

pub type CodeScanningSarifsReceipt {
  CodeScanningSarifsReceipt(
    url: Option(String),
    id: Option(CodeScanningAnalysisSarifId),
  )
}

pub type Authorization {
  Authorization(
    app: Nil,
    note_url: Option(String),
    fingerprint: Option(String),
    hashed_token: Option(String),
    created_at: String,
    user: Option(NullableSimpleUser),
    token_last_eight: Option(String),
    url: String,
    note: Option(String),
    updated_at: String,
    token_: String,
    installation: Option(NullableScopedInstallation),
    id: Int,
    expires_at: Option(String),
    scopes: Option(List(String)),
  )
}

pub type DeployKey {
  DeployKey(
    enabled: Option(Bool),
    last_used: Option(String),
    verified: Bool,
    created_at: String,
    url: String,
    read_only: Bool,
    added_by: Option(String),
    title: String,
    id: Int,
    key: String,
  )
}

pub type WebhookRepositoryRenamed {
  WebhookRepositoryRenamed(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepoSearchResultItem {
  RepoSearchResultItem(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    text_matches: Option(SearchResultTextMatches),
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    forks_count: Int,
    fork: Bool,
    git_url: String,
    archived: Bool,
    private: Bool,
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Bool,
    blobs_url: String,
    has_discussions: Option(Bool),
    teams_url: String,
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: String,
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    forks: Int,
    archive_url: String,
    score: Float,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    owner: NullableSimpleUser,
    allow_merge_commit: Option(Bool),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    updated_at: String,
    watchers: Int,
    node_id: String,
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: String,
    downloads_url: String,
    subscribers_url: String,
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type WebhookLabelCreated {
  WebhookLabelCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: WebhooksLabel,
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhooksAlert {
  WebhooksAlert(
    number: Int,
    dismissed_at: Option(String),
    created_at: String,
    ghsa_id: String,
    fix_reason: Option(String),
    affected_package_name: String,
    fixed_in: Option(String),
    state: String,
    affected_range: String,
    dismisser: Option(Nil),
    external_reference: Option(String),
    node_id: String,
    dismiss_reason: Option(String),
    id: Int,
    external_identifier: String,
    severity: String,
    fixed_at: Option(String),
  )
}

pub type SimpleClassroom {
  SimpleClassroom(archived: Bool, name: String, url: String, id: Int)
}

pub type WebhooksMarketplacePurchase {
  WebhooksMarketplacePurchase(
    billing_cycle: String,
    on_free_trial: Bool,
    plan: Nil,
    free_trial_ends_on: Option(String),
    account: Nil,
    unit_count: Int,
    next_billing_date: Option(String),
  )
}

pub type RateLimitOverview {
  RateLimitOverview(rate: RateLimit, resources: Nil)
}

pub type WebhookDiscussionEdited {
  WebhookDiscussionEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookInstallationRepositoriesAdded {
  WebhookInstallationRepositoriesAdded(
    enterprise: Option(EnterpriseWebhooks),
    repositories_removed: List(Nil),
    repositories_added: WebhooksRepositoriesAdded,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    repository_selection: WebhooksRepositorySelection,
    installation: Installation,
    requester: WebhooksUser,
  )
}

pub type WebhookSponsorshipPendingTierChange {
  WebhookSponsorshipPendingTierChange(
    enterprise: Option(EnterpriseWebhooks),
    changes: WebhooksChanges8,
    effective_date: Option(WebhooksEffectiveDate),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookConfig {
  WebhookConfig(
    content_type: Option(WebhookConfigContentType),
    insecure_ssl: Option(WebhookConfigInsecureSsl),
    url: Option(WebhookConfigUrl),
    secret: Option(WebhookConfigSecret),
  )
}

pub type Language {
  Language()
}

pub type PullRequestSimple {
  PullRequestSimple(
    head: Nil,
    draft: Option(Bool),
    body: Option(String),
    assignees: Option(List(SimpleUser)),
    comments_url: String,
    requested_teams: Option(List(Team)),
    merged_at: Option(String),
    closed_at: Option(String),
    review_comment_url: String,
    auto_merge: AutoMerge,
    issue_url: String,
    number: Int,
    created_at: String,
    locked: Bool,
    merge_commit_sha: Option(String),
    review_comments_url: String,
    user: NullableSimpleUser,
    commits_url: String,
    author_association: AuthorAssociation,
    url: String,
    assignee: NullableSimpleUser,
    statuses_url: String,
    milestone: NullableMilestone,
    state: String,
    base_: Nil,
    diff_url: String,
    updated_at: String,
    node_id: String,
    patch_url: String,
    title: String,
    links: Nil,
    id: Int,
    html_url: String,
    requested_reviewers: Option(List(SimpleUser)),
    active_lock_reason: Option(String),
    labels: List(Nil),
  )
}

pub type AppPermissions {
  AppPermissions(
    statuses: Option(String),
    environments: Option(String),
    organization_custom_org_roles: Option(String),
    organization_personal_access_tokens: Option(String),
    starring: Option(String),
    secrets: Option(String),
    organization_hooks: Option(String),
    pages: Option(String),
    organization_events: Option(String),
    interaction_limits: Option(String),
    organization_projects: Option(String),
    profile: Option(String),
    team_discussions: Option(String),
    organization_administration: Option(String),
    checks: Option(String),
    repository_custom_properties: Option(String),
    packages: Option(String),
    deployments: Option(String),
    repository_projects: Option(String),
    metadata: Option(String),
    organization_personal_access_token_requests: Option(String),
    organization_self_hosted_runners: Option(String),
    single_file: Option(String),
    workflows: Option(String),
    followers: Option(String),
    gpg_keys: Option(String),
    organization_custom_properties: Option(String),
    organization_plan: Option(String),
    secret_scanning_alerts: Option(String),
    dependabot_secrets: Option(String),
    organization_secrets: Option(String),
    security_events: Option(String),
    git_ssh_keys: Option(String),
    members: Option(String),
    organization_packages: Option(String),
    codespaces: Option(String),
    issues: Option(String),
    contents: Option(String),
    vulnerability_alerts: Option(String),
    repository_hooks: Option(String),
    organization_announcement_banners: Option(String),
    organization_custom_roles: Option(String),
    organization_user_blocking: Option(String),
    actions: Option(String),
    administration: Option(String),
    pull_requests: Option(String),
    organization_copilot_seat_management: Option(String),
    email_addresses: Option(String),
  )
}

pub type SimpleCheckSuite {
  SimpleCheckSuite(
    head_branch: Option(String),
    app: Option(Integration),
    created_at: Option(String),
    repository: Option(MinimalRepository),
    head_sha: Option(String),
    url: Option(String),
    status: Option(String),
    updated_at: Option(String),
    node_id: Option(String),
    id: Option(Int),
    after: Option(String),
    pull_requests: Option(List(PullRequestMinimal)),
    conclusion: Option(String),
    before: Option(String),
  )
}

pub type WebhookFork {
  WebhookFork(
    enterprise: Option(EnterpriseWebhooks),
    forkee: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
  )
}

pub type CheckRunWithSimpleCheckSuite {
  CheckRunWithSimpleCheckSuite(
    output: Nil,
    check_suite: SimpleCheckSuite,
    app: NullableIntegration,
    deployment: Option(DeploymentSimple),
    completed_at: Option(String),
    name: String,
    head_sha: String,
    url: String,
    external_id: String,
    started_at: String,
    details_url: String,
    status: String,
    node_id: String,
    id: Int,
    html_url: String,
    pull_requests: List(PullRequestMinimal),
    conclusion: Option(String),
  )
}

pub type CopilotDotcomPullRequests {
  CopilotDotcomPullRequests(
    repositories: Option(List(Nil)),
    total_engaged_users: Option(Int),
  )
}

pub type CheckAutomatedSecurityFixes {
  CheckAutomatedSecurityFixes(enabled: Bool, paused: Bool)
}

pub type TeamDiscussion {
  TeamDiscussion(
    last_edited_at: Option(String),
    body: String,
    private: Bool,
    comments_url: String,
    comments_count: Int,
    body_html: String,
    number: Int,
    created_at: String,
    reactions: Option(ReactionRollup),
    author: NullableSimpleUser,
    team_url: String,
    url: String,
    updated_at: String,
    node_id: String,
    title: String,
    pinned: Bool,
    html_url: String,
    body_version: String,
  )
}

pub type WebhookInstallationRepositoriesRemoved {
  WebhookInstallationRepositoriesRemoved(
    enterprise: Option(EnterpriseWebhooks),
    repositories_removed: List(Nil),
    repositories_added: WebhooksRepositoriesAdded,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    repository_selection: WebhooksRepositorySelection,
    installation: Installation,
    requester: WebhooksUser,
  )
}

pub type StarredRepository {
  StarredRepository(repo: Repository, starred_at: String)
}

pub type WebhookLabelEdited {
  WebhookLabelEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: WebhooksLabel,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeScanningAnalysis {
  CodeScanningAnalysis(
    commit_sha: CodeScanningAnalysisCommitSha,
    results_count: Int,
    rules_count: Int,
    error: String,
    created_at: CodeScanningAnalysisCreatedAt,
    url: CodeScanningAnalysisUrl,
    ref: CodeScanningRef,
    environment: CodeScanningAnalysisEnvironment,
    deletable: Bool,
    tool: CodeScanningAnalysisTool,
    sarif_id: CodeScanningAnalysisSarifId,
    id: Int,
    analysis_key: CodeScanningAnalysisAnalysisKey,
    warning: String,
    category: Option(CodeScanningAnalysisCategory),
  )
}

pub type PullRequestMergeResult {
  PullRequestMergeResult(message: String, sha: String, merged: Bool)
}

pub type OidcCustomSub {
  OidcCustomSub(include_claim_keys: List(String))
}

pub type ContentSubmodule {
  ContentSubmodule(
    size: Int,
    git_url: Option(String),
    path_: String,
    name: String,
    sha: String,
    url: String,
    submodule_git_url: String,
    download_url: Option(String),
    links: Nil,
    type_: String,
    html_url: Option(String),
  )
}

pub type GitRef {
  GitRef(url: String, ref: String, node_id: String, object: Nil)
}

pub type PagesSourceHash {
  PagesSourceHash(branch: String, path_: String)
}

pub type WebhookDiscussionTransferred {
  WebhookDiscussionTransferred(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleUpdate {
  RepositoryRuleUpdate(parameters: Option(Nil), type_: String)
}

pub type CodeScanningVariantAnalysisRepository {
  CodeScanningVariantAnalysisRepository(
    private: Bool,
    stargazers_count: Int,
    name: String,
    updated_at: Option(String),
    id: Int,
    full_name: String,
  )
}

pub type RunnerLabel {
  RunnerLabel(name: String, type_: Option(String), id: Option(Int))
}

pub type SecretScanningLocationPullRequestReviewComment {
  SecretScanningLocationPullRequestReviewComment(
    pull_request_review_comment_url: String,
  )
}

pub type LabelSearchResultItem {
  LabelSearchResultItem(
    text_matches: Option(SearchResultTextMatches),
    default: Bool,
    color: String,
    name: String,
    url: String,
    score: Float,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type Commit {
  Commit(
    comments_url: String,
    parents: List(Nil),
    committer: Nil,
    author: Nil,
    sha: String,
    url: String,
    commit: Nil,
    files: Option(List(DiffEntry)),
    node_id: String,
    html_url: String,
    stats: Option(Nil),
  )
}

pub type WebhookPullRequestUnassigned {
  WebhookPullRequestUnassigned(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    assignee: Option(WebhooksUserMannequin),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectColumnEdited {
  WebhookProjectColumnEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    project_column: WebhooksProjectColumn,
  )
}

pub type WebhooksIssue {
  WebhooksIssue(
    draft: Option(Bool),
    body: Option(String),
    assignees: List(Nil),
    comments_url: String,
    closed_at: Option(String),
    events_url: String,
    number: Int,
    created_at: String,
    locked: Option(Bool),
    reactions: Nil,
    user: Option(Nil),
    author_association: String,
    labels_url: String,
    url: String,
    assignee: Option(Nil),
    milestone: Option(Nil),
    timeline_url: Option(String),
    state: Option(String),
    state_reason: Option(String),
    comments: Int,
    pull_request: Option(Nil),
    performed_via_github_app: Option(Nil),
    updated_at: String,
    node_id: String,
    title: String,
    repository_url: String,
    id: Int,
    html_url: String,
    active_lock_reason: Option(String),
    labels: Option(List(Nil)),
  )
}

pub type DependabotPublicKey {
  DependabotPublicKey(key_id: String, key: String)
}

pub type EnvironmentApprovals {
  EnvironmentApprovals(
    environments: List(Nil),
    user: SimpleUser,
    state: String,
    comment: String,
  )
}

pub type WebhookDeploymentCreated {
  WebhookDeploymentCreated(
    enterprise: Option(EnterpriseWebhooks),
    deployment: Nil,
    repository: RepositoryWebhooks,
    workflow_run: Option(Nil),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow: WebhooksWorkflow,
  )
}

pub type MinimalRepository {
  MinimalRepository(
    hooks_url: String,
    default_branch: Option(String),
    branches_url: String,
    size: Option(Int),
    forks_url: String,
    license: Option(Nil),
    delete_branch_on_merge: Option(Bool),
    forks_count: Option(Int),
    fork: Bool,
    git_url: Option(String),
    archived: Option(Bool),
    private: Bool,
    security_and_analysis: Option(SecurityAndAnalysis),
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Option(Bool),
    blobs_url: String,
    has_discussions: Option(Bool),
    teams_url: String,
    watchers_count: Option(Int),
    stargazers_url: String,
    stargazers_count: Option(Int),
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: Option(String),
    code_of_conduct: Option(CodeOfConduct),
    homepage: Option(String),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Option(Int),
    is_template: Option(Bool),
    statuses_url: String,
    forks: Option(Int),
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    owner: SimpleUser,
    role_name: Option(String),
    assignees_url: String,
    has_wiki: Option(Bool),
    compare_url: String,
    git_tags_url: String,
    updated_at: Option(String),
    watchers: Option(Int),
    node_id: String,
    notifications_url: String,
    ssh_url: Option(String),
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    subscribers_count: Option(Int),
    id: Int,
    svn_url: Option(String),
    full_name: String,
    html_url: String,
    disabled: Option(Bool),
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    pulls_url: String,
    network_count: Option(Int),
    deployments_url: String,
    has_projects: Option(Bool),
    has_pages: Option(Bool),
    open_issues_count: Option(Int),
    git_commits_url: String,
    has_issues: Option(Bool),
  )
}

pub type WebhooksIssueComment {
  WebhooksIssueComment(
    body: String,
    issue_url: String,
    created_at: String,
    reactions: Nil,
    user: Option(Nil),
    author_association: String,
    url: String,
    performed_via_github_app: Integration,
    updated_at: String,
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookSecretScanningAlertLocationCreated {
  WebhookSecretScanningAlertLocationCreated(
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    location: SecretScanningLocation,
    action: Option(String),
    installation: Option(SimpleInstallation),
    alert: SecretScanningAlertWebhook,
  )
}

pub type NullableTeamSimple {
  NullableTeamSimple(
    ldap_dn: Option(String),
    privacy: Option(String),
    members_url: String,
    name: String,
    slug: String,
    url: String,
    permission: String,
    node_id: String,
    repositories_url: String,
    id: Int,
    html_url: String,
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type WebhooksProject {
  WebhooksProject(
    body: Option(String),
    owner_url: String,
    number: Int,
    created_at: String,
    name: String,
    creator: Option(Nil),
    columns_url: String,
    url: String,
    state: String,
    updated_at: String,
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookBranchProtectionRuleCreated {
  WebhookBranchProtectionRuleCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    rule: WebhooksRule,
  )
}

pub type CopilotUsageMetrics {
  CopilotUsageMetrics(
    breakdown: Option(List(Nil)),
    total_lines_accepted: Option(Int),
    total_suggestions_count: Option(Int),
    total_lines_suggested: Option(Int),
    total_active_users: Option(Int),
    total_chat_turns: Option(Int),
    total_chat_acceptances: Option(Int),
    total_acceptances_count: Option(Int),
    day: String,
    total_active_chat_users: Option(Int),
  )
}

pub type WebhooksRelease1 {
  WebhooksRelease1(
    draft: Bool,
    body: Option(String),
    assets: List(Nil),
    prerelease: Bool,
    published_at: Option(String),
    created_at: Option(String),
    reactions: Option(Nil),
    author: Option(Nil),
    name: Option(String),
    url: String,
    tag_name: String,
    zipball_url: Option(String),
    upload_url: String,
    assets_url: String,
    tarball_url: Option(String),
    node_id: String,
    discussion_url: Option(String),
    target_commitish: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookRepositoryEdited {
  WebhookRepositoryEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestReviewSubmitted {
  WebhookPullRequestReviewSubmitted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    review: WebhooksReview,
    installation: Option(SimpleInstallation),
  )
}

pub type NullableRepository {
  NullableRepository(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    forks_count: Int,
    fork: Bool,
    allow_update_branch: Option(Bool),
    git_url: String,
    archived: Bool,
    private: Bool,
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Bool,
    blobs_url: String,
    squash_merge_commit_message: Option(String),
    has_discussions: Option(Bool),
    teams_url: String,
    merge_commit_message: Option(String),
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    use_squash_pr_title_as_default: Option(Bool),
    forks: Int,
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    owner: SimpleUser,
    starred_at: Option(String),
    allow_merge_commit: Option(Bool),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    squash_merge_commit_title: Option(String),
    merge_commit_title: Option(String),
    updated_at: Option(String),
    watchers: Int,
    node_id: String,
    anonymous_access_enabled: Option(Bool),
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type WebhookPullRequestReviewThreadResolved {
  WebhookPullRequestReviewThreadResolved(
    enterprise: Option(EnterpriseWebhooks),
    thread: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookGollum {
  WebhookGollum(
    enterprise: Option(EnterpriseWebhooks),
    pages: List(Nil),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectClosed {
  WebhookProjectClosed(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    project: WebhooksProject,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookIssuesLabeled {
  WebhookIssuesLabeled(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: Option(WebhooksLabel),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookSponsorshipEdited {
  WebhookSponsorshipEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookSponsorshipTierChanged {
  WebhookSponsorshipTierChanged(
    enterprise: Option(EnterpriseWebhooks),
    changes: WebhooksChanges8,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestReadyForReview {
  WebhookPullRequestReadyForReview(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: PullRequestWebhook,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookCustomPropertyCreated {
  WebhookCustomPropertyCreated(
    enterprise: Option(EnterpriseWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    definition: CustomProperty,
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeScanningDefaultSetup {
  CodeScanningDefaultSetup(
    query_suite: Option(String),
    state: Option(String),
    updated_at: Option(String),
    schedule: Option(String),
    languages: Option(List(String)),
  )
}

pub type WebhookOrganizationDeleted {
  WebhookOrganizationDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    membership: Option(WebhooksMembership),
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookTeamAddedToRepository {
  WebhookTeamAddedToRepository(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(Nil),
    organization: OrganizationSimpleWebhooks,
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    team: WebhooksTeam1,
  )
}

pub type ViewTraffic {
  ViewTraffic(uniques: Int, views: List(Traffic), count: Int)
}

pub type DeploymentBranchPolicy {
  DeploymentBranchPolicy(
    name: Option(String),
    node_id: Option(String),
    type_: Option(String),
    id: Option(Int),
  )
}

pub type RepositoryRulePullRequest {
  RepositoryRulePullRequest(parameters: Option(Nil), type_: String)
}

pub type SimpleInstallation {
  SimpleInstallation(node_id: String, id: Int)
}

pub type WebhooksSecurityAdvisory {
  WebhooksSecurityAdvisory(
    cwes: List(Nil),
    published_at: String,
    summary: String,
    cvss_severities: Option(CvssSeverities),
    references: List(Nil),
    identifiers: List(Nil),
    ghsa_id: String,
    withdrawn_at: Option(String),
    cvss: Nil,
    updated_at: String,
    vulnerabilities: List(Nil),
    description: String,
    severity: String,
  )
}

pub type WebhookPullRequestReviewCommentCreated {
  WebhookPullRequestReviewCommentCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
    comment: Nil,
  )
}

pub type Actor {
  Actor(
    avatar_url: String,
    login: String,
    display_login: Option(String),
    url: String,
    gravatar_id: Option(String),
    id: Int,
  )
}

pub type PrivateUser {
  PrivateUser(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    ldap_dn: Option(String),
    twitter_username: Option(String),
    blog: Option(String),
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    bio: Option(String),
    notification_email: Option(String),
    events_url: String,
    avatar_url: String,
    plan: Option(Nil),
    login: String,
    created_at: String,
    total_private_repos: Int,
    owned_private_repos: Int,
    public_repos: Int,
    name: Option(String),
    collaborators: Int,
    hireable: Option(Bool),
    url: String,
    starred_url: String,
    organizations_url: String,
    following: Int,
    repos_url: String,
    private_gists: Int,
    followers: Int,
    two_factor_authentication: Bool,
    location: Option(String),
    gravatar_id: Option(String),
    site_admin: Bool,
    updated_at: String,
    node_id: String,
    business_plus: Option(Bool),
    public_gists: Int,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
    company: Option(String),
    disk_usage: Int,
  )
}

pub type WebhookMilestoneCreated {
  WebhookMilestoneCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    milestone: WebhooksMilestone3,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookIssuesPinned {
  WebhookIssuesPinned(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: WebhooksIssue2,
    installation: Option(SimpleInstallation),
  )
}

pub type GistComment {
  GistComment(
    body: String,
    created_at: String,
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    url: String,
    updated_at: String,
    node_id: String,
    id: Int,
  )
}

pub type CustomPropertyValue {
  CustomPropertyValue(value: Nil, property_name: String)
}

pub type WebhookProjectCardCreated {
  WebhookProjectCardCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    project_card: WebhooksProjectCard,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CheckSuitePreference {
  CheckSuitePreference(repository: MinimalRepository, preferences: Nil)
}

pub type CodespaceWithFullRepository {
  CodespaceWithFullRepository(
    idle_timeout_notice: Option(String),
    recent_folders: List(String),
    retention_period_minutes: Option(Int),
    web_url: String,
    machine: NullableCodespaceMachine,
    pending_operation_disabled_reason: Option(String),
    environment_id: Option(String),
    display_name: Option(String),
    created_at: String,
    repository: FullRepository,
    prebuild: Option(Bool),
    name: String,
    last_used_at: String,
    runtime_constraints: Option(Nil),
    url: String,
    state: String,
    start_url: String,
    stop_url: String,
    owner: SimpleUser,
    billable_owner: SimpleUser,
    location: String,
    idle_timeout_minutes: Option(Int),
    updated_at: String,
    devcontainer_path: Option(String),
    id: Int,
    machines_url: String,
    pulls_url: Option(String),
    pending_operation: Option(Bool),
    retention_expires_at: Option(String),
    git_status: Nil,
    publish_url: Option(String),
  )
}

pub type CvssSeverities {
  CvssSeverities(cvss_v3: Option(Nil), cvss_v4: Option(Nil))
}

pub type IntegrationInstallationRequest {
  IntegrationInstallationRequest(
    created_at: String,
    account: Nil,
    node_id: Option(String),
    id: Int,
    requester: SimpleUser,
  )
}

pub type BranchWithProtection {
  BranchWithProtection(
    protection_url: String,
    name: String,
    protected: Bool,
    pattern: Option(String),
    commit: Commit,
    protection: BranchProtection,
    links: Nil,
    required_approving_review_count: Option(Int),
  )
}

pub type ValidationError {
  ValidationError(
    message: String,
    documentation_url: String,
    errors: Option(List(Nil)),
  )
}

pub type WebhookCodeScanningAlertAppearedInBranch {
  WebhookCodeScanningAlertAppearedInBranch(
    enterprise: Option(EnterpriseWebhooks),
    commit_oid: WebhooksCodeScanningCommitOid,
    repository: RepositoryWebhooks,
    ref: WebhooksCodeScanningRef,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type SecretScanningLocation {
  SecretScanningLocation(details: Option(Nil), type_: Option(String))
}

pub type WebhookStarDeleted {
  WebhookStarDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Label {
  Label(
    default: Bool,
    color: String,
    name: String,
    url: String,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type WebhookOrgBlockUnblocked {
  WebhookOrgBlockUnblocked(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    blocked_user: WebhooksUser,
  )
}

pub type WebhookProjectsV2ItemReordered {
  WebhookProjectsV2ItemReordered(
    changes: Nil,
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CommitSearchResultItem {
  CommitSearchResultItem(
    text_matches: Option(SearchResultTextMatches),
    comments_url: String,
    parents: List(Nil),
    repository: MinimalRepository,
    committer: NullableGitUser,
    author: NullableSimpleUser,
    sha: String,
    url: String,
    score: Float,
    commit: Nil,
    node_id: String,
    html_url: String,
  )
}

pub type Integration {
  Integration(
    permissions: Nil,
    client_secret: Option(String),
    installations_count: Option(Int),
    created_at: String,
    name: String,
    slug: Option(String),
    client_id: Option(String),
    owner: NullableSimpleUser,
    updated_at: String,
    node_id: String,
    pem: Option(String),
    webhook_secret: Option(String),
    events: List(String),
    id: Int,
    html_url: String,
    external_url: String,
    description: Option(String),
  )
}

pub type WebhookCheckRunRerequestedFormEncoded {
  WebhookCheckRunRerequestedFormEncoded(payload: String)
}

pub type WebhookDiscussionCategoryChanged {
  WebhookDiscussionCategoryChanged(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookWorkflowRunRequested {
  WebhookWorkflowRunRequested(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    workflow_run: Nil,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow: WebhooksWorkflow,
  )
}

pub type CheckAnnotation {
  CheckAnnotation(
    path_: String,
    message: Option(String),
    raw_details: Option(String),
    blob_href: String,
    start_line: Int,
    start_column: Option(Int),
    annotation_level: Option(String),
    end_line: Int,
    title: Option(String),
    end_column: Option(Int),
  )
}

pub type MarketplaceListingPlan {
  MarketplaceListingPlan(
    unit_name: Option(String),
    has_free_trial: Bool,
    number: Int,
    name: String,
    url: String,
    state: String,
    bullets: List(String),
    price_model: String,
    accounts_url: String,
    monthly_price_in_cents: Int,
    id: Int,
    yearly_price_in_cents: Int,
    description: String,
  )
}

pub type TeamRoleAssignment {
  TeamRoleAssignment(
    permissions: Option(Nil),
    privacy: Option(String),
    members_url: String,
    parent: NullableTeamSimple,
    name: String,
    slug: String,
    assignment: Option(String),
    url: String,
    permission: String,
    node_id: String,
    repositories_url: String,
    id: Int,
    html_url: String,
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type WebhookProjectsV2ProjectClosed {
  WebhookProjectsV2ProjectClosed(
    projects_v2: ProjectsV2,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookRepositoryRulesetCreated {
  WebhookRepositoryRulesetCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    repository_ruleset: RepositoryRuleset,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type NullableRepositoryWebhooks {
  NullableRepositoryWebhooks(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    custom_properties: Option(Nil),
    forks_count: Int,
    fork: Bool,
    allow_update_branch: Option(Bool),
    git_url: String,
    archived: Bool,
    private: Bool,
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Bool,
    blobs_url: String,
    squash_merge_commit_message: Option(String),
    has_discussions: Option(Bool),
    teams_url: String,
    merge_commit_message: Option(String),
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    template_repository: Option(Nil),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    use_squash_pr_title_as_default: Option(Bool),
    forks: Int,
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    organization: Option(NullableSimpleUser),
    owner: SimpleUser,
    starred_at: Option(String),
    allow_merge_commit: Option(Bool),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    squash_merge_commit_title: Option(String),
    merge_commit_title: Option(String),
    updated_at: Option(String),
    watchers: Int,
    node_id: String,
    anonymous_access_enabled: Option(Bool),
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    subscribers_count: Option(Int),
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    network_count: Option(Int),
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type WebhookProjectEdited {
  WebhookProjectEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    project: WebhooksProject,
    installation: Option(SimpleInstallation),
  )
}

pub type Classroom {
  Classroom(
    archived: Bool,
    name: String,
    url: String,
    organization: SimpleClassroomOrganization,
    id: Int,
  )
}

pub type WebhookProjectsV2ItemDeleted {
  WebhookProjectsV2ItemDeleted(
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeScanningVariantAnalysisRepoTask {
  CodeScanningVariantAnalysisRepoTask(
    artifact_url: Option(String),
    artifact_size_in_bytes: Option(Int),
    database_commit_sha: Option(String),
    repository: SimpleRepository,
    result_count: Option(Int),
    failure_message: Option(String),
    analysis_status: CodeScanningVariantAnalysisStatus,
    source_location_prefix: Option(String),
  )
}

pub type RunnerApplication {
  RunnerApplication(
    os: String,
    filename: String,
    temp_download_token: Option(String),
    architecture: String,
    download_url: String,
    sha256_checksum: Option(String),
  )
}

pub type WorkflowUsage {
  WorkflowUsage(billable: Nil)
}

pub type Environment {
  Environment(
    created_at: String,
    name: String,
    url: String,
    protection_rules: Option(List(Nil)),
    deployment_branch_policy: Option(DeploymentBranchPolicySettings),
    updated_at: String,
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type CheckSuite {
  CheckSuite(
    head_branch: Option(String),
    app: NullableIntegration,
    latest_check_runs_count: Int,
    created_at: Option(String),
    repository: MinimalRepository,
    head_sha: String,
    check_runs_url: String,
    url: Option(String),
    status: Option(String),
    rerequestable: Option(Bool),
    head_commit: SimpleCommit,
    updated_at: Option(String),
    node_id: String,
    id: Int,
    after: Option(String),
    pull_requests: Option(List(PullRequestMinimal)),
    conclusion: Option(String),
    before: Option(String),
    runs_rerequestable: Option(Bool),
  )
}

pub type CodespaceMachine {
  CodespaceMachine(
    display_name: String,
    name: String,
    cpus: Int,
    operating_system: String,
    memory_in_bytes: Int,
    prebuild_availability: Option(String),
    storage_in_bytes: Int,
  )
}

pub type WebhookCodeScanningAlertReopenedByUser {
  WebhookCodeScanningAlertReopenedByUser(
    enterprise: Option(EnterpriseWebhooks),
    commit_oid: WebhooksCodeScanningCommitOid,
    repository: RepositoryWebhooks,
    ref: WebhooksCodeScanningRef,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type WebhooksSponsorship {
  WebhooksSponsorship(
    tier: Nil,
    created_at: String,
    privacy_level: String,
    sponsorable: Option(Nil),
    node_id: String,
    maintainer: Option(Nil),
    sponsor: Option(Nil),
  )
}

pub type TimelineAssignedIssueEvent {
  TimelineAssignedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    assignee: SimpleUser,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type UnlabeledIssueEvent {
  UnlabeledIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    label: Nil,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type ParticipationStats {
  ParticipationStats(all: List(Int), owner: List(Int))
}

pub type WebhookDependabotAlertDismissed {
  WebhookDependabotAlertDismissed(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type CodeScanningAlertItems {
  CodeScanningAlertItems(
    dismissed_comment: Option(CodeScanningAlertDismissedComment),
    number: AlertNumber,
    dismissed_at: AlertDismissedAt,
    created_at: AlertCreatedAt,
    dismissed_by: NullableSimpleUser,
    instances_url: AlertInstancesUrl,
    url: AlertUrl,
    state: CodeScanningAlertState,
    updated_at: Option(AlertUpdatedAt),
    tool: CodeScanningAnalysisTool,
    dismissed_reason: CodeScanningAlertDismissedReason,
    html_url: AlertHtmlUrl,
    rule: CodeScanningAlertRuleSummary,
    most_recent_instance: CodeScanningAlertInstance,
    fixed_at: Option(AlertFixedAt),
  )
}

pub type SecretScanningLocationDiscussionComment {
  SecretScanningLocationDiscussionComment(discussion_comment_url: String)
}

pub type ReferencedWorkflow {
  ReferencedWorkflow(path_: String, sha: String, ref: Option(String))
}

pub type WebhookSecretScanningAlertPubliclyLeaked {
  WebhookSecretScanningAlertPubliclyLeaked(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    alert: SecretScanningAlertWebhook,
  )
}

pub type RepositoryCollaboratorPermission {
  RepositoryCollaboratorPermission(
    user: NullableCollaborator,
    permission: String,
    role_name: String,
  )
}

pub type OrganizationInvitation {
  OrganizationInvitation(
    invitation_teams_url: String,
    invitation_source: Option(String),
    failed_reason: Option(String),
    inviter: SimpleUser,
    login: Option(String),
    created_at: String,
    team_count: Int,
    failed_at: Option(String),
    role: String,
    node_id: String,
    id: Int,
    email: Option(String),
  )
}

pub type ShortBranch {
  ShortBranch(
    protection_url: Option(String),
    name: String,
    protected: Bool,
    commit: Nil,
    protection: Option(BranchProtection),
  )
}

pub type WebhookPullRequestUnlocked {
  WebhookPullRequestUnlocked(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Status {
  Status(
    target_url: Option(String),
    avatar_url: Option(String),
    created_at: String,
    creator: NullableSimpleUser,
    url: String,
    context: String,
    state: String,
    updated_at: String,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type GitCommit {
  GitCommit(
    message: String,
    parents: List(Nil),
    committer: Nil,
    author: Nil,
    sha: String,
    url: String,
    node_id: String,
    verification: Nil,
    html_url: String,
    tree: Nil,
  )
}

pub type WebhooksTeam1 {
  WebhooksTeam1(
    privacy: Option(String),
    members_url: Option(String),
    parent: Option(Nil),
    name: String,
    slug: Option(String),
    url: Option(String),
    permission: Option(String),
    node_id: Option(String),
    repositories_url: Option(String),
    deleted: Option(Bool),
    id: Int,
    html_url: Option(String),
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type IssueSearchResultItem {
  IssueSearchResultItem(
    text_matches: Option(SearchResultTextMatches),
    draft: Option(Bool),
    body: Option(String),
    assignees: Option(List(SimpleUser)),
    comments_url: String,
    closed_at: Option(String),
    body_html: Option(String),
    events_url: String,
    number: Int,
    created_at: String,
    body_text: Option(String),
    locked: Bool,
    repository: Option(Repository),
    reactions: Option(ReactionRollup),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    labels_url: String,
    url: String,
    assignee: NullableSimpleUser,
    milestone: NullableMilestone,
    timeline_url: Option(String),
    state: String,
    state_reason: Option(String),
    score: Float,
    comments: Int,
    pull_request: Option(Nil),
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    title: String,
    repository_url: String,
    id: Int,
    html_url: String,
    active_lock_reason: Option(String),
    labels: List(Nil),
  )
}

pub type StatusCheckPolicy {
  StatusCheckPolicy(
    contexts: List(String),
    strict: Bool,
    checks: List(Nil),
    url: String,
    contexts_url: String,
  )
}

pub type OrganizationProgrammaticAccessGrantRequest {
  OrganizationProgrammaticAccessGrantRequest(
    token_id: Int,
    permissions: Nil,
    reason: Option(String),
    token_expires_at: Option(String),
    created_at: String,
    token_name: String,
    token_last_used_at: Option(String),
    owner: SimpleUser,
    repository_selection: String,
    repositories_url: String,
    id: Int,
    token_expired: Bool,
  )
}

pub type NullableCollaborator {
  NullableCollaborator(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    permissions: Option(Nil),
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    name: Option(String),
    url: String,
    starred_url: String,
    organizations_url: String,
    repos_url: String,
    role_name: String,
    gravatar_id: Option(String),
    site_admin: Bool,
    node_id: String,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
  )
}

pub type WebhookDependabotAlertReopened {
  WebhookDependabotAlertReopened(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type SecretScanningLocationIssueComment {
  SecretScanningLocationIssueComment(issue_comment_url: String)
}

pub type WebhookDiscussionUnlocked {
  WebhookDiscussionUnlocked(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type SecretScanningLocationPullRequestComment {
  SecretScanningLocationPullRequestComment(pull_request_comment_url: String)
}

pub type WebhookReleasePublished {
  WebhookReleasePublished(
    enterprise: Option(EnterpriseWebhooks),
    release: WebhooksRelease1,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type NullableGitUser {
  NullableGitUser(
    name: Option(String),
    date: Option(String),
    email: Option(String),
  )
}

pub type Artifact {
  Artifact(
    expired: Bool,
    created_at: Option(String),
    workflow_run: Option(Nil),
    name: String,
    url: String,
    size_in_bytes: Int,
    archive_download_url: String,
    updated_at: Option(String),
    node_id: String,
    id: Int,
    expires_at: Option(String),
  )
}

pub type SimpleCommit {
  SimpleCommit(
    message: String,
    committer: Option(Nil),
    author: Option(Nil),
    timestamp: String,
    id: String,
    tree_id: String,
  )
}

pub type WebhookDependabotAlertCreated {
  WebhookDependabotAlertCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type WebhookRepositoryImport {
  WebhookRepositoryImport(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    status: String,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
  )
}

pub type ProtectedBranchPullRequestReview {
  ProtectedBranchPullRequestReview(
    dismiss_stale_reviews: Bool,
    bypass_pull_request_allowances: Option(Nil),
    url: Option(String),
    dismissal_restrictions: Option(Nil),
    require_code_owner_reviews: Bool,
    require_last_push_approval: Option(Bool),
    required_approving_review_count: Option(Int),
  )
}

pub type SshSigningKey {
  SshSigningKey(created_at: String, title: String, id: Int, key: String)
}

pub type WebhookCheckRunRequestedAction {
  WebhookCheckRunRequestedAction(
    requested_action: Option(Nil),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    check_run: CheckRunWithSimpleCheckSuite,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleViolationError {
  RepositoryRuleViolationError(
    message: Option(String),
    documentation_url: Option(String),
    metadata: Option(Nil),
    status: Option(String),
  )
}

pub type WebhookCreate {
  WebhookCreate(
    enterprise: Option(EnterpriseWebhooks),
    ref_type: String,
    repository: RepositoryWebhooks,
    pusher_type: WebhooksDeployPusherType,
    ref: WebhooksRef0,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
    description: Option(String),
    master_branch: String,
  )
}

pub type WebhookWorkflowDispatch {
  WebhookWorkflowDispatch(
    enterprise: Option(EnterpriseWebhooks),
    inputs: Option(Nil),
    repository: RepositoryWebhooks,
    ref: String,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
    workflow: String,
  )
}

pub type ContentTree {
  ContentTree(
    size: Int,
    git_url: Option(String),
    path_: String,
    name: String,
    sha: String,
    url: String,
    entries: Option(List(Nil)),
    download_url: Option(String),
    content: Option(String),
    links: Nil,
    type_: String,
    html_url: Option(String),
  )
}

pub type WebhookBranchProtectionConfigurationDisabled {
  WebhookBranchProtectionConfigurationDisabled(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookIssuesDemilestoned {
  WebhookIssuesDemilestoned(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    milestone: Option(WebhooksMilestone),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeSecurityConfigurationForRepository {
  CodeSecurityConfigurationForRepository(
    status: Option(String),
    configuration: Option(CodeSecurityConfiguration),
  )
}

pub type ReviewRequestedIssueEvent {
  ReviewRequestedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    requested_team: Option(Team),
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    review_requester: SimpleUser,
    requested_reviewer: Option(SimpleUser),
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type ActionsCacheUsageOrgEnterprise {
  ActionsCacheUsageOrgEnterprise(
    total_active_caches_size_in_bytes: Int,
    total_active_caches_count: Int,
  )
}

pub type WorkflowRunUsage {
  WorkflowRunUsage(billable: Nil, run_duration_ms: Option(Int))
}

pub type WebhookPackagePublished {
  WebhookPackagePublished(
    enterprise: Option(EnterpriseWebhooks),
    package: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectsV2ProjectEdited {
  WebhookProjectsV2ProjectEdited(
    projects_v2: ProjectsV2,
    changes: Nil,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookSecurityAdvisoryPublished {
  WebhookSecurityAdvisoryPublished(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    security_advisory: WebhooksSecurityAdvisory,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookOrganizationMemberAdded {
  WebhookOrganizationMemberAdded(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    membership: WebhooksMembership,
    installation: Option(SimpleInstallation),
  )
}

pub type CodespacesPermissionsCheckForDevcontainer {
  CodespacesPermissionsCheckForDevcontainer(accepted: Bool)
}

pub type RepositoryRulesetConditionsRepositoryPropertyTarget {
  RepositoryRulesetConditionsRepositoryPropertyTarget(repository_property: Nil)
}

pub type PackageVersion {
  PackageVersion(
    license: Option(String),
    created_at: String,
    name: String,
    url: String,
    metadata: Option(Nil),
    package_html_url: String,
    updated_at: String,
    deleted_at: Option(String),
    id: Int,
    html_url: Option(String),
    description: Option(String),
  )
}

pub type PagesDeploymentStatus {
  PagesDeploymentStatus(status: Option(String))
}

pub type WebhookProjectsV2ProjectDeleted {
  WebhookProjectsV2ProjectDeleted(
    projects_v2: ProjectsV2,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhooksLabel {
  WebhooksLabel(
    default: Bool,
    color: String,
    name: String,
    url: String,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type ActionsWorkflowAccessToRepository {
  ActionsWorkflowAccessToRepository(access_level: String)
}

pub type WebhookOrganizationMemberRemoved {
  WebhookOrganizationMemberRemoved(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    membership: WebhooksMembership,
    installation: Option(SimpleInstallation),
  )
}

pub type ProjectsV2Item {
  ProjectsV2Item(
    content_type: ProjectsV2ItemContentType,
    created_at: String,
    creator: Option(SimpleUser),
    archived_at: Option(String),
    project_node_id: Option(String),
    content_node_id: String,
    updated_at: String,
    node_id: Option(String),
    id: Float,
  )
}

pub type CodeScanningSarifsStatus {
  CodeScanningSarifsStatus(
    errors: Option(List(String)),
    analyses_url: Option(String),
    processing_status: Option(String),
  )
}

pub type ActionsRepositoryPermissions {
  ActionsRepositoryPermissions(
    enabled: ActionsEnabled,
    allowed_actions: Option(AllowedActions),
    selected_actions_url: Option(SelectedActionsUrl),
  )
}

pub type CodeOfConductSimple {
  CodeOfConductSimple(
    name: String,
    url: String,
    html_url: Option(String),
    key: String,
  )
}

pub type ClassroomAssignmentGrade {
  ClassroomAssignmentGrade(
    points_awarded: Int,
    submission_timestamp: String,
    group_name: Option(String),
    starter_code_url: String,
    points_available: Int,
    github_username: String,
    student_repository_name: String,
    assignment_name: String,
    assignment_url: String,
    roster_identifier: String,
    student_repository_url: String,
  )
}

pub type WebhookCodeScanningAlertFixed {
  WebhookCodeScanningAlertFixed(
    enterprise: Option(EnterpriseWebhooks),
    commit_oid: WebhooksCodeScanningCommitOid,
    repository: RepositoryWebhooks,
    ref: WebhooksCodeScanningRef,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type CustomProperty {
  CustomProperty(
    value_type: String,
    url: Option(String),
    default_value: Option(Nil),
    values_editable_by: Option(String),
    property_name: String,
    allowed_values: Option(List(String)),
    description: Option(String),
    source_type: Option(String),
    required: Option(Bool),
  )
}

pub type BranchShort {
  BranchShort(name: String, protected: Bool, commit: Nil)
}

pub type OrganizationDependabotSecret {
  OrganizationDependabotSecret(
    created_at: String,
    name: String,
    visibility: String,
    updated_at: String,
    selected_repositories_url: Option(String),
  )
}

pub type CodeScanningOrganizationAlertItems {
  CodeScanningOrganizationAlertItems(
    dismissed_comment: Option(CodeScanningAlertDismissedComment),
    number: AlertNumber,
    dismissed_at: AlertDismissedAt,
    created_at: AlertCreatedAt,
    repository: SimpleRepository,
    dismissed_by: NullableSimpleUser,
    instances_url: AlertInstancesUrl,
    url: AlertUrl,
    state: CodeScanningAlertState,
    updated_at: Option(AlertUpdatedAt),
    tool: CodeScanningAnalysisTool,
    dismissed_reason: CodeScanningAlertDismissedReason,
    html_url: AlertHtmlUrl,
    rule: CodeScanningAlertRuleSummary,
    most_recent_instance: CodeScanningAlertInstance,
    fixed_at: Option(AlertFixedAt),
  )
}

pub type WebhookIssuesMilestoned {
  WebhookIssuesMilestoned(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    milestone: WebhooksMilestone,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookWorkflowRunCompleted {
  WebhookWorkflowRunCompleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    workflow_run: Nil,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow: WebhooksWorkflow,
  )
}

pub type Runner {
  Runner(
    os: String,
    runner_group_id: Option(Int),
    name: String,
    status: String,
    busy: Bool,
    id: Int,
    labels: List(RunnerLabel),
  )
}

pub type OrgRepoCustomPropertyValues {
  OrgRepoCustomPropertyValues(
    repository_name: String,
    repository_full_name: String,
    repository_id: Int,
    properties: List(CustomPropertyValue),
  )
}

pub type WebhookRepositoryDispatchSample {
  WebhookRepositoryDispatchSample(
    enterprise: Option(EnterpriseWebhooks),
    branch: String,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    client_payload: Option(Nil),
    installation: SimpleInstallation,
  )
}

pub type ContentFile {
  ContentFile(
    size: Int,
    git_url: Option(String),
    path_: String,
    name: String,
    sha: String,
    url: String,
    submodule_git_url: Option(String),
    target: Option(String),
    encoding: String,
    download_url: Option(String),
    content: String,
    links: Nil,
    type_: String,
    html_url: Option(String),
  )
}

pub type TimelineReviewedEvent {
  TimelineReviewedEvent(
    body: Option(String),
    commit_id: String,
    pull_request_url: String,
    body_html: Option(String),
    body_text: Option(String),
    user: SimpleUser,
    author_association: AuthorAssociation,
    state: String,
    submitted_at: Option(String),
    node_id: String,
    event: String,
    links: Nil,
    id: Int,
    html_url: String,
  )
}

pub type WebhookIssueCommentCreated {
  WebhookIssueCommentCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
    comment: Nil,
  )
}

pub type PageBuild {
  PageBuild(
    pusher: NullableSimpleUser,
    error: Nil,
    created_at: String,
    url: String,
    status: String,
    duration: Int,
    commit: String,
    updated_at: String,
  )
}

pub type SecretScanningLocationCommit {
  SecretScanningLocationCommit(
    commit_sha: String,
    path_: String,
    commit_url: String,
    blob_sha: String,
    blob_url: String,
    start_line: Float,
    start_column: Float,
    end_line: Float,
    end_column: Float,
  )
}

pub type Milestone {
  Milestone(
    closed_at: Option(String),
    number: Int,
    due_on: Option(String),
    created_at: String,
    creator: NullableSimpleUser,
    closed_issues: Int,
    labels_url: String,
    url: String,
    open_issues: Int,
    state: String,
    updated_at: String,
    node_id: String,
    title: String,
    id: Int,
    html_url: String,
    description: Option(String),
  )
}

pub type OrganizationProgrammaticAccessGrant {
  OrganizationProgrammaticAccessGrant(
    token_id: Int,
    permissions: Nil,
    token_expires_at: Option(String),
    token_name: String,
    access_granted_at: String,
    token_last_used_at: Option(String),
    owner: SimpleUser,
    repository_selection: String,
    repositories_url: String,
    id: Int,
    token_expired: Bool,
  )
}

pub type OrganizationRole {
  OrganizationRole(
    permissions: List(String),
    base_role: Option(String),
    created_at: String,
    name: String,
    organization: NullableSimpleUser,
    updated_at: String,
    source: Option(String),
    id: Int,
    description: Option(String),
  )
}

pub type WebhookPush {
  WebhookPush(
    enterprise: Option(EnterpriseWebhooks),
    compare: String,
    base_ref: WebhooksNullableString,
    pusher: Nil,
    created: Bool,
    repository: Nil,
    ref: String,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    head_commit: Option(Nil),
    deleted: Bool,
    forced: Bool,
    installation: Option(SimpleInstallation),
    after: String,
    commits: List(Nil),
    before: String,
  )
}

pub type GpgKey {
  GpgKey(
    raw_key: Option(String),
    can_certify: Bool,
    public_key: String,
    created_at: String,
    name: Option(String),
    can_sign: Bool,
    can_encrypt_storage: Bool,
    subkeys: List(Nil),
    emails: List(Nil),
    primary_key_id: Option(Int),
    id: Int,
    key_id: String,
    expires_at: Option(String),
    can_encrypt_comms: Bool,
    revoked: Bool,
  )
}

pub type PullRequestReviewComment {
  PullRequestReviewComment(
    body: String,
    original_line: Option(Int),
    commit_id: String,
    diff_hunk: String,
    path_: String,
    pull_request_url: String,
    body_html: Option(String),
    position: Option(Int),
    created_at: String,
    body_text: Option(String),
    reactions: Option(ReactionRollup),
    user: SimpleUser,
    subject_type: Option(String),
    author_association: AuthorAssociation,
    url: String,
    in_reply_to_id: Option(Int),
    start_line: Option(Int),
    start_side: Option(String),
    line: Option(Int),
    original_commit_id: String,
    side: Option(String),
    updated_at: String,
    original_position: Option(Int),
    node_id: String,
    pull_request_review_id: Option(Int),
    links: Nil,
    id: Int,
    html_url: String,
    original_start_line: Option(Int),
  )
}

pub type Metadata {
  Metadata()
}

pub type WebhookPullRequestReviewThreadUnresolved {
  WebhookPullRequestReviewThreadUnresolved(
    enterprise: Option(EnterpriseWebhooks),
    thread: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Activity {
  Activity(
    activity_type: String,
    ref: String,
    actor: NullableSimpleUser,
    timestamp: String,
    node_id: String,
    id: Int,
    after: String,
    before: String,
  )
}

pub type PackagesBillingUsage {
  PackagesBillingUsage(
    total_paid_gigabytes_bandwidth_used: Int,
    total_gigabytes_bandwidth_used: Int,
    included_gigabytes_bandwidth: Int,
  )
}

pub type WebhookProjectsV2ItemEdited {
  WebhookProjectsV2ItemEdited(
    changes: Option(Nil),
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookRepositoryArchived {
  WebhookRepositoryArchived(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type PageBuildStatus {
  PageBuildStatus(url: String, status: String)
}

pub type ProtectedBranchRequiredStatusCheck {
  ProtectedBranchRequiredStatusCheck(
    contexts: List(String),
    enforcement_level: Option(String),
    strict: Option(Bool),
    checks: List(Nil),
    url: Option(String),
    contexts_url: Option(String),
  )
}

pub type Page {
  Page(
    https_certificate: Option(PagesHttpsCertificate),
    protected_domain_state: Option(String),
    public: Bool,
    custom_404: Bool,
    build_type: Option(String),
    cname: Option(String),
    url: String,
    status: Option(String),
    https_enforced: Option(Bool),
    source: Option(PagesSourceHash),
    html_url: Option(String),
    pending_domain_unverified_at: Option(String),
  )
}

pub type WebhookMarketplacePurchasePurchased {
  WebhookMarketplacePurchasePurchased(
    enterprise: Option(EnterpriseWebhooks),
    effective_date: String,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    marketplace_purchase: WebhooksMarketplacePurchase,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    previous_marketplace_purchase: Option(WebhooksPreviousMarketplacePurchase),
  )
}

pub type SecretScanningLocationPullRequestBody {
  SecretScanningLocationPullRequestBody(pull_request_body_url: String)
}

pub type ScimError {
  ScimError(
    message: Option(String),
    documentation_url: Option(String),
    scim_type: Option(String),
    detail: Option(String),
    schemas: Option(List(String)),
    status: Option(Int),
  )
}

pub type ReferrerTraffic {
  ReferrerTraffic(uniques: Int, count: Int, referrer: String)
}

pub type Manifest {
  Manifest(
    name: String,
    metadata: Option(Metadata),
    resolved: Option(Nil),
    file: Option(Nil),
  )
}

pub type WebhookProjectDeleted {
  WebhookProjectDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(NullableRepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    project: WebhooksProject,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleTagNamePattern {
  RepositoryRuleTagNamePattern(parameters: Option(Nil), type_: String)
}

pub type SecretScanningLocationIssueBody {
  SecretScanningLocationIssueBody(issue_body_url: String)
}

pub type WebhookSubIssuesSubIssueAdded {
  WebhookSubIssuesSubIssueAdded(
    sub_issue_id: Float,
    parent_issue: Issue,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    parent_issue_id: Float,
    action: String,
    sub_issue_repo: Repository,
    sub_issue: Issue,
    installation: Option(SimpleInstallation),
  )
}

pub type Topic {
  Topic(names: List(String))
}

pub type WebhookSubIssuesSubIssueRemoved {
  WebhookSubIssuesSubIssueRemoved(
    sub_issue_id: Float,
    parent_issue: Issue,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    parent_issue_id: Float,
    action: String,
    sub_issue_repo: Repository,
    sub_issue: Issue,
    installation: Option(SimpleInstallation),
  )
}

pub type PublicUser {
  PublicUser(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    twitter_username: Option(String),
    blog: Option(String),
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    bio: Option(String),
    notification_email: Option(String),
    events_url: String,
    avatar_url: String,
    plan: Option(Nil),
    login: String,
    created_at: String,
    total_private_repos: Option(Int),
    owned_private_repos: Option(Int),
    public_repos: Int,
    name: Option(String),
    collaborators: Option(Int),
    hireable: Option(Bool),
    url: String,
    starred_url: String,
    organizations_url: String,
    following: Int,
    repos_url: String,
    private_gists: Option(Int),
    followers: Int,
    location: Option(String),
    gravatar_id: Option(String),
    site_admin: Bool,
    updated_at: String,
    node_id: String,
    public_gists: Int,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
    company: Option(String),
    disk_usage: Option(Int),
  )
}

pub type RepositoryRuleParamsWorkflowFileReference {
  RepositoryRuleParamsWorkflowFileReference(
    path_: String,
    sha: Option(String),
    repository_id: Int,
    ref: Option(String),
  )
}

pub type ProjectsV2 {
  ProjectsV2(
    closed_at: Option(String),
    public: Bool,
    number: Int,
    created_at: String,
    creator: SimpleUser,
    owner: SimpleUser,
    updated_at: String,
    node_id: String,
    title: String,
    short_description: Option(String),
    deleted_at: Option(String),
    id: Float,
    description: Option(String),
    deleted_by: NullableSimpleUser,
  )
}

pub type RepositoryRuleParamsStatusCheckConfiguration {
  RepositoryRuleParamsStatusCheckConfiguration(
    integration_id: Option(Int),
    context: String,
  )
}

pub type SecretScanningLocationDiscussionBody {
  SecretScanningLocationDiscussionBody(discussion_body_url: String)
}

pub type Migration {
  Migration(
    org_metadata_only: Bool,
    repositories: List(Repository),
    guid: String,
    created_at: String,
    exclude_attachments: Bool,
    exclude_owner_projects: Bool,
    url: String,
    state: String,
    exclude_releases: Bool,
    archive_url: Option(String),
    owner: NullableSimpleUser,
    exclude_metadata: Bool,
    updated_at: String,
    node_id: String,
    exclude: Option(List(String)),
    id: Int,
    exclude_git_data: Bool,
    lock_repositories: Bool,
  )
}

pub type CodeOfConduct {
  CodeOfConduct(
    body: Option(String),
    name: String,
    url: String,
    html_url: Option(String),
    key: String,
  )
}

pub type InteractionLimitResponse {
  InteractionLimitResponse(
    origin: String,
    limit: InteractionGroup,
    expires_at: String,
  )
}

pub type WebhookTeamCreated {
  WebhookTeamCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(Nil),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    team: WebhooksTeam1,
  )
}

pub type DemilestonedIssueEvent {
  DemilestonedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    milestone: Nil,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type WebhooksPullRequest5 {
  WebhooksPullRequest5(
    head: Nil,
    draft: Bool,
    body: Option(String),
    assignees: List(Nil),
    comments_url: String,
    mergeable_state: Option(String),
    requested_teams: List(Nil),
    deletions: Option(Int),
    merged_at: Option(String),
    closed_at: Option(String),
    review_comment_url: String,
    auto_merge: Option(Nil),
    issue_url: String,
    number: Int,
    created_at: String,
    merged_by: Option(Nil),
    locked: Bool,
    merge_commit_sha: Option(String),
    review_comments_url: String,
    user: Option(Nil),
    commits_url: String,
    changed_files: Option(Int),
    merged: Option(Bool),
    author_association: String,
    url: String,
    assignee: Option(Nil),
    statuses_url: String,
    milestone: Option(Nil),
    maintainer_can_modify: Option(Bool),
    state: String,
    base_: Nil,
    mergeable: Option(Bool),
    comments: Option(Int),
    diff_url: String,
    additions: Option(Int),
    updated_at: String,
    node_id: String,
    patch_url: String,
    title: String,
    links: Nil,
    id: Int,
    html_url: String,
    review_comments: Option(Int),
    commits: Option(Int),
    requested_reviewers: List(Nil),
    rebaseable: Option(Bool),
    active_lock_reason: Option(String),
    labels: List(Nil),
  )
}

pub type RepositoryRuleRequiredDeployments {
  RepositoryRuleRequiredDeployments(parameters: Option(Nil), type_: String)
}

pub type ShortBlob {
  ShortBlob(sha: String, url: String)
}

pub type RepositoryRuleMergeQueue {
  RepositoryRuleMergeQueue(parameters: Option(Nil), type_: String)
}

pub type WebhookIssuesUnpinned {
  WebhookIssuesUnpinned(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: WebhooksIssue2,
    installation: Option(SimpleInstallation),
  )
}

pub type LinkWithType {
  LinkWithType(href: String, type_: String)
}

pub type WebhooksUser {
  WebhooksUser(
    user_view_type: Option(String),
    gists_url: Option(String),
    following_url: Option(String),
    followers_url: Option(String),
    subscriptions_url: Option(String),
    received_events_url: Option(String),
    events_url: Option(String),
    avatar_url: Option(String),
    login: String,
    name: Option(String),
    url: Option(String),
    starred_url: Option(String),
    organizations_url: Option(String),
    repos_url: Option(String),
    gravatar_id: Option(String),
    site_admin: Option(Bool),
    node_id: Option(String),
    deleted: Option(Bool),
    type_: Option(String),
    id: Int,
    html_url: Option(String),
    email: Option(String),
  )
}

pub type RepositoryRuleCommitterEmailPattern {
  RepositoryRuleCommitterEmailPattern(parameters: Option(Nil), type_: String)
}

pub type CodeScanningVariantAnalysisSkippedRepoGroup {
  CodeScanningVariantAnalysisSkippedRepoGroup(
    repositories: List(CodeScanningVariantAnalysisRepository),
    repository_count: Int,
  )
}

pub type WebhookCheckRunCompleted {
  WebhookCheckRunCompleted(
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    check_run: CheckRunWithSimpleCheckSuite,
    sender: SimpleUser,
    action: Option(String),
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestReviewEdited {
  WebhookPullRequestReviewEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    review: WebhooksReview,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDependabotAlertReintroduced {
  WebhookDependabotAlertReintroduced(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type RateLimit {
  RateLimit(reset: Int, remaining: Int, limit: Int, used: Int)
}

pub type CodespacesPublicKey {
  CodespacesPublicKey(
    created_at: Option(String),
    url: Option(String),
    title: Option(String),
    id: Option(Int),
    key_id: String,
    key: String,
  )
}

pub type SocialAccount {
  SocialAccount(url: String, provider: String)
}

pub type WebhookOrgBlockBlocked {
  WebhookOrgBlockBlocked(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    blocked_user: WebhooksUser,
  )
}

pub type NullableIssue {
  NullableIssue(
    draft: Option(Bool),
    body: Option(String),
    assignees: Option(List(SimpleUser)),
    comments_url: String,
    closed_at: Option(String),
    body_html: Option(String),
    events_url: String,
    number: Int,
    closed_by: Option(NullableSimpleUser),
    created_at: String,
    body_text: Option(String),
    locked: Bool,
    repository: Option(Repository),
    reactions: Option(ReactionRollup),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    labels_url: String,
    url: String,
    assignee: NullableSimpleUser,
    milestone: NullableMilestone,
    timeline_url: Option(String),
    state: String,
    state_reason: Option(String),
    comments: Int,
    pull_request: Option(Nil),
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    title: String,
    repository_url: String,
    id: Int,
    html_url: String,
    active_lock_reason: Option(String),
    labels: List(Nil),
  )
}

pub type WebhookPersonalAccessTokenRequestCancelled {
  WebhookPersonalAccessTokenRequestCancelled(
    enterprise: Option(EnterpriseWebhooks),
    personal_access_token_request: PersonalAccessTokenRequest,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: SimpleInstallation,
  )
}

pub type IssueEventLabel {
  IssueEventLabel(color: Option(String), name: Option(String))
}

pub type PorterLargeFile {
  PorterLargeFile(size: Int, path_: String, oid: String, ref_name: String)
}

pub type LicenseContent {
  LicenseContent(
    size: Int,
    license: NullableLicenseSimple,
    git_url: Option(String),
    path_: String,
    name: String,
    sha: String,
    url: String,
    encoding: String,
    download_url: Option(String),
    content: String,
    links: Nil,
    type_: String,
    html_url: Option(String),
  )
}

pub type CodeScanningDefaultSetupUpdateResponse {
  CodeScanningDefaultSetupUpdateResponse(
    run_id: Option(Int),
    run_url: Option(String),
  )
}

pub type ContentSymlink {
  ContentSymlink(
    size: Int,
    git_url: Option(String),
    path_: String,
    name: String,
    sha: String,
    url: String,
    target: String,
    download_url: Option(String),
    links: Nil,
    type_: String,
    html_url: Option(String),
  )
}

pub type WebhooksMilestone {
  WebhooksMilestone(
    closed_at: Option(String),
    number: Int,
    due_on: Option(String),
    created_at: String,
    creator: Option(Nil),
    closed_issues: Int,
    labels_url: String,
    url: String,
    open_issues: Int,
    state: String,
    updated_at: String,
    node_id: String,
    title: String,
    id: Int,
    html_url: String,
    description: Option(String),
  )
}

pub type CodeScanningAnalysisTool {
  CodeScanningAnalysisTool(
    guid: Option(CodeScanningAnalysisToolGuid),
    name: Option(CodeScanningAnalysisToolName),
    version: Option(CodeScanningAnalysisToolVersion),
  )
}

pub type CloneTraffic {
  CloneTraffic(uniques: Int, count: Int, clones: List(Traffic))
}

pub type MilestonedIssueEvent {
  MilestonedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    milestone: Nil,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type RepositoryRuleCreation {
  RepositoryRuleCreation(type_: String)
}

pub type AddedToProjectIssueEvent {
  AddedToProjectIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    project_card: Option(Nil),
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type ReviewDismissedIssueEvent {
  ReviewDismissedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    dismissed_review: Nil,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type WebhookRegistryPackagePublished {
  WebhookRegistryPackagePublished(
    enterprise: Option(EnterpriseWebhooks),
    registry_package: Nil,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookWatchStarted {
  WebhookWatchStarted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type SimpleCommitStatus {
  SimpleCommitStatus(
    target_url: Option(String),
    avatar_url: Option(String),
    created_at: String,
    url: String,
    context: String,
    state: String,
    updated_at: String,
    node_id: String,
    id: Int,
    description: Option(String),
    required: Option(Bool),
  )
}

pub type RepositoryRuleParamsCodeScanningTool {
  RepositoryRuleParamsCodeScanningTool(
    security_alerts_threshold: String,
    alerts_threshold: String,
    tool: String,
  )
}

pub type WebhookWorkflowJobInProgress {
  WebhookWorkflowJobInProgress(
    enterprise: Option(EnterpriseWebhooks),
    deployment: Option(Deployment),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow_job: Nil,
  )
}

pub type RepositoryAdvisoryCreate {
  RepositoryAdvisoryCreate(
    cvss_vector_string: Option(String),
    summary: String,
    cve_id: Option(String),
    cwe_ids: Option(List(String)),
    credits: Option(List(Nil)),
    vulnerabilities: List(Nil),
    start_private_fork: Option(Bool),
    description: String,
    severity: Option(String),
  )
}

pub type WebhookRepositoryVulnerabilityAlertReopen {
  WebhookRepositoryVulnerabilityAlertReopen(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: WebhooksAlert,
  )
}

pub type WebhookReleaseCreated {
  WebhookReleaseCreated(
    enterprise: Option(EnterpriseWebhooks),
    release: WebhooksRelease,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ApiOverview {
  ApiOverview(
    verifiable_password_authentication: Bool,
    pages: Option(List(String)),
    ssh_key_fingerprints: Option(Nil),
    ssh_keys: Option(List(String)),
    copilot: Option(List(String)),
    packages: Option(List(String)),
    domains: Option(Nil),
    hooks: Option(List(String)),
    actions_macos: Option(List(String)),
    dependabot: Option(List(String)),
    importer: Option(List(String)),
    git: Option(List(String)),
    web: Option(List(String)),
    github_enterprise_importer: Option(List(String)),
    codespaces: Option(List(String)),
    api: Option(List(String)),
    actions: Option(List(String)),
  )
}

pub type WebhookOrganizationMemberInvited {
  WebhookOrganizationMemberInvited(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    user: Option(WebhooksUser),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    invitation: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeSecurityConfigurationRepositories {
  CodeSecurityConfigurationRepositories(
    repository: Option(SimpleRepository),
    status: Option(String),
  )
}

pub type WebhookRepositoryDeleted {
  WebhookRepositoryDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type OrganizationSimple {
  OrganizationSimple(
    hooks_url: String,
    members_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    issues_url: String,
    url: String,
    repos_url: String,
    public_members_url: String,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type WebhooksWorkflowJobRun {
  WebhooksWorkflowJobRun(
    created_at: String,
    status: String,
    environment: String,
    updated_at: String,
    id: Int,
    html_url: String,
  )
}

pub type TagProtection {
  TagProtection(
    enabled: Option(Bool),
    created_at: Option(String),
    pattern: String,
    updated_at: Option(String),
    id: Option(Int),
  )
}

pub type OrgHook {
  OrgHook(
    ping_url: String,
    config: Nil,
    deliveries_url: Option(String),
    active: Bool,
    created_at: String,
    name: String,
    url: String,
    updated_at: String,
    events: List(String),
    type_: String,
    id: Int,
  )
}

pub type TimelineUnassignedIssueEvent {
  TimelineUnassignedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    assignee: SimpleUser,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type Hovercard {
  Hovercard(contexts: List(Nil))
}

pub type CopilotDotcomChat {
  CopilotDotcomChat(models: Option(List(Nil)), total_engaged_users: Option(Int))
}

pub type PagesHttpsCertificate {
  PagesHttpsCertificate(
    domains: List(String),
    state: String,
    description: String,
    expires_at: Option(String),
  )
}

pub type WebhookProjectColumnDeleted {
  WebhookProjectColumnDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(NullableRepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    project_column: WebhooksProjectColumn,
  )
}

pub type SecretScanningLocationDiscussionTitle {
  SecretScanningLocationDiscussionTitle(discussion_title_url: String)
}

pub type RepositoryRuleRequiredLinearHistory {
  RepositoryRuleRequiredLinearHistory(type_: String)
}

pub type WebhookPullRequestReopened {
  WebhookPullRequestReopened(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: PullRequestWebhook,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectsV2ItemConverted {
  WebhookProjectsV2ItemConverted(
    changes: Nil,
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ActionsVariable {
  ActionsVariable(
    created_at: String,
    name: String,
    value: String,
    updated_at: String,
  )
}

pub type CodespacesOrgSecret {
  CodespacesOrgSecret(
    created_at: String,
    name: String,
    visibility: String,
    updated_at: String,
    selected_repositories_url: Option(String),
  )
}

pub type WebhookPullRequestEnqueued {
  WebhookPullRequestEnqueued(
    enterprise: Option(EnterpriseWebhooks),
    number: Int,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDiscussionAnswered {
  WebhookDiscussionAnswered(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    answer: WebhooksAnswer,
  )
}

pub type LabeledIssueEvent {
  LabeledIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    label: Nil,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type ProtectedBranchAdminEnforced {
  ProtectedBranchAdminEnforced(enabled: Bool, url: String)
}

pub type NullableScopedInstallation {
  NullableScopedInstallation(
    single_file_paths: Option(List(String)),
    permissions: AppPermissions,
    has_multiple_single_files: Option(Bool),
    account: SimpleUser,
    single_file_name: Option(String),
    repository_selection: String,
    repositories_url: String,
  )
}

pub type WebhookInstallationCreated {
  WebhookInstallationCreated(
    enterprise: Option(EnterpriseWebhooks),
    repositories: Option(WebhooksRepositories),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Installation,
    requester: Option(WebhooksUser),
  )
}

pub type ActionsPublicKey {
  ActionsPublicKey(
    created_at: Option(String),
    url: Option(String),
    title: Option(String),
    id: Option(Int),
    key_id: String,
    key: String,
  )
}

pub type SelectedActions {
  SelectedActions(
    patterns_allowed: Option(List(String)),
    verified_allowed: Option(Bool),
    github_owned_allowed: Option(Bool),
  )
}

pub type SecretScanningLocationIssueTitle {
  SecretScanningLocationIssueTitle(issue_title_url: String)
}

pub type Dependency {
  Dependency(
    dependencies: Option(List(String)),
    metadata: Option(Metadata),
    scope: Option(String),
    package_url: Option(String),
    relationship: Option(String),
  )
}

pub type IssueEventProjectCard {
  IssueEventProjectCard(
    project_id: Int,
    project_url: String,
    previous_column_name: Option(String),
    url: String,
    column_name: String,
    id: Int,
  )
}

pub type SecretScanningLocationPullRequestTitle {
  SecretScanningLocationPullRequestTitle(pull_request_title_url: String)
}

pub type WebhookBranchProtectionConfigurationEnabled {
  WebhookBranchProtectionConfigurationEnabled(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDeploymentReviewRequested {
  WebhookDeploymentReviewRequested(
    enterprise: Option(EnterpriseWebhooks),
    workflow_job_run: Nil,
    repository: RepositoryWebhooks,
    workflow_run: Option(Nil),
    reviewers: List(Nil),
    requestor: WebhooksUser,
    organization: OrganizationSimpleWebhooks,
    environment: String,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    since: String,
  )
}

pub type WebhookDiscussionCommentCreated {
  WebhookDiscussionCommentCreated(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    comment: WebhooksComment,
  )
}

pub type DependabotSecret {
  DependabotSecret(created_at: String, name: String, updated_at: String)
}

pub type WebhookCheckRunCreated {
  WebhookCheckRunCreated(
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    check_run: CheckRunWithSimpleCheckSuite,
    sender: SimpleUser,
    action: Option(String),
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRulesetConditionsRepositoryIdTarget {
  RepositoryRulesetConditionsRepositoryIdTarget(repository_id: Nil)
}

pub type ValidationErrorSimple {
  ValidationErrorSimple(
    message: String,
    documentation_url: String,
    errors: Option(List(String)),
  )
}

pub type WebhookRepositoryVulnerabilityAlertCreate {
  WebhookRepositoryVulnerabilityAlertCreate(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: WebhooksAlert,
  )
}

pub type HookResponse {
  HookResponse(
    message: Option(String),
    code: Option(Int),
    status: Option(String),
  )
}

pub type RepositoryRuleBranchNamePattern {
  RepositoryRuleBranchNamePattern(parameters: Option(Nil), type_: String)
}

pub type IssueComment {
  IssueComment(
    body: Option(String),
    body_html: Option(String),
    issue_url: String,
    created_at: String,
    body_text: Option(String),
    reactions: Option(ReactionRollup),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    url: String,
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type CodeownersErrors {
  CodeownersErrors(errors: List(Nil))
}

pub type MarketplaceAccount {
  MarketplaceAccount(
    login: String,
    organization_billing_email: Option(String),
    url: String,
    node_id: Option(String),
    type_: String,
    id: Int,
    email: Option(String),
  )
}

pub type WebhookProjectsV2StatusUpdateCreated {
  WebhookProjectsV2StatusUpdateCreated(
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    projects_v2_status_update: ProjectsV2StatusUpdate,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookCheckSuiteRerequested {
  WebhookCheckSuiteRerequested(
    check_suite: Nil,
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryAdvisoryVulnerability {
  RepositoryAdvisoryVulnerability(
    vulnerable_functions: Option(List(String)),
    package: Option(Nil),
    patched_versions: Option(String),
    vulnerable_version_range: Option(String),
  )
}

pub type WebhookIssuesAssigned {
  WebhookIssuesAssigned(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    assignee: Option(WebhooksUser),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: WebhooksIssue,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDiscussionReopened {
  WebhookDiscussionReopened(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDiscussionUnlabeled {
  WebhookDiscussionUnlabeled(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: WebhooksLabel,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPingFormEncoded {
  WebhookPingFormEncoded(payload: String)
}

pub type GistHistory {
  GistHistory(
    change_status: Option(Nil),
    user: Option(NullableSimpleUser),
    url: Option(String),
    committed_at: Option(String),
    version: Option(String),
  )
}

pub type Repository {
  Repository(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    forks_count: Int,
    fork: Bool,
    allow_update_branch: Option(Bool),
    git_url: String,
    archived: Bool,
    private: Bool,
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Bool,
    blobs_url: String,
    squash_merge_commit_message: Option(String),
    has_discussions: Option(Bool),
    teams_url: String,
    merge_commit_message: Option(String),
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    use_squash_pr_title_as_default: Option(Bool),
    forks: Int,
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    owner: SimpleUser,
    starred_at: Option(String),
    allow_merge_commit: Option(Bool),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    squash_merge_commit_title: Option(String),
    merge_commit_title: Option(String),
    updated_at: Option(String),
    watchers: Int,
    node_id: String,
    anonymous_access_enabled: Option(Bool),
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type PorterAuthor {
  PorterAuthor(
    remote_name: String,
    name: String,
    url: String,
    remote_id: String,
    import_url: String,
    id: Int,
    email: String,
  )
}

pub type TeamDiscussionComment {
  TeamDiscussionComment(
    last_edited_at: Option(String),
    body: String,
    body_html: String,
    number: Int,
    created_at: String,
    reactions: Option(ReactionRollup),
    author: NullableSimpleUser,
    url: String,
    updated_at: String,
    node_id: String,
    discussion_url: String,
    html_url: String,
    body_version: String,
  )
}

pub type WebhookPullRequestUnlabeled {
  WebhookPullRequestUnlabeled(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: Option(WebhooksLabel),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDiscussionDeleted {
  WebhookDiscussionDeleted(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhooksDeployKey {
  WebhooksDeployKey(
    enabled: Option(Bool),
    last_used: Option(String),
    verified: Bool,
    created_at: String,
    url: String,
    read_only: Bool,
    added_by: Option(String),
    title: String,
    id: Int,
    key: String,
  )
}

pub type RepositoryAdvisoryCredit {
  RepositoryAdvisoryCredit(
    user: SimpleUser,
    state: String,
    type_: SecurityAdvisoryCreditTypes,
  )
}

pub type Thread {
  Thread(
    reason: String,
    repository: MinimalRepository,
    subject: Nil,
    subscription_url: String,
    url: String,
    unread: Bool,
    last_read_at: Option(String),
    updated_at: String,
    id: String,
  )
}

pub type WebhookGithubAppAuthorizationRevoked {
  WebhookGithubAppAuthorizationRevoked(sender: SimpleUser, action: String)
}

pub type ReleaseAsset {
  ReleaseAsset(
    content_type: String,
    size: Int,
    created_at: String,
    name: String,
    uploader: NullableSimpleUser,
    browser_download_url: String,
    url: String,
    state: String,
    label: Option(String),
    updated_at: String,
    node_id: String,
    download_count: Int,
    id: Int,
  )
}

pub type WebhookLabelDeleted {
  WebhookLabelDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: WebhooksLabel,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ReviewComment {
  ReviewComment(
    body: String,
    original_line: Option(Int),
    commit_id: String,
    diff_hunk: String,
    path_: String,
    pull_request_url: String,
    body_html: Option(String),
    position: Option(Int),
    created_at: String,
    body_text: Option(String),
    reactions: Option(ReactionRollup),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    url: String,
    in_reply_to_id: Option(Int),
    start_line: Option(Int),
    start_side: Option(String),
    line: Option(Int),
    original_commit_id: String,
    side: Option(String),
    updated_at: String,
    original_position: Int,
    node_id: String,
    pull_request_review_id: Option(Int),
    links: Nil,
    id: Int,
    html_url: String,
    original_start_line: Option(Int),
  )
}

pub type CodespacesUserPublicKey {
  CodespacesUserPublicKey(key_id: String, key: String)
}

pub type DiffEntry {
  DiffEntry(
    changes: Int,
    deletions: Int,
    filename: String,
    patch: Option(String),
    contents_url: String,
    sha: String,
    blob_url: String,
    previous_filename: Option(String),
    status: String,
    additions: Int,
    raw_url: String,
  )
}

pub type WebhookDeployKeyCreated {
  WebhookDeployKeyCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    key: WebhooksDeployKey,
  )
}

pub type MergeGroup {
  MergeGroup(
    base_ref: String,
    head_sha: String,
    head_ref: String,
    head_commit: SimpleCommit,
    base_sha: String,
  )
}

pub type NullableLicenseSimple {
  NullableLicenseSimple(
    spdx_id: Option(String),
    name: String,
    url: Option(String),
    node_id: String,
    html_url: Option(String),
    key: String,
  )
}

pub type ProjectColumn {
  ProjectColumn(
    project_url: String,
    created_at: String,
    name: String,
    url: String,
    cards_url: String,
    updated_at: String,
    node_id: String,
    id: Int,
  )
}

pub type CommitComment {
  CommitComment(
    body: String,
    commit_id: String,
    path_: Option(String),
    position: Option(Int),
    created_at: String,
    reactions: Option(ReactionRollup),
    user: NullableSimpleUser,
    author_association: AuthorAssociation,
    url: String,
    line: Option(Int),
    updated_at: String,
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type BasicError {
  BasicError(
    message: Option(String),
    documentation_url: Option(String),
    url: Option(String),
    status: Option(String),
  )
}

pub type TeamProject {
  TeamProject(
    body: Option(String),
    private: Option(Bool),
    owner_url: String,
    permissions: Nil,
    number: Int,
    created_at: String,
    name: String,
    creator: SimpleUser,
    columns_url: String,
    url: String,
    state: String,
    updated_at: String,
    node_id: String,
    organization_permission: Option(String),
    id: Int,
    html_url: String,
  )
}

pub type CodeScanningAlertRule {
  CodeScanningAlertRule(
    security_severity_level: Option(String),
    help: Option(String),
    name: Option(String),
    full_description: Option(String),
    help_uri: Option(String),
    tags: Option(List(String)),
    id: Option(String),
    description: Option(String),
    severity: Option(String),
  )
}

pub type WebhookIssuesClosed {
  WebhookIssuesClosed(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type OrganizationFull {
  OrganizationFull(
    hooks_url: String,
    dependency_graph_enabled_for_new_repositories: Option(Bool),
    has_organization_projects: Bool,
    twitter_username: Option(String),
    members_allowed_repository_creation_type: Option(String),
    dependabot_security_updates_enabled_for_new_repositories: Option(Bool),
    blog: Option(String),
    default_repository_permission: Option(String),
    secret_scanning_push_protection_custom_link: Option(String),
    two_factor_requirement_enabled: Option(Bool),
    web_commit_signoff_required: Option(Bool),
    members_url: String,
    events_url: String,
    avatar_url: String,
    plan: Option(Nil),
    login: String,
    has_repository_projects: Bool,
    created_at: String,
    secret_scanning_push_protection_custom_link_enabled: Option(Bool),
    issues_url: String,
    total_private_repos: Option(Int),
    owned_private_repos: Option(Int),
    public_repos: Int,
    name: Option(String),
    members_can_fork_private_repositories: Option(Bool),
    collaborators: Option(Int),
    deploy_keys_enabled_for_repositories: Option(Bool),
    url: String,
    members_can_create_public_repositories: Option(Bool),
    archived_at: Option(String),
    following: Int,
    repos_url: String,
    members_can_create_private_repositories: Option(Bool),
    public_members_url: String,
    private_gists: Option(Int),
    followers: Int,
    location: Option(String),
    members_can_create_pages: Option(Bool),
    dependabot_alerts_enabled_for_new_repositories: Option(Bool),
    members_can_create_repositories: Option(Bool),
    updated_at: String,
    node_id: String,
    billing_email: Option(String),
    public_gists: Int,
    members_can_create_private_pages: Option(Bool),
    secret_scanning_enabled_for_new_repositories: Option(Bool),
    type_: String,
    secret_scanning_push_protection_enabled_for_new_repositories: Option(Bool),
    id: Int,
    html_url: String,
    members_can_create_public_pages: Option(Bool),
    members_can_create_internal_repositories: Option(Bool),
    email: Option(String),
    description: Option(String),
    company: Option(String),
    is_verified: Option(Bool),
    advanced_security_enabled_for_new_repositories: Option(Bool),
    disk_usage: Option(Int),
  )
}

pub type WebhookCustomPropertyUpdated {
  WebhookCustomPropertyUpdated(
    enterprise: Option(EnterpriseWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    definition: CustomProperty,
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Reaction {
  Reaction(
    created_at: String,
    user: NullableSimpleUser,
    node_id: String,
    content: String,
    id: Int,
  )
}

pub type Autolink {
  Autolink(
    is_alphanumeric: Bool,
    url_template: String,
    key_prefix: String,
    id: Int,
  )
}

pub type WebhooksIssue2 {
  WebhooksIssue2(
    draft: Option(Bool),
    body: Option(String),
    assignees: List(Nil),
    comments_url: String,
    closed_at: Option(String),
    events_url: String,
    number: Int,
    created_at: String,
    locked: Option(Bool),
    reactions: Nil,
    user: Option(Nil),
    author_association: String,
    labels_url: String,
    url: String,
    assignee: Option(Nil),
    milestone: Option(Nil),
    timeline_url: Option(String),
    state: Option(String),
    state_reason: Option(String),
    comments: Int,
    pull_request: Option(Nil),
    performed_via_github_app: Option(Nil),
    updated_at: String,
    node_id: String,
    title: String,
    repository_url: String,
    id: Int,
    html_url: String,
    active_lock_reason: Option(String),
    labels: Option(List(Nil)),
  )
}

pub type ActionsGetDefaultWorkflowPermissions {
  ActionsGetDefaultWorkflowPermissions(
    default_workflow_permissions: ActionsDefaultWorkflowPermissions,
    can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews,
  )
}

pub type WebhookIssuesTransferred {
  WebhookIssuesTransferred(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: WebhooksIssue2,
    installation: Option(SimpleInstallation),
  )
}

pub type EnterpriseTeam {
  EnterpriseTeam(
    sync_to_organizations: String,
    members_url: String,
    created_at: String,
    name: String,
    slug: String,
    url: String,
    updated_at: String,
    id: Int,
    html_url: String,
    group_id: Option(String),
  )
}

pub type CopilotOrganizationDetails {
  CopilotOrganizationDetails(
    cli: Option(String),
    platform_chat: Option(String),
    seat_breakdown: CopilotSeatBreakdown,
    ide_chat: Option(String),
    seat_management_setting: String,
    plan_type: Option(String),
    public_code_suggestions: String,
  )
}

pub type IssueEventMilestone {
  IssueEventMilestone(title: String)
}

pub type CodeSecurityConfiguration {
  CodeSecurityConfiguration(
    enforcement: Option(String),
    secret_scanning: Option(String),
    secret_scanning_non_provider_patterns: Option(String),
    code_scanning_default_setup: Option(String),
    dependabot_alerts: Option(String),
    secret_scanning_delegated_bypass_options: Option(Nil),
    secret_scanning_delegated_bypass: Option(String),
    target_type: Option(String),
    dependency_graph_autosubmit_action_options: Option(Nil),
    dependency_graph_autosubmit_action: Option(String),
    created_at: Option(String),
    name: Option(String),
    url: Option(String),
    private_vulnerability_reporting: Option(String),
    updated_at: Option(String),
    dependabot_security_updates: Option(String),
    secret_scanning_validity_checks: Option(String),
    dependency_graph: Option(String),
    id: Option(Int),
    html_url: Option(String),
    description: Option(String),
    advanced_security: Option(String),
    secret_scanning_push_protection: Option(String),
  )
}

pub type WebhooksUserMannequin {
  WebhooksUserMannequin(
    user_view_type: Option(String),
    gists_url: Option(String),
    following_url: Option(String),
    followers_url: Option(String),
    subscriptions_url: Option(String),
    received_events_url: Option(String),
    events_url: Option(String),
    avatar_url: Option(String),
    login: String,
    name: Option(String),
    url: Option(String),
    starred_url: Option(String),
    organizations_url: Option(String),
    repos_url: Option(String),
    gravatar_id: Option(String),
    site_admin: Option(Bool),
    node_id: Option(String),
    deleted: Option(Bool),
    type_: Option(String),
    id: Int,
    html_url: Option(String),
    email: Option(String),
  )
}

pub type WebhookSecurityAndAnalysis {
  WebhookSecurityAndAnalysis(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: FullRepository,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    installation: Option(SimpleInstallation),
  )
}

pub type ContentTraffic {
  ContentTraffic(uniques: Int, path_: String, count: Int, title: String)
}

pub type SecretScanningPushProtectionBypass {
  SecretScanningPushProtectionBypass(
    token_type: Option(String),
    reason: Option(SecretScanningPushProtectionBypassReason),
    expire_at: Option(String),
  )
}

pub type WebhookPing {
  WebhookPing(
    hook: Option(Nil),
    zen: Option(String),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    hook_id: Option(Int),
  )
}

pub type WebhookSecretScanningAlertValidated {
  WebhookSecretScanningAlertValidated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    alert: SecretScanningAlertWebhook,
  )
}

pub type WebhooksApprover {
  WebhooksApprover(
    user_view_type: Option(String),
    gists_url: Option(String),
    following_url: Option(String),
    followers_url: Option(String),
    subscriptions_url: Option(String),
    received_events_url: Option(String),
    events_url: Option(String),
    avatar_url: Option(String),
    login: Option(String),
    url: Option(String),
    starred_url: Option(String),
    organizations_url: Option(String),
    repos_url: Option(String),
    gravatar_id: Option(String),
    site_admin: Option(Bool),
    node_id: Option(String),
    type_: Option(String),
    id: Option(Int),
    html_url: Option(String),
  )
}

pub type FileCommit {
  FileCommit(commit: Nil, content: Option(Nil))
}

pub type WebhookRubygemsMetadata {
  WebhookRubygemsMetadata(
    commit_oid: Option(String),
    dependencies: Option(List(Nil)),
    name: Option(String),
    readme: Option(String),
    homepage: Option(String),
    metadata: Option(Nil),
    repo: Option(String),
    platform: Option(String),
    version_info: Option(Nil),
    description: Option(String),
  )
}

pub type DeploymentProtectionRule {
  DeploymentProtectionRule(
    app: CustomDeploymentRuleApp,
    enabled: Bool,
    node_id: String,
    id: Int,
  )
}

pub type RunnerGroupsOrg {
  RunnerGroupsOrg(
    default: Bool,
    allows_public_repositories: Bool,
    name: String,
    inherited_allows_public_repositories: Option(Bool),
    selected_workflows: Option(List(String)),
    visibility: String,
    runners_url: String,
    restricted_to_workflows: Option(Bool),
    inherited: Bool,
    id: Float,
    hosted_runners_url: Option(String),
    selected_repositories_url: Option(String),
    workflow_restrictions_read_only: Option(Bool),
  )
}

pub type RepoCodespacesSecret {
  RepoCodespacesSecret(created_at: String, name: String, updated_at: String)
}

pub type EnterpriseWebhooks {
  EnterpriseWebhooks(
    avatar_url: String,
    created_at: Option(String),
    name: String,
    slug: String,
    website_url: Option(String),
    updated_at: Option(String),
    node_id: String,
    id: Int,
    html_url: String,
    description: Option(String),
  )
}

pub type NullableIntegration {
  NullableIntegration(
    permissions: Nil,
    client_secret: Option(String),
    installations_count: Option(Int),
    created_at: String,
    name: String,
    slug: Option(String),
    client_id: Option(String),
    owner: NullableSimpleUser,
    updated_at: String,
    node_id: String,
    pem: Option(String),
    webhook_secret: Option(String),
    events: List(String),
    id: Int,
    html_url: String,
    external_url: String,
    description: Option(String),
  )
}

pub type FullRepository {
  FullRepository(
    hooks_url: String,
    default_branch: String,
    branches_url: String,
    size: Int,
    forks_url: String,
    license: NullableLicenseSimple,
    delete_branch_on_merge: Option(Bool),
    custom_properties: Option(Nil),
    forks_count: Int,
    fork: Bool,
    allow_update_branch: Option(Bool),
    git_url: String,
    archived: Bool,
    private: Bool,
    security_and_analysis: Option(SecurityAndAnalysis),
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Option(Bool),
    blobs_url: String,
    squash_merge_commit_message: Option(String),
    has_discussions: Bool,
    teams_url: String,
    merge_commit_message: Option(String),
    watchers_count: Int,
    stargazers_url: String,
    stargazers_count: Int,
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    parent: Option(Repository),
    created_at: String,
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: String,
    code_of_conduct: Option(CodeOfConductSimple),
    allow_squash_merge: Option(Bool),
    homepage: Option(String),
    template_repository: Option(NullableRepository),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Int,
    is_template: Option(Bool),
    statuses_url: String,
    use_squash_pr_title_as_default: Option(Bool),
    forks: Int,
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    allow_rebase_merge: Option(Bool),
    organization: Option(NullableSimpleUser),
    owner: SimpleUser,
    allow_merge_commit: Option(Bool),
    assignees_url: String,
    has_wiki: Bool,
    compare_url: String,
    git_tags_url: String,
    squash_merge_commit_title: Option(String),
    merge_commit_title: Option(String),
    updated_at: String,
    watchers: Int,
    node_id: String,
    anonymous_access_enabled: Option(Bool),
    notifications_url: String,
    ssh_url: String,
    language: Option(String),
    pushed_at: String,
    downloads_url: String,
    source: Option(Repository),
    subscribers_url: String,
    subscribers_count: Int,
    id: Int,
    svn_url: String,
    full_name: String,
    html_url: String,
    disabled: Bool,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    allow_auto_merge: Option(Bool),
    pulls_url: String,
    network_count: Int,
    deployments_url: String,
    has_projects: Bool,
    has_pages: Bool,
    master_branch: Option(String),
    open_issues_count: Int,
    git_commits_url: String,
    has_issues: Bool,
  )
}

pub type WebhookRepositoryUnarchived {
  WebhookRepositoryUnarchived(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type SimpleClassroomOrganization {
  SimpleClassroomOrganization(
    avatar_url: String,
    login: String,
    name: Option(String),
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookProjectsV2ItemArchived {
  WebhookProjectsV2ItemArchived(
    changes: WebhooksProjectChanges,
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type DependencyGraphSpdxSbom {
  DependencyGraphSpdxSbom(sbom: Nil)
}

pub type OrgRulesetConditions {
  OrgRulesetConditions()
}

pub type Discussion {
  Discussion(
    body: String,
    answer_chosen_by: Option(Nil),
    number: Int,
    created_at: String,
    locked: Bool,
    reactions: Option(Nil),
    user: Option(Nil),
    author_association: String,
    timeline_url: Option(String),
    state: String,
    state_reason: Option(String),
    comments: Int,
    updated_at: String,
    node_id: String,
    title: String,
    repository_url: String,
    id: Int,
    html_url: String,
    answer_html_url: Option(String),
    category: Nil,
    active_lock_reason: Option(String),
    answer_chosen_at: Option(String),
    labels: Option(List(Label)),
  )
}

pub type WebhookStatus {
  WebhookStatus(
    target_url: Option(String),
    enterprise: Option(EnterpriseWebhooks),
    avatar_url: Option(String),
    created_at: String,
    repository: RepositoryWebhooks,
    name: String,
    sha: String,
    context: String,
    branches: List(Nil),
    state: String,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    commit: Nil,
    updated_at: String,
    installation: Option(SimpleInstallation),
    id: Int,
    description: Option(String),
  )
}

pub type WebhookMetaDeleted {
  WebhookMetaDeleted(
    enterprise: Option(EnterpriseWebhooks),
    hook: Nil,
    repository: Option(NullableRepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    hook_id: Int,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookSecurityAdvisoryWithdrawn {
  WebhookSecurityAdvisoryWithdrawn(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    security_advisory: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type OidcCustomSubRepo {
  OidcCustomSubRepo(use_default: Bool, include_claim_keys: Option(List(String)))
}

pub type WebhookTeamAdd {
  WebhookTeamAdd(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
    team: WebhooksTeam1,
  )
}

pub type WebhookBranchProtectionRuleDeleted {
  WebhookBranchProtectionRuleDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    rule: WebhooksRule,
  )
}

pub type WebhookDiscussionPinned {
  WebhookDiscussionPinned(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type AssignedIssueEvent {
  AssignedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    assignee: SimpleUser,
    actor: SimpleUser,
    performed_via_github_app: Integration,
    node_id: String,
    event: String,
    id: Int,
    assigner: SimpleUser,
  )
}

pub type PullRequest {
  PullRequest(
    head: Nil,
    draft: Option(Bool),
    body: Option(String),
    assignees: Option(List(SimpleUser)),
    comments_url: String,
    mergeable_state: String,
    requested_teams: Option(List(TeamSimple)),
    deletions: Int,
    merged_at: Option(String),
    closed_at: Option(String),
    review_comment_url: String,
    auto_merge: AutoMerge,
    issue_url: String,
    number: Int,
    created_at: String,
    merged_by: NullableSimpleUser,
    locked: Bool,
    merge_commit_sha: Option(String),
    review_comments_url: String,
    user: SimpleUser,
    commits_url: String,
    changed_files: Int,
    merged: Bool,
    author_association: AuthorAssociation,
    url: String,
    assignee: NullableSimpleUser,
    statuses_url: String,
    milestone: NullableMilestone,
    maintainer_can_modify: Bool,
    state: String,
    base_: Nil,
    mergeable: Option(Bool),
    comments: Int,
    diff_url: String,
    additions: Int,
    updated_at: String,
    node_id: String,
    patch_url: String,
    title: String,
    links: Nil,
    id: Int,
    html_url: String,
    review_comments: Int,
    commits: Int,
    requested_reviewers: Option(List(SimpleUser)),
    rebaseable: Option(Bool),
    active_lock_reason: Option(String),
    labels: List(Nil),
  )
}

pub type CombinedBillingUsage {
  CombinedBillingUsage(
    estimated_storage_for_month: Int,
    estimated_paid_storage_for_month: Int,
    days_left_in_billing_cycle: Int,
  )
}

pub type SecretScanningAlertWebhook {
  SecretScanningAlertWebhook(
    push_protection_bypass_request_html_url: Option(String),
    push_protection_bypassed: Option(Bool),
    number: Option(AlertNumber),
    secret_type: Option(String),
    created_at: Option(AlertCreatedAt),
    push_protection_bypassed_at: Option(String),
    push_protection_bypass_request_reviewer: Option(NullableSimpleUser),
    publicly_leaked: Option(Bool),
    resolution: Option(SecretScanningAlertResolutionWebhook),
    resolution_comment: Option(String),
    locations_url: Option(String),
    push_protection_bypassed_by: Option(NullableSimpleUser),
    url: Option(AlertUrl),
    validity: Option(String),
    updated_at: Option(NullableAlertUpdatedAt),
    multi_repo: Option(Bool),
    push_protection_bypass_request_comment: Option(String),
    resolved_at: Option(String),
    html_url: Option(AlertHtmlUrl),
    secret_type_display_name: Option(String),
    resolved_by: Option(NullableSimpleUser),
  )
}

pub type ClassroomAssignment {
  ClassroomAssignment(
    feedback_pull_requests_enabled: Bool,
    accepted: Int,
    public_repo: Bool,
    slug: String,
    starter_code_repository: SimpleClassroomRepository,
    editor: String,
    invite_link: String,
    passing: Int,
    classroom: Classroom,
    title: String,
    deadline: Option(String),
    language: String,
    type_: String,
    submitted: Int,
    id: Int,
    max_teams: Option(Int),
    invitations_enabled: Bool,
    max_members: Option(Int),
    students_are_repo_admins: Bool,
  )
}

pub type WebhookInstallationTargetRenamed {
  WebhookInstallationTargetRenamed(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    target_type: String,
    repository: Option(RepositoryWebhooks),
    account: Nil,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: SimpleInstallation,
  )
}

pub type NullableCodespaceMachine {
  NullableCodespaceMachine(
    display_name: String,
    name: String,
    cpus: Int,
    operating_system: String,
    memory_in_bytes: Int,
    prebuild_availability: Option(String),
    storage_in_bytes: Int,
  )
}

pub type ReleaseNotesContent {
  ReleaseNotesContent(body: String, name: String)
}

pub type MovedColumnInProjectIssueEvent {
  MovedColumnInProjectIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    project_card: Option(Nil),
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type WebhookCustomPropertyDeleted {
  WebhookCustomPropertyDeleted(
    enterprise: Option(EnterpriseWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    definition: Nil,
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookCheckRunCreatedFormEncoded {
  WebhookCheckRunCreatedFormEncoded(payload: String)
}

pub type RuleSuite {
  RuleSuite(
    repository_name: Option(String),
    evaluation_result: Option(String),
    actor_id: Option(Int),
    after_sha: Option(String),
    before_sha: Option(String),
    repository_id: Option(Int),
    ref: Option(String),
    rule_evaluations: Option(List(Nil)),
    actor_name: Option(String),
    pushed_at: Option(String),
    id: Option(Int),
    result: Option(String),
  )
}

pub type ReviewCustomGatesStateRequired {
  ReviewCustomGatesStateRequired(
    state: String,
    environment_name: String,
    comment: Option(String),
  )
}

pub type WebhookIssuesLocked {
  WebhookIssuesLocked(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookRepositoryAdvisoryPublished {
  WebhookRepositoryAdvisoryPublished(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    repository_advisory: RepositoryAdvisory,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type Release {
  Release(
    draft: Bool,
    body: Option(String),
    assets: List(ReleaseAsset),
    prerelease: Bool,
    published_at: Option(String),
    body_html: Option(String),
    created_at: String,
    body_text: Option(String),
    reactions: Option(ReactionRollup),
    author: SimpleUser,
    name: Option(String),
    url: String,
    tag_name: String,
    zipball_url: Option(String),
    upload_url: String,
    assets_url: String,
    tarball_url: Option(String),
    node_id: String,
    discussion_url: Option(String),
    mentions_count: Option(Int),
    target_commitish: String,
    id: Int,
    html_url: String,
  )
}

pub type RepositoryRuleWorkflows {
  RepositoryRuleWorkflows(parameters: Option(Nil), type_: String)
}

pub type WebhookDiscussionCommentEdited {
  WebhookDiscussionCommentEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    comment: WebhooksComment,
  )
}

pub type WebhookInstallationUnsuspend {
  WebhookInstallationUnsuspend(
    enterprise: Option(EnterpriseWebhooks),
    repositories: Option(WebhooksRepositories),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Installation,
  )
}

pub type WebhookPullRequestReviewCommentDeleted {
  WebhookPullRequestReviewCommentDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
    comment: WebhooksReviewComment,
  )
}

pub type WebhookSponsorshipPendingCancellation {
  WebhookSponsorshipPendingCancellation(
    enterprise: Option(EnterpriseWebhooks),
    effective_date: Option(WebhooksEffectiveDate),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookRepositoryPublicized {
  WebhookRepositoryPublicized(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type SimpleUser {
  SimpleUser(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    name: Option(String),
    url: String,
    starred_url: String,
    organizations_url: String,
    repos_url: String,
    starred_at: Option(String),
    gravatar_id: Option(String),
    site_admin: Bool,
    node_id: String,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
  )
}

pub type WebhookMilestoneDeleted {
  WebhookMilestoneDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    milestone: WebhooksMilestone,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleRequiredStatusChecks {
  RepositoryRuleRequiredStatusChecks(parameters: Option(Nil), type_: String)
}

pub type WebhookPageBuild {
  WebhookPageBuild(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    build: Nil,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
    id: Int,
  )
}

pub type OrganizationActionsVariable {
  OrganizationActionsVariable(
    created_at: String,
    name: String,
    value: String,
    visibility: String,
    updated_at: String,
    selected_repositories_url: Option(String),
  )
}

pub type DeploymentBranchPolicyNamePattern {
  DeploymentBranchPolicyNamePattern(name: String)
}

pub type ProjectsV2StatusUpdate {
  ProjectsV2StatusUpdate(
    body: Option(String),
    created_at: String,
    start_date: Option(String),
    creator: Option(SimpleUser),
    project_node_id: Option(String),
    status: Option(String),
    updated_at: String,
    node_id: String,
    id: Float,
    target_date: Option(String),
  )
}

pub type WebhookProjectCardDeleted {
  WebhookProjectCardDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(NullableRepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    project_card: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookIssuesOpened {
  WebhookIssuesOpened(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectsV2StatusUpdateEdited {
  WebhookProjectsV2StatusUpdateEdited(
    changes: Option(Nil),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    projects_v2_status_update: ProjectsV2StatusUpdate,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookTeamRemovedFromRepository {
  WebhookTeamRemovedFromRepository(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(Nil),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    team: WebhooksTeam1,
  )
}

pub type WebhookMemberEdited {
  WebhookMemberEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    member: WebhooksUser,
  )
}

pub type WebhookIssuesEdited {
  WebhookIssuesEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: Option(WebhooksLabel),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type ReviewRequestRemovedIssueEvent {
  ReviewRequestRemovedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    requested_team: Option(Team),
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    review_requester: SimpleUser,
    requested_reviewer: Option(SimpleUser),
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type WebhookProjectColumnMoved {
  WebhookProjectColumnMoved(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    project_column: WebhooksProjectColumn,
  )
}

pub type TeamMembership {
  TeamMembership(url: String, state: String, role: String)
}

pub type WebhookProjectReopened {
  WebhookProjectReopened(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    project: WebhooksProject,
    installation: Option(SimpleInstallation),
  )
}

pub type IssueEvent {
  IssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    author_association: Option(AuthorAssociation),
    requested_team: Option(Team),
    dismissed_review: Option(IssueEventDismissedReview),
    url: String,
    assignee: Option(NullableSimpleUser),
    milestone: Option(IssueEventMilestone),
    label: Option(IssueEventLabel),
    actor: NullableSimpleUser,
    performed_via_github_app: Option(NullableIntegration),
    review_requester: Option(NullableSimpleUser),
    project_card: Option(IssueEventProjectCard),
    requested_reviewer: Option(NullableSimpleUser),
    node_id: String,
    lock_reason: Option(String),
    issue: Option(NullableIssue),
    event: String,
    id: Int,
    assigner: Option(NullableSimpleUser),
    rename: Option(IssueEventRename),
  )
}

pub type InstallationToken {
  InstallationToken(
    single_file_paths: Option(List(String)),
    permissions: Option(AppPermissions),
    repositories: Option(List(Repository)),
    has_multiple_single_files: Option(Bool),
    single_file: Option(String),
    repository_selection: Option(String),
    token_: String,
    expires_at: String,
  )
}

pub type CheckRun {
  CheckRun(
    output: Nil,
    check_suite: Option(Nil),
    app: NullableIntegration,
    deployment: Option(DeploymentSimple),
    completed_at: Option(String),
    name: String,
    head_sha: String,
    url: String,
    external_id: Option(String),
    started_at: Option(String),
    details_url: Option(String),
    status: String,
    node_id: String,
    id: Int,
    html_url: Option(String),
    pull_requests: List(PullRequestMinimal),
    conclusion: Option(String),
  )
}

pub type Package {
  Package(
    version_count: Int,
    created_at: String,
    repository: Option(NullableMinimalRepository),
    name: String,
    url: String,
    visibility: String,
    owner: Option(NullableSimpleUser),
    package_type: String,
    updated_at: String,
    id: Int,
    html_url: String,
  )
}

pub type NullableSimpleCommit {
  NullableSimpleCommit(
    message: String,
    committer: Option(Nil),
    author: Option(Nil),
    timestamp: String,
    id: String,
    tree_id: String,
  )
}

pub type Collaborator {
  Collaborator(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    permissions: Option(Nil),
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    name: Option(String),
    url: String,
    starred_url: String,
    organizations_url: String,
    repos_url: String,
    role_name: String,
    gravatar_id: Option(String),
    site_admin: Bool,
    node_id: String,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
  )
}

pub type CommunityProfile {
  CommunityProfile(
    updated_at: Option(String),
    files: Nil,
    documentation: Option(String),
    content_reports_enabled: Option(Bool),
    description: Option(String),
    health_percentage: Int,
  )
}

pub type Import {
  Import(
    push_percent: Option(Int),
    svc_root: Option(String),
    use_lfs: Option(Bool),
    large_files_count: Option(Int),
    vcs: Option(String),
    message: Option(String),
    commit_count: Option(Int),
    import_percent: Option(Int),
    project_choices: Option(List(Nil)),
    large_files_size: Option(Int),
    failed_step: Option(String),
    has_large_files: Option(Bool),
    url: String,
    error_message: Option(String),
    status: String,
    vcs_url: String,
    svn_root: Option(String),
    authors_url: String,
    authors_count: Option(Int),
    tfvc_project: Option(String),
    status_text: Option(String),
    repository_url: String,
    html_url: String,
  )
}

pub type CopilotUsageMetricsDay {
  CopilotUsageMetricsDay(
    copilot_ide_chat: Option(CopilotIdeChat),
    total_active_users: Option(Int),
    copilot_dotcom_pull_requests: Option(CopilotDotcomPullRequests),
    copilot_dotcom_chat: Option(CopilotDotcomChat),
    copilot_ide_code_completions: Option(CopilotIdeCodeCompletions),
    date: String,
    total_engaged_users: Option(Int),
  )
}

pub type RepositoryRuleCommitAuthorEmailPattern {
  RepositoryRuleCommitAuthorEmailPattern(parameters: Option(Nil), type_: String)
}

pub type UserMarketplacePurchase {
  UserMarketplacePurchase(
    billing_cycle: String,
    on_free_trial: Bool,
    plan: MarketplaceListingPlan,
    free_trial_ends_on: Option(String),
    account: MarketplaceAccount,
    unit_count: Option(Int),
    updated_at: Option(String),
    next_billing_date: Option(String),
  )
}

pub type DependabotAlertWithRepository {
  DependabotAlertWithRepository(
    dismissed_comment: Option(String),
    number: AlertNumber,
    dismissed_at: AlertDismissedAt,
    created_at: AlertCreatedAt,
    repository: SimpleRepository,
    dependency: Nil,
    dismissed_by: NullableSimpleUser,
    url: AlertUrl,
    state: String,
    updated_at: AlertUpdatedAt,
    security_advisory: DependabotAlertSecurityAdvisory,
    auto_dismissed_at: Option(AlertAutoDismissedAt),
    dismissed_reason: Option(String),
    html_url: AlertHtmlUrl,
    security_vulnerability: DependabotAlertSecurityVulnerability,
    fixed_at: AlertFixedAt,
  )
}

pub type CommitActivity {
  CommitActivity(total: Int, week: Int, days: List(Int))
}

pub type WebhookMergeGroupChecksRequested {
  WebhookMergeGroupChecksRequested(
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    merge_group: MergeGroup,
    installation: Option(SimpleInstallation),
  )
}

pub type Deployment {
  Deployment(
    original_environment: Option(String),
    task: String,
    created_at: String,
    creator: NullableSimpleUser,
    sha: String,
    production_environment: Option(Bool),
    payload: Nil,
    url: String,
    statuses_url: String,
    ref: String,
    environment: String,
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    repository_url: String,
    id: Int,
    description: Option(String),
    transient_environment: Option(Bool),
  )
}

pub type WebhookReleaseEdited {
  WebhookReleaseEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    release: WebhooksRelease,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDiscussionUnanswered {
  WebhookDiscussionUnanswered(
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    old_answer: WebhooksAnswer,
    action: String,
  )
}

pub type SimpleRepository {
  SimpleRepository(
    hooks_url: String,
    branches_url: String,
    forks_url: String,
    fork: Bool,
    private: Bool,
    keys_url: String,
    comments_url: String,
    trees_url: String,
    blobs_url: String,
    teams_url: String,
    stargazers_url: String,
    contributors_url: String,
    tags_url: String,
    issue_comment_url: String,
    events_url: String,
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    commits_url: String,
    subscription_url: String,
    issue_events_url: String,
    labels_url: String,
    url: String,
    statuses_url: String,
    archive_url: String,
    milestones_url: String,
    owner: SimpleUser,
    assignees_url: String,
    compare_url: String,
    git_tags_url: String,
    node_id: String,
    notifications_url: String,
    downloads_url: String,
    subscribers_url: String,
    id: Int,
    full_name: String,
    html_url: String,
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    pulls_url: String,
    deployments_url: String,
    git_commits_url: String,
  )
}

pub type IssueEventRename {
  IssueEventRename(from: String, to: String)
}

pub type WebhookRepositoryRulesetDeleted {
  WebhookRepositoryRulesetDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    repository_ruleset: RepositoryRuleset,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestDemilestoned {
  WebhookPullRequestDemilestoned(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    milestone: Option(Milestone),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    pull_request: WebhooksPullRequest5,
    action: String,
  )
}

pub type SecretScanningLocationPullRequestReview {
  SecretScanningLocationPullRequestReview(pull_request_review_url: String)
}

pub type WebhookCodeScanningAlertCreated {
  WebhookCodeScanningAlertCreated(
    enterprise: Option(EnterpriseWebhooks),
    commit_oid: WebhooksCodeScanningCommitOid,
    repository: RepositoryWebhooks,
    ref: WebhooksCodeScanningRef,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type WebhookWorkflowJobWaiting {
  WebhookWorkflowJobWaiting(
    enterprise: Option(EnterpriseWebhooks),
    deployment: Option(Deployment),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow_job: Nil,
  )
}

pub type StateChangeIssueEvent {
  StateChangeIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    state_reason: Option(String),
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type BranchProtection {
  BranchProtection(
    allow_fork_syncing: Option(Nil),
    enforce_admins: Option(ProtectedBranchAdminEnforced),
    enabled: Option(Bool),
    block_creations: Option(Nil),
    restrictions: Option(BranchRestrictionPolicy),
    required_conversation_resolution: Option(Nil),
    protection_url: Option(String),
    name: Option(String),
    allow_deletions: Option(Nil),
    url: Option(String),
    required_pull_request_reviews: Option(ProtectedBranchPullRequestReview),
    allow_force_pushes: Option(Nil),
    lock_branch: Option(Nil),
    required_status_checks: Option(ProtectedBranchRequiredStatusCheck),
    required_linear_history: Option(Nil),
    required_signatures: Option(Nil),
  )
}

pub type WebhookReleasePrereleased {
  WebhookReleasePrereleased(
    enterprise: Option(EnterpriseWebhooks),
    release: Nil,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPersonalAccessTokenRequestCreated {
  WebhookPersonalAccessTokenRequestCreated(
    enterprise: Option(EnterpriseWebhooks),
    personal_access_token_request: PersonalAccessTokenRequest,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeScanningCodeqlDatabase {
  CodeScanningCodeqlDatabase(
    content_type: String,
    size: Int,
    commit_oid: Option(String),
    created_at: String,
    name: String,
    uploader: SimpleUser,
    url: String,
    updated_at: String,
    language: String,
    id: Int,
  )
}

pub type WebhooksRelease {
  WebhooksRelease(
    draft: Bool,
    body: Option(String),
    assets: List(Nil),
    prerelease: Bool,
    published_at: Option(String),
    created_at: Option(String),
    reactions: Option(Nil),
    author: Option(Nil),
    name: Option(String),
    url: String,
    tag_name: String,
    zipball_url: Option(String),
    upload_url: String,
    assets_url: String,
    tarball_url: Option(String),
    node_id: String,
    discussion_url: Option(String),
    target_commitish: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookCheckRunCompletedFormEncoded {
  WebhookCheckRunCompletedFormEncoded(payload: String)
}

pub type WebhookIssuesUnassigned {
  WebhookIssuesUnassigned(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    assignee: Option(WebhooksUserMannequin),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: WebhooksIssue,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestDequeued {
  WebhookPullRequestDequeued(
    enterprise: Option(EnterpriseWebhooks),
    reason: String,
    number: Int,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type AuthenticationToken {
  AuthenticationToken(
    permissions: Option(Nil),
    repositories: Option(List(Repository)),
    single_file: Option(String),
    repository_selection: Option(String),
    token_: String,
    expires_at: String,
  )
}

pub type WebhookPullRequestMilestoned {
  WebhookPullRequestMilestoned(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    milestone: Option(Milestone),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    pull_request: WebhooksPullRequest5,
    action: String,
  )
}

pub type WebhookDependabotAlertAutoReopened {
  WebhookDependabotAlertAutoReopened(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type NullableMilestone {
  NullableMilestone(
    closed_at: Option(String),
    number: Int,
    due_on: Option(String),
    created_at: String,
    creator: NullableSimpleUser,
    closed_issues: Int,
    labels_url: String,
    url: String,
    open_issues: Int,
    state: String,
    updated_at: String,
    node_id: String,
    title: String,
    id: Int,
    html_url: String,
    description: Option(String),
  )
}

pub type Snapshot {
  Snapshot(
    manifests: Option(Nil),
    detector: Nil,
    sha: String,
    metadata: Option(Metadata),
    scanned: String,
    ref: String,
    version: Int,
    job: Nil,
  )
}

pub type WebhookSponsorshipCancelled {
  WebhookSponsorshipCancelled(
    enterprise: Option(EnterpriseWebhooks),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    sponsorship: WebhooksSponsorship,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookPullRequestReviewDismissed {
  WebhookPullRequestReviewDismissed(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    review: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookProjectsV2ProjectReopened {
  WebhookProjectsV2ProjectReopened(
    projects_v2: ProjectsV2,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ProjectCard {
  ProjectCard(
    project_id: Option(String),
    archived: Option(Bool),
    column_url: String,
    content_url: Option(String),
    project_url: String,
    created_at: String,
    creator: NullableSimpleUser,
    url: String,
    note: Option(String),
    column_name: Option(String),
    updated_at: String,
    node_id: String,
    id: Int,
  )
}

pub type WebhookDiscussionLabeled {
  WebhookDiscussionLabeled(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: WebhooksLabel,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type GlobalAdvisory {
  GlobalAdvisory(
    cwes: Option(List(Nil)),
    source_code_location: Option(String),
    published_at: String,
    summary: String,
    cvss_severities: Option(CvssSeverities),
    nvd_published_at: Option(String),
    cve_id: Option(String),
    references: Option(List(String)),
    identifiers: Option(List(Nil)),
    epss: Option(Nil),
    ghsa_id: String,
    withdrawn_at: Option(String),
    url: String,
    cvss: Option(Nil),
    updated_at: String,
    credits: Option(List(Nil)),
    vulnerabilities: Option(List(Vulnerability)),
    type_: String,
    html_url: String,
    description: Option(String),
    severity: String,
    repository_advisory_url: Option(String),
    github_reviewed_at: Option(String),
  )
}

pub type WebhookMemberAdded {
  WebhookMemberAdded(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    member: WebhooksUser,
  )
}

pub type WebhookCodeScanningAlertClosedByUser {
  WebhookCodeScanningAlertClosedByUser(
    enterprise: Option(EnterpriseWebhooks),
    commit_oid: WebhooksCodeScanningCommitOid,
    repository: RepositoryWebhooks,
    ref: WebhooksCodeScanningRef,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: Nil,
  )
}

pub type CodespacesSecret {
  CodespacesSecret(
    created_at: String,
    name: String,
    visibility: String,
    updated_at: String,
    selected_repositories_url: String,
  )
}

pub type WebhookPullRequestLabeled {
  WebhookPullRequestLabeled(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    label: Option(WebhooksLabel),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type IssueEventDismissedReview {
  IssueEventDismissedReview(
    review_id: Int,
    state: String,
    dismissal_commit_id: Option(String),
    dismissal_message: Option(String),
  )
}

pub type WebhookTeamEdited {
  WebhookTeamEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: Nil,
    repository: Option(Nil),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    team: WebhooksTeam1,
  )
}

pub type RepositoryRuleCodeScanning {
  RepositoryRuleCodeScanning(parameters: Option(Nil), type_: String)
}

pub type WebhookWorkflowJobCompleted {
  WebhookWorkflowJobCompleted(
    enterprise: Option(EnterpriseWebhooks),
    deployment: Option(Deployment),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    workflow_job: Nil,
  )
}

pub type RepositoryRuleParamsRequiredReviewerConfiguration {
  RepositoryRuleParamsRequiredReviewerConfiguration(
    file_patterns: List(String),
    reviewer_id: String,
    minimum_approvals: Int,
  )
}

pub type TeamOrganization {
  TeamOrganization(
    hooks_url: String,
    has_organization_projects: Bool,
    twitter_username: Option(String),
    members_allowed_repository_creation_type: Option(String),
    blog: Option(String),
    default_repository_permission: Option(String),
    two_factor_requirement_enabled: Option(Bool),
    web_commit_signoff_required: Option(Bool),
    members_url: String,
    events_url: String,
    avatar_url: String,
    plan: Option(Nil),
    login: String,
    has_repository_projects: Bool,
    created_at: String,
    issues_url: String,
    total_private_repos: Option(Int),
    owned_private_repos: Option(Int),
    public_repos: Int,
    name: Option(String),
    members_can_fork_private_repositories: Option(Bool),
    collaborators: Option(Int),
    url: String,
    members_can_create_public_repositories: Option(Bool),
    archived_at: Option(String),
    following: Int,
    repos_url: String,
    members_can_create_private_repositories: Option(Bool),
    public_members_url: String,
    private_gists: Option(Int),
    followers: Int,
    location: Option(String),
    members_can_create_pages: Option(Bool),
    members_can_create_repositories: Option(Bool),
    updated_at: String,
    node_id: String,
    billing_email: Option(String),
    public_gists: Int,
    members_can_create_private_pages: Option(Bool),
    type_: String,
    id: Int,
    html_url: String,
    members_can_create_public_pages: Option(Bool),
    members_can_create_internal_repositories: Option(Bool),
    email: Option(String),
    description: Option(String),
    company: Option(String),
    is_verified: Option(Bool),
    disk_usage: Option(Int),
  )
}

pub type LockedIssueEvent {
  LockedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    lock_reason: Option(String),
    event: String,
    id: Int,
  )
}

pub type WebhookMemberRemoved {
  WebhookMemberRemoved(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    member: WebhooksUser,
  )
}

pub type MarketplacePurchase {
  MarketplacePurchase(
    login: String,
    organization_billing_email: Option(String),
    marketplace_pending_change: Option(Nil),
    url: String,
    marketplace_purchase: Nil,
    type_: String,
    id: Int,
    email: Option(String),
  )
}

pub type WebhookStarCreated {
  WebhookStarCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    starred_at: Option(String),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleRulesetInfo {
  RepositoryRuleRulesetInfo(
    ruleset_source_type: Option(String),
    ruleset_id: Option(Int),
    ruleset_source: Option(String),
  )
}

pub type RepositoryRuleParamsRestrictedCommits {
  RepositoryRuleParamsRestrictedCommits(reason: Option(String), oid: String)
}

pub type CodeScanningAnalysisDeletion {
  CodeScanningAnalysisDeletion(
    next_analysis_url: Option(String),
    confirm_delete_url: Option(String),
  )
}

pub type Hook {
  Hook(
    test_url: String,
    ping_url: String,
    config: WebhookConfig,
    deliveries_url: Option(String),
    active: Bool,
    created_at: String,
    last_response: HookResponse,
    name: String,
    url: String,
    updated_at: String,
    events: List(String),
    type_: String,
    id: Int,
  )
}

pub type OrganizationSecretScanningAlert {
  OrganizationSecretScanningAlert(
    push_protection_bypass_request_html_url: Option(String),
    push_protection_bypassed: Option(Bool),
    number: Option(AlertNumber),
    secret_type: Option(String),
    created_at: Option(AlertCreatedAt),
    push_protection_bypassed_at: Option(String),
    repository: Option(SimpleRepository),
    push_protection_bypass_request_reviewer: Option(NullableSimpleUser),
    publicly_leaked: Option(Bool),
    resolution: Option(SecretScanningAlertResolution),
    resolution_comment: Option(String),
    locations_url: Option(String),
    push_protection_bypassed_by: Option(NullableSimpleUser),
    url: Option(AlertUrl),
    secret: Option(String),
    state: Option(SecretScanningAlertState),
    validity: Option(String),
    updated_at: Option(NullableAlertUpdatedAt),
    multi_repo: Option(Bool),
    push_protection_bypass_request_comment: Option(String),
    resolved_at: Option(String),
    html_url: Option(AlertHtmlUrl),
    secret_type_display_name: Option(String),
    resolved_by: Option(NullableSimpleUser),
  )
}

pub type PageDeployment {
  PageDeployment(
    status_url: String,
    preview_url: Option(String),
    id: Nil,
    page_url: String,
  )
}

pub type RepositoryRuleset {
  RepositoryRuleset(
    enforcement: RepositoryRuleEnforcement,
    current_user_can_bypass: Option(String),
    created_at: Option(String),
    name: String,
    target: Option(String),
    bypass_actors: Option(List(RepositoryRulesetBypassActor)),
    rules: Option(List(RepositoryRule)),
    updated_at: Option(String),
    node_id: Option(String),
    conditions: Option(Nil),
    links: Option(Nil),
    source: String,
    id: Int,
    source_type: Option(String),
  )
}

pub type GitignoreTemplate {
  GitignoreTemplate(name: String, source: String)
}

pub type WebhookOrganizationRenamed {
  WebhookOrganizationRenamed(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: Option(RepositoryWebhooks),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    membership: Option(WebhooksMembership),
    installation: Option(SimpleInstallation),
  )
}

pub type SimpleClassroomAssignment {
  SimpleClassroomAssignment(
    feedback_pull_requests_enabled: Bool,
    accepted: Int,
    public_repo: Bool,
    slug: String,
    editor: String,
    invite_link: String,
    passing: Int,
    classroom: SimpleClassroom,
    title: String,
    deadline: Option(String),
    language: String,
    type_: String,
    submitted: Int,
    id: Int,
    max_teams: Option(Int),
    invitations_enabled: Bool,
    max_members: Option(Int),
    students_are_repo_admins: Bool,
  )
}

pub type WebhooksWorkflow {
  WebhooksWorkflow(
    path_: String,
    created_at: String,
    name: String,
    url: String,
    state: String,
    badge_url: String,
    updated_at: String,
    node_id: String,
    id: Int,
    html_url: String,
  )
}

pub type ProjectCollaboratorPermission {
  ProjectCollaboratorPermission(user: NullableSimpleUser, permission: String)
}

pub type TeamSimple {
  TeamSimple(
    ldap_dn: Option(String),
    privacy: Option(String),
    members_url: String,
    name: String,
    slug: String,
    url: String,
    permission: String,
    node_id: String,
    repositories_url: String,
    id: Int,
    html_url: String,
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type CodeScanningAlertInstance {
  CodeScanningAlertInstance(
    commit_sha: Option(String),
    message: Option(Nil),
    classifications: Option(List(CodeScanningAlertClassification)),
    state: Option(CodeScanningAlertState),
    ref: Option(CodeScanningRef),
    environment: Option(CodeScanningAlertEnvironment),
    location: Option(CodeScanningAlertLocation),
    html_url: Option(String),
    analysis_key: Option(CodeScanningAnalysisAnalysisKey),
    category: Option(CodeScanningAnalysisCategory),
  )
}

pub type UserRoleAssignment {
  UserRoleAssignment(
    user_view_type: Option(String),
    gists_url: String,
    following_url: String,
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    name: Option(String),
    assignment: Option(String),
    url: String,
    inherited_from: Option(List(TeamSimple)),
    starred_url: String,
    organizations_url: String,
    repos_url: String,
    starred_at: Option(String),
    gravatar_id: Option(String),
    site_admin: Bool,
    node_id: String,
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
  )
}

pub type RepositoryRulesetConditions {
  RepositoryRulesetConditions(ref_name: Option(Nil))
}

pub type WebhookSecretScanningAlertCreated {
  WebhookSecretScanningAlertCreated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    alert: SecretScanningAlertWebhook,
  )
}

pub type HookDeliveryItem {
  HookDeliveryItem(
    installation_id: Option(Int),
    redelivery: Bool,
    guid: String,
    delivered_at: String,
    repository_id: Option(Int),
    status: String,
    duration: Float,
    action: Option(String),
    throttled_at: Option(String),
    status_code: Int,
    event: String,
    id: Int,
  )
}

pub type RepositoryRuleNonFastForward {
  RepositoryRuleNonFastForward(type_: String)
}

pub type ProjectsV2IterationSetting {
  ProjectsV2IterationSetting(
    start_date: Option(String),
    duration: Option(Float),
    title: String,
    id: String,
  )
}

pub type WebhookCustomPropertyValuesUpdated {
  WebhookCustomPropertyValuesUpdated(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    new_property_values: List(CustomPropertyValue),
    organization: OrganizationSimpleWebhooks,
    old_property_values: List(CustomPropertyValue),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeScanningAlertLocation {
  CodeScanningAlertLocation(
    path_: Option(String),
    start_line: Option(Int),
    start_column: Option(Int),
    end_line: Option(Int),
    end_column: Option(Int),
  )
}

pub type CodeScanningAlertRuleSummary {
  CodeScanningAlertRuleSummary(
    security_severity_level: Option(String),
    help: Option(String),
    name: Option(String),
    full_description: Option(String),
    help_uri: Option(String),
    tags: Option(List(String)),
    id: Option(String),
    description: Option(String),
    severity: Option(String),
  )
}

pub type WebhookProjectsV2ItemCreated {
  WebhookProjectsV2ItemCreated(
    projects_v2_item: ProjectsV2Item,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type RepositoryRuleCommitMessagePattern {
  RepositoryRuleCommitMessagePattern(parameters: Option(Nil), type_: String)
}

pub type NullableMinimalRepository {
  NullableMinimalRepository(
    hooks_url: String,
    default_branch: Option(String),
    branches_url: String,
    size: Option(Int),
    forks_url: String,
    license: Option(Nil),
    delete_branch_on_merge: Option(Bool),
    forks_count: Option(Int),
    fork: Bool,
    git_url: Option(String),
    archived: Option(Bool),
    private: Bool,
    security_and_analysis: Option(SecurityAndAnalysis),
    permissions: Option(Nil),
    keys_url: String,
    comments_url: String,
    topics: Option(List(String)),
    trees_url: String,
    has_downloads: Option(Bool),
    blobs_url: String,
    has_discussions: Option(Bool),
    teams_url: String,
    watchers_count: Option(Int),
    stargazers_url: String,
    stargazers_count: Option(Int),
    contributors_url: String,
    tags_url: String,
    web_commit_signoff_required: Option(Bool),
    issue_comment_url: String,
    events_url: String,
    created_at: Option(String),
    allow_forking: Option(Bool),
    issues_url: String,
    contents_url: String,
    merges_url: String,
    name: String,
    languages_url: String,
    temp_clone_token: Option(String),
    commits_url: String,
    subscription_url: String,
    clone_url: Option(String),
    code_of_conduct: Option(CodeOfConduct),
    homepage: Option(String),
    issue_events_url: String,
    mirror_url: Option(String),
    labels_url: String,
    url: String,
    open_issues: Option(Int),
    is_template: Option(Bool),
    statuses_url: String,
    forks: Option(Int),
    archive_url: String,
    visibility: Option(String),
    milestones_url: String,
    owner: SimpleUser,
    role_name: Option(String),
    assignees_url: String,
    has_wiki: Option(Bool),
    compare_url: String,
    git_tags_url: String,
    updated_at: Option(String),
    watchers: Option(Int),
    node_id: String,
    notifications_url: String,
    ssh_url: Option(String),
    language: Option(String),
    pushed_at: Option(String),
    downloads_url: String,
    subscribers_url: String,
    subscribers_count: Option(Int),
    id: Int,
    svn_url: Option(String),
    full_name: String,
    html_url: String,
    disabled: Option(Bool),
    description: Option(String),
    releases_url: String,
    git_refs_url: String,
    collaborators_url: String,
    pulls_url: String,
    network_count: Option(Int),
    deployments_url: String,
    has_projects: Option(Bool),
    has_pages: Option(Bool),
    open_issues_count: Option(Int),
    git_commits_url: String,
    has_issues: Option(Bool),
  )
}

pub type Root {
  Root(
    commit_search_url: String,
    gists_url: String,
    starred_gists_url: String,
    following_url: String,
    current_user_url: String,
    organization_url: String,
    label_search_url: String,
    keys_url: String,
    organization_repositories_url: String,
    feeds_url: String,
    followers_url: String,
    hub_url: Option(String),
    current_user_repositories_url: String,
    emails_url: String,
    topic_search_url: Option(String),
    events_url: String,
    public_gists_url: String,
    issues_url: String,
    authorizations_url: String,
    code_search_url: String,
    user_repositories_url: String,
    rate_limit_url: String,
    user_search_url: String,
    repository_search_url: String,
    starred_url: String,
    current_user_authorizations_html_url: String,
    notifications_url: String,
    repository_url: String,
    organization_teams_url: String,
    user_url: String,
    user_organizations_url: String,
    emojis_url: String,
    issue_search_url: String,
  )
}

pub type WebhookSecretScanningAlertReopened {
  WebhookSecretScanningAlertReopened(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    installation: Option(SimpleInstallation),
    alert: SecretScanningAlertWebhook,
  )
}

pub type SigstoreBundle0 {
  SigstoreBundle0(
    verification_material: Option(Nil),
    dsse_envelope: Option(Nil),
    media_type: Option(String),
  )
}

pub type ContributorActivity {
  ContributorActivity(total: Int, author: NullableSimpleUser, weeks: List(Nil))
}

pub type GistCommit {
  GistCommit(
    change_status: Nil,
    user: NullableSimpleUser,
    url: String,
    committed_at: String,
    version: String,
  )
}

pub type Enterprise {
  Enterprise(
    avatar_url: String,
    created_at: Option(String),
    name: String,
    slug: String,
    website_url: Option(String),
    updated_at: Option(String),
    node_id: String,
    id: Int,
    html_url: String,
    description: Option(String),
  )
}

pub type WebhookIssueCommentDeleted {
  WebhookIssueCommentDeleted(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
    comment: WebhooksIssueComment,
  )
}

pub type WebhooksMilestone3 {
  WebhooksMilestone3(
    closed_at: Option(String),
    number: Int,
    due_on: Option(String),
    created_at: String,
    creator: Option(Nil),
    closed_issues: Int,
    labels_url: String,
    url: String,
    open_issues: Int,
    state: String,
    updated_at: String,
    node_id: String,
    title: String,
    id: Int,
    html_url: String,
    description: Option(String),
  )
}

pub type DependabotAlert {
  DependabotAlert(
    dismissed_comment: Option(String),
    number: AlertNumber,
    dismissed_at: AlertDismissedAt,
    created_at: AlertCreatedAt,
    dependency: Nil,
    dismissed_by: NullableSimpleUser,
    url: AlertUrl,
    state: String,
    updated_at: AlertUpdatedAt,
    security_advisory: DependabotAlertSecurityAdvisory,
    auto_dismissed_at: Option(AlertAutoDismissedAt),
    dismissed_reason: Option(String),
    html_url: AlertHtmlUrl,
    security_vulnerability: DependabotAlertSecurityVulnerability,
    fixed_at: AlertFixedAt,
  )
}

pub type CodeScanningDefaultSetupUpdate {
  CodeScanningDefaultSetupUpdate(
    query_suite: Option(String),
    state: Option(String),
    languages: Option(List(String)),
  )
}

pub type TimelineCommitCommentedEvent {
  TimelineCommitCommentedEvent(
    commit_id: Option(String),
    comments: Option(List(CommitComment)),
    node_id: Option(String),
    event: Option(String),
  )
}

pub type WebhookDelete {
  WebhookDelete(
    enterprise: Option(EnterpriseWebhooks),
    ref_type: String,
    repository: RepositoryWebhooks,
    pusher_type: WebhooksDeployPusherType,
    ref: WebhooksRef0,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    installation: Option(SimpleInstallation),
  )
}

pub type WebhookDeploymentReviewRejected {
  WebhookDeploymentReviewRejected(
    enterprise: Option(EnterpriseWebhooks),
    approver: Option(WebhooksApprover),
    workflow_job_run: Option(WebhooksWorkflowJobRun),
    workflow_job_runs: Option(List(Nil)),
    repository: RepositoryWebhooks,
    workflow_run: Option(Nil),
    reviewers: Option(WebhooksReviewers),
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    since: String,
    comment: Option(String),
  )
}

pub type ProtectedBranch {
  ProtectedBranch(
    allow_fork_syncing: Option(Nil),
    enforce_admins: Option(Nil),
    block_creations: Option(Nil),
    restrictions: Option(BranchRestrictionPolicy),
    required_conversation_resolution: Option(Nil),
    allow_deletions: Option(Nil),
    url: String,
    required_pull_request_reviews: Option(Nil),
    allow_force_pushes: Option(Nil),
    lock_branch: Option(Nil),
    required_status_checks: Option(StatusCheckPolicy),
    required_linear_history: Option(Nil),
    required_signatures: Option(Nil),
  )
}

pub type WebhooksAnswer {
  WebhooksAnswer(
    body: String,
    created_at: String,
    reactions: Option(Nil),
    user: Option(Nil),
    child_comment_count: Int,
    author_association: String,
    discussion_id: Int,
    updated_at: String,
    node_id: String,
    repository_url: String,
    id: Int,
    html_url: String,
  )
}

pub type WebhookIssueCommentEdited {
  WebhookIssueCommentEdited(
    enterprise: Option(EnterpriseWebhooks),
    changes: WebhooksChanges,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
    comment: WebhooksIssueComment,
  )
}

pub type License {
  License(
    body: String,
    permissions: List(String),
    spdx_id: Option(String),
    name: String,
    featured: Bool,
    url: Option(String),
    implementation: String,
    node_id: String,
    conditions: List(String),
    limitations: List(String),
    html_url: String,
    description: String,
    key: String,
  )
}

pub type WebhookDependabotAlertAutoDismissed {
  WebhookDependabotAlertAutoDismissed(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    alert: DependabotAlert,
  )
}

pub type WebhooksTeam {
  WebhooksTeam(
    privacy: Option(String),
    members_url: Option(String),
    parent: Option(Nil),
    name: String,
    slug: Option(String),
    url: Option(String),
    permission: Option(String),
    node_id: Option(String),
    repositories_url: Option(String),
    deleted: Option(Bool),
    id: Int,
    html_url: Option(String),
    notification_setting: Option(String),
    description: Option(String),
  )
}

pub type UserSearchResultItem {
  UserSearchResultItem(
    user_view_type: Option(String),
    gists_url: String,
    text_matches: Option(SearchResultTextMatches),
    following_url: String,
    blog: Option(String),
    followers_url: String,
    subscriptions_url: String,
    received_events_url: String,
    bio: Option(String),
    events_url: String,
    avatar_url: String,
    login: String,
    created_at: Option(String),
    public_repos: Option(Int),
    name: Option(String),
    hireable: Option(Bool),
    url: String,
    starred_url: String,
    organizations_url: String,
    following: Option(Int),
    repos_url: String,
    score: Float,
    followers: Option(Int),
    location: Option(String),
    gravatar_id: Option(String),
    site_admin: Bool,
    suspended_at: Option(String),
    updated_at: Option(String),
    node_id: String,
    public_gists: Option(Int),
    type_: String,
    id: Int,
    html_url: String,
    email: Option(String),
    company: Option(String),
  )
}

pub type WebhookDiscussionUnpinned {
  WebhookDiscussionUnpinned(
    enterprise: Option(EnterpriseWebhooks),
    discussion: Discussion,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type UnassignedIssueEvent {
  UnassignedIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    assignee: SimpleUser,
    actor: SimpleUser,
    performed_via_github_app: NullableIntegration,
    node_id: String,
    event: String,
    id: Int,
    assigner: SimpleUser,
  )
}

pub type NullableOrganizationSimple {
  NullableOrganizationSimple(
    hooks_url: String,
    members_url: String,
    events_url: String,
    avatar_url: String,
    login: String,
    issues_url: String,
    url: String,
    repos_url: String,
    public_members_url: String,
    node_id: String,
    id: Int,
    description: Option(String),
  )
}

pub type RepositorySubscription {
  RepositorySubscription(
    reason: Option(String),
    created_at: String,
    url: String,
    ignored: Bool,
    subscribed: Bool,
    repository_url: String,
  )
}

pub type WebhooksChanges {
  WebhooksChanges(body: Option(Nil))
}

pub type WebhookPullRequestSynchronize {
  WebhookPullRequestSynchronize(
    enterprise: Option(EnterpriseWebhooks),
    number: WebhooksNumber,
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    pull_request: Nil,
    action: String,
    installation: Option(SimpleInstallation),
    after: String,
    before: String,
  )
}

pub type WebhookMergeGroupDestroyed {
  WebhookMergeGroupDestroyed(
    reason: Option(String),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: Option(SimpleUser),
    action: String,
    merge_group: MergeGroup,
    installation: Option(SimpleInstallation),
  )
}

pub type PagesHealthCheck {
  PagesHealthCheck(domain: Option(Nil), alt_domain: Option(Nil))
}

pub type WebhookCheckRunRequestedActionFormEncoded {
  WebhookCheckRunRequestedActionFormEncoded(payload: String)
}

pub type ActionsSecret {
  ActionsSecret(created_at: String, name: String, updated_at: String)
}

pub type ConvertedNoteToIssueIssueEvent {
  ConvertedNoteToIssueIssueEvent(
    commit_id: Option(String),
    commit_url: Option(String),
    created_at: String,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: Integration,
    project_card: Option(Nil),
    node_id: String,
    event: String,
    id: Int,
  )
}

pub type WebhookIssuesUnlocked {
  WebhookIssuesUnlocked(
    enterprise: Option(EnterpriseWebhooks),
    repository: RepositoryWebhooks,
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    action: String,
    issue: Nil,
    installation: Option(SimpleInstallation),
  )
}

pub type CodeScanningAlert {
  CodeScanningAlert(
    dismissed_comment: Option(CodeScanningAlertDismissedComment),
    number: AlertNumber,
    dismissed_at: AlertDismissedAt,
    created_at: AlertCreatedAt,
    dismissed_by: NullableSimpleUser,
    instances_url: AlertInstancesUrl,
    url: AlertUrl,
    state: CodeScanningAlertState,
    updated_at: Option(AlertUpdatedAt),
    tool: CodeScanningAnalysisTool,
    dismissed_reason: CodeScanningAlertDismissedReason,
    html_url: AlertHtmlUrl,
    rule: CodeScanningAlertRule,
    most_recent_instance: CodeScanningAlertInstance,
    fixed_at: Option(AlertFixedAt),
  )
}

pub type TimelineCommentEvent {
  TimelineCommentEvent(
    body: Option(String),
    body_html: Option(String),
    issue_url: String,
    created_at: String,
    body_text: Option(String),
    reactions: Option(ReactionRollup),
    user: SimpleUser,
    author_association: AuthorAssociation,
    url: String,
    actor: SimpleUser,
    performed_via_github_app: Option(NullableIntegration),
    updated_at: String,
    node_id: String,
    event: String,
    id: Int,
    html_url: String,
  )
}

pub type CodeScanningVariantAnalysis {
  CodeScanningVariantAnalysis(
    query_pack_url: String,
    completed_at: Option(String),
    created_at: Option(String),
    actions_workflow_run_id: Option(Int),
    query_language: CodeScanningVariantAnalysisLanguage,
    status: String,
    actor: SimpleUser,
    controller_repo: SimpleRepository,
    skipped_repositories: Option(Nil),
    updated_at: Option(String),
    scanned_repositories: Option(List(Nil)),
    failure_reason: Option(String),
    id: Int,
  )
}

pub type KeySimple {
  KeySimple(id: Int, key: String)
}

pub type WebhookMarketplacePurchaseChanged {
  WebhookMarketplacePurchaseChanged(
    enterprise: Option(EnterpriseWebhooks),
    effective_date: String,
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    marketplace_purchase: WebhooksMarketplacePurchase,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
    previous_marketplace_purchase: Option(Nil),
  )
}

pub type WebhookProjectsV2ProjectCreated {
  WebhookProjectsV2ProjectCreated(
    projects_v2: ProjectsV2,
    organization: OrganizationSimpleWebhooks,
    sender: SimpleUser,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type PullRequestReviewRequest {
  PullRequestReviewRequest(users: List(SimpleUser), teams: List(Team))
}

pub type SimpleClassroomUser {
  SimpleClassroomUser(
    avatar_url: String,
    login: String,
    id: Int,
    html_url: String,
  )
}

pub type CombinedCommitStatus {
  CombinedCommitStatus(
    statuses: List(SimpleCommitStatus),
    commit_url: String,
    repository: MinimalRepository,
    sha: String,
    url: String,
    state: String,
    total_count: Int,
  )
}

pub type InteractionLimit {
  InteractionLimit(expiry: Option(InteractionExpiry), limit: InteractionGroup)
}

pub type WebhookProjectCardMoved {
  WebhookProjectCardMoved(
    enterprise: Option(EnterpriseWebhooks),
    changes: Option(Nil),
    repository: Option(RepositoryWebhooks),
    organization: Option(OrganizationSimpleWebhooks),
    sender: SimpleUser,
    project_card: Nil,
    action: String,
    installation: Option(SimpleInstallation),
  )
}

pub type ThreadSubscription {
  ThreadSubscription(
    reason: Option(String),
    created_at: Option(String),
    url: String,
    ignored: Bool,
    subscribed: Bool,
    thread_url: Option(String),
    repository_url: Option(String),
  )
}

pub type ApiInsightsSubjectStats =
  List(Nil)

pub type CodeScanningAlertStateQuery =
  String

pub type AuthorAssociation =
  String

pub type CodeScanningVariantAnalysisStatus =
  String

pub type ApiInsightsTimeStats =
  List(Nil)

pub type AlertHtmlUrl =
  String

pub type AlertUrl =
  String

pub type SearchResultTextMatches =
  List(Nil)

pub type CodeScanningAnalysisEnvironment =
  String

pub type WebhookPullRequestReviewRequestRemoved =
  Nil

pub type AlertFixedAt =
  String

pub type WebhooksDeployPusherType =
  String

pub type CodeScanningAnalysisSarifFile =
  String

pub type CodeScanningAnalysisSarifId =
  String

pub type ApiInsightsRouteStats =
  List(Nil)

pub type SecretScanningAlertResolution =
  String

pub type ApiInsightsUserStats =
  List(Nil)

pub type SecurityAdvisoryEcosystems =
  String

pub type CodeScanningAnalysisUrl =
  String

pub type WebhooksRepositorySelection =
  String

pub type WebhookConfigUrl =
  String

pub type DeploymentReviewerType =
  String

pub type AlertNumber =
  Int

pub type SecretScanningPushProtectionBypassPlaceholderId =
  String

pub type CodeScanningAlertSetState =
  String

pub type ContentDirectory =
  List(Nil)

pub type AllowedActions =
  String

pub type CodeScanningAnalysisToolVersion =
  String

pub type CodeScanningRef =
  String

pub type AlertUpdatedAt =
  String

pub type CodeSecurityDefaultConfigurations =
  List(Nil)

pub type CodeScanningAlertDismissedReason =
  String

pub type WebhooksCodeScanningRef =
  String

pub type EnabledRepositories =
  String

pub type CodeScanningAnalysisCategory =
  String

pub type CodeScanningAlertClassification =
  String

pub type RepositoryRuleEnforcement =
  String

pub type ActionsDefaultWorkflowPermissions =
  String

pub type ActionsEnabled =
  Bool

pub type PullRequestWebhook =
  Nil

pub type WebhookConfigInsecureSsl =
  Nil

pub type AlertInstancesUrl =
  String

pub type IssueEventForIssue =
  Nil

pub type CodeScanningAlertDismissedComment =
  String

pub type InteractionExpiry =
  String

pub type SecretScanningAlertResolutionComment =
  String

pub type CodeScanningAnalysisCreatedAt =
  String

pub type WaitTimer =
  Int

pub type SelectedActionsUrl =
  String

pub type WebhooksRepositoriesAdded =
  List(Nil)

pub type SecurityAdvisoryCreditTypes =
  String

pub type WebhooksNullableString =
  String

pub type RuleSuites =
  List(Nil)

pub type WebhooksNumber =
  Int

pub type WebhooksRepositories =
  List(Nil)

pub type CodeScanningAnalysisCommitSha =
  String

pub type WebhooksReviewers =
  List(Nil)

pub type CodeScanningAnalysisToolName =
  String

pub type ProjectsV2ItemContentType =
  String

pub type CodeScanningAlertSeverity =
  String

pub type SecretScanningPushProtectionBypassReason =
  String

pub type CodeScanningAnalysisToolGuid =
  String

pub type AlertCreatedAt =
  String

pub type WebhooksEffectiveDate =
  String

pub type WebhookPullRequestReviewRequested =
  Nil

pub type AlertDismissedAt =
  String

pub type CodeScanningAlertEnvironment =
  String

pub type DependencyGraphDiff =
  List(Nil)

pub type SecretScanningAlertResolutionWebhook =
  String

pub type WebhookConfigSecret =
  String

pub type CodeScanningVariantAnalysisLanguage =
  String

pub type CodeScanningRefFull =
  String

pub type CodeFrequencyStat =
  List(Int)

pub type InteractionGroup =
  String

pub type CodeScanningAlertState =
  String

pub type AlertAutoDismissedAt =
  String

pub type PreventSelfReview =
  Bool

pub type CodeScanningAnalysisAnalysisKey =
  String

pub type WebhookConfigContentType =
  String

pub type ActionsCanApprovePullRequestReviews =
  Bool

pub type NullableAlertUpdatedAt =
  String

pub type WebhooksCodeScanningCommitOid =
  String

pub type WebhooksRef0 =
  String

pub type SecretScanningAlertState =
  String

pub fn team_full_decoder() {
  use ldap_dn <- decode.optional_field(
    "ldap_dn",
    None,
    decode.optional(decode.string),
  )
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.field("members_url", decode.string)
  use members_count <- decode.field("members_count", decode.int)
  use parent <- decode.optional_field(
    "parent",
    None,
    decode.optional(nullable_team_simple_decoder()),
  )
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use url <- decode.field("url", decode.string)
  use permission <- decode.field("permission", decode.string)
  use repos_count <- decode.field("repos_count", decode.int)
  use organization <- decode.field("organization", team_organization_decoder())
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    TeamFull(
      ldap_dn: ldap_dn,
      privacy: privacy,
      members_url: members_url,
      members_count: members_count,
      parent: parent,
      created_at: created_at,
      name: name,
      slug: slug,
      url: url,
      permission: permission,
      repos_count: repos_count,
      organization: organization,
      updated_at: updated_at,
      node_id: node_id,
      repositories_url: repositories_url,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn team_full_encode(data: TeamFull) {
  json.object(
    [
      #("ldap_dn", json.nullable(data.ldap_dn, json.string)),
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.string(data.members_url)),
      #("members_count", json.int(data.members_count)),
      #("parent", json.nullable(data.parent, nullable_team_simple_encode)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("url", json.string(data.url)),
      #("permission", json.string(data.permission)),
      #("repos_count", json.int(data.repos_count)),
      #("organization", team_organization_encode(data.organization)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn projects_v2_single_select_option_decoder() {
  use color <- decode.optional_field(
    "color",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use id <- decode.field("id", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ProjectsV2SingleSelectOption(
      color: color,
      name: name,
      id: id,
      description: description,
    ),
  )
}

pub fn projects_v2_single_select_option_encode(
  data: ProjectsV2SingleSelectOption,
) {
  json.object(
    [
      #("color", json.nullable(data.color, json.string)),
      #("name", json.string(data.name)),
      #("id", json.string(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn repository_webhooks_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use custom_properties <- decode.optional_field(
    "custom_properties",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use allow_update_branch <- decode.optional_field(
    "allow_update_branch",
    None,
    decode.optional(decode.bool),
  )
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.field("has_downloads", decode.bool)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use squash_merge_commit_message <- decode.optional_field(
    "squash_merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use merge_commit_message <- decode.optional_field(
    "merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use template_repository <- decode.optional_field(
    "template_repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use use_squash_pr_title_as_default <- decode.optional_field(
    "use_squash_pr_title_as_default",
    None,
    decode.optional(decode.bool),
  )
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use squash_merge_commit_title <- decode.optional_field(
    "squash_merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use merge_commit_title <- decode.optional_field(
    "merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use anonymous_access_enabled <- decode.optional_field(
    "anonymous_access_enabled",
    None,
    decode.optional(decode.bool),
  )
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use subscribers_count <- decode.optional_field(
    "subscribers_count",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use network_count <- decode.optional_field(
    "network_count",
    None,
    decode.optional(decode.int),
  )
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    RepositoryWebhooks(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      custom_properties: custom_properties,
      forks_count: forks_count,
      fork: fork,
      allow_update_branch: allow_update_branch,
      git_url: git_url,
      archived: archived,
      private: private,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      squash_merge_commit_message: squash_merge_commit_message,
      has_discussions: has_discussions,
      teams_url: teams_url,
      merge_commit_message: merge_commit_message,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      template_repository: template_repository,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      use_squash_pr_title_as_default: use_squash_pr_title_as_default,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      organization: organization,
      owner: owner,
      starred_at: starred_at,
      allow_merge_commit: allow_merge_commit,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      squash_merge_commit_title: squash_merge_commit_title,
      merge_commit_title: merge_commit_title,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      anonymous_access_enabled: anonymous_access_enabled,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      subscribers_count: subscribers_count,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      network_count: network_count,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn repository_webhooks_encode(data: RepositoryWebhooks) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #(
        "custom_properties",
        json.nullable(
          data.custom_properties,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #(
        "allow_update_branch",
        json.nullable(data.allow_update_branch, json.bool),
      ),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.bool(data.has_downloads)),
      #("blobs_url", json.string(data.blobs_url)),
      #(
        "squash_merge_commit_message",
        json.nullable(data.squash_merge_commit_message, json.string),
      ),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #(
        "merge_commit_message",
        json.nullable(data.merge_commit_message, json.string),
      ),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #(
        "template_repository",
        json.nullable(
          data.template_repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #(
        "use_squash_pr_title_as_default",
        json.nullable(data.use_squash_pr_title_as_default, json.bool),
      ),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #(
        "organization",
        json.nullable(data.organization, nullable_simple_user_encode),
      ),
      #("owner", simple_user_encode(data.owner)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #(
        "squash_merge_commit_title",
        json.nullable(data.squash_merge_commit_title, json.string),
      ),
      #(
        "merge_commit_title",
        json.nullable(data.merge_commit_title, json.string),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #(
        "anonymous_access_enabled",
        json.nullable(data.anonymous_access_enabled, json.bool),
      ),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("subscribers_count", json.nullable(data.subscribers_count, json.int)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("network_count", json.nullable(data.network_count, json.int)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn webhook_deployment_protection_rule_requested_decoder() {
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use deployment_callback_url <- decode.optional_field(
    "deployment_callback_url",
    None,
    decode.optional(decode.string),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use environment <- decode.optional_field(
    "environment",
    None,
    decode.optional(decode.string),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use event <- decode.optional_field(
    "event",
    None,
    decode.optional(decode.string),
  )
  use pull_requests <- decode.optional_field(
    "pull_requests",
    None,
    decode.optional(decode.list(pull_request_decoder())),
  )
  decode.success(
    WebhookDeploymentProtectionRuleRequested(
      deployment: deployment,
      repository: repository,
      deployment_callback_url: deployment_callback_url,
      organization: organization,
      environment: environment,
      sender: sender,
      action: action,
      installation: installation,
      event: event,
      pull_requests: pull_requests,
    ),
  )
}

pub fn webhook_deployment_protection_rule_requested_encode(
  data: WebhookDeploymentProtectionRuleRequested,
) {
  json.object(
    [
      #("deployment", json.nullable(data.deployment, deployment_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "deployment_callback_url",
        json.nullable(data.deployment_callback_url, json.string),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("environment", json.nullable(data.environment, json.string)),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.nullable(data.action, json.string)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("event", json.nullable(data.event, json.string)),
      #(
        "pull_requests",
        json.nullable(data.pull_requests, json.array(_, pull_request_encode)),
      )
    ],
  )
}

pub fn empty_object_decoder() {
  decode.success(EmptyObject)
}

pub fn empty_object_encode(_data: EmptyObject) {
  json.object([])
}

pub fn workflow_decoder() {
  use path_ <- decode.field("path", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use badge_url <- decode.field("badge_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use deleted_at <- decode.optional_field(
    "deleted_at",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    Workflow(
      path_: path_,
      created_at: created_at,
      name: name,
      url: url,
      state: state,
      badge_url: badge_url,
      updated_at: updated_at,
      node_id: node_id,
      deleted_at: deleted_at,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn workflow_encode(data: Workflow) {
  json.object(
    [
      #("path", json.string(data.path_)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("badge_url", json.string(data.badge_url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("deleted_at", json.nullable(data.deleted_at, json.string)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn repository_rule_decoder() {
  decode.success(RepositoryRule)
}

pub fn repository_rule_encode(_data: RepositoryRule) {
  json.object([])
}

pub fn personal_access_token_request_decoder() {
  use token_id <- decode.field("token_id", decode.int)
  use permissions_upgraded <- decode.field(
    "permissions_upgraded",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use token_expires_at <- decode.optional_field(
    "token_expires_at",
    None,
    decode.optional(decode.string),
  )
  use permissions_added <- decode.field(
    "permissions_added",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use created_at <- decode.field("created_at", decode.string)
  use token_name <- decode.field("token_name", decode.string)
  use token_last_used_at <- decode.optional_field(
    "token_last_used_at",
    None,
    decode.optional(decode.string),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use repository_selection <- decode.field("repository_selection", decode.string)
  use permissions_result <- decode.field(
    "permissions_result",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository_count <- decode.optional_field(
    "repository_count",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use token_expired <- decode.field("token_expired", decode.bool)
  decode.success(
    PersonalAccessTokenRequest(
      token_id: token_id,
      permissions_upgraded: permissions_upgraded,
      token_expires_at: token_expires_at,
      permissions_added: permissions_added,
      repositories: repositories,
      created_at: created_at,
      token_name: token_name,
      token_last_used_at: token_last_used_at,
      owner: owner,
      repository_selection: repository_selection,
      permissions_result: permissions_result,
      repository_count: repository_count,
      id: id,
      token_expired: token_expired,
    ),
  )
}

pub fn personal_access_token_request_encode(data: PersonalAccessTokenRequest) {
  json.object(
    [
      #("token_id", json.int(data.token_id)),
      #(
        "permissions_upgraded",
        fn(_) { panic as "Literal object inside field" }(
          data.permissions_upgraded,
        ),
      ),
      #("token_expires_at", json.nullable(data.token_expires_at, json.string)),
      #(
        "permissions_added",
        fn(_) { panic as "Literal object inside field" }(data.permissions_added),
      ),
      #(
        "repositories",
        json.nullable(
          data.repositories,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("created_at", json.string(data.created_at)),
      #("token_name", json.string(data.token_name)),
      #(
        "token_last_used_at",
        json.nullable(data.token_last_used_at, json.string),
      ),
      #("owner", simple_user_encode(data.owner)),
      #("repository_selection", json.string(data.repository_selection)),
      #(
        "permissions_result",
        fn(_) { panic as "Literal object inside field" }(data.permissions_result),
      ),
      #("repository_count", json.nullable(data.repository_count, json.int)),
      #("id", json.int(data.id)),
      #("token_expired", json.bool(data.token_expired))
    ],
  )
}

pub fn security_and_analysis_decoder() {
  use secret_scanning <- decode.optional_field(
    "secret_scanning",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use secret_scanning_non_provider_patterns <- decode.optional_field(
    "secret_scanning_non_provider_patterns",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use secret_scanning_ai_detection <- decode.optional_field(
    "secret_scanning_ai_detection",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use dependabot_security_updates <- decode.optional_field(
    "dependabot_security_updates",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use advanced_security <- decode.optional_field(
    "advanced_security",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use secret_scanning_push_protection <- decode.optional_field(
    "secret_scanning_push_protection",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    SecurityAndAnalysis(
      secret_scanning: secret_scanning,
      secret_scanning_non_provider_patterns: secret_scanning_non_provider_patterns,
      secret_scanning_ai_detection: secret_scanning_ai_detection,
      dependabot_security_updates: dependabot_security_updates,
      advanced_security: advanced_security,
      secret_scanning_push_protection: secret_scanning_push_protection,
    ),
  )
}

pub fn security_and_analysis_encode(data: SecurityAndAnalysis) {
  json.object(
    [
      #(
        "secret_scanning",
        json.nullable(
          data.secret_scanning,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "secret_scanning_non_provider_patterns",
        json.nullable(
          data.secret_scanning_non_provider_patterns,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "secret_scanning_ai_detection",
        json.nullable(
          data.secret_scanning_ai_detection,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "dependabot_security_updates",
        json.nullable(
          data.dependabot_security_updates,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "advanced_security",
        json.nullable(
          data.advanced_security,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "secret_scanning_push_protection",
        json.nullable(
          data.secret_scanning_push_protection,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn api_insights_subject_stats_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn api_insights_subject_stats_encode(data: ApiInsightsSubjectStats) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn code_scanning_alert_state_query_decoder() {
  decode.string
}

pub fn code_scanning_alert_state_query_encode(data: CodeScanningAlertStateQuery) {
  json.string(data)
}

pub fn webhook_repository_privatized_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryPrivatized(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_privatized_encode(data: WebhookRepositoryPrivatized) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_personal_access_token_request_denied_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use personal_access_token_request <- decode.field(
    "personal_access_token_request",
    personal_access_token_request_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", simple_installation_decoder())
  decode.success(
    WebhookPersonalAccessTokenRequestDenied(
      enterprise: enterprise,
      personal_access_token_request: personal_access_token_request,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_personal_access_token_request_denied_encode(
  data: WebhookPersonalAccessTokenRequestDenied,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "personal_access_token_request",
        personal_access_token_request_encode(data.personal_access_token_request),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", simple_installation_encode(data.installation))
    ],
  )
}

pub fn author_association_decoder() {
  decode.string
}

pub fn author_association_encode(data: AuthorAssociation) {
  json.string(data)
}

pub fn timeline_cross_referenced_event_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use actor <- decode.optional_field(
    "actor",
    None,
    decode.optional(simple_user_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use event <- decode.field("event", decode.string)
  use source <- decode.field(
    "source",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    TimelineCrossReferencedEvent(
      created_at: created_at,
      actor: actor,
      updated_at: updated_at,
      event: event,
      source: source,
    ),
  )
}

pub fn timeline_cross_referenced_event_encode(data: TimelineCrossReferencedEvent) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("actor", json.nullable(data.actor, simple_user_encode)),
      #("updated_at", json.string(data.updated_at)),
      #("event", json.string(data.event)),
      #("source", fn(_) { panic as "Literal object inside field" }(data.source))
    ],
  )
}

pub fn git_tag_decoder() {
  use message <- decode.field("message", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use tagger <- decode.field(
    "tagger",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use tag <- decode.field("tag", decode.string)
  use verification <- decode.optional_field(
    "verification",
    None,
    decode.optional(verification_decoder()),
  )
  use object <- decode.field(
    "object",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    GitTag(
      message: message,
      sha: sha,
      url: url,
      node_id: node_id,
      tagger: tagger,
      tag: tag,
      verification: verification,
      object: object,
    ),
  )
}

pub fn git_tag_encode(data: GitTag) {
  json.object(
    [
      #("message", json.string(data.message)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("node_id", json.string(data.node_id)),
      #("tagger", fn(_) { panic as "Literal object inside field" }(data.tagger)),
      #("tag", json.string(data.tag)),
      #("verification", json.nullable(data.verification, verification_encode)),
      #("object", fn(_) { panic as "Literal object inside field" }(data.object))
    ],
  )
}

pub fn actions_billing_usage_decoder() {
  use total_paid_minutes_used <- decode.field(
    "total_paid_minutes_used",
    decode.int,
  )
  use total_minutes_used <- decode.field("total_minutes_used", decode.int)
  use included_minutes <- decode.field("included_minutes", decode.int)
  use minutes_used_breakdown <- decode.field(
    "minutes_used_breakdown",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    ActionsBillingUsage(
      total_paid_minutes_used: total_paid_minutes_used,
      total_minutes_used: total_minutes_used,
      included_minutes: included_minutes,
      minutes_used_breakdown: minutes_used_breakdown,
    ),
  )
}

pub fn actions_billing_usage_encode(data: ActionsBillingUsage) {
  json.object(
    [
      #("total_paid_minutes_used", json.int(data.total_paid_minutes_used)),
      #("total_minutes_used", json.int(data.total_minutes_used)),
      #("included_minutes", json.int(data.included_minutes)),
      #(
        "minutes_used_breakdown",
        fn(_) { panic as "Literal object inside field" }(
          data.minutes_used_breakdown,
        ),
      )
    ],
  )
}

pub fn webhook_public_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPublic(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      installation: installation,
    ),
  )
}

pub fn webhook_public_encode(data: WebhookPublic) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn org_membership_decoder() {
  use organization_url <- decode.field("organization_url", decode.string)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use organization <- decode.field("organization", organization_simple_decoder())
  use role <- decode.field("role", decode.string)
  decode.success(
    OrgMembership(
      organization_url: organization_url,
      permissions: permissions,
      user: user,
      url: url,
      state: state,
      organization: organization,
      role: role,
    ),
  )
}

pub fn org_membership_encode(data: OrgMembership) {
  json.object(
    [
      #("organization_url", json.string(data.organization_url)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("user", nullable_simple_user_encode(data.user)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("organization", organization_simple_encode(data.organization)),
      #("role", json.string(data.role))
    ],
  )
}

pub fn key_decoder() {
  use verified <- decode.field("verified", decode.bool)
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use read_only <- decode.field("read_only", decode.bool)
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use key <- decode.field("key", decode.string)
  decode.success(
    Key(
      verified: verified,
      created_at: created_at,
      url: url,
      read_only: read_only,
      title: title,
      id: id,
      key: key,
    ),
  )
}

pub fn key_encode(data: Key) {
  json.object(
    [
      #("verified", json.bool(data.verified)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("read_only", json.bool(data.read_only)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn commit_comparison_decoder() {
  use total_commits <- decode.field("total_commits", decode.int)
  use base_commit <- decode.field("base_commit", commit_decoder())
  use url <- decode.field("url", decode.string)
  use status <- decode.field("status", decode.string)
  use diff_url <- decode.field("diff_url", decode.string)
  use ahead_by <- decode.field("ahead_by", decode.int)
  use files <- decode.optional_field(
    "files",
    None,
    decode.optional(decode.list(diff_entry_decoder())),
  )
  use patch_url <- decode.field("patch_url", decode.string)
  use permalink_url <- decode.field("permalink_url", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use behind_by <- decode.field("behind_by", decode.int)
  use commits <- decode.field("commits", decode.list(commit_decoder()))
  use merge_base_commit <- decode.field("merge_base_commit", commit_decoder())
  decode.success(
    CommitComparison(
      total_commits: total_commits,
      base_commit: base_commit,
      url: url,
      status: status,
      diff_url: diff_url,
      ahead_by: ahead_by,
      files: files,
      patch_url: patch_url,
      permalink_url: permalink_url,
      html_url: html_url,
      behind_by: behind_by,
      commits: commits,
      merge_base_commit: merge_base_commit,
    ),
  )
}

pub fn commit_comparison_encode(data: CommitComparison) {
  json.object(
    [
      #("total_commits", json.int(data.total_commits)),
      #("base_commit", commit_encode(data.base_commit)),
      #("url", json.string(data.url)),
      #("status", json.string(data.status)),
      #("diff_url", json.string(data.diff_url)),
      #("ahead_by", json.int(data.ahead_by)),
      #("files", json.nullable(data.files, json.array(_, diff_entry_encode))),
      #("patch_url", json.string(data.patch_url)),
      #("permalink_url", json.string(data.permalink_url)),
      #("html_url", json.string(data.html_url)),
      #("behind_by", json.int(data.behind_by)),
      #("commits", json.array(_, commit_encode)(data.commits)),
      #("merge_base_commit", commit_encode(data.merge_base_commit))
    ],
  )
}

pub fn renamed_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  use rename <- decode.field(
    "rename",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    RenamedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
      rename: rename,
    ),
  )
}

pub fn renamed_issue_event_encode(data: RenamedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id)),
      #("rename", fn(_) { panic as "Literal object inside field" }(data.rename))
    ],
  )
}

pub fn webhook_code_scanning_alert_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use commit_oid <- decode.optional_field(
    "commit_oid",
    None,
    decode.optional(decode.string),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.optional_field("ref", None, decode.optional(decode.string))
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.optional_field(
    "alert",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    WebhookCodeScanningAlertReopened(
      enterprise: enterprise,
      commit_oid: commit_oid,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_code_scanning_alert_reopened_encode(
  data: WebhookCodeScanningAlertReopened,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("commit_oid", json.nullable(data.commit_oid, json.string)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", json.nullable(data.ref, json.string)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "alert",
        json.nullable(
          data.alert,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn code_scanning_variant_analysis_status_decoder() {
  decode.string
}

pub fn code_scanning_variant_analysis_status_encode(
  data: CodeScanningVariantAnalysisStatus,
) {
  json.string(data)
}

pub fn webhook_installation_suspend_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(webhooks_repositories_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", installation_decoder())
  decode.success(
    WebhookInstallationSuspend(
      enterprise: enterprise,
      repositories: repositories,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_installation_suspend_encode(data: WebhookInstallationSuspend) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories",
        json.nullable(data.repositories, webhooks_repositories_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", installation_encode(data.installation))
    ],
  )
}

pub fn webhook_pull_request_auto_merge_disabled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use reason <- decode.field("reason", decode.string)
  use number <- decode.field("number", decode.int)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestAutoMergeDisabled(
      enterprise: enterprise,
      reason: reason,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_auto_merge_disabled_encode(
  data: WebhookPullRequestAutoMergeDisabled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("reason", json.string(data.reason)),
      #("number", json.int(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_project_column_decoder() {
  use project_url <- decode.field("project_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use cards_url <- decode.field("cards_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use after_id <- decode.optional_field(
    "after_id",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    WebhooksProjectColumn(
      project_url: project_url,
      created_at: created_at,
      name: name,
      url: url,
      cards_url: cards_url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      after_id: after_id,
    ),
  )
}

pub fn webhooks_project_column_encode(data: WebhooksProjectColumn) {
  json.object(
    [
      #("project_url", json.string(data.project_url)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("cards_url", json.string(data.cards_url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("after_id", json.nullable(data.after_id, json.int))
    ],
  )
}

pub fn webhook_milestone_closed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.field("milestone", webhooks_milestone_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMilestoneClosed(
      enterprise: enterprise,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_milestone_closed_encode(data: WebhookMilestoneClosed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", webhooks_milestone_encode(data.milestone)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_membership_added_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use scope <- decode.field("scope", decode.string)
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use member <- decode.field("member", webhooks_user_decoder())
  use team <- decode.field("team", webhooks_team_decoder())
  decode.success(
    WebhookMembershipAdded(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      scope: scope,
      sender: sender,
      action: action,
      installation: installation,
      member: member,
      team: team,
    ),
  )
}

pub fn webhook_membership_added_encode(data: WebhookMembershipAdded) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("scope", json.string(data.scope)),
      #(
        "sender",
        json.nullable(
          data.sender,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("member", webhooks_user_encode(data.member)),
      #("team", webhooks_team_encode(data.team))
    ],
  )
}

pub fn webhook_membership_removed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use scope <- decode.field("scope", decode.string)
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use member <- decode.field("member", webhooks_user_decoder())
  use team <- decode.field("team", webhooks_team_decoder())
  decode.success(
    WebhookMembershipRemoved(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      scope: scope,
      sender: sender,
      action: action,
      installation: installation,
      member: member,
      team: team,
    ),
  )
}

pub fn webhook_membership_removed_encode(data: WebhookMembershipRemoved) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("scope", json.string(data.scope)),
      #(
        "sender",
        json.nullable(
          data.sender,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("member", webhooks_user_encode(data.member)),
      #("team", webhooks_team_encode(data.team))
    ],
  )
}

pub fn webhooks_rule_decoder() {
  use signature_requirement_enforcement_level <- decode.field(
    "signature_requirement_enforcement_level",
    decode.string,
  )
  use strict_required_status_checks_policy <- decode.field(
    "strict_required_status_checks_policy",
    decode.bool,
  )
  use linear_history_requirement_enforcement_level <- decode.field(
    "linear_history_requirement_enforcement_level",
    decode.string,
  )
  use authorized_actors_only <- decode.field(
    "authorized_actors_only",
    decode.bool,
  )
  use created_at <- decode.field("created_at", decode.string)
  use create_protected <- decode.optional_field(
    "create_protected",
    None,
    decode.optional(decode.bool),
  )
  use name <- decode.field("name", decode.string)
  use required_conversation_resolution_level <- decode.field(
    "required_conversation_resolution_level",
    decode.string,
  )
  use merge_queue_enforcement_level <- decode.field(
    "merge_queue_enforcement_level",
    decode.string,
  )
  use repository_id <- decode.field("repository_id", decode.int)
  use ignore_approvals_from_contributors <- decode.field(
    "ignore_approvals_from_contributors",
    decode.bool,
  )
  use admin_enforced <- decode.field("admin_enforced", decode.bool)
  use required_deployments_enforcement_level <- decode.field(
    "required_deployments_enforcement_level",
    decode.string,
  )
  use allow_deletions_enforcement_level <- decode.field(
    "allow_deletions_enforcement_level",
    decode.string,
  )
  use lock_allows_fork_sync <- decode.optional_field(
    "lock_allows_fork_sync",
    None,
    decode.optional(decode.bool),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use pull_request_reviews_enforcement_level <- decode.field(
    "pull_request_reviews_enforcement_level",
    decode.string,
  )
  use required_status_checks <- decode.field(
    "required_status_checks",
    decode.list(decode.string),
  )
  use allow_force_pushes_enforcement_level <- decode.field(
    "allow_force_pushes_enforcement_level",
    decode.string,
  )
  use require_last_push_approval <- decode.optional_field(
    "require_last_push_approval",
    None,
    decode.optional(decode.bool),
  )
  use authorized_actor_names <- decode.field(
    "authorized_actor_names",
    decode.list(decode.string),
  )
  use dismiss_stale_reviews_on_push <- decode.field(
    "dismiss_stale_reviews_on_push",
    decode.bool,
  )
  use id <- decode.field("id", decode.int)
  use lock_branch_enforcement_level <- decode.field(
    "lock_branch_enforcement_level",
    decode.string,
  )
  use require_code_owner_review <- decode.field(
    "require_code_owner_review",
    decode.bool,
  )
  use required_approving_review_count <- decode.field(
    "required_approving_review_count",
    decode.int,
  )
  use required_status_checks_enforcement_level <- decode.field(
    "required_status_checks_enforcement_level",
    decode.string,
  )
  use authorized_dismissal_actors_only <- decode.field(
    "authorized_dismissal_actors_only",
    decode.bool,
  )
  decode.success(
    WebhooksRule(
      signature_requirement_enforcement_level: signature_requirement_enforcement_level,
      strict_required_status_checks_policy: strict_required_status_checks_policy,
      linear_history_requirement_enforcement_level: linear_history_requirement_enforcement_level,
      authorized_actors_only: authorized_actors_only,
      created_at: created_at,
      create_protected: create_protected,
      name: name,
      required_conversation_resolution_level: required_conversation_resolution_level,
      merge_queue_enforcement_level: merge_queue_enforcement_level,
      repository_id: repository_id,
      ignore_approvals_from_contributors: ignore_approvals_from_contributors,
      admin_enforced: admin_enforced,
      required_deployments_enforcement_level: required_deployments_enforcement_level,
      allow_deletions_enforcement_level: allow_deletions_enforcement_level,
      lock_allows_fork_sync: lock_allows_fork_sync,
      updated_at: updated_at,
      pull_request_reviews_enforcement_level: pull_request_reviews_enforcement_level,
      required_status_checks: required_status_checks,
      allow_force_pushes_enforcement_level: allow_force_pushes_enforcement_level,
      require_last_push_approval: require_last_push_approval,
      authorized_actor_names: authorized_actor_names,
      dismiss_stale_reviews_on_push: dismiss_stale_reviews_on_push,
      id: id,
      lock_branch_enforcement_level: lock_branch_enforcement_level,
      require_code_owner_review: require_code_owner_review,
      required_approving_review_count: required_approving_review_count,
      required_status_checks_enforcement_level: required_status_checks_enforcement_level,
      authorized_dismissal_actors_only: authorized_dismissal_actors_only,
    ),
  )
}

pub fn webhooks_rule_encode(data: WebhooksRule) {
  json.object(
    [
      #(
        "signature_requirement_enforcement_level",
        json.string(data.signature_requirement_enforcement_level),
      ),
      #(
        "strict_required_status_checks_policy",
        json.bool(data.strict_required_status_checks_policy),
      ),
      #(
        "linear_history_requirement_enforcement_level",
        json.string(data.linear_history_requirement_enforcement_level),
      ),
      #("authorized_actors_only", json.bool(data.authorized_actors_only)),
      #("created_at", json.string(data.created_at)),
      #("create_protected", json.nullable(data.create_protected, json.bool)),
      #("name", json.string(data.name)),
      #(
        "required_conversation_resolution_level",
        json.string(data.required_conversation_resolution_level),
      ),
      #(
        "merge_queue_enforcement_level",
        json.string(data.merge_queue_enforcement_level),
      ),
      #("repository_id", json.int(data.repository_id)),
      #(
        "ignore_approvals_from_contributors",
        json.bool(data.ignore_approvals_from_contributors),
      ),
      #("admin_enforced", json.bool(data.admin_enforced)),
      #(
        "required_deployments_enforcement_level",
        json.string(data.required_deployments_enforcement_level),
      ),
      #(
        "allow_deletions_enforcement_level",
        json.string(data.allow_deletions_enforcement_level),
      ),
      #(
        "lock_allows_fork_sync",
        json.nullable(data.lock_allows_fork_sync, json.bool),
      ),
      #("updated_at", json.string(data.updated_at)),
      #(
        "pull_request_reviews_enforcement_level",
        json.string(data.pull_request_reviews_enforcement_level),
      ),
      #(
        "required_status_checks",
        json.array(_, json.string)(data.required_status_checks),
      ),
      #(
        "allow_force_pushes_enforcement_level",
        json.string(data.allow_force_pushes_enforcement_level),
      ),
      #(
        "require_last_push_approval",
        json.nullable(data.require_last_push_approval, json.bool),
      ),
      #(
        "authorized_actor_names",
        json.array(_, json.string)(data.authorized_actor_names),
      ),
      #(
        "dismiss_stale_reviews_on_push",
        json.bool(data.dismiss_stale_reviews_on_push),
      ),
      #("id", json.int(data.id)),
      #(
        "lock_branch_enforcement_level",
        json.string(data.lock_branch_enforcement_level),
      ),
      #("require_code_owner_review", json.bool(data.require_code_owner_review)),
      #(
        "required_approving_review_count",
        json.int(data.required_approving_review_count),
      ),
      #(
        "required_status_checks_enforcement_level",
        json.string(data.required_status_checks_enforcement_level),
      ),
      #(
        "authorized_dismissal_actors_only",
        json.bool(data.authorized_dismissal_actors_only),
      )
    ],
  )
}

pub fn webhook_project_card_converted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use project_card <- decode.field(
    "project_card",
    webhooks_project_card_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectCardConverted(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      project_card: project_card,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_project_card_converted_encode(data: WebhookProjectCardConverted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("project_card", webhooks_project_card_encode(data.project_card)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_deployment_status_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use deployment <- decode.field(
    "deployment",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.optional_field(
    "workflow_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use deployment_status <- decode.field(
    "deployment_status",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use check_run <- decode.optional_field(
    "check_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow <- decode.optional_field(
    "workflow",
    None,
    decode.optional(webhooks_workflow_decoder()),
  )
  decode.success(
    WebhookDeploymentStatusCreated(
      enterprise: enterprise,
      deployment: deployment,
      repository: repository,
      workflow_run: workflow_run,
      deployment_status: deployment_status,
      organization: organization,
      check_run: check_run,
      sender: sender,
      action: action,
      installation: installation,
      workflow: workflow,
    ),
  )
}

pub fn webhook_deployment_status_created_encode(
  data: WebhookDeploymentStatusCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "deployment",
        fn(_) { panic as "Literal object inside field" }(data.deployment),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        json.nullable(
          data.workflow_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "deployment_status",
        fn(_) { panic as "Literal object inside field" }(data.deployment_status),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "check_run",
        json.nullable(
          data.check_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("workflow", json.nullable(data.workflow, webhooks_workflow_encode))
    ],
  )
}

pub fn simple_classroom_repository_decoder() {
  use default_branch <- decode.field("default_branch", decode.string)
  use private <- decode.field("private", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    SimpleClassroomRepository(
      default_branch: default_branch,
      private: private,
      node_id: node_id,
      id: id,
      full_name: full_name,
      html_url: html_url,
    ),
  )
}

pub fn simple_classroom_repository_encode(data: SimpleClassroomRepository) {
  json.object(
    [
      #("default_branch", json.string(data.default_branch)),
      #("private", json.bool(data.private)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_team_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use team <- decode.field("team", webhooks_team_one_decoder())
  decode.success(
    WebhookTeamDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      team: team,
    ),
  )
}

pub fn webhook_team_deleted_encode(data: WebhookTeamDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(
          data.repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("team", webhooks_team_one_encode(data.team))
    ],
  )
}

pub fn base_gist_decoder() {
  use forks_url <- decode.field("forks_url", decode.string)
  use git_pull_url <- decode.field("git_pull_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use public <- decode.field("public", decode.bool)
  use created_at <- decode.field("created_at", decode.string)
  use user <- decode.field("user", nullable_simple_user_decoder())
  use commits_url <- decode.field("commits_url", decode.string)
  use url <- decode.field("url", decode.string)
  use owner <- decode.optional_field(
    "owner",
    None,
    decode.optional(simple_user_decoder()),
  )
  use comments <- decode.field("comments", decode.int)
  use git_push_url <- decode.field("git_push_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use files <- decode.field(
    "files",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use truncated <- decode.optional_field(
    "truncated",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    BaseGist(
      forks_url: forks_url,
      git_pull_url: git_pull_url,
      comments_url: comments_url,
      public: public,
      created_at: created_at,
      user: user,
      commits_url: commits_url,
      url: url,
      owner: owner,
      comments: comments,
      git_push_url: git_push_url,
      updated_at: updated_at,
      files: files,
      node_id: node_id,
      id: id,
      html_url: html_url,
      description: description,
      truncated: truncated,
    ),
  )
}

pub fn base_gist_encode(data: BaseGist) {
  json.object(
    [
      #("forks_url", json.string(data.forks_url)),
      #("git_pull_url", json.string(data.git_pull_url)),
      #("comments_url", json.string(data.comments_url)),
      #("public", json.bool(data.public)),
      #("created_at", json.string(data.created_at)),
      #("user", nullable_simple_user_encode(data.user)),
      #("commits_url", json.string(data.commits_url)),
      #("url", json.string(data.url)),
      #("owner", json.nullable(data.owner, simple_user_encode)),
      #("comments", json.int(data.comments)),
      #("git_push_url", json.string(data.git_push_url)),
      #("updated_at", json.string(data.updated_at)),
      #("files", fn(_) { panic as "Literal object inside field" }(data.files)),
      #("node_id", json.string(data.node_id)),
      #("id", json.string(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string)),
      #("truncated", json.nullable(data.truncated, json.bool))
    ],
  )
}

pub fn webhook_secret_scanning_alert_resolved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", secret_scanning_alert_webhook_decoder())
  decode.success(
    WebhookSecretScanningAlertResolved(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_secret_scanning_alert_resolved_encode(
  data: WebhookSecretScanningAlertResolved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", secret_scanning_alert_webhook_encode(data.alert))
    ],
  )
}

pub fn repository_rule_detailed_decoder() {
  decode.success(RepositoryRuleDetailed)
}

pub fn repository_rule_detailed_encode(_data: RepositoryRuleDetailed) {
  json.object([])
}

pub fn webhook_pull_request_assigned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use assignee <- decode.field("assignee", webhooks_user_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestAssigned(
      enterprise: enterprise,
      number: number,
      repository: repository,
      assignee: assignee,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_assigned_encode(data: WebhookPullRequestAssigned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("assignee", webhooks_user_encode(data.assignee)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_package_updated_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use package <- decode.field(
    "package",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPackageUpdated(
      enterprise: enterprise,
      package: package,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_package_updated_encode(data: WebhookPackageUpdated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "package",
        fn(_) { panic as "Literal object inside field" }(data.package),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_security_advisory_updated_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use security_advisory <- decode.field(
    "security_advisory",
    webhooks_security_advisory_decoder(),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSecurityAdvisoryUpdated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      security_advisory: security_advisory,
      installation: installation,
    ),
  )
}

pub fn webhook_security_advisory_updated_encode(
  data: WebhookSecurityAdvisoryUpdated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "security_advisory",
        webhooks_security_advisory_encode(data.security_advisory),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn api_insights_time_stats_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn api_insights_time_stats_encode(data: ApiInsightsTimeStats) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn code_search_result_item_decoder() {
  use last_modified_at <- decode.optional_field(
    "last_modified_at",
    None,
    decode.optional(decode.string),
  )
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use git_url <- decode.field("git_url", decode.string)
  use file_size <- decode.optional_field(
    "file_size",
    None,
    decode.optional(decode.int),
  )
  use path_ <- decode.field("path", decode.string)
  use repository <- decode.field("repository", minimal_repository_decoder())
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use score <- decode.field("score", decode.float)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use html_url <- decode.field("html_url", decode.string)
  use line_numbers <- decode.optional_field(
    "line_numbers",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    CodeSearchResultItem(
      last_modified_at: last_modified_at,
      text_matches: text_matches,
      git_url: git_url,
      file_size: file_size,
      path_: path_,
      repository: repository,
      name: name,
      sha: sha,
      url: url,
      score: score,
      language: language,
      html_url: html_url,
      line_numbers: line_numbers,
    ),
  )
}

pub fn code_search_result_item_encode(data: CodeSearchResultItem) {
  json.object(
    [
      #("last_modified_at", json.nullable(data.last_modified_at, json.string)),
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("git_url", json.string(data.git_url)),
      #("file_size", json.nullable(data.file_size, json.int)),
      #("path", json.string(data.path_)),
      #("repository", minimal_repository_encode(data.repository)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("score", json.float(data.score)),
      #("language", json.nullable(data.language, json.string)),
      #("html_url", json.string(data.html_url)),
      #(
        "line_numbers",
        json.nullable(data.line_numbers, json.array(_, json.string)),
      )
    ],
  )
}

pub fn feed_decoder() {
  use current_user_url <- decode.optional_field(
    "current_user_url",
    None,
    decode.optional(decode.string),
  )
  use current_user_organization_urls <- decode.optional_field(
    "current_user_organization_urls",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use repository_discussions_url <- decode.optional_field(
    "repository_discussions_url",
    None,
    decode.optional(decode.string),
  )
  use security_advisories_url <- decode.optional_field(
    "security_advisories_url",
    None,
    decode.optional(decode.string),
  )
  use current_user_public_url <- decode.optional_field(
    "current_user_public_url",
    None,
    decode.optional(decode.string),
  )
  use current_user_organization_url <- decode.optional_field(
    "current_user_organization_url",
    None,
    decode.optional(decode.string),
  )
  use timeline_url <- decode.field("timeline_url", decode.string)
  use current_user_actor_url <- decode.optional_field(
    "current_user_actor_url",
    None,
    decode.optional(decode.string),
  )
  use repository_discussions_category_url <- decode.optional_field(
    "repository_discussions_category_url",
    None,
    decode.optional(decode.string),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user_url <- decode.field("user_url", decode.string)
  decode.success(
    Feed(
      current_user_url: current_user_url,
      current_user_organization_urls: current_user_organization_urls,
      repository_discussions_url: repository_discussions_url,
      security_advisories_url: security_advisories_url,
      current_user_public_url: current_user_public_url,
      current_user_organization_url: current_user_organization_url,
      timeline_url: timeline_url,
      current_user_actor_url: current_user_actor_url,
      repository_discussions_category_url: repository_discussions_category_url,
      links: links,
      user_url: user_url,
    ),
  )
}

pub fn feed_encode(data: Feed) {
  json.object(
    [
      #("current_user_url", json.nullable(data.current_user_url, json.string)),
      #(
        "current_user_organization_urls",
        json.nullable(
          data.current_user_organization_urls,
          json.array(_, json.string),
        ),
      ),
      #(
        "repository_discussions_url",
        json.nullable(data.repository_discussions_url, json.string),
      ),
      #(
        "security_advisories_url",
        json.nullable(data.security_advisories_url, json.string),
      ),
      #(
        "current_user_public_url",
        json.nullable(data.current_user_public_url, json.string),
      ),
      #(
        "current_user_organization_url",
        json.nullable(data.current_user_organization_url, json.string),
      ),
      #("timeline_url", json.string(data.timeline_url)),
      #(
        "current_user_actor_url",
        json.nullable(data.current_user_actor_url, json.string),
      ),
      #(
        "repository_discussions_category_url",
        json.nullable(data.repository_discussions_category_url, json.string),
      ),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("user_url", json.string(data.user_url))
    ],
  )
}

pub fn alert_html_url_decoder() {
  decode.string
}

pub fn alert_html_url_encode(data: AlertHtmlUrl) {
  json.string(data)
}

pub fn timeline_line_commented_event_decoder() {
  use comments <- decode.optional_field(
    "comments",
    None,
    decode.optional(decode.list(pull_request_review_comment_decoder())),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use event <- decode.optional_field(
    "event",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    TimelineLineCommentedEvent(
      comments: comments,
      node_id: node_id,
      event: event,
    ),
  )
}

pub fn timeline_line_commented_event_encode(data: TimelineLineCommentedEvent) {
  json.object(
    [
      #(
        "comments",
        json.nullable(
          data.comments,
          json.array(_, pull_request_review_comment_encode),
        ),
      ),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("event", json.nullable(data.event, json.string))
    ],
  )
}

pub fn alert_url_decoder() {
  decode.string
}

pub fn alert_url_encode(data: AlertUrl) {
  json.string(data)
}

pub fn hook_delivery_decoder() {
  use installation_id <- decode.optional_field(
    "installation_id",
    None,
    decode.optional(decode.int),
  )
  use response <- decode.field(
    "response",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use redelivery <- decode.field("redelivery", decode.bool)
  use guid <- decode.field("guid", decode.string)
  use delivered_at <- decode.field("delivered_at", decode.string)
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use request <- decode.field(
    "request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository_id <- decode.optional_field(
    "repository_id",
    None,
    decode.optional(decode.int),
  )
  use status <- decode.field("status", decode.string)
  use duration <- decode.field("duration", decode.float)
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use throttled_at <- decode.optional_field(
    "throttled_at",
    None,
    decode.optional(decode.string),
  )
  use status_code <- decode.field("status_code", decode.int)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    HookDelivery(
      installation_id: installation_id,
      response: response,
      redelivery: redelivery,
      guid: guid,
      delivered_at: delivered_at,
      url: url,
      request: request,
      repository_id: repository_id,
      status: status,
      duration: duration,
      action: action,
      throttled_at: throttled_at,
      status_code: status_code,
      event: event,
      id: id,
    ),
  )
}

pub fn hook_delivery_encode(data: HookDelivery) {
  json.object(
    [
      #("installation_id", json.nullable(data.installation_id, json.int)),
      #(
        "response",
        fn(_) { panic as "Literal object inside field" }(data.response),
      ),
      #("redelivery", json.bool(data.redelivery)),
      #("guid", json.string(data.guid)),
      #("delivered_at", json.string(data.delivered_at)),
      #("url", json.nullable(data.url, json.string)),
      #(
        "request",
        fn(_) { panic as "Literal object inside field" }(data.request),
      ),
      #("repository_id", json.nullable(data.repository_id, json.int)),
      #("status", json.string(data.status)),
      #("duration", json.float(data.duration)),
      #("action", json.nullable(data.action, json.string)),
      #("throttled_at", json.nullable(data.throttled_at, json.string)),
      #("status_code", json.int(data.status_code)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_check_suite_requested_decoder() {
  use check_suite <- decode.field(
    "check_suite",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckSuiteRequested(
      check_suite: check_suite,
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_suite_requested_encode(data: WebhookCheckSuiteRequested) {
  json.object(
    [
      #(
        "check_suite",
        fn(_) { panic as "Literal object inside field" }(data.check_suite),
      ),
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn pull_request_review_decoder() {
  use body <- decode.field("body", decode.string)
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use pull_request_url <- decode.field("pull_request_url", decode.string)
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use state <- decode.field("state", decode.string)
  use submitted_at <- decode.optional_field(
    "submitted_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    PullRequestReview(
      body: body,
      commit_id: commit_id,
      pull_request_url: pull_request_url,
      body_html: body_html,
      body_text: body_text,
      user: user,
      author_association: author_association,
      state: state,
      submitted_at: submitted_at,
      node_id: node_id,
      links: links,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn pull_request_review_encode(data: PullRequestReview) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("pull_request_url", json.string(data.pull_request_url)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("state", json.string(data.state)),
      #("submitted_at", json.nullable(data.submitted_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_project_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use project <- decode.field("project", webhooks_project_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      project: project,
      installation: installation,
    ),
  )
}

pub fn webhook_project_created_encode(data: WebhookProjectCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("project", webhooks_project_encode(data.project)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn license_simple_decoder() {
  use spdx_id <- decode.optional_field(
    "spdx_id",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use node_id <- decode.field("node_id", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use key <- decode.field("key", decode.string)
  decode.success(
    LicenseSimple(
      spdx_id: spdx_id,
      name: name,
      url: url,
      node_id: node_id,
      html_url: html_url,
      key: key,
    ),
  )
}

pub fn license_simple_encode(data: LicenseSimple) {
  json.object(
    [
      #("spdx_id", json.nullable(data.spdx_id, json.string)),
      #("name", json.string(data.name)),
      #("url", json.nullable(data.url, json.string)),
      #("node_id", json.string(data.node_id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn webhook_check_run_rerequested_decoder() {
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use check_run <- decode.field(
    "check_run",
    check_run_with_simple_check_suite_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckRunRerequested(
      repository: repository,
      organization: organization,
      check_run: check_run,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_run_rerequested_encode(data: WebhookCheckRunRerequested) {
  json.object(
    [
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("check_run", check_run_with_simple_check_suite_encode(data.check_run)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.nullable(data.action, json.string)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_dependabot_alert_fixed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertFixed(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_fixed_encode(data: WebhookDependabotAlertFixed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn search_result_text_matches_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn search_result_text_matches_encode(data: SearchResultTextMatches) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn branch_restriction_policy_decoder() {
  use apps_url <- decode.field("apps_url", decode.string)
  use teams_url <- decode.field("teams_url", decode.string)
  use users <- decode.field(
    "users",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use apps <- decode.field(
    "apps",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use teams <- decode.field(
    "teams",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use users_url <- decode.field("users_url", decode.string)
  decode.success(
    BranchRestrictionPolicy(
      apps_url: apps_url,
      teams_url: teams_url,
      users: users,
      url: url,
      apps: apps,
      teams: teams,
      users_url: users_url,
    ),
  )
}

pub fn branch_restriction_policy_encode(data: BranchRestrictionPolicy) {
  json.object(
    [
      #("apps_url", json.string(data.apps_url)),
      #("teams_url", json.string(data.teams_url)),
      #("users", json.array(_, fn(_) { panic as "object in array" })(data.users)),
      #("url", json.string(data.url)),
      #("apps", json.array(_, fn(_) { panic as "object in array" })(data.apps)),
      #("teams", json.array(_, fn(_) { panic as "object in array" })(data.teams)),
      #("users_url", json.string(data.users_url))
    ],
  )
}

pub fn code_scanning_analysis_environment_decoder() {
  decode.string
}

pub fn code_scanning_analysis_environment_encode(
  data: CodeScanningAnalysisEnvironment,
) {
  json.string(data)
}

pub fn webhook_marketplace_purchase_pending_change_cancelled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use effective_date <- decode.field("effective_date", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use marketplace_purchase <- decode.field(
    "marketplace_purchase",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use previous_marketplace_purchase <- decode.optional_field(
    "previous_marketplace_purchase",
    None,
    decode.optional(webhooks_previous_marketplace_purchase_decoder()),
  )
  decode.success(
    WebhookMarketplacePurchasePendingChangeCancelled(
      enterprise: enterprise,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      marketplace_purchase: marketplace_purchase,
      sender: sender,
      action: action,
      installation: installation,
      previous_marketplace_purchase: previous_marketplace_purchase,
    ),
  )
}

pub fn webhook_marketplace_purchase_pending_change_cancelled_encode(
  data: WebhookMarketplacePurchasePendingChangeCancelled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("effective_date", json.string(data.effective_date)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "marketplace_purchase",
        fn(_) { panic as "Literal object inside field" }(
          data.marketplace_purchase,
        ),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "previous_marketplace_purchase",
        json.nullable(
          data.previous_marketplace_purchase,
          webhooks_previous_marketplace_purchase_encode,
        ),
      )
    ],
  )
}

pub fn webhook_pull_request_auto_merge_enabled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", decode.int)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestAutoMergeEnabled(
      enterprise: enterprise,
      reason: reason,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_auto_merge_enabled_encode(
  data: WebhookPullRequestAutoMergeEnabled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("reason", json.nullable(data.reason, json.string)),
      #("number", json.int(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_pull_request_review_request_removed_decoder() {
  panic as "OneOf"
}

pub fn webhook_pull_request_review_request_removed_encode(
  _data: WebhookPullRequestReviewRequestRemoved,
) {
  panic as "OneOf"
}

pub fn actions_set_default_workflow_permissions_decoder() {
  use default_workflow_permissions <- decode.optional_field(
    "default_workflow_permissions",
    None,
    decode.optional(actions_default_workflow_permissions_decoder()),
  )
  use can_approve_pull_request_reviews <- decode.optional_field(
    "can_approve_pull_request_reviews",
    None,
    decode.optional(actions_can_approve_pull_request_reviews_decoder()),
  )
  decode.success(
    ActionsSetDefaultWorkflowPermissions(
      default_workflow_permissions: default_workflow_permissions,
      can_approve_pull_request_reviews: can_approve_pull_request_reviews,
    ),
  )
}

pub fn actions_set_default_workflow_permissions_encode(
  data: ActionsSetDefaultWorkflowPermissions,
) {
  json.object(
    [
      #(
        "default_workflow_permissions",
        json.nullable(
          data.default_workflow_permissions,
          actions_default_workflow_permissions_encode,
        ),
      ),
      #(
        "can_approve_pull_request_reviews",
        json.nullable(
          data.can_approve_pull_request_reviews,
          actions_can_approve_pull_request_reviews_encode,
        ),
      )
    ],
  )
}

pub fn job_decoder() {
  use head_branch <- decode.optional_field(
    "head_branch",
    None,
    decode.optional(decode.string),
  )
  use check_run_url <- decode.field("check_run_url", decode.string)
  use completed_at <- decode.optional_field(
    "completed_at",
    None,
    decode.optional(decode.string),
  )
  use steps <- decode.optional_field(
    "steps",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use runner_id <- decode.optional_field(
    "runner_id",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use runner_group_id <- decode.optional_field(
    "runner_group_id",
    None,
    decode.optional(decode.int),
  )
  use name <- decode.field("name", decode.string)
  use workflow_name <- decode.optional_field(
    "workflow_name",
    None,
    decode.optional(decode.string),
  )
  use head_sha <- decode.field("head_sha", decode.string)
  use url <- decode.field("url", decode.string)
  use run_id <- decode.field("run_id", decode.int)
  use started_at <- decode.field("started_at", decode.string)
  use status <- decode.field("status", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use run_attempt <- decode.optional_field(
    "run_attempt",
    None,
    decode.optional(decode.int),
  )
  use runner_group_name <- decode.optional_field(
    "runner_group_name",
    None,
    decode.optional(decode.string),
  )
  use runner_name <- decode.optional_field(
    "runner_name",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use run_url <- decode.field("run_url", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use conclusion <- decode.optional_field(
    "conclusion",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field("labels", decode.list(decode.string))
  decode.success(
    Job(
      head_branch: head_branch,
      check_run_url: check_run_url,
      completed_at: completed_at,
      steps: steps,
      runner_id: runner_id,
      created_at: created_at,
      runner_group_id: runner_group_id,
      name: name,
      workflow_name: workflow_name,
      head_sha: head_sha,
      url: url,
      run_id: run_id,
      started_at: started_at,
      status: status,
      node_id: node_id,
      run_attempt: run_attempt,
      runner_group_name: runner_group_name,
      runner_name: runner_name,
      id: id,
      run_url: run_url,
      html_url: html_url,
      conclusion: conclusion,
      labels: labels,
    ),
  )
}

pub fn job_encode(data: Job) {
  json.object(
    [
      #("head_branch", json.nullable(data.head_branch, json.string)),
      #("check_run_url", json.string(data.check_run_url)),
      #("completed_at", json.nullable(data.completed_at, json.string)),
      #(
        "steps",
        json.nullable(
          data.steps,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("runner_id", json.nullable(data.runner_id, json.int)),
      #("created_at", json.string(data.created_at)),
      #("runner_group_id", json.nullable(data.runner_group_id, json.int)),
      #("name", json.string(data.name)),
      #("workflow_name", json.nullable(data.workflow_name, json.string)),
      #("head_sha", json.string(data.head_sha)),
      #("url", json.string(data.url)),
      #("run_id", json.int(data.run_id)),
      #("started_at", json.string(data.started_at)),
      #("status", json.string(data.status)),
      #("node_id", json.string(data.node_id)),
      #("run_attempt", json.nullable(data.run_attempt, json.int)),
      #("runner_group_name", json.nullable(data.runner_group_name, json.string)),
      #("runner_name", json.nullable(data.runner_name, json.string)),
      #("id", json.int(data.id)),
      #("run_url", json.string(data.run_url)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("conclusion", json.nullable(data.conclusion, json.string)),
      #("labels", json.array(_, json.string)(data.labels))
    ],
  )
}

pub fn blob_decoder() {
  use size <- decode.optional_field("size", None, decode.optional(decode.int))
  use sha <- decode.field("sha", decode.string)
  use highlighted_content <- decode.optional_field(
    "highlighted_content",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use encoding <- decode.field("encoding", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use content <- decode.field("content", decode.string)
  decode.success(
    Blob(
      size: size,
      sha: sha,
      highlighted_content: highlighted_content,
      url: url,
      encoding: encoding,
      node_id: node_id,
      content: content,
    ),
  )
}

pub fn blob_encode(data: Blob) {
  json.object(
    [
      #("size", json.nullable(data.size, json.int)),
      #("sha", json.string(data.sha)),
      #(
        "highlighted_content",
        json.nullable(data.highlighted_content, json.string),
      ),
      #("url", json.string(data.url)),
      #("encoding", json.string(data.encoding)),
      #("node_id", json.string(data.node_id)),
      #("content", json.string(data.content))
    ],
  )
}

pub fn timeline_committed_event_decoder() {
  use message <- decode.field("message", decode.string)
  use parents <- decode.field(
    "parents",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use committer <- decode.field(
    "committer",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use author <- decode.field(
    "author",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.optional_field(
    "event",
    None,
    decode.optional(decode.string),
  )
  use verification <- decode.field(
    "verification",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use html_url <- decode.field("html_url", decode.string)
  use tree <- decode.field(
    "tree",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    TimelineCommittedEvent(
      message: message,
      parents: parents,
      committer: committer,
      author: author,
      sha: sha,
      url: url,
      node_id: node_id,
      event: event,
      verification: verification,
      html_url: html_url,
      tree: tree,
    ),
  )
}

pub fn timeline_committed_event_encode(data: TimelineCommittedEvent) {
  json.object(
    [
      #("message", json.string(data.message)),
      #(
        "parents",
        json.array(_, fn(_) { panic as "object in array" })(data.parents),
      ),
      #(
        "committer",
        fn(_) { panic as "Literal object inside field" }(data.committer),
      ),
      #("author", fn(_) { panic as "Literal object inside field" }(data.author)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("node_id", json.string(data.node_id)),
      #("event", json.nullable(data.event, json.string)),
      #(
        "verification",
        fn(_) { panic as "Literal object inside field" }(data.verification),
      ),
      #("html_url", json.string(data.html_url)),
      #("tree", fn(_) { panic as "Literal object inside field" }(data.tree))
    ],
  )
}

pub fn workflow_run_decoder() {
  use triggering_actor <- decode.optional_field(
    "triggering_actor",
    None,
    decode.optional(simple_user_decoder()),
  )
  use head_branch <- decode.optional_field(
    "head_branch",
    None,
    decode.optional(decode.string),
  )
  use path_ <- decode.field("path", decode.string)
  use run_started_at <- decode.optional_field(
    "run_started_at",
    None,
    decode.optional(decode.string),
  )
  use jobs_url <- decode.field("jobs_url", decode.string)
  use rerun_url <- decode.field("rerun_url", decode.string)
  use head_repository <- decode.field(
    "head_repository",
    minimal_repository_decoder(),
  )
  use created_at <- decode.field("created_at", decode.string)
  use cancel_url <- decode.field("cancel_url", decode.string)
  use repository <- decode.field("repository", minimal_repository_decoder())
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use head_sha <- decode.field("head_sha", decode.string)
  use referenced_workflows <- decode.optional_field(
    "referenced_workflows",
    None,
    decode.optional(decode.list(referenced_workflow_decoder())),
  )
  use workflow_url <- decode.field("workflow_url", decode.string)
  use url <- decode.field("url", decode.string)
  use artifacts_url <- decode.field("artifacts_url", decode.string)
  use check_suite_url <- decode.field("check_suite_url", decode.string)
  use head_repository_id <- decode.optional_field(
    "head_repository_id",
    None,
    decode.optional(decode.int),
  )
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  use actor <- decode.optional_field(
    "actor",
    None,
    decode.optional(simple_user_decoder()),
  )
  use previous_attempt_url <- decode.optional_field(
    "previous_attempt_url",
    None,
    decode.optional(decode.string),
  )
  use head_commit <- decode.field(
    "head_commit",
    nullable_simple_commit_decoder(),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use check_suite_id <- decode.optional_field(
    "check_suite_id",
    None,
    decode.optional(decode.int),
  )
  use run_attempt <- decode.optional_field(
    "run_attempt",
    None,
    decode.optional(decode.int),
  )
  use event <- decode.field("event", decode.string)
  use check_suite_node_id <- decode.optional_field(
    "check_suite_node_id",
    None,
    decode.optional(decode.string),
  )
  use display_title <- decode.field("display_title", decode.string)
  use id <- decode.field("id", decode.int)
  use workflow_id <- decode.field("workflow_id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use run_number <- decode.field("run_number", decode.int)
  use pull_requests <- decode.optional_field(
    "pull_requests",
    None,
    decode.optional(decode.list(pull_request_minimal_decoder())),
  )
  use conclusion <- decode.optional_field(
    "conclusion",
    None,
    decode.optional(decode.string),
  )
  use logs_url <- decode.field("logs_url", decode.string)
  decode.success(
    WorkflowRun(
      triggering_actor: triggering_actor,
      head_branch: head_branch,
      path_: path_,
      run_started_at: run_started_at,
      jobs_url: jobs_url,
      rerun_url: rerun_url,
      head_repository: head_repository,
      created_at: created_at,
      cancel_url: cancel_url,
      repository: repository,
      name: name,
      head_sha: head_sha,
      referenced_workflows: referenced_workflows,
      workflow_url: workflow_url,
      url: url,
      artifacts_url: artifacts_url,
      check_suite_url: check_suite_url,
      head_repository_id: head_repository_id,
      status: status,
      actor: actor,
      previous_attempt_url: previous_attempt_url,
      head_commit: head_commit,
      updated_at: updated_at,
      node_id: node_id,
      check_suite_id: check_suite_id,
      run_attempt: run_attempt,
      event: event,
      check_suite_node_id: check_suite_node_id,
      display_title: display_title,
      id: id,
      workflow_id: workflow_id,
      html_url: html_url,
      run_number: run_number,
      pull_requests: pull_requests,
      conclusion: conclusion,
      logs_url: logs_url,
    ),
  )
}

pub fn workflow_run_encode(data: WorkflowRun) {
  json.object(
    [
      #(
        "triggering_actor",
        json.nullable(data.triggering_actor, simple_user_encode),
      ),
      #("head_branch", json.nullable(data.head_branch, json.string)),
      #("path", json.string(data.path_)),
      #("run_started_at", json.nullable(data.run_started_at, json.string)),
      #("jobs_url", json.string(data.jobs_url)),
      #("rerun_url", json.string(data.rerun_url)),
      #("head_repository", minimal_repository_encode(data.head_repository)),
      #("created_at", json.string(data.created_at)),
      #("cancel_url", json.string(data.cancel_url)),
      #("repository", minimal_repository_encode(data.repository)),
      #("name", json.nullable(data.name, json.string)),
      #("head_sha", json.string(data.head_sha)),
      #(
        "referenced_workflows",
        json.nullable(
          data.referenced_workflows,
          json.array(_, referenced_workflow_encode),
        ),
      ),
      #("workflow_url", json.string(data.workflow_url)),
      #("url", json.string(data.url)),
      #("artifacts_url", json.string(data.artifacts_url)),
      #("check_suite_url", json.string(data.check_suite_url)),
      #("head_repository_id", json.nullable(data.head_repository_id, json.int)),
      #("status", json.nullable(data.status, json.string)),
      #("actor", json.nullable(data.actor, simple_user_encode)),
      #(
        "previous_attempt_url",
        json.nullable(data.previous_attempt_url, json.string),
      ),
      #("head_commit", nullable_simple_commit_encode(data.head_commit)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("check_suite_id", json.nullable(data.check_suite_id, json.int)),
      #("run_attempt", json.nullable(data.run_attempt, json.int)),
      #("event", json.string(data.event)),
      #(
        "check_suite_node_id",
        json.nullable(data.check_suite_node_id, json.string),
      ),
      #("display_title", json.string(data.display_title)),
      #("id", json.int(data.id)),
      #("workflow_id", json.int(data.workflow_id)),
      #("html_url", json.string(data.html_url)),
      #("run_number", json.int(data.run_number)),
      #(
        "pull_requests",
        json.nullable(
          data.pull_requests,
          json.array(_, pull_request_minimal_encode),
        ),
      ),
      #("conclusion", json.nullable(data.conclusion, json.string)),
      #("logs_url", json.string(data.logs_url))
    ],
  )
}

pub fn webhook_issues_unlabeled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(webhooks_label_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field("issue", webhooks_issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesUnlabeled(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_unlabeled_encode(data: WebhookIssuesUnlabeled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", json.nullable(data.label, webhooks_label_encode)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", webhooks_issue_encode(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_repository_vulnerability_alert_resolve_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookRepositoryVulnerabilityAlertResolve(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_repository_vulnerability_alert_resolve_encode(
  data: WebhookRepositoryVulnerabilityAlertResolve,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn alert_fixed_at_decoder() {
  decode.string
}

pub fn alert_fixed_at_encode(data: AlertFixedAt) {
  json.string(data)
}

pub fn team_decoder() {
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.field("members_url", decode.string)
  use parent <- decode.field("parent", nullable_team_simple_decoder())
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use url <- decode.field("url", decode.string)
  use permission <- decode.field("permission", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Team(
      permissions: permissions,
      privacy: privacy,
      members_url: members_url,
      parent: parent,
      name: name,
      slug: slug,
      url: url,
      permission: permission,
      node_id: node_id,
      repositories_url: repositories_url,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn team_encode(data: Team) {
  json.object(
    [
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.string(data.members_url)),
      #("parent", nullable_team_simple_encode(data.parent)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("url", json.string(data.url)),
      #("permission", json.string(data.permission)),
      #("node_id", json.string(data.node_id)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn codespace_export_details_decoder() {
  use branch <- decode.optional_field(
    "branch",
    None,
    decode.optional(decode.string),
  )
  use export_url <- decode.optional_field(
    "export_url",
    None,
    decode.optional(decode.string),
  )
  use completed_at <- decode.optional_field(
    "completed_at",
    None,
    decode.optional(decode.string),
  )
  use sha <- decode.optional_field("sha", None, decode.optional(decode.string))
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.string))
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodespaceExportDetails(
      branch: branch,
      export_url: export_url,
      completed_at: completed_at,
      sha: sha,
      state: state,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn codespace_export_details_encode(data: CodespaceExportDetails) {
  json.object(
    [
      #("branch", json.nullable(data.branch, json.string)),
      #("export_url", json.nullable(data.export_url, json.string)),
      #("completed_at", json.nullable(data.completed_at, json.string)),
      #("sha", json.nullable(data.sha, json.string)),
      #("state", json.nullable(data.state, json.string)),
      #("id", json.nullable(data.id, json.string)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn traffic_decoder() {
  use uniques <- decode.field("uniques", decode.int)
  use count <- decode.field("count", decode.int)
  use timestamp <- decode.field("timestamp", decode.string)
  decode.success(Traffic(uniques: uniques, count: count, timestamp: timestamp))
}

pub fn traffic_encode(data: Traffic) {
  json.object(
    [
      #("uniques", json.int(data.uniques)),
      #("count", json.int(data.count)),
      #("timestamp", json.string(data.timestamp))
    ],
  )
}

pub fn organization_simple_webhooks_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use members_url <- decode.field("members_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use issues_url <- decode.field("issues_url", decode.string)
  use url <- decode.field("url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use public_members_url <- decode.field("public_members_url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationSimpleWebhooks(
      hooks_url: hooks_url,
      members_url: members_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      issues_url: issues_url,
      url: url,
      repos_url: repos_url,
      public_members_url: public_members_url,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn organization_simple_webhooks_encode(data: OrganizationSimpleWebhooks) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("members_url", json.string(data.members_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("issues_url", json.string(data.issues_url)),
      #("url", json.string(data.url)),
      #("repos_url", json.string(data.repos_url)),
      #("public_members_url", json.string(data.public_members_url)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn secret_scanning_alert_decoder() {
  use push_protection_bypass_request_html_url <- decode.optional_field(
    "push_protection_bypass_request_html_url",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypassed <- decode.optional_field(
    "push_protection_bypassed",
    None,
    decode.optional(decode.bool),
  )
  use number <- decode.optional_field(
    "number",
    None,
    decode.optional(alert_number_decoder()),
  )
  use secret_type <- decode.optional_field(
    "secret_type",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(alert_created_at_decoder()),
  )
  use push_protection_bypassed_at <- decode.optional_field(
    "push_protection_bypassed_at",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypass_request_reviewer <- decode.optional_field(
    "push_protection_bypass_request_reviewer",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use publicly_leaked <- decode.optional_field(
    "publicly_leaked",
    None,
    decode.optional(decode.bool),
  )
  use resolution <- decode.optional_field(
    "resolution",
    None,
    decode.optional(secret_scanning_alert_resolution_decoder()),
  )
  use resolution_comment <- decode.optional_field(
    "resolution_comment",
    None,
    decode.optional(decode.string),
  )
  use locations_url <- decode.optional_field(
    "locations_url",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypassed_by <- decode.optional_field(
    "push_protection_bypassed_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use url <- decode.optional_field(
    "url",
    None,
    decode.optional(alert_url_decoder()),
  )
  use secret <- decode.optional_field(
    "secret",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(secret_scanning_alert_state_decoder()),
  )
  use validity <- decode.optional_field(
    "validity",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(nullable_alert_updated_at_decoder()),
  )
  use multi_repo <- decode.optional_field(
    "multi_repo",
    None,
    decode.optional(decode.bool),
  )
  use push_protection_bypass_request_comment <- decode.optional_field(
    "push_protection_bypass_request_comment",
    None,
    decode.optional(decode.string),
  )
  use resolved_at <- decode.optional_field(
    "resolved_at",
    None,
    decode.optional(decode.string),
  )
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(alert_html_url_decoder()),
  )
  use secret_type_display_name <- decode.optional_field(
    "secret_type_display_name",
    None,
    decode.optional(decode.string),
  )
  use resolved_by <- decode.optional_field(
    "resolved_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  decode.success(
    SecretScanningAlert(
      push_protection_bypass_request_html_url: push_protection_bypass_request_html_url,
      push_protection_bypassed: push_protection_bypassed,
      number: number,
      secret_type: secret_type,
      created_at: created_at,
      push_protection_bypassed_at: push_protection_bypassed_at,
      push_protection_bypass_request_reviewer: push_protection_bypass_request_reviewer,
      publicly_leaked: publicly_leaked,
      resolution: resolution,
      resolution_comment: resolution_comment,
      locations_url: locations_url,
      push_protection_bypassed_by: push_protection_bypassed_by,
      url: url,
      secret: secret,
      state: state,
      validity: validity,
      updated_at: updated_at,
      multi_repo: multi_repo,
      push_protection_bypass_request_comment: push_protection_bypass_request_comment,
      resolved_at: resolved_at,
      html_url: html_url,
      secret_type_display_name: secret_type_display_name,
      resolved_by: resolved_by,
    ),
  )
}

pub fn secret_scanning_alert_encode(data: SecretScanningAlert) {
  json.object(
    [
      #(
        "push_protection_bypass_request_html_url",
        json.nullable(data.push_protection_bypass_request_html_url, json.string),
      ),
      #(
        "push_protection_bypassed",
        json.nullable(data.push_protection_bypassed, json.bool),
      ),
      #("number", json.nullable(data.number, alert_number_encode)),
      #("secret_type", json.nullable(data.secret_type, json.string)),
      #("created_at", json.nullable(data.created_at, alert_created_at_encode)),
      #(
        "push_protection_bypassed_at",
        json.nullable(data.push_protection_bypassed_at, json.string),
      ),
      #(
        "push_protection_bypass_request_reviewer",
        json.nullable(
          data.push_protection_bypass_request_reviewer,
          nullable_simple_user_encode,
        ),
      ),
      #("publicly_leaked", json.nullable(data.publicly_leaked, json.bool)),
      #(
        "resolution",
        json.nullable(data.resolution, secret_scanning_alert_resolution_encode),
      ),
      #(
        "resolution_comment",
        json.nullable(data.resolution_comment, json.string),
      ),
      #("locations_url", json.nullable(data.locations_url, json.string)),
      #(
        "push_protection_bypassed_by",
        json.nullable(
          data.push_protection_bypassed_by,
          nullable_simple_user_encode,
        ),
      ),
      #("url", json.nullable(data.url, alert_url_encode)),
      #("secret", json.nullable(data.secret, json.string)),
      #("state", json.nullable(data.state, secret_scanning_alert_state_encode)),
      #("validity", json.nullable(data.validity, json.string)),
      #(
        "updated_at",
        json.nullable(data.updated_at, nullable_alert_updated_at_encode),
      ),
      #("multi_repo", json.nullable(data.multi_repo, json.bool)),
      #(
        "push_protection_bypass_request_comment",
        json.nullable(data.push_protection_bypass_request_comment, json.string),
      ),
      #("resolved_at", json.nullable(data.resolved_at, json.string)),
      #("html_url", json.nullable(data.html_url, alert_html_url_encode)),
      #(
        "secret_type_display_name",
        json.nullable(data.secret_type_display_name, json.string),
      ),
      #(
        "resolved_by",
        json.nullable(data.resolved_by, nullable_simple_user_encode),
      )
    ],
  )
}

pub fn nullable_code_of_conduct_simple_decoder() {
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use key <- decode.field("key", decode.string)
  decode.success(
    NullableCodeOfConductSimple(
      name: name,
      url: url,
      html_url: html_url,
      key: key,
    ),
  )
}

pub fn nullable_code_of_conduct_simple_encode(data: NullableCodeOfConductSimple) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn webhook_repository_ruleset_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use repository_ruleset <- decode.field(
    "repository_ruleset",
    repository_ruleset_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryRulesetEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      repository_ruleset: repository_ruleset,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_ruleset_edited_encode(
  data: WebhookRepositoryRulesetEdited,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("repository_ruleset", repository_ruleset_encode(data.repository_ruleset)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_release_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use release <- decode.field("release", webhooks_release_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleaseDeleted(
      enterprise: enterprise,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_deleted_encode(data: WebhookReleaseDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("release", webhooks_release_encode(data.release)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn nullable_community_health_file_decoder() {
  use url <- decode.field("url", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(NullableCommunityHealthFile(url: url, html_url: html_url))
}

pub fn nullable_community_health_file_encode(data: NullableCommunityHealthFile) {
  json.object(
    [#("url", json.string(data.url)), #("html_url", json.string(data.html_url))],
  )
}

pub fn webhook_marketplace_purchase_cancelled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use effective_date <- decode.field("effective_date", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use marketplace_purchase <- decode.field(
    "marketplace_purchase",
    webhooks_marketplace_purchase_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use previous_marketplace_purchase <- decode.optional_field(
    "previous_marketplace_purchase",
    None,
    decode.optional(webhooks_previous_marketplace_purchase_decoder()),
  )
  decode.success(
    WebhookMarketplacePurchaseCancelled(
      enterprise: enterprise,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      marketplace_purchase: marketplace_purchase,
      sender: sender,
      action: action,
      installation: installation,
      previous_marketplace_purchase: previous_marketplace_purchase,
    ),
  )
}

pub fn webhook_marketplace_purchase_cancelled_encode(
  data: WebhookMarketplacePurchaseCancelled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("effective_date", json.string(data.effective_date)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "marketplace_purchase",
        webhooks_marketplace_purchase_encode(data.marketplace_purchase),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "previous_marketplace_purchase",
        json.nullable(
          data.previous_marketplace_purchase,
          webhooks_previous_marketplace_purchase_encode,
        ),
      )
    ],
  )
}

pub fn webhooks_deploy_pusher_type_decoder() {
  decode.string
}

pub fn webhooks_deploy_pusher_type_encode(data: WebhooksDeployPusherType) {
  json.string(data)
}

pub fn code_scanning_analysis_sarif_file_decoder() {
  decode.string
}

pub fn code_scanning_analysis_sarif_file_encode(
  data: CodeScanningAnalysisSarifFile,
) {
  json.string(data)
}

pub fn reaction_rollup_decoder() {
  use confused <- decode.field("confused", decode.int)
  use laugh <- decode.field("laugh", decode.int)
  use eyes <- decode.field("eyes", decode.int)
  use hooray <- decode.field("hooray", decode.int)
  use one <- decode.field("-1", decode.int)
  use heart <- decode.field("heart", decode.int)
  use plusone <- decode.field("+1", decode.int)
  use url <- decode.field("url", decode.string)
  use total_count <- decode.field("total_count", decode.int)
  use rocket <- decode.field("rocket", decode.int)
  decode.success(
    ReactionRollup(
      confused: confused,
      laugh: laugh,
      eyes: eyes,
      hooray: hooray,
      one: one,
      heart: heart,
      plusone: plusone,
      url: url,
      total_count: total_count,
      rocket: rocket,
    ),
  )
}

pub fn reaction_rollup_encode(data: ReactionRollup) {
  json.object(
    [
      #("confused", json.int(data.confused)),
      #("laugh", json.int(data.laugh)),
      #("eyes", json.int(data.eyes)),
      #("hooray", json.int(data.hooray)),
      #("-1", json.int(data.one)),
      #("heart", json.int(data.heart)),
      #("+1", json.int(data.plusone)),
      #("url", json.string(data.url)),
      #("total_count", json.int(data.total_count)),
      #("rocket", json.int(data.rocket))
    ],
  )
}

pub fn code_scanning_analysis_sarif_id_decoder() {
  decode.string
}

pub fn code_scanning_analysis_sarif_id_encode(data: CodeScanningAnalysisSarifId) {
  json.string(data)
}

pub fn gist_simple_decoder() {
  use forks_url <- decode.optional_field(
    "forks_url",
    None,
    decode.optional(decode.string),
  )
  use git_pull_url <- decode.optional_field(
    "git_pull_url",
    None,
    decode.optional(decode.string),
  )
  use comments_url <- decode.optional_field(
    "comments_url",
    None,
    decode.optional(decode.string),
  )
  use public <- decode.optional_field(
    "public",
    None,
    decode.optional(decode.bool),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use user <- decode.optional_field("user", None, decode.optional(decode.string))
  use commits_url <- decode.optional_field(
    "commits_url",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use forks <- decode.optional_field(
    "forks",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use owner <- decode.optional_field(
    "owner",
    None,
    decode.optional(simple_user_decoder()),
  )
  use history <- decode.optional_field(
    "history",
    None,
    decode.optional(decode.list(gist_history_decoder())),
  )
  use comments <- decode.optional_field(
    "comments",
    None,
    decode.optional(decode.int),
  )
  use fork_of <- decode.optional_field(
    "fork_of",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use git_push_url <- decode.optional_field(
    "git_push_url",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use files <- decode.optional_field(
    "files",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.string))
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use truncated <- decode.optional_field(
    "truncated",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    GistSimple(
      forks_url: forks_url,
      git_pull_url: git_pull_url,
      comments_url: comments_url,
      public: public,
      created_at: created_at,
      user: user,
      commits_url: commits_url,
      url: url,
      forks: forks,
      owner: owner,
      history: history,
      comments: comments,
      fork_of: fork_of,
      git_push_url: git_push_url,
      updated_at: updated_at,
      files: files,
      node_id: node_id,
      id: id,
      html_url: html_url,
      description: description,
      truncated: truncated,
    ),
  )
}

pub fn gist_simple_encode(data: GistSimple) {
  json.object(
    [
      #("forks_url", json.nullable(data.forks_url, json.string)),
      #("git_pull_url", json.nullable(data.git_pull_url, json.string)),
      #("comments_url", json.nullable(data.comments_url, json.string)),
      #("public", json.nullable(data.public, json.bool)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("user", json.nullable(data.user, json.string)),
      #("commits_url", json.nullable(data.commits_url, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #(
        "forks",
        json.nullable(
          data.forks,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("owner", json.nullable(data.owner, simple_user_encode)),
      #(
        "history",
        json.nullable(data.history, json.array(_, gist_history_encode)),
      ),
      #("comments", json.nullable(data.comments, json.int)),
      #(
        "fork_of",
        json.nullable(
          data.fork_of,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("git_push_url", json.nullable(data.git_push_url, json.string)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #(
        "files",
        json.nullable(
          data.files,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("id", json.nullable(data.id, json.string)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("truncated", json.nullable(data.truncated, json.bool))
    ],
  )
}

pub fn webhook_milestone_opened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.field("milestone", webhooks_milestone_3_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMilestoneOpened(
      enterprise: enterprise,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_milestone_opened_encode(data: WebhookMilestoneOpened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", webhooks_milestone_3_encode(data.milestone)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_advisory_decoder() {
  use cwes <- decode.optional_field(
    "cwes",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use published_at <- decode.optional_field(
    "published_at",
    None,
    decode.optional(decode.string),
  )
  use summary <- decode.field("summary", decode.string)
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use cvss_severities <- decode.optional_field(
    "cvss_severities",
    None,
    decode.optional(cvss_severities_decoder()),
  )
  use cve_id <- decode.optional_field(
    "cve_id",
    None,
    decode.optional(decode.string),
  )
  use collaborating_users <- decode.optional_field(
    "collaborating_users",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use identifiers <- decode.field(
    "identifiers",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use cwe_ids <- decode.optional_field(
    "cwe_ids",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use ghsa_id <- decode.field("ghsa_id", decode.string)
  use author <- decode.field(
    "author",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use submission <- decode.optional_field(
    "submission",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use withdrawn_at <- decode.optional_field(
    "withdrawn_at",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use cvss <- decode.optional_field(
    "cvss",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use credits_detailed <- decode.optional_field(
    "credits_detailed",
    None,
    decode.optional(decode.list(repository_advisory_credit_decoder())),
  )
  use collaborating_teams <- decode.optional_field(
    "collaborating_teams",
    None,
    decode.optional(decode.list(team_decoder())),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use credits <- decode.optional_field(
    "credits",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use vulnerabilities <- decode.optional_field(
    "vulnerabilities",
    None,
    decode.optional(decode.list(repository_advisory_vulnerability_decoder())),
  )
  use html_url <- decode.field("html_url", decode.string)
  use publisher <- decode.field(
    "publisher",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use severity <- decode.optional_field(
    "severity",
    None,
    decode.optional(decode.string),
  )
  use private_fork <- decode.field(
    "private_fork",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    RepositoryAdvisory(
      cwes: cwes,
      published_at: published_at,
      summary: summary,
      closed_at: closed_at,
      cvss_severities: cvss_severities,
      cve_id: cve_id,
      collaborating_users: collaborating_users,
      created_at: created_at,
      identifiers: identifiers,
      cwe_ids: cwe_ids,
      ghsa_id: ghsa_id,
      author: author,
      submission: submission,
      withdrawn_at: withdrawn_at,
      url: url,
      state: state,
      cvss: cvss,
      credits_detailed: credits_detailed,
      collaborating_teams: collaborating_teams,
      updated_at: updated_at,
      credits: credits,
      vulnerabilities: vulnerabilities,
      html_url: html_url,
      publisher: publisher,
      description: description,
      severity: severity,
      private_fork: private_fork,
    ),
  )
}

pub fn repository_advisory_encode(data: RepositoryAdvisory) {
  json.object(
    [
      #(
        "cwes",
        json.nullable(
          data.cwes,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("published_at", json.nullable(data.published_at, json.string)),
      #("summary", json.string(data.summary)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #(
        "cvss_severities",
        json.nullable(data.cvss_severities, cvss_severities_encode),
      ),
      #("cve_id", json.nullable(data.cve_id, json.string)),
      #(
        "collaborating_users",
        json.nullable(
          data.collaborating_users,
          json.array(_, simple_user_encode),
        ),
      ),
      #("created_at", json.nullable(data.created_at, json.string)),
      #(
        "identifiers",
        json.array(_, fn(_) { panic as "object in array" })(data.identifiers),
      ),
      #("cwe_ids", json.nullable(data.cwe_ids, json.array(_, json.string))),
      #("ghsa_id", json.string(data.ghsa_id)),
      #("author", fn(_) { panic as "AllOf inside field" }(data.author)),
      #(
        "submission",
        json.nullable(
          data.submission,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("withdrawn_at", json.nullable(data.withdrawn_at, json.string)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #(
        "cvss",
        json.nullable(
          data.cvss,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "credits_detailed",
        json.nullable(
          data.credits_detailed,
          json.array(_, repository_advisory_credit_encode),
        ),
      ),
      #(
        "collaborating_teams",
        json.nullable(data.collaborating_teams, json.array(_, team_encode)),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #(
        "credits",
        json.nullable(
          data.credits,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "vulnerabilities",
        json.nullable(
          data.vulnerabilities,
          json.array(_, repository_advisory_vulnerability_encode),
        ),
      ),
      #("html_url", json.string(data.html_url)),
      #("publisher", fn(_) { panic as "AllOf inside field" }(data.publisher)),
      #("description", json.nullable(data.description, json.string)),
      #("severity", json.nullable(data.severity, json.string)),
      #(
        "private_fork",
        fn(_) { panic as "AllOf inside field" }(data.private_fork),
      )
    ],
  )
}

pub fn webhook_milestone_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.field("milestone", webhooks_milestone_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMilestoneEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_milestone_edited_encode(data: WebhookMilestoneEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", webhooks_milestone_encode(data.milestone)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn email_decoder() {
  use primary <- decode.field("primary", decode.bool)
  use verified <- decode.field("verified", decode.bool)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use email <- decode.field("email", decode.string)
  decode.success(
    Email(
      primary: primary,
      verified: verified,
      visibility: visibility,
      email: email,
    ),
  )
}

pub fn email_encode(data: Email) {
  json.object(
    [
      #("primary", json.bool(data.primary)),
      #("verified", json.bool(data.verified)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("email", json.string(data.email))
    ],
  )
}

pub fn topic_search_result_item_decoder() {
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use display_name <- decode.optional_field(
    "display_name",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use related <- decode.optional_field(
    "related",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use name <- decode.field("name", decode.string)
  use featured <- decode.field("featured", decode.bool)
  use created_by <- decode.optional_field(
    "created_by",
    None,
    decode.optional(decode.string),
  )
  use curated <- decode.field("curated", decode.bool)
  use score <- decode.field("score", decode.float)
  use updated_at <- decode.field("updated_at", decode.string)
  use short_description <- decode.optional_field(
    "short_description",
    None,
    decode.optional(decode.string),
  )
  use repository_count <- decode.optional_field(
    "repository_count",
    None,
    decode.optional(decode.int),
  )
  use logo_url <- decode.optional_field(
    "logo_url",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use released <- decode.optional_field(
    "released",
    None,
    decode.optional(decode.string),
  )
  use aliases <- decode.optional_field(
    "aliases",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  decode.success(
    TopicSearchResultItem(
      text_matches: text_matches,
      display_name: display_name,
      created_at: created_at,
      related: related,
      name: name,
      featured: featured,
      created_by: created_by,
      curated: curated,
      score: score,
      updated_at: updated_at,
      short_description: short_description,
      repository_count: repository_count,
      logo_url: logo_url,
      description: description,
      released: released,
      aliases: aliases,
    ),
  )
}

pub fn topic_search_result_item_encode(data: TopicSearchResultItem) {
  json.object(
    [
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("display_name", json.nullable(data.display_name, json.string)),
      #("created_at", json.string(data.created_at)),
      #(
        "related",
        json.nullable(
          data.related,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("name", json.string(data.name)),
      #("featured", json.bool(data.featured)),
      #("created_by", json.nullable(data.created_by, json.string)),
      #("curated", json.bool(data.curated)),
      #("score", json.float(data.score)),
      #("updated_at", json.string(data.updated_at)),
      #("short_description", json.nullable(data.short_description, json.string)),
      #("repository_count", json.nullable(data.repository_count, json.int)),
      #("logo_url", json.nullable(data.logo_url, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("released", json.nullable(data.released, json.string)),
      #(
        "aliases",
        json.nullable(
          data.aliases,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      )
    ],
  )
}

pub fn copilot_ide_chat_decoder() {
  use editors <- decode.optional_field(
    "editors",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use total_engaged_users <- decode.optional_field(
    "total_engaged_users",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CopilotIdeChat(editors: editors, total_engaged_users: total_engaged_users),
  )
}

pub fn copilot_ide_chat_encode(data: CopilotIdeChat) {
  json.object(
    [
      #(
        "editors",
        json.nullable(
          data.editors,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("total_engaged_users", json.nullable(data.total_engaged_users, json.int))
    ],
  )
}

pub fn merged_upstream_decoder() {
  use merge_type <- decode.optional_field(
    "merge_type",
    None,
    decode.optional(decode.string),
  )
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use base_branch <- decode.optional_field(
    "base_branch",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    MergedUpstream(
      merge_type: merge_type,
      message: message,
      base_branch: base_branch,
    ),
  )
}

pub fn merged_upstream_encode(data: MergedUpstream) {
  json.object(
    [
      #("merge_type", json.nullable(data.merge_type, json.string)),
      #("message", json.nullable(data.message, json.string)),
      #("base_branch", json.nullable(data.base_branch, json.string))
    ],
  )
}

pub fn webhook_pull_request_review_comment_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field("changes", webhooks_changes_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_review_comment_decoder())
  decode.success(
    WebhookPullRequestReviewCommentEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_pull_request_review_comment_edited_encode(
  data: WebhookPullRequestReviewCommentEdited,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("changes", webhooks_changes_encode(data.changes)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_review_comment_encode(data.comment))
    ],
  )
}

pub fn api_insights_route_stats_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn api_insights_route_stats_encode(data: ApiInsightsRouteStats) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn webhook_secret_scanning_alert_location_created_form_encoded_decoder() {
  use payload <- decode.field("payload", decode.string)
  decode.success(
    WebhookSecretScanningAlertLocationCreatedFormEncoded(payload: payload),
  )
}

pub fn webhook_secret_scanning_alert_location_created_form_encoded_encode(
  data: WebhookSecretScanningAlertLocationCreatedFormEncoded,
) {
  json.object([#("payload", json.string(data.payload))])
}

pub fn webhook_pull_request_closed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    pull_request_webhook_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestClosed(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_closed_encode(data: WebhookPullRequestClosed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("pull_request", pull_request_webhook_encode(data.pull_request)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn secret_scanning_alert_resolution_decoder() {
  decode.string
}

pub fn secret_scanning_alert_resolution_encode(
  data: SecretScanningAlertResolution,
) {
  json.string(data)
}

pub fn repository_rule_deletion_decoder() {
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleDeletion(type_: type_))
}

pub fn repository_rule_deletion_encode(data: RepositoryRuleDeletion) {
  json.object([#("type", json.string(data.type_))])
}

pub fn removed_from_project_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use project_card <- decode.optional_field(
    "project_card",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    RemovedFromProjectIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      project_card: project_card,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn removed_from_project_issue_event_encode(
  data: RemovedFromProjectIssueEvent,
) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #(
        "project_card",
        json.nullable(
          data.project_card,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_issues_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_deleted_encode(data: WebhookIssuesDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_invitation_decoder() {
  use permissions <- decode.field("permissions", decode.string)
  use expired <- decode.optional_field(
    "expired",
    None,
    decode.optional(decode.bool),
  )
  use inviter <- decode.field("inviter", nullable_simple_user_decoder())
  use created_at <- decode.field("created_at", decode.string)
  use repository <- decode.field("repository", minimal_repository_decoder())
  use url <- decode.field("url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use invitee <- decode.field("invitee", nullable_simple_user_decoder())
  decode.success(
    RepositoryInvitation(
      permissions: permissions,
      expired: expired,
      inviter: inviter,
      created_at: created_at,
      repository: repository,
      url: url,
      node_id: node_id,
      id: id,
      html_url: html_url,
      invitee: invitee,
    ),
  )
}

pub fn repository_invitation_encode(data: RepositoryInvitation) {
  json.object(
    [
      #("permissions", json.string(data.permissions)),
      #("expired", json.nullable(data.expired, json.bool)),
      #("inviter", nullable_simple_user_encode(data.inviter)),
      #("created_at", json.string(data.created_at)),
      #("repository", minimal_repository_encode(data.repository)),
      #("url", json.string(data.url)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("invitee", nullable_simple_user_encode(data.invitee))
    ],
  )
}

pub fn webhooks_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.field(
    "reactions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use child_comment_count <- decode.field("child_comment_count", decode.int)
  use author_association <- decode.field("author_association", decode.string)
  use parent_id <- decode.optional_field(
    "parent_id",
    None,
    decode.optional(decode.int),
  )
  use discussion_id <- decode.field("discussion_id", decode.int)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksComment(
      body: body,
      created_at: created_at,
      reactions: reactions,
      user: user,
      child_comment_count: child_comment_count,
      author_association: author_association,
      parent_id: parent_id,
      discussion_id: discussion_id,
      updated_at: updated_at,
      node_id: node_id,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_comment_encode(data: WebhooksComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("created_at", json.string(data.created_at)),
      #(
        "reactions",
        fn(_) { panic as "Literal object inside field" }(data.reactions),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("child_comment_count", json.int(data.child_comment_count)),
      #("author_association", json.string(data.author_association)),
      #("parent_id", json.nullable(data.parent_id, json.int)),
      #("discussion_id", json.int(data.discussion_id)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_projects_v2_status_update_deleted_decoder() {
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use projects_v2_status_update <- decode.field(
    "projects_v2_status_update",
    projects_v2_status_update_decoder(),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2StatusUpdateDeleted(
      organization: organization,
      sender: sender,
      action: action,
      projects_v2_status_update: projects_v2_status_update,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_status_update_deleted_encode(
  data: WebhookProjectsV2StatusUpdateDeleted,
) {
  json.object(
    [
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "projects_v2_status_update",
        projects_v2_status_update_encode(data.projects_v2_status_update),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn custom_deployment_rule_app_decoder() {
  use integration_url <- decode.field("integration_url", decode.string)
  use slug <- decode.field("slug", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    CustomDeploymentRuleApp(
      integration_url: integration_url,
      slug: slug,
      node_id: node_id,
      id: id,
    ),
  )
}

pub fn custom_deployment_rule_app_encode(data: CustomDeploymentRuleApp) {
  json.object(
    [
      #("integration_url", json.string(data.integration_url)),
      #("slug", json.string(data.slug)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn api_insights_user_stats_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn api_insights_user_stats_encode(data: ApiInsightsUserStats) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn webhook_installation_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(webhooks_repositories_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", installation_decoder())
  decode.success(
    WebhookInstallationDeleted(
      enterprise: enterprise,
      repositories: repositories,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_installation_deleted_encode(data: WebhookInstallationDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories",
        json.nullable(data.repositories, webhooks_repositories_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", installation_encode(data.installation))
    ],
  )
}

pub fn webhook_projects_v2_item_restored_decoder() {
  use changes <- decode.field("changes", webhooks_project_changes_decoder())
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemRestored(
      changes: changes,
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_restored_encode(
  data: WebhookProjectsV2ItemRestored,
) {
  json.object(
    [
      #("changes", webhooks_project_changes_encode(data.changes)),
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_project_card_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use project_card <- decode.field(
    "project_card",
    webhooks_project_card_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectCardEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      project_card: project_card,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_project_card_edited_encode(data: WebhookProjectCardEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("project_card", webhooks_project_card_encode(data.project_card)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn vulnerability_decoder() {
  use vulnerable_functions <- decode.optional_field(
    "vulnerable_functions",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use package <- decode.optional_field(
    "package",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use first_patched_version <- decode.optional_field(
    "first_patched_version",
    None,
    decode.optional(decode.string),
  )
  use vulnerable_version_range <- decode.optional_field(
    "vulnerable_version_range",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Vulnerability(
      vulnerable_functions: vulnerable_functions,
      package: package,
      first_patched_version: first_patched_version,
      vulnerable_version_range: vulnerable_version_range,
    ),
  )
}

pub fn vulnerability_encode(data: Vulnerability) {
  json.object(
    [
      #(
        "vulnerable_functions",
        json.nullable(data.vulnerable_functions, json.array(_, json.string)),
      ),
      #(
        "package",
        json.nullable(
          data.package,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "first_patched_version",
        json.nullable(data.first_patched_version, json.string),
      ),
      #(
        "vulnerable_version_range",
        json.nullable(data.vulnerable_version_range, json.string),
      )
    ],
  )
}

pub fn webhook_discussion_comment_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_comment_decoder())
  decode.success(
    WebhookDiscussionCommentDeleted(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_discussion_comment_deleted_encode(
  data: WebhookDiscussionCommentDeleted,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_comment_encode(data.comment))
    ],
  )
}

pub fn webhook_workflow_job_queued_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow_job <- decode.field(
    "workflow_job",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookWorkflowJobQueued(
      enterprise: enterprise,
      deployment: deployment,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow_job: workflow_job,
    ),
  )
}

pub fn webhook_workflow_job_queued_encode(data: WebhookWorkflowJobQueued) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("deployment", json.nullable(data.deployment, deployment_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "workflow_job",
        fn(_) { panic as "Literal object inside field" }(data.workflow_job),
      )
    ],
  )
}

pub fn webhook_repository_vulnerability_alert_dismiss_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookRepositoryVulnerabilityAlertDismiss(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_repository_vulnerability_alert_dismiss_encode(
  data: WebhookRepositoryVulnerabilityAlertDismiss,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn webhook_branch_protection_rule_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use rule <- decode.field("rule", webhooks_rule_decoder())
  decode.success(
    WebhookBranchProtectionRuleEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      rule: rule,
    ),
  )
}

pub fn webhook_branch_protection_rule_edited_encode(
  data: WebhookBranchProtectionRuleEdited,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("rule", webhooks_rule_encode(data.rule))
    ],
  )
}

pub fn webhook_repository_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_created_encode(data: WebhookRepositoryCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_required_signatures_decoder() {
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleRequiredSignatures(type_: type_))
}

pub fn repository_rule_required_signatures_encode(
  data: RepositoryRuleRequiredSignatures,
) {
  json.object([#("type", json.string(data.type_))])
}

pub fn copilot_ide_code_completions_decoder() {
  use editors <- decode.optional_field(
    "editors",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use total_engaged_users <- decode.optional_field(
    "total_engaged_users",
    None,
    decode.optional(decode.int),
  )
  use languages <- decode.optional_field(
    "languages",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  decode.success(
    CopilotIdeCodeCompletions(
      editors: editors,
      total_engaged_users: total_engaged_users,
      languages: languages,
    ),
  )
}

pub fn copilot_ide_code_completions_encode(data: CopilotIdeCodeCompletions) {
  json.object(
    [
      #(
        "editors",
        json.nullable(
          data.editors,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("total_engaged_users", json.nullable(data.total_engaged_users, json.int)),
      #(
        "languages",
        json.nullable(
          data.languages,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      )
    ],
  )
}

pub fn webhooks_review_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use original_line <- decode.field("original_line", decode.int)
  use commit_id <- decode.field("commit_id", decode.string)
  use diff_hunk <- decode.field("diff_hunk", decode.string)
  use path_ <- decode.field("path", decode.string)
  use pull_request_url <- decode.field("pull_request_url", decode.string)
  use position <- decode.optional_field(
    "position",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.field(
    "reactions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use subject_type <- decode.optional_field(
    "subject_type",
    None,
    decode.optional(decode.string),
  )
  use author_association <- decode.field("author_association", decode.string)
  use url <- decode.field("url", decode.string)
  use in_reply_to_id <- decode.optional_field(
    "in_reply_to_id",
    None,
    decode.optional(decode.int),
  )
  use start_line <- decode.optional_field(
    "start_line",
    None,
    decode.optional(decode.int),
  )
  use start_side <- decode.optional_field(
    "start_side",
    None,
    decode.optional(decode.string),
  )
  use line <- decode.optional_field("line", None, decode.optional(decode.int))
  use original_commit_id <- decode.field("original_commit_id", decode.string)
  use side <- decode.field("side", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use original_position <- decode.field("original_position", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use pull_request_review_id <- decode.optional_field(
    "pull_request_review_id",
    None,
    decode.optional(decode.int),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use original_start_line <- decode.optional_field(
    "original_start_line",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    WebhooksReviewComment(
      body: body,
      original_line: original_line,
      commit_id: commit_id,
      diff_hunk: diff_hunk,
      path_: path_,
      pull_request_url: pull_request_url,
      position: position,
      created_at: created_at,
      reactions: reactions,
      user: user,
      subject_type: subject_type,
      author_association: author_association,
      url: url,
      in_reply_to_id: in_reply_to_id,
      start_line: start_line,
      start_side: start_side,
      line: line,
      original_commit_id: original_commit_id,
      side: side,
      updated_at: updated_at,
      original_position: original_position,
      node_id: node_id,
      pull_request_review_id: pull_request_review_id,
      links: links,
      id: id,
      html_url: html_url,
      original_start_line: original_start_line,
    ),
  )
}

pub fn webhooks_review_comment_encode(data: WebhooksReviewComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("original_line", json.int(data.original_line)),
      #("commit_id", json.string(data.commit_id)),
      #("diff_hunk", json.string(data.diff_hunk)),
      #("path", json.string(data.path_)),
      #("pull_request_url", json.string(data.pull_request_url)),
      #("position", json.nullable(data.position, json.int)),
      #("created_at", json.string(data.created_at)),
      #(
        "reactions",
        fn(_) { panic as "Literal object inside field" }(data.reactions),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("subject_type", json.nullable(data.subject_type, json.string)),
      #("author_association", json.string(data.author_association)),
      #("url", json.string(data.url)),
      #("in_reply_to_id", json.nullable(data.in_reply_to_id, json.int)),
      #("start_line", json.nullable(data.start_line, json.int)),
      #("start_side", json.nullable(data.start_side, json.string)),
      #("line", json.nullable(data.line, json.int)),
      #("original_commit_id", json.string(data.original_commit_id)),
      #("side", json.string(data.side)),
      #("updated_at", json.string(data.updated_at)),
      #("original_position", json.int(data.original_position)),
      #("node_id", json.string(data.node_id)),
      #(
        "pull_request_review_id",
        json.nullable(data.pull_request_review_id, json.int),
      ),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("original_start_line", json.nullable(data.original_start_line, json.int))
    ],
  )
}

pub fn webhook_workflow_run_in_progress_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.field(
    "workflow_run",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow <- decode.field("workflow", webhooks_workflow_decoder())
  decode.success(
    WebhookWorkflowRunInProgress(
      enterprise: enterprise,
      repository: repository,
      workflow_run: workflow_run,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow: workflow,
    ),
  )
}

pub fn webhook_workflow_run_in_progress_encode(
  data: WebhookWorkflowRunInProgress,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        fn(_) { panic as "Literal object inside field" }(data.workflow_run),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("workflow", webhooks_workflow_encode(data.workflow))
    ],
  )
}

pub fn verification_decoder() {
  use reason <- decode.field("reason", decode.string)
  use verified <- decode.field("verified", decode.bool)
  use payload <- decode.optional_field(
    "payload",
    None,
    decode.optional(decode.string),
  )
  use signature <- decode.optional_field(
    "signature",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Verification(
      reason: reason,
      verified: verified,
      payload: payload,
      signature: signature,
    ),
  )
}

pub fn verification_encode(data: Verification) {
  json.object(
    [
      #("reason", json.string(data.reason)),
      #("verified", json.bool(data.verified)),
      #("payload", json.nullable(data.payload, json.string)),
      #("signature", json.nullable(data.signature, json.string))
    ],
  )
}

pub fn dependabot_alert_security_vulnerability_decoder() {
  use package <- decode.field("package", dependabot_alert_package_decoder())
  use first_patched_version <- decode.optional_field(
    "first_patched_version",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use severity <- decode.field("severity", decode.string)
  use vulnerable_version_range <- decode.field(
    "vulnerable_version_range",
    decode.string,
  )
  decode.success(
    DependabotAlertSecurityVulnerability(
      package: package,
      first_patched_version: first_patched_version,
      severity: severity,
      vulnerable_version_range: vulnerable_version_range,
    ),
  )
}

pub fn dependabot_alert_security_vulnerability_encode(
  data: DependabotAlertSecurityVulnerability,
) {
  json.object(
    [
      #("package", dependabot_alert_package_encode(data.package)),
      #(
        "first_patched_version",
        json.nullable(
          data.first_patched_version,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("severity", json.string(data.severity)),
      #("vulnerable_version_range", json.string(data.vulnerable_version_range))
    ],
  )
}

pub fn webhook_deploy_key_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use key <- decode.field("key", webhooks_deploy_key_decoder())
  decode.success(
    WebhookDeployKeyDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      key: key,
    ),
  )
}

pub fn webhook_deploy_key_deleted_encode(data: WebhookDeployKeyDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("key", webhooks_deploy_key_encode(data.key))
    ],
  )
}

pub fn webhook_personal_access_token_request_approved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use personal_access_token_request <- decode.field(
    "personal_access_token_request",
    personal_access_token_request_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", simple_installation_decoder())
  decode.success(
    WebhookPersonalAccessTokenRequestApproved(
      enterprise: enterprise,
      personal_access_token_request: personal_access_token_request,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_personal_access_token_request_approved_encode(
  data: WebhookPersonalAccessTokenRequestApproved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "personal_access_token_request",
        personal_access_token_request_encode(data.personal_access_token_request),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", simple_installation_encode(data.installation))
    ],
  )
}

pub fn secret_scanning_location_wiki_commit_decoder() {
  use commit_sha <- decode.field("commit_sha", decode.string)
  use path_ <- decode.field("path", decode.string)
  use commit_url <- decode.field("commit_url", decode.string)
  use blob_sha <- decode.field("blob_sha", decode.string)
  use start_line <- decode.field("start_line", decode.float)
  use start_column <- decode.field("start_column", decode.float)
  use end_line <- decode.field("end_line", decode.float)
  use end_column <- decode.field("end_column", decode.float)
  use page_url <- decode.field("page_url", decode.string)
  decode.success(
    SecretScanningLocationWikiCommit(
      commit_sha: commit_sha,
      path_: path_,
      commit_url: commit_url,
      blob_sha: blob_sha,
      start_line: start_line,
      start_column: start_column,
      end_line: end_line,
      end_column: end_column,
      page_url: page_url,
    ),
  )
}

pub fn secret_scanning_location_wiki_commit_encode(
  data: SecretScanningLocationWikiCommit,
) {
  json.object(
    [
      #("commit_sha", json.string(data.commit_sha)),
      #("path", json.string(data.path_)),
      #("commit_url", json.string(data.commit_url)),
      #("blob_sha", json.string(data.blob_sha)),
      #("start_line", json.float(data.start_line)),
      #("start_column", json.float(data.start_column)),
      #("end_line", json.float(data.end_line)),
      #("end_column", json.float(data.end_column)),
      #("page_url", json.string(data.page_url))
    ],
  )
}

pub fn pull_request_minimal_decoder() {
  use head <- decode.field(
    "head",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use number <- decode.field("number", decode.int)
  use url <- decode.field("url", decode.string)
  use base_ <- decode.field(
    "base",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  decode.success(
    PullRequestMinimal(
      head: head,
      number: number,
      url: url,
      base_: base_,
      id: id,
    ),
  )
}

pub fn pull_request_minimal_encode(data: PullRequestMinimal) {
  json.object(
    [
      #("head", fn(_) { panic as "Literal object inside field" }(data.head)),
      #("number", json.int(data.number)),
      #("url", json.string(data.url)),
      #("base", fn(_) { panic as "Literal object inside field" }(data.base_)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn repository_ruleset_conditions_repository_name_target_decoder() {
  use repository_name <- decode.field(
    "repository_name",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    RepositoryRulesetConditionsRepositoryNameTarget(
      repository_name: repository_name,
    ),
  )
}

pub fn repository_ruleset_conditions_repository_name_target_encode(
  data: RepositoryRulesetConditionsRepositoryNameTarget,
) {
  json.object(
    [
      #(
        "repository_name",
        fn(_) { panic as "Literal object inside field" }(data.repository_name),
      )
    ],
  )
}

pub fn contributor_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.optional_field(
    "gists_url",
    None,
    decode.optional(decode.string),
  )
  use following_url <- decode.optional_field(
    "following_url",
    None,
    decode.optional(decode.string),
  )
  use contributions <- decode.field("contributions", decode.int)
  use followers_url <- decode.optional_field(
    "followers_url",
    None,
    decode.optional(decode.string),
  )
  use subscriptions_url <- decode.optional_field(
    "subscriptions_url",
    None,
    decode.optional(decode.string),
  )
  use received_events_url <- decode.optional_field(
    "received_events_url",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.optional_field(
    "events_url",
    None,
    decode.optional(decode.string),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use login <- decode.optional_field(
    "login",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use starred_url <- decode.optional_field(
    "starred_url",
    None,
    decode.optional(decode.string),
  )
  use organizations_url <- decode.optional_field(
    "organizations_url",
    None,
    decode.optional(decode.string),
  )
  use repos_url <- decode.optional_field(
    "repos_url",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.optional_field(
    "site_admin",
    None,
    decode.optional(decode.bool),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use type_ <- decode.field("type", decode.string)
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Contributor(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      contributions: contributions,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn contributor_encode(data: Contributor) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.nullable(data.gists_url, json.string)),
      #("following_url", json.nullable(data.following_url, json.string)),
      #("contributions", json.int(data.contributions)),
      #("followers_url", json.nullable(data.followers_url, json.string)),
      #("subscriptions_url", json.nullable(data.subscriptions_url, json.string)),
      #(
        "received_events_url",
        json.nullable(data.received_events_url, json.string),
      ),
      #("events_url", json.nullable(data.events_url, json.string)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("login", json.nullable(data.login, json.string)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("starred_url", json.nullable(data.starred_url, json.string)),
      #("organizations_url", json.nullable(data.organizations_url, json.string)),
      #("repos_url", json.nullable(data.repos_url, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.nullable(data.site_admin, json.bool)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("type", json.string(data.type_)),
      #("id", json.nullable(data.id, json.int)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn copilot_seat_details_decoder() {
  use pending_cancellation_date <- decode.optional_field(
    "pending_cancellation_date",
    None,
    decode.optional(decode.string),
  )
  use assigning_team <- decode.optional_field(
    "assigning_team",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use created_at <- decode.field("created_at", decode.string)
  use assignee <- decode.field("assignee", simple_user_decoder())
  use plan_type <- decode.optional_field(
    "plan_type",
    None,
    decode.optional(decode.string),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(nullable_organization_simple_decoder()),
  )
  use last_activity_editor <- decode.optional_field(
    "last_activity_editor",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use last_activity_at <- decode.optional_field(
    "last_activity_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CopilotSeatDetails(
      pending_cancellation_date: pending_cancellation_date,
      assigning_team: assigning_team,
      created_at: created_at,
      assignee: assignee,
      plan_type: plan_type,
      organization: organization,
      last_activity_editor: last_activity_editor,
      updated_at: updated_at,
      last_activity_at: last_activity_at,
    ),
  )
}

pub fn copilot_seat_details_encode(data: CopilotSeatDetails) {
  json.object(
    [
      #(
        "pending_cancellation_date",
        json.nullable(data.pending_cancellation_date, json.string),
      ),
      #(
        "assigning_team",
        json.nullable(
          data.assigning_team,
          fn(_) { panic as "OneOf inside field" },
        ),
      ),
      #("created_at", json.string(data.created_at)),
      #("assignee", simple_user_encode(data.assignee)),
      #("plan_type", json.nullable(data.plan_type, json.string)),
      #(
        "organization",
        json.nullable(data.organization, nullable_organization_simple_encode),
      ),
      #(
        "last_activity_editor",
        json.nullable(data.last_activity_editor, json.string),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("last_activity_at", json.nullable(data.last_activity_at, json.string))
    ],
  )
}

pub fn webhook_discussion_closed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionClosed(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_closed_encode(data: WebhookDiscussionClosed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_project_column_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use project_column <- decode.field(
    "project_column",
    webhooks_project_column_decoder(),
  )
  decode.success(
    WebhookProjectColumnCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      project_column: project_column,
    ),
  )
}

pub fn webhook_project_column_created_encode(data: WebhookProjectColumnCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("project_column", webhooks_project_column_encode(data.project_column))
    ],
  )
}

pub fn pending_deployment_decoder() {
  use reviewers <- decode.field(
    "reviewers",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use current_user_can_approve <- decode.field(
    "current_user_can_approve",
    decode.bool,
  )
  use environment <- decode.field(
    "environment",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use wait_timer_started_at <- decode.optional_field(
    "wait_timer_started_at",
    None,
    decode.optional(decode.string),
  )
  use wait_timer <- decode.field("wait_timer", decode.int)
  decode.success(
    PendingDeployment(
      reviewers: reviewers,
      current_user_can_approve: current_user_can_approve,
      environment: environment,
      wait_timer_started_at: wait_timer_started_at,
      wait_timer: wait_timer,
    ),
  )
}

pub fn pending_deployment_encode(data: PendingDeployment) {
  json.object(
    [
      #(
        "reviewers",
        json.array(_, fn(_) { panic as "object in array" })(data.reviewers),
      ),
      #("current_user_can_approve", json.bool(data.current_user_can_approve)),
      #(
        "environment",
        fn(_) { panic as "Literal object inside field" }(data.environment),
      ),
      #(
        "wait_timer_started_at",
        json.nullable(data.wait_timer_started_at, json.string),
      ),
      #("wait_timer", json.int(data.wait_timer))
    ],
  )
}

pub fn repository_ruleset_conditions_repository_property_spec_decoder() {
  use name <- decode.field("name", decode.string)
  use property_values <- decode.field(
    "property_values",
    decode.list(decode.string),
  )
  use source <- decode.optional_field(
    "source",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryRulesetConditionsRepositoryPropertySpec(
      name: name,
      property_values: property_values,
      source: source,
    ),
  )
}

pub fn repository_ruleset_conditions_repository_property_spec_encode(
  data: RepositoryRulesetConditionsRepositoryPropertySpec,
) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("property_values", json.array(_, json.string)(data.property_values)),
      #("source", json.nullable(data.source, json.string))
    ],
  )
}

pub fn stargazer_decoder() {
  use user <- decode.field("user", nullable_simple_user_decoder())
  use starred_at <- decode.field("starred_at", decode.string)
  decode.success(Stargazer(user: user, starred_at: starred_at))
}

pub fn stargazer_encode(data: Stargazer) {
  json.object(
    [
      #("user", nullable_simple_user_encode(data.user)),
      #("starred_at", json.string(data.starred_at))
    ],
  )
}

pub fn deployment_branch_policy_settings_decoder() {
  use protected_branches <- decode.field("protected_branches", decode.bool)
  use custom_branch_policies <- decode.field(
    "custom_branch_policies",
    decode.bool,
  )
  decode.success(
    DeploymentBranchPolicySettings(
      protected_branches: protected_branches,
      custom_branch_policies: custom_branch_policies,
    ),
  )
}

pub fn deployment_branch_policy_settings_encode(
  data: DeploymentBranchPolicySettings,
) {
  json.object(
    [
      #("protected_branches", json.bool(data.protected_branches)),
      #("custom_branch_policies", json.bool(data.custom_branch_policies))
    ],
  )
}

pub fn webhook_check_suite_completed_decoder() {
  use check_suite <- decode.field(
    "check_suite",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckSuiteCompleted(
      check_suite: check_suite,
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_suite_completed_encode(data: WebhookCheckSuiteCompleted) {
  json.object(
    [
      #(
        "check_suite",
        fn(_) { panic as "Literal object inside field" }(data.check_suite),
      ),
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_review_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use commit_id <- decode.field("commit_id", decode.string)
  use pull_request_url <- decode.field("pull_request_url", decode.string)
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author_association <- decode.field("author_association", decode.string)
  use state <- decode.field("state", decode.string)
  use submitted_at <- decode.optional_field(
    "submitted_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksReview(
      body: body,
      commit_id: commit_id,
      pull_request_url: pull_request_url,
      user: user,
      author_association: author_association,
      state: state,
      submitted_at: submitted_at,
      node_id: node_id,
      links: links,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_review_encode(data: WebhooksReview) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("commit_id", json.string(data.commit_id)),
      #("pull_request_url", json.string(data.pull_request_url)),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("author_association", json.string(data.author_association)),
      #("state", json.string(data.state)),
      #("submitted_at", json.nullable(data.submitted_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_sponsorship_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use sponsorship <- decode.field("sponsorship", webhooks_sponsorship_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSponsorshipCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      sponsorship: sponsorship,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_sponsorship_created_encode(data: WebhookSponsorshipCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("sponsorship", webhooks_sponsorship_encode(data.sponsorship)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn deployment_status_decoder() {
  use target_url <- decode.field("target_url", decode.string)
  use environment_url <- decode.optional_field(
    "environment_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use environment <- decode.optional_field(
    "environment",
    None,
    decode.optional(decode.string),
  )
  use log_url <- decode.optional_field(
    "log_url",
    None,
    decode.optional(decode.string),
  )
  use deployment_url <- decode.field("deployment_url", decode.string)
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.field("description", decode.string)
  decode.success(
    DeploymentStatus(
      target_url: target_url,
      environment_url: environment_url,
      created_at: created_at,
      creator: creator,
      url: url,
      state: state,
      environment: environment,
      log_url: log_url,
      deployment_url: deployment_url,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      repository_url: repository_url,
      id: id,
      description: description,
    ),
  )
}

pub fn deployment_status_encode(data: DeploymentStatus) {
  json.object(
    [
      #("target_url", json.string(data.target_url)),
      #("environment_url", json.nullable(data.environment_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("environment", json.nullable(data.environment, json.string)),
      #("log_url", json.nullable(data.log_url, json.string)),
      #("deployment_url", json.string(data.deployment_url)),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("description", json.string(data.description))
    ],
  )
}

pub fn link_decoder() {
  use href <- decode.field("href", decode.string)
  decode.success(Link(href: href))
}

pub fn link_encode(data: Link) {
  json.object([#("href", json.string(data.href))])
}

pub fn repository_advisory_update_decoder() {
  use cvss_vector_string <- decode.optional_field(
    "cvss_vector_string",
    None,
    decode.optional(decode.string),
  )
  use summary <- decode.optional_field(
    "summary",
    None,
    decode.optional(decode.string),
  )
  use cve_id <- decode.optional_field(
    "cve_id",
    None,
    decode.optional(decode.string),
  )
  use collaborating_users <- decode.optional_field(
    "collaborating_users",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use cwe_ids <- decode.optional_field(
    "cwe_ids",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(decode.string),
  )
  use collaborating_teams <- decode.optional_field(
    "collaborating_teams",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use credits <- decode.optional_field(
    "credits",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use vulnerabilities <- decode.optional_field(
    "vulnerabilities",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use severity <- decode.optional_field(
    "severity",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryAdvisoryUpdate(
      cvss_vector_string: cvss_vector_string,
      summary: summary,
      cve_id: cve_id,
      collaborating_users: collaborating_users,
      cwe_ids: cwe_ids,
      state: state,
      collaborating_teams: collaborating_teams,
      credits: credits,
      vulnerabilities: vulnerabilities,
      description: description,
      severity: severity,
    ),
  )
}

pub fn repository_advisory_update_encode(data: RepositoryAdvisoryUpdate) {
  json.object(
    [
      #(
        "cvss_vector_string",
        json.nullable(data.cvss_vector_string, json.string),
      ),
      #("summary", json.nullable(data.summary, json.string)),
      #("cve_id", json.nullable(data.cve_id, json.string)),
      #(
        "collaborating_users",
        json.nullable(data.collaborating_users, json.array(_, json.string)),
      ),
      #("cwe_ids", json.nullable(data.cwe_ids, json.array(_, json.string))),
      #("state", json.nullable(data.state, json.string)),
      #(
        "collaborating_teams",
        json.nullable(data.collaborating_teams, json.array(_, json.string)),
      ),
      #(
        "credits",
        json.nullable(
          data.credits,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "vulnerabilities",
        json.nullable(
          data.vulnerabilities,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("description", json.nullable(data.description, json.string)),
      #("severity", json.nullable(data.severity, json.string))
    ],
  )
}

pub fn dependabot_alert_security_advisory_decoder() {
  use cwes <- decode.field(
    "cwes",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use published_at <- decode.field("published_at", decode.string)
  use summary <- decode.field("summary", decode.string)
  use cvss_severities <- decode.optional_field(
    "cvss_severities",
    None,
    decode.optional(cvss_severities_decoder()),
  )
  use cve_id <- decode.optional_field(
    "cve_id",
    None,
    decode.optional(decode.string),
  )
  use references <- decode.field(
    "references",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use identifiers <- decode.field(
    "identifiers",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use ghsa_id <- decode.field("ghsa_id", decode.string)
  use withdrawn_at <- decode.optional_field(
    "withdrawn_at",
    None,
    decode.optional(decode.string),
  )
  use cvss <- decode.field(
    "cvss",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use vulnerabilities <- decode.field(
    "vulnerabilities",
    decode.list(dependabot_alert_security_vulnerability_decoder()),
  )
  use description <- decode.field("description", decode.string)
  use severity <- decode.field("severity", decode.string)
  decode.success(
    DependabotAlertSecurityAdvisory(
      cwes: cwes,
      published_at: published_at,
      summary: summary,
      cvss_severities: cvss_severities,
      cve_id: cve_id,
      references: references,
      identifiers: identifiers,
      ghsa_id: ghsa_id,
      withdrawn_at: withdrawn_at,
      cvss: cvss,
      updated_at: updated_at,
      vulnerabilities: vulnerabilities,
      description: description,
      severity: severity,
    ),
  )
}

pub fn dependabot_alert_security_advisory_encode(
  data: DependabotAlertSecurityAdvisory,
) {
  json.object(
    [
      #("cwes", json.array(_, fn(_) { panic as "object in array" })(data.cwes)),
      #("published_at", json.string(data.published_at)),
      #("summary", json.string(data.summary)),
      #(
        "cvss_severities",
        json.nullable(data.cvss_severities, cvss_severities_encode),
      ),
      #("cve_id", json.nullable(data.cve_id, json.string)),
      #(
        "references",
        json.array(_, fn(_) { panic as "object in array" })(data.references),
      ),
      #(
        "identifiers",
        json.array(_, fn(_) { panic as "object in array" })(data.identifiers),
      ),
      #("ghsa_id", json.string(data.ghsa_id)),
      #("withdrawn_at", json.nullable(data.withdrawn_at, json.string)),
      #("cvss", fn(_) { panic as "Literal object inside field" }(data.cvss)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "vulnerabilities",
        json.array(_, dependabot_alert_security_vulnerability_encode)(
          data.vulnerabilities,
        ),
      ),
      #("description", json.string(data.description)),
      #("severity", json.string(data.severity))
    ],
  )
}

pub fn webhook_deployment_review_approved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use approver <- decode.optional_field(
    "approver",
    None,
    decode.optional(webhooks_approver_decoder()),
  )
  use workflow_job_run <- decode.optional_field(
    "workflow_job_run",
    None,
    decode.optional(webhooks_workflow_job_run_decoder()),
  )
  use workflow_job_runs <- decode.optional_field(
    "workflow_job_runs",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.optional_field(
    "workflow_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use reviewers <- decode.optional_field(
    "reviewers",
    None,
    decode.optional(webhooks_reviewers_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use since <- decode.field("since", decode.string)
  use comment <- decode.optional_field(
    "comment",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhookDeploymentReviewApproved(
      enterprise: enterprise,
      approver: approver,
      workflow_job_run: workflow_job_run,
      workflow_job_runs: workflow_job_runs,
      repository: repository,
      workflow_run: workflow_run,
      reviewers: reviewers,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      since: since,
      comment: comment,
    ),
  )
}

pub fn webhook_deployment_review_approved_encode(
  data: WebhookDeploymentReviewApproved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("approver", json.nullable(data.approver, webhooks_approver_encode)),
      #(
        "workflow_job_run",
        json.nullable(data.workflow_job_run, webhooks_workflow_job_run_encode),
      ),
      #(
        "workflow_job_runs",
        json.nullable(
          data.workflow_job_runs,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        json.nullable(
          data.workflow_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("reviewers", json.nullable(data.reviewers, webhooks_reviewers_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("since", json.string(data.since)),
      #("comment", json.nullable(data.comment, json.string))
    ],
  )
}

pub fn tag_decoder() {
  use name <- decode.field("name", decode.string)
  use zipball_url <- decode.field("zipball_url", decode.string)
  use tarball_url <- decode.field("tarball_url", decode.string)
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use node_id <- decode.field("node_id", decode.string)
  decode.success(
    Tag(
      name: name,
      zipball_url: zipball_url,
      tarball_url: tarball_url,
      commit: commit,
      node_id: node_id,
    ),
  )
}

pub fn tag_encode(data: Tag) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("zipball_url", json.string(data.zipball_url)),
      #("tarball_url", json.string(data.tarball_url)),
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit)),
      #("node_id", json.string(data.node_id))
    ],
  )
}

pub fn webhook_repository_advisory_reported_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use repository_advisory <- decode.field(
    "repository_advisory",
    repository_advisory_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryAdvisoryReported(
      enterprise: enterprise,
      repository: repository,
      repository_advisory: repository_advisory,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_advisory_reported_encode(
  data: WebhookRepositoryAdvisoryReported,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "repository_advisory",
        repository_advisory_encode(data.repository_advisory),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_registry_package_updated_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use registry_package <- decode.field(
    "registry_package",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRegistryPackageUpdated(
      enterprise: enterprise,
      registry_package: registry_package,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_registry_package_updated_encode(
  data: WebhookRegistryPackageUpdated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "registry_package",
        fn(_) { panic as "Literal object inside field" }(data.registry_package),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn security_advisory_ecosystems_decoder() {
  decode.string
}

pub fn security_advisory_ecosystems_encode(data: SecurityAdvisoryEcosystems) {
  json.string(data)
}

pub fn private_vulnerability_report_create_decoder() {
  use cvss_vector_string <- decode.optional_field(
    "cvss_vector_string",
    None,
    decode.optional(decode.string),
  )
  use summary <- decode.field("summary", decode.string)
  use cwe_ids <- decode.optional_field(
    "cwe_ids",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use vulnerabilities <- decode.optional_field(
    "vulnerabilities",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use start_private_fork <- decode.optional_field(
    "start_private_fork",
    None,
    decode.optional(decode.bool),
  )
  use description <- decode.field("description", decode.string)
  use severity <- decode.optional_field(
    "severity",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    PrivateVulnerabilityReportCreate(
      cvss_vector_string: cvss_vector_string,
      summary: summary,
      cwe_ids: cwe_ids,
      vulnerabilities: vulnerabilities,
      start_private_fork: start_private_fork,
      description: description,
      severity: severity,
    ),
  )
}

pub fn private_vulnerability_report_create_encode(
  data: PrivateVulnerabilityReportCreate,
) {
  json.object(
    [
      #(
        "cvss_vector_string",
        json.nullable(data.cvss_vector_string, json.string),
      ),
      #("summary", json.string(data.summary)),
      #("cwe_ids", json.nullable(data.cwe_ids, json.array(_, json.string))),
      #(
        "vulnerabilities",
        json.nullable(
          data.vulnerabilities,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("start_private_fork", json.nullable(data.start_private_fork, json.bool)),
      #("description", json.string(data.description)),
      #("severity", json.nullable(data.severity, json.string))
    ],
  )
}

pub fn webhook_pull_request_converted_to_draft_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    pull_request_webhook_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestConvertedToDraft(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_converted_to_draft_encode(
  data: WebhookPullRequestConvertedToDraft,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("pull_request", pull_request_webhook_encode(data.pull_request)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_analysis_url_decoder() {
  decode.string
}

pub fn code_scanning_analysis_url_encode(data: CodeScanningAnalysisUrl) {
  json.string(data)
}

pub fn event_decoder() {
  use org <- decode.optional_field("org", None, decode.optional(actor_decoder()))
  use public <- decode.field("public", decode.bool)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use payload <- decode.field(
    "payload",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repo <- decode.field(
    "repo",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use actor <- decode.field("actor", actor_decoder())
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.string)
  decode.success(
    Event(
      org: org,
      public: public,
      created_at: created_at,
      payload: payload,
      repo: repo,
      actor: actor,
      type_: type_,
      id: id,
    ),
  )
}

pub fn event_encode(data: Event) {
  json.object(
    [
      #("org", json.nullable(data.org, actor_encode)),
      #("public", json.bool(data.public)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #(
        "payload",
        fn(_) { panic as "Literal object inside field" }(data.payload),
      ),
      #("repo", fn(_) { panic as "Literal object inside field" }(data.repo)),
      #("actor", actor_encode(data.actor)),
      #("type", json.nullable(data.type_, json.string)),
      #("id", json.string(data.id))
    ],
  )
}

pub fn nullable_simple_user_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    NullableSimpleUser(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      starred_at: starred_at,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn nullable_simple_user_encode(data: NullableSimpleUser) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("repos_url", json.string(data.repos_url)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("node_id", json.string(data.node_id)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn auto_merge_decoder() {
  use merge_method <- decode.field("merge_method", decode.string)
  use commit_title <- decode.field("commit_title", decode.string)
  use enabled_by <- decode.field("enabled_by", simple_user_decoder())
  use commit_message <- decode.field("commit_message", decode.string)
  decode.success(
    AutoMerge(
      merge_method: merge_method,
      commit_title: commit_title,
      enabled_by: enabled_by,
      commit_message: commit_message,
    ),
  )
}

pub fn auto_merge_encode(data: AutoMerge) {
  json.object(
    [
      #("merge_method", json.string(data.merge_method)),
      #("commit_title", json.string(data.commit_title)),
      #("enabled_by", simple_user_encode(data.enabled_by)),
      #("commit_message", json.string(data.commit_message))
    ],
  )
}

pub fn copilot_seat_breakdown_decoder() {
  use pending_invitation <- decode.optional_field(
    "pending_invitation",
    None,
    decode.optional(decode.int),
  )
  use added_this_cycle <- decode.optional_field(
    "added_this_cycle",
    None,
    decode.optional(decode.int),
  )
  use total <- decode.optional_field("total", None, decode.optional(decode.int))
  use pending_cancellation <- decode.optional_field(
    "pending_cancellation",
    None,
    decode.optional(decode.int),
  )
  use inactive_this_cycle <- decode.optional_field(
    "inactive_this_cycle",
    None,
    decode.optional(decode.int),
  )
  use active_this_cycle <- decode.optional_field(
    "active_this_cycle",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CopilotSeatBreakdown(
      pending_invitation: pending_invitation,
      added_this_cycle: added_this_cycle,
      total: total,
      pending_cancellation: pending_cancellation,
      inactive_this_cycle: inactive_this_cycle,
      active_this_cycle: active_this_cycle,
    ),
  )
}

pub fn copilot_seat_breakdown_encode(data: CopilotSeatBreakdown) {
  json.object(
    [
      #("pending_invitation", json.nullable(data.pending_invitation, json.int)),
      #("added_this_cycle", json.nullable(data.added_this_cycle, json.int)),
      #("total", json.nullable(data.total, json.int)),
      #(
        "pending_cancellation",
        json.nullable(data.pending_cancellation, json.int),
      ),
      #("inactive_this_cycle", json.nullable(data.inactive_this_cycle, json.int)),
      #("active_this_cycle", json.nullable(data.active_this_cycle, json.int))
    ],
  )
}

pub fn webhooks_repository_selection_decoder() {
  decode.string
}

pub fn webhooks_repository_selection_encode(data: WebhooksRepositorySelection) {
  json.string(data)
}

pub fn webhook_installation_new_permissions_accepted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(webhooks_repositories_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", installation_decoder())
  decode.success(
    WebhookInstallationNewPermissionsAccepted(
      enterprise: enterprise,
      repositories: repositories,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_installation_new_permissions_accepted_encode(
  data: WebhookInstallationNewPermissionsAccepted,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories",
        json.nullable(data.repositories, webhooks_repositories_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", installation_encode(data.installation))
    ],
  )
}

pub fn installation_decoder() {
  use single_file_paths <- decode.optional_field(
    "single_file_paths",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use permissions <- decode.field("permissions", app_permissions_decoder())
  use access_tokens_url <- decode.field("access_tokens_url", decode.string)
  use target_type <- decode.field("target_type", decode.string)
  use app_slug <- decode.field("app_slug", decode.string)
  use target_id <- decode.field("target_id", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use has_multiple_single_files <- decode.optional_field(
    "has_multiple_single_files",
    None,
    decode.optional(decode.bool),
  )
  use account <- decode.field(
    "account",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use single_file_name <- decode.optional_field(
    "single_file_name",
    None,
    decode.optional(decode.string),
  )
  use suspended_at <- decode.optional_field(
    "suspended_at",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use repository_selection <- decode.field("repository_selection", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use events <- decode.field("events", decode.list(decode.string))
  use app_id <- decode.field("app_id", decode.int)
  use id <- decode.field("id", decode.int)
  use suspended_by <- decode.field(
    "suspended_by",
    nullable_simple_user_decoder(),
  )
  use html_url <- decode.field("html_url", decode.string)
  use contact_email <- decode.optional_field(
    "contact_email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Installation(
      single_file_paths: single_file_paths,
      permissions: permissions,
      access_tokens_url: access_tokens_url,
      target_type: target_type,
      app_slug: app_slug,
      target_id: target_id,
      created_at: created_at,
      has_multiple_single_files: has_multiple_single_files,
      account: account,
      single_file_name: single_file_name,
      suspended_at: suspended_at,
      updated_at: updated_at,
      repository_selection: repository_selection,
      repositories_url: repositories_url,
      events: events,
      app_id: app_id,
      id: id,
      suspended_by: suspended_by,
      html_url: html_url,
      contact_email: contact_email,
    ),
  )
}

pub fn installation_encode(data: Installation) {
  json.object(
    [
      #(
        "single_file_paths",
        json.nullable(data.single_file_paths, json.array(_, json.string)),
      ),
      #("permissions", app_permissions_encode(data.permissions)),
      #("access_tokens_url", json.string(data.access_tokens_url)),
      #("target_type", json.string(data.target_type)),
      #("app_slug", json.string(data.app_slug)),
      #("target_id", json.int(data.target_id)),
      #("created_at", json.string(data.created_at)),
      #(
        "has_multiple_single_files",
        json.nullable(data.has_multiple_single_files, json.bool),
      ),
      #("account", fn(_) { panic as "AnyOf inside field" }(data.account)),
      #("single_file_name", json.nullable(data.single_file_name, json.string)),
      #("suspended_at", json.nullable(data.suspended_at, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("repository_selection", json.string(data.repository_selection)),
      #("repositories_url", json.string(data.repositories_url)),
      #("events", json.array(_, json.string)(data.events)),
      #("app_id", json.int(data.app_id)),
      #("id", json.int(data.id)),
      #("suspended_by", nullable_simple_user_encode(data.suspended_by)),
      #("html_url", json.string(data.html_url)),
      #("contact_email", json.nullable(data.contact_email, json.string))
    ],
  )
}

pub fn webhooks_project_changes_decoder() {
  use archived_at <- decode.optional_field(
    "archived_at",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(WebhooksProjectChanges(archived_at: archived_at))
}

pub fn webhooks_project_changes_encode(data: WebhooksProjectChanges) {
  json.object(
    [
      #(
        "archived_at",
        json.nullable(
          data.archived_at,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn repository_ruleset_bypass_actor_decoder() {
  use actor_type <- decode.field("actor_type", decode.string)
  use actor_id <- decode.optional_field(
    "actor_id",
    None,
    decode.optional(decode.int),
  )
  use bypass_mode <- decode.optional_field(
    "bypass_mode",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryRulesetBypassActor(
      actor_type: actor_type,
      actor_id: actor_id,
      bypass_mode: bypass_mode,
    ),
  )
}

pub fn repository_ruleset_bypass_actor_encode(data: RepositoryRulesetBypassActor) {
  json.object(
    [
      #("actor_type", json.string(data.actor_type)),
      #("actor_id", json.nullable(data.actor_id, json.int)),
      #("bypass_mode", json.nullable(data.bypass_mode, json.string))
    ],
  )
}

pub fn deployment_simple_decoder() {
  use original_environment <- decode.optional_field(
    "original_environment",
    None,
    decode.optional(decode.string),
  )
  use task <- decode.field("task", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use production_environment <- decode.optional_field(
    "production_environment",
    None,
    decode.optional(decode.bool),
  )
  use url <- decode.field("url", decode.string)
  use statuses_url <- decode.field("statuses_url", decode.string)
  use environment <- decode.field("environment", decode.string)
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use transient_environment <- decode.optional_field(
    "transient_environment",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    DeploymentSimple(
      original_environment: original_environment,
      task: task,
      created_at: created_at,
      production_environment: production_environment,
      url: url,
      statuses_url: statuses_url,
      environment: environment,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      repository_url: repository_url,
      id: id,
      description: description,
      transient_environment: transient_environment,
    ),
  )
}

pub fn deployment_simple_encode(data: DeploymentSimple) {
  json.object(
    [
      #(
        "original_environment",
        json.nullable(data.original_environment, json.string),
      ),
      #("task", json.string(data.task)),
      #("created_at", json.string(data.created_at)),
      #(
        "production_environment",
        json.nullable(data.production_environment, json.bool),
      ),
      #("url", json.string(data.url)),
      #("statuses_url", json.string(data.statuses_url)),
      #("environment", json.string(data.environment)),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string)),
      #(
        "transient_environment",
        json.nullable(data.transient_environment, json.bool),
      )
    ],
  )
}

pub fn actions_organization_permissions_decoder() {
  use allowed_actions <- decode.optional_field(
    "allowed_actions",
    None,
    decode.optional(allowed_actions_decoder()),
  )
  use enabled_repositories <- decode.field(
    "enabled_repositories",
    enabled_repositories_decoder(),
  )
  use selected_actions_url <- decode.optional_field(
    "selected_actions_url",
    None,
    decode.optional(selected_actions_url_decoder()),
  )
  use selected_repositories_url <- decode.optional_field(
    "selected_repositories_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ActionsOrganizationPermissions(
      allowed_actions: allowed_actions,
      enabled_repositories: enabled_repositories,
      selected_actions_url: selected_actions_url,
      selected_repositories_url: selected_repositories_url,
    ),
  )
}

pub fn actions_organization_permissions_encode(
  data: ActionsOrganizationPermissions,
) {
  json.object(
    [
      #(
        "allowed_actions",
        json.nullable(data.allowed_actions, allowed_actions_encode),
      ),
      #(
        "enabled_repositories",
        enabled_repositories_encode(data.enabled_repositories),
      ),
      #(
        "selected_actions_url",
        json.nullable(data.selected_actions_url, selected_actions_url_encode),
      ),
      #(
        "selected_repositories_url",
        json.nullable(data.selected_repositories_url, json.string),
      )
    ],
  )
}

pub fn webhook_config_url_decoder() {
  decode.string
}

pub fn webhook_config_url_encode(data: WebhookConfigUrl) {
  json.string(data)
}

pub fn organization_actions_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use visibility <- decode.field("visibility", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use selected_repositories_url <- decode.optional_field(
    "selected_repositories_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationActionsSecret(
      created_at: created_at,
      name: name,
      visibility: visibility,
      updated_at: updated_at,
      selected_repositories_url: selected_repositories_url,
    ),
  )
}

pub fn organization_actions_secret_encode(data: OrganizationActionsSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("visibility", json.string(data.visibility)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "selected_repositories_url",
        json.nullable(data.selected_repositories_url, json.string),
      )
    ],
  )
}

pub fn deployment_branch_policy_name_pattern_with_type_decoder() {
  use name <- decode.field("name", decode.string)
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    DeploymentBranchPolicyNamePatternWithType(name: name, type_: type_),
  )
}

pub fn deployment_branch_policy_name_pattern_with_type_encode(
  data: DeploymentBranchPolicyNamePatternWithType,
) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("type", json.nullable(data.type_, json.string))
    ],
  )
}

pub fn webhook_marketplace_purchase_pending_change_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use effective_date <- decode.field("effective_date", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use marketplace_purchase <- decode.field(
    "marketplace_purchase",
    webhooks_marketplace_purchase_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use previous_marketplace_purchase <- decode.optional_field(
    "previous_marketplace_purchase",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    WebhookMarketplacePurchasePendingChange(
      enterprise: enterprise,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      marketplace_purchase: marketplace_purchase,
      sender: sender,
      action: action,
      installation: installation,
      previous_marketplace_purchase: previous_marketplace_purchase,
    ),
  )
}

pub fn webhook_marketplace_purchase_pending_change_encode(
  data: WebhookMarketplacePurchasePendingChange,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("effective_date", json.string(data.effective_date)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "marketplace_purchase",
        webhooks_marketplace_purchase_encode(data.marketplace_purchase),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "previous_marketplace_purchase",
        json.nullable(
          data.previous_marketplace_purchase,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn deployment_reviewer_type_decoder() {
  decode.string
}

pub fn deployment_reviewer_type_encode(data: DeploymentReviewerType) {
  json.string(data)
}

pub fn webhook_commit_comment_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field(
    "comment",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookCommitCommentCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_commit_comment_created_encode(data: WebhookCommitCommentCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "comment",
        fn(_) { panic as "Literal object inside field" }(data.comment),
      )
    ],
  )
}

pub fn alert_number_decoder() {
  decode.int
}

pub fn alert_number_encode(data: AlertNumber) {
  json.int(data)
}

pub fn team_repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.field("has_downloads", decode.bool)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use teams_url <- decode.field("teams_url", decode.string)
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use owner <- decode.field("owner", nullable_simple_user_decoder())
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use role_name <- decode.optional_field(
    "role_name",
    None,
    decode.optional(decode.string),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use subscribers_count <- decode.optional_field(
    "subscribers_count",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use network_count <- decode.optional_field(
    "network_count",
    None,
    decode.optional(decode.int),
  )
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    TeamRepository(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      forks_count: forks_count,
      fork: fork,
      git_url: git_url,
      archived: archived,
      private: private,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      teams_url: teams_url,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      owner: owner,
      allow_merge_commit: allow_merge_commit,
      role_name: role_name,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      subscribers_count: subscribers_count,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      network_count: network_count,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn team_repository_encode(data: TeamRepository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.bool(data.has_downloads)),
      #("blobs_url", json.string(data.blobs_url)),
      #("teams_url", json.string(data.teams_url)),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #("owner", nullable_simple_user_encode(data.owner)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("role_name", json.nullable(data.role_name, json.string)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("subscribers_count", json.nullable(data.subscribers_count, json.int)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("network_count", json.nullable(data.network_count, json.int)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn webhooks_previous_marketplace_purchase_decoder() {
  use billing_cycle <- decode.field("billing_cycle", decode.string)
  use on_free_trial <- decode.field("on_free_trial", decode.bool)
  use plan <- decode.field(
    "plan",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use account <- decode.field(
    "account",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use unit_count <- decode.field("unit_count", decode.int)
  use next_billing_date <- decode.optional_field(
    "next_billing_date",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksPreviousMarketplacePurchase(
      billing_cycle: billing_cycle,
      on_free_trial: on_free_trial,
      plan: plan,
      account: account,
      unit_count: unit_count,
      next_billing_date: next_billing_date,
    ),
  )
}

pub fn webhooks_previous_marketplace_purchase_encode(
  data: WebhooksPreviousMarketplacePurchase,
) {
  json.object(
    [
      #("billing_cycle", json.string(data.billing_cycle)),
      #("on_free_trial", json.bool(data.on_free_trial)),
      #("plan", fn(_) { panic as "Literal object inside field" }(data.plan)),
      #(
        "account",
        fn(_) { panic as "Literal object inside field" }(data.account),
      ),
      #("unit_count", json.int(data.unit_count)),
      #("next_billing_date", json.nullable(data.next_billing_date, json.string))
    ],
  )
}

pub fn dependabot_alert_package_decoder() {
  use ecosystem <- decode.field("ecosystem", decode.string)
  use name <- decode.field("name", decode.string)
  decode.success(DependabotAlertPackage(ecosystem: ecosystem, name: name))
}

pub fn dependabot_alert_package_encode(data: DependabotAlertPackage) {
  json.object(
    [
      #("ecosystem", json.string(data.ecosystem)),
      #("name", json.string(data.name))
    ],
  )
}

pub fn secret_scanning_push_protection_bypass_placeholder_id_decoder() {
  decode.string
}

pub fn secret_scanning_push_protection_bypass_placeholder_id_encode(
  data: SecretScanningPushProtectionBypassPlaceholderId,
) {
  json.string(data)
}

pub fn webhook_pull_request_locked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestLocked(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_locked_encode(data: WebhookPullRequestLocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn actions_cache_usage_by_repository_decoder() {
  use active_caches_size_in_bytes <- decode.field(
    "active_caches_size_in_bytes",
    decode.int,
  )
  use active_caches_count <- decode.field("active_caches_count", decode.int)
  use full_name <- decode.field("full_name", decode.string)
  decode.success(
    ActionsCacheUsageByRepository(
      active_caches_size_in_bytes: active_caches_size_in_bytes,
      active_caches_count: active_caches_count,
      full_name: full_name,
    ),
  )
}

pub fn actions_cache_usage_by_repository_encode(
  data: ActionsCacheUsageByRepository,
) {
  json.object(
    [
      #(
        "active_caches_size_in_bytes",
        json.int(data.active_caches_size_in_bytes),
      ),
      #("active_caches_count", json.int(data.active_caches_count)),
      #("full_name", json.string(data.full_name))
    ],
  )
}

pub fn review_custom_gates_comment_required_decoder() {
  use environment_name <- decode.field("environment_name", decode.string)
  use comment <- decode.field("comment", decode.string)
  decode.success(
    ReviewCustomGatesCommentRequired(
      environment_name: environment_name,
      comment: comment,
    ),
  )
}

pub fn review_custom_gates_comment_required_encode(
  data: ReviewCustomGatesCommentRequired,
) {
  json.object(
    [
      #("environment_name", json.string(data.environment_name)),
      #("comment", json.string(data.comment))
    ],
  )
}

pub fn webhook_sub_issues_parent_issue_removed_decoder() {
  use sub_issue_id <- decode.field("sub_issue_id", decode.float)
  use parent_issue <- decode.field("parent_issue", issue_decoder())
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use parent_issue_repo <- decode.field(
    "parent_issue_repo",
    repository_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use parent_issue_id <- decode.field("parent_issue_id", decode.float)
  use action <- decode.field("action", decode.string)
  use sub_issue <- decode.field("sub_issue", issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSubIssuesParentIssueRemoved(
      sub_issue_id: sub_issue_id,
      parent_issue: parent_issue,
      repository: repository,
      parent_issue_repo: parent_issue_repo,
      organization: organization,
      sender: sender,
      parent_issue_id: parent_issue_id,
      action: action,
      sub_issue: sub_issue,
      installation: installation,
    ),
  )
}

pub fn webhook_sub_issues_parent_issue_removed_encode(
  data: WebhookSubIssuesParentIssueRemoved,
) {
  json.object(
    [
      #("sub_issue_id", json.float(data.sub_issue_id)),
      #("parent_issue", issue_encode(data.parent_issue)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("parent_issue_repo", repository_encode(data.parent_issue_repo)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("parent_issue_id", json.float(data.parent_issue_id)),
      #("action", json.string(data.action)),
      #("sub_issue", issue_encode(data.sub_issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn codespace_decoder() {
  use idle_timeout_notice <- decode.optional_field(
    "idle_timeout_notice",
    None,
    decode.optional(decode.string),
  )
  use recent_folders <- decode.field(
    "recent_folders",
    decode.list(decode.string),
  )
  use retention_period_minutes <- decode.optional_field(
    "retention_period_minutes",
    None,
    decode.optional(decode.int),
  )
  use web_url <- decode.field("web_url", decode.string)
  use machine <- decode.field("machine", nullable_codespace_machine_decoder())
  use pending_operation_disabled_reason <- decode.optional_field(
    "pending_operation_disabled_reason",
    None,
    decode.optional(decode.string),
  )
  use environment_id <- decode.optional_field(
    "environment_id",
    None,
    decode.optional(decode.string),
  )
  use display_name <- decode.optional_field(
    "display_name",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use repository <- decode.field("repository", minimal_repository_decoder())
  use prebuild <- decode.optional_field(
    "prebuild",
    None,
    decode.optional(decode.bool),
  )
  use name <- decode.field("name", decode.string)
  use last_used_at <- decode.field("last_used_at", decode.string)
  use runtime_constraints <- decode.optional_field(
    "runtime_constraints",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use last_known_stop_notice <- decode.optional_field(
    "last_known_stop_notice",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.field("state", decode.string)
  use start_url <- decode.field("start_url", decode.string)
  use stop_url <- decode.field("stop_url", decode.string)
  use owner <- decode.field("owner", simple_user_decoder())
  use billable_owner <- decode.field("billable_owner", simple_user_decoder())
  use location <- decode.field("location", decode.string)
  use idle_timeout_minutes <- decode.optional_field(
    "idle_timeout_minutes",
    None,
    decode.optional(decode.int),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use devcontainer_path <- decode.optional_field(
    "devcontainer_path",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use machines_url <- decode.field("machines_url", decode.string)
  use pulls_url <- decode.optional_field(
    "pulls_url",
    None,
    decode.optional(decode.string),
  )
  use pending_operation <- decode.optional_field(
    "pending_operation",
    None,
    decode.optional(decode.bool),
  )
  use retention_expires_at <- decode.optional_field(
    "retention_expires_at",
    None,
    decode.optional(decode.string),
  )
  use git_status <- decode.field(
    "git_status",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use publish_url <- decode.optional_field(
    "publish_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Codespace(
      idle_timeout_notice: idle_timeout_notice,
      recent_folders: recent_folders,
      retention_period_minutes: retention_period_minutes,
      web_url: web_url,
      machine: machine,
      pending_operation_disabled_reason: pending_operation_disabled_reason,
      environment_id: environment_id,
      display_name: display_name,
      created_at: created_at,
      repository: repository,
      prebuild: prebuild,
      name: name,
      last_used_at: last_used_at,
      runtime_constraints: runtime_constraints,
      url: url,
      last_known_stop_notice: last_known_stop_notice,
      state: state,
      start_url: start_url,
      stop_url: stop_url,
      owner: owner,
      billable_owner: billable_owner,
      location: location,
      idle_timeout_minutes: idle_timeout_minutes,
      updated_at: updated_at,
      devcontainer_path: devcontainer_path,
      id: id,
      machines_url: machines_url,
      pulls_url: pulls_url,
      pending_operation: pending_operation,
      retention_expires_at: retention_expires_at,
      git_status: git_status,
      publish_url: publish_url,
    ),
  )
}

pub fn codespace_encode(data: Codespace) {
  json.object(
    [
      #(
        "idle_timeout_notice",
        json.nullable(data.idle_timeout_notice, json.string),
      ),
      #("recent_folders", json.array(_, json.string)(data.recent_folders)),
      #(
        "retention_period_minutes",
        json.nullable(data.retention_period_minutes, json.int),
      ),
      #("web_url", json.string(data.web_url)),
      #("machine", nullable_codespace_machine_encode(data.machine)),
      #(
        "pending_operation_disabled_reason",
        json.nullable(data.pending_operation_disabled_reason, json.string),
      ),
      #("environment_id", json.nullable(data.environment_id, json.string)),
      #("display_name", json.nullable(data.display_name, json.string)),
      #("created_at", json.string(data.created_at)),
      #("repository", minimal_repository_encode(data.repository)),
      #("prebuild", json.nullable(data.prebuild, json.bool)),
      #("name", json.string(data.name)),
      #("last_used_at", json.string(data.last_used_at)),
      #(
        "runtime_constraints",
        json.nullable(
          data.runtime_constraints,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.string(data.url)),
      #(
        "last_known_stop_notice",
        json.nullable(data.last_known_stop_notice, json.string),
      ),
      #("state", json.string(data.state)),
      #("start_url", json.string(data.start_url)),
      #("stop_url", json.string(data.stop_url)),
      #("owner", simple_user_encode(data.owner)),
      #("billable_owner", simple_user_encode(data.billable_owner)),
      #("location", json.string(data.location)),
      #(
        "idle_timeout_minutes",
        json.nullable(data.idle_timeout_minutes, json.int),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("devcontainer_path", json.nullable(data.devcontainer_path, json.string)),
      #("id", json.int(data.id)),
      #("machines_url", json.string(data.machines_url)),
      #("pulls_url", json.nullable(data.pulls_url, json.string)),
      #("pending_operation", json.nullable(data.pending_operation, json.bool)),
      #(
        "retention_expires_at",
        json.nullable(data.retention_expires_at, json.string),
      ),
      #(
        "git_status",
        fn(_) { panic as "Literal object inside field" }(data.git_status),
      ),
      #("publish_url", json.nullable(data.publish_url, json.string))
    ],
  )
}

pub fn project_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use private <- decode.optional_field(
    "private",
    None,
    decode.optional(decode.bool),
  )
  use owner_url <- decode.field("owner_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use columns_url <- decode.field("columns_url", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use organization_permission <- decode.optional_field(
    "organization_permission",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    Project(
      body: body,
      private: private,
      owner_url: owner_url,
      number: number,
      created_at: created_at,
      name: name,
      creator: creator,
      columns_url: columns_url,
      url: url,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      organization_permission: organization_permission,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn project_encode(data: Project) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("private", json.nullable(data.private, json.bool)),
      #("owner_url", json.string(data.owner_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("columns_url", json.string(data.columns_url)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #(
        "organization_permission",
        json.nullable(data.organization_permission, json.string),
      ),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhooks_membership_decoder() {
  use organization_url <- decode.field("organization_url", decode.string)
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use role <- decode.field("role", decode.string)
  decode.success(
    WebhooksMembership(
      organization_url: organization_url,
      user: user,
      url: url,
      state: state,
      role: role,
    ),
  )
}

pub fn webhooks_membership_encode(data: WebhooksMembership) {
  json.object(
    [
      #("organization_url", json.string(data.organization_url)),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("role", json.string(data.role))
    ],
  )
}

pub fn code_scanning_alert_set_state_decoder() {
  decode.string
}

pub fn code_scanning_alert_set_state_encode(data: CodeScanningAlertSetState) {
  json.string(data)
}

pub fn webhooks_project_card_decoder() {
  use archived <- decode.field("archived", decode.bool)
  use column_id <- decode.field("column_id", decode.int)
  use column_url <- decode.field("column_url", decode.string)
  use content_url <- decode.optional_field(
    "content_url",
    None,
    decode.optional(decode.string),
  )
  use project_url <- decode.field("project_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.optional_field(
    "creator",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use note <- decode.optional_field("note", None, decode.optional(decode.string))
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use after_id <- decode.optional_field(
    "after_id",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    WebhooksProjectCard(
      archived: archived,
      column_id: column_id,
      column_url: column_url,
      content_url: content_url,
      project_url: project_url,
      created_at: created_at,
      creator: creator,
      url: url,
      note: note,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      after_id: after_id,
    ),
  )
}

pub fn webhooks_project_card_encode(data: WebhooksProjectCard) {
  json.object(
    [
      #("archived", json.bool(data.archived)),
      #("column_id", json.int(data.column_id)),
      #("column_url", json.string(data.column_url)),
      #("content_url", json.nullable(data.content_url, json.string)),
      #("project_url", json.string(data.project_url)),
      #("created_at", json.string(data.created_at)),
      #(
        "creator",
        json.nullable(
          data.creator,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.string(data.url)),
      #("note", json.nullable(data.note, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("after_id", json.nullable(data.after_id, json.int))
    ],
  )
}

pub fn webhook_repository_transferred_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryTransferred(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_transferred_encode(data: WebhookRepositoryTransferred) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn actions_cache_list_decoder() {
  use actions_caches <- decode.field(
    "actions_caches",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use total_count <- decode.field("total_count", decode.int)
  decode.success(
    ActionsCacheList(actions_caches: actions_caches, total_count: total_count),
  )
}

pub fn actions_cache_list_encode(data: ActionsCacheList) {
  json.object(
    [
      #(
        "actions_caches",
        json.array(_, fn(_) { panic as "object in array" })(data.actions_caches),
      ),
      #("total_count", json.int(data.total_count))
    ],
  )
}

pub fn webhook_issues_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesReopened(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_reopened_encode(data: WebhookIssuesReopened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn timeline_issue_events_decoder() {
  decode.success(TimelineIssueEvents)
}

pub fn timeline_issue_events_encode(_data: TimelineIssueEvents) {
  json.object([])
}

pub fn webhook_discussion_locked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionLocked(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_locked_encode(data: WebhookDiscussionLocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn api_insights_summary_stats_decoder() {
  use total_request_count <- decode.optional_field(
    "total_request_count",
    None,
    decode.optional(decode.int),
  )
  use rate_limited_request_count <- decode.optional_field(
    "rate_limited_request_count",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    ApiInsightsSummaryStats(
      total_request_count: total_request_count,
      rate_limited_request_count: rate_limited_request_count,
    ),
  )
}

pub fn api_insights_summary_stats_encode(data: ApiInsightsSummaryStats) {
  json.object(
    [
      #("total_request_count", json.nullable(data.total_request_count, json.int)),
      #(
        "rate_limited_request_count",
        json.nullable(data.rate_limited_request_count, json.int),
      )
    ],
  )
}

pub fn webhook_release_unpublished_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use release <- decode.field("release", webhooks_release_one_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleaseUnpublished(
      enterprise: enterprise,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_unpublished_encode(data: WebhookReleaseUnpublished) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("release", webhooks_release_one_encode(data.release)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn classroom_accepted_assignment_decoder() {
  use commit_count <- decode.field("commit_count", decode.int)
  use repository <- decode.field(
    "repository",
    simple_classroom_repository_decoder(),
  )
  use assignment <- decode.field(
    "assignment",
    simple_classroom_assignment_decoder(),
  )
  use passing <- decode.field("passing", decode.bool)
  use grade <- decode.field("grade", decode.string)
  use students <- decode.field(
    "students",
    decode.list(simple_classroom_user_decoder()),
  )
  use submitted <- decode.field("submitted", decode.bool)
  use id <- decode.field("id", decode.int)
  decode.success(
    ClassroomAcceptedAssignment(
      commit_count: commit_count,
      repository: repository,
      assignment: assignment,
      passing: passing,
      grade: grade,
      students: students,
      submitted: submitted,
      id: id,
    ),
  )
}

pub fn classroom_accepted_assignment_encode(data: ClassroomAcceptedAssignment) {
  json.object(
    [
      #("commit_count", json.int(data.commit_count)),
      #("repository", simple_classroom_repository_encode(data.repository)),
      #("assignment", simple_classroom_assignment_encode(data.assignment)),
      #("passing", json.bool(data.passing)),
      #("grade", json.string(data.grade)),
      #("students", json.array(_, simple_classroom_user_encode)(data.students)),
      #("submitted", json.bool(data.submitted)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_sub_issues_parent_issue_added_decoder() {
  use sub_issue_id <- decode.field("sub_issue_id", decode.float)
  use parent_issue <- decode.field("parent_issue", issue_decoder())
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use parent_issue_repo <- decode.field(
    "parent_issue_repo",
    repository_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use parent_issue_id <- decode.field("parent_issue_id", decode.float)
  use action <- decode.field("action", decode.string)
  use sub_issue <- decode.field("sub_issue", issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSubIssuesParentIssueAdded(
      sub_issue_id: sub_issue_id,
      parent_issue: parent_issue,
      repository: repository,
      parent_issue_repo: parent_issue_repo,
      organization: organization,
      sender: sender,
      parent_issue_id: parent_issue_id,
      action: action,
      sub_issue: sub_issue,
      installation: installation,
    ),
  )
}

pub fn webhook_sub_issues_parent_issue_added_encode(
  data: WebhookSubIssuesParentIssueAdded,
) {
  json.object(
    [
      #("sub_issue_id", json.float(data.sub_issue_id)),
      #("parent_issue", issue_encode(data.parent_issue)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("parent_issue_repo", repository_encode(data.parent_issue_repo)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("parent_issue_id", json.float(data.parent_issue_id)),
      #("action", json.string(data.action)),
      #("sub_issue", issue_encode(data.sub_issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_changes_8_decoder() {
  use tier <- decode.field(
    "tier",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(WebhooksChanges8(tier: tier))
}

pub fn webhooks_changes_8_encode(data: WebhooksChanges8) {
  json.object(
    [#("tier", fn(_) { panic as "Literal object inside field" }(data.tier))],
  )
}

pub fn content_directory_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn content_directory_encode(data: ContentDirectory) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn webhook_pull_request_opened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    pull_request_webhook_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestOpened(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_opened_encode(data: WebhookPullRequestOpened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("pull_request", pull_request_webhook_encode(data.pull_request)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_pull_request_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use pull_request <- decode.field(
    "pull_request",
    pull_request_webhook_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestEdited(
      enterprise: enterprise,
      changes: changes,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_edited_encode(data: WebhookPullRequestEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("pull_request", pull_request_webhook_encode(data.pull_request)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_discussion_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionCreated(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_created_encode(data: WebhookDiscussionCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_release_released_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use release <- decode.field("release", webhooks_release_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleaseReleased(
      enterprise: enterprise,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_released_encode(data: WebhookReleaseReleased) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("release", webhooks_release_encode(data.release)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn issue_decoder() {
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.optional_field(
    "assignees",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use number <- decode.field("number", decode.int)
  use closed_by <- decode.optional_field(
    "closed_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use locked <- decode.field("locked", decode.bool)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_decoder()),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", nullable_simple_user_decoder())
  use milestone <- decode.field("milestone", nullable_milestone_decoder())
  use timeline_url <- decode.optional_field(
    "timeline_url",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.field("state", decode.string)
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use comments <- decode.field("comments", decode.int)
  use pull_request <- decode.optional_field(
    "pull_request",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field(
    "labels",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    Issue(
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      closed_at: closed_at,
      body_html: body_html,
      events_url: events_url,
      number: number,
      closed_by: closed_by,
      created_at: created_at,
      body_text: body_text,
      locked: locked,
      repository: repository,
      reactions: reactions,
      user: user,
      author_association: author_association,
      labels_url: labels_url,
      url: url,
      assignee: assignee,
      milestone: milestone,
      timeline_url: timeline_url,
      state: state,
      state_reason: state_reason,
      comments: comments,
      pull_request: pull_request,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn issue_encode(data: Issue) {
  json.object(
    [
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.nullable(data.assignees, json.array(_, simple_user_encode)),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("events_url", json.string(data.events_url)),
      #("number", json.int(data.number)),
      #("closed_by", json.nullable(data.closed_by, nullable_simple_user_encode)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("locked", json.bool(data.locked)),
      #("repository", json.nullable(data.repository, repository_encode)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("assignee", nullable_simple_user_encode(data.assignee)),
      #("milestone", nullable_milestone_encode(data.milestone)),
      #("timeline_url", json.nullable(data.timeline_url, json.string)),
      #("state", json.string(data.state)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("comments", json.int(data.comments)),
      #(
        "pull_request",
        json.nullable(
          data.pull_request,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.array(_, fn(_) { panic as "Oneoas.OneOf in array" })(data.labels),
      )
    ],
  )
}

pub fn git_tree_decoder() {
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use tree <- decode.field(
    "tree",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use truncated <- decode.field("truncated", decode.bool)
  decode.success(GitTree(sha: sha, url: url, tree: tree, truncated: truncated))
}

pub fn git_tree_encode(data: GitTree) {
  json.object(
    [
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("tree", json.array(_, fn(_) { panic as "object in array" })(data.tree)),
      #("truncated", json.bool(data.truncated))
    ],
  )
}

pub fn code_scanning_sarifs_receipt_decoder() {
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use id <- decode.optional_field(
    "id",
    None,
    decode.optional(code_scanning_analysis_sarif_id_decoder()),
  )
  decode.success(CodeScanningSarifsReceipt(url: url, id: id))
}

pub fn code_scanning_sarifs_receipt_encode(data: CodeScanningSarifsReceipt) {
  json.object(
    [
      #("url", json.nullable(data.url, json.string)),
      #("id", json.nullable(data.id, code_scanning_analysis_sarif_id_encode))
    ],
  )
}

pub fn authorization_decoder() {
  use app <- decode.field(
    "app",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use note_url <- decode.optional_field(
    "note_url",
    None,
    decode.optional(decode.string),
  )
  use fingerprint <- decode.optional_field(
    "fingerprint",
    None,
    decode.optional(decode.string),
  )
  use hashed_token <- decode.optional_field(
    "hashed_token",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use token_last_eight <- decode.optional_field(
    "token_last_eight",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use note <- decode.optional_field("note", None, decode.optional(decode.string))
  use updated_at <- decode.field("updated_at", decode.string)
  use token_ <- decode.field("token", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(nullable_scoped_installation_decoder()),
  )
  use id <- decode.field("id", decode.int)
  use expires_at <- decode.optional_field(
    "expires_at",
    None,
    decode.optional(decode.string),
  )
  use scopes <- decode.optional_field(
    "scopes",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    Authorization(
      app: app,
      note_url: note_url,
      fingerprint: fingerprint,
      hashed_token: hashed_token,
      created_at: created_at,
      user: user,
      token_last_eight: token_last_eight,
      url: url,
      note: note,
      updated_at: updated_at,
      token_: token_,
      installation: installation,
      id: id,
      expires_at: expires_at,
      scopes: scopes,
    ),
  )
}

pub fn authorization_encode(data: Authorization) {
  json.object(
    [
      #("app", fn(_) { panic as "Literal object inside field" }(data.app)),
      #("note_url", json.nullable(data.note_url, json.string)),
      #("fingerprint", json.nullable(data.fingerprint, json.string)),
      #("hashed_token", json.nullable(data.hashed_token, json.string)),
      #("created_at", json.string(data.created_at)),
      #("user", json.nullable(data.user, nullable_simple_user_encode)),
      #("token_last_eight", json.nullable(data.token_last_eight, json.string)),
      #("url", json.string(data.url)),
      #("note", json.nullable(data.note, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("token", json.string(data.token_)),
      #(
        "installation",
        json.nullable(data.installation, nullable_scoped_installation_encode),
      ),
      #("id", json.int(data.id)),
      #("expires_at", json.nullable(data.expires_at, json.string)),
      #("scopes", json.nullable(data.scopes, json.array(_, json.string)))
    ],
  )
}

pub fn deploy_key_decoder() {
  use enabled <- decode.optional_field(
    "enabled",
    None,
    decode.optional(decode.bool),
  )
  use last_used <- decode.optional_field(
    "last_used",
    None,
    decode.optional(decode.string),
  )
  use verified <- decode.field("verified", decode.bool)
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use read_only <- decode.field("read_only", decode.bool)
  use added_by <- decode.optional_field(
    "added_by",
    None,
    decode.optional(decode.string),
  )
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use key <- decode.field("key", decode.string)
  decode.success(
    DeployKey(
      enabled: enabled,
      last_used: last_used,
      verified: verified,
      created_at: created_at,
      url: url,
      read_only: read_only,
      added_by: added_by,
      title: title,
      id: id,
      key: key,
    ),
  )
}

pub fn deploy_key_encode(data: DeployKey) {
  json.object(
    [
      #("enabled", json.nullable(data.enabled, json.bool)),
      #("last_used", json.nullable(data.last_used, json.string)),
      #("verified", json.bool(data.verified)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("read_only", json.bool(data.read_only)),
      #("added_by", json.nullable(data.added_by, json.string)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn webhook_repository_renamed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryRenamed(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_renamed_encode(data: WebhookRepositoryRenamed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repo_search_result_item_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.field("has_downloads", decode.bool)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use score <- decode.field("score", decode.float)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use owner <- decode.field("owner", nullable_simple_user_decoder())
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.field("pushed_at", decode.string)
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    RepoSearchResultItem(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      text_matches: text_matches,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      forks_count: forks_count,
      fork: fork,
      git_url: git_url,
      archived: archived,
      private: private,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      has_discussions: has_discussions,
      teams_url: teams_url,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      forks: forks,
      archive_url: archive_url,
      score: score,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      owner: owner,
      allow_merge_commit: allow_merge_commit,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn repo_search_result_item_encode(data: RepoSearchResultItem) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.bool(data.has_downloads)),
      #("blobs_url", json.string(data.blobs_url)),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.string(data.created_at)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("score", json.float(data.score)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #("owner", nullable_simple_user_encode(data.owner)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #("updated_at", json.string(data.updated_at)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.string(data.pushed_at)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn webhook_label_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.field("label", webhooks_label_decoder())
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookLabelCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_label_created_encode(data: WebhookLabelCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", webhooks_label_encode(data.label)),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_alert_decoder() {
  use number <- decode.field("number", decode.int)
  use dismissed_at <- decode.optional_field(
    "dismissed_at",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use ghsa_id <- decode.field("ghsa_id", decode.string)
  use fix_reason <- decode.optional_field(
    "fix_reason",
    None,
    decode.optional(decode.string),
  )
  use affected_package_name <- decode.field(
    "affected_package_name",
    decode.string,
  )
  use fixed_in <- decode.optional_field(
    "fixed_in",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.field("state", decode.string)
  use affected_range <- decode.field("affected_range", decode.string)
  use dismisser <- decode.optional_field(
    "dismisser",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use external_reference <- decode.optional_field(
    "external_reference",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use dismiss_reason <- decode.optional_field(
    "dismiss_reason",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use external_identifier <- decode.field("external_identifier", decode.string)
  use severity <- decode.field("severity", decode.string)
  use fixed_at <- decode.optional_field(
    "fixed_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksAlert(
      number: number,
      dismissed_at: dismissed_at,
      created_at: created_at,
      ghsa_id: ghsa_id,
      fix_reason: fix_reason,
      affected_package_name: affected_package_name,
      fixed_in: fixed_in,
      state: state,
      affected_range: affected_range,
      dismisser: dismisser,
      external_reference: external_reference,
      node_id: node_id,
      dismiss_reason: dismiss_reason,
      id: id,
      external_identifier: external_identifier,
      severity: severity,
      fixed_at: fixed_at,
    ),
  )
}

pub fn webhooks_alert_encode(data: WebhooksAlert) {
  json.object(
    [
      #("number", json.int(data.number)),
      #("dismissed_at", json.nullable(data.dismissed_at, json.string)),
      #("created_at", json.string(data.created_at)),
      #("ghsa_id", json.string(data.ghsa_id)),
      #("fix_reason", json.nullable(data.fix_reason, json.string)),
      #("affected_package_name", json.string(data.affected_package_name)),
      #("fixed_in", json.nullable(data.fixed_in, json.string)),
      #("state", json.string(data.state)),
      #("affected_range", json.string(data.affected_range)),
      #(
        "dismisser",
        json.nullable(
          data.dismisser,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "external_reference",
        json.nullable(data.external_reference, json.string),
      ),
      #("node_id", json.string(data.node_id)),
      #("dismiss_reason", json.nullable(data.dismiss_reason, json.string)),
      #("id", json.int(data.id)),
      #("external_identifier", json.string(data.external_identifier)),
      #("severity", json.string(data.severity)),
      #("fixed_at", json.nullable(data.fixed_at, json.string))
    ],
  )
}

pub fn simple_classroom_decoder() {
  use archived <- decode.field("archived", decode.bool)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    SimpleClassroom(archived: archived, name: name, url: url, id: id),
  )
}

pub fn simple_classroom_encode(data: SimpleClassroom) {
  json.object(
    [
      #("archived", json.bool(data.archived)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhooks_marketplace_purchase_decoder() {
  use billing_cycle <- decode.field("billing_cycle", decode.string)
  use on_free_trial <- decode.field("on_free_trial", decode.bool)
  use plan <- decode.field(
    "plan",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use free_trial_ends_on <- decode.optional_field(
    "free_trial_ends_on",
    None,
    decode.optional(decode.string),
  )
  use account <- decode.field(
    "account",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use unit_count <- decode.field("unit_count", decode.int)
  use next_billing_date <- decode.optional_field(
    "next_billing_date",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksMarketplacePurchase(
      billing_cycle: billing_cycle,
      on_free_trial: on_free_trial,
      plan: plan,
      free_trial_ends_on: free_trial_ends_on,
      account: account,
      unit_count: unit_count,
      next_billing_date: next_billing_date,
    ),
  )
}

pub fn webhooks_marketplace_purchase_encode(data: WebhooksMarketplacePurchase) {
  json.object(
    [
      #("billing_cycle", json.string(data.billing_cycle)),
      #("on_free_trial", json.bool(data.on_free_trial)),
      #("plan", fn(_) { panic as "Literal object inside field" }(data.plan)),
      #(
        "free_trial_ends_on",
        json.nullable(data.free_trial_ends_on, json.string),
      ),
      #(
        "account",
        fn(_) { panic as "Literal object inside field" }(data.account),
      ),
      #("unit_count", json.int(data.unit_count)),
      #("next_billing_date", json.nullable(data.next_billing_date, json.string))
    ],
  )
}

pub fn rate_limit_overview_decoder() {
  use rate <- decode.field("rate", rate_limit_decoder())
  use resources <- decode.field(
    "resources",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(RateLimitOverview(rate: rate, resources: resources))
}

pub fn rate_limit_overview_encode(data: RateLimitOverview) {
  json.object(
    [
      #("rate", rate_limit_encode(data.rate)),
      #(
        "resources",
        fn(_) { panic as "Literal object inside field" }(data.resources),
      )
    ],
  )
}

pub fn webhook_discussion_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionEdited(
      enterprise: enterprise,
      changes: changes,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_edited_encode(data: WebhookDiscussionEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_installation_repositories_added_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories_removed <- decode.field(
    "repositories_removed",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repositories_added <- decode.field(
    "repositories_added",
    webhooks_repositories_added_decoder(),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use repository_selection <- decode.field(
    "repository_selection",
    webhooks_repository_selection_decoder(),
  )
  use installation <- decode.field("installation", installation_decoder())
  use requester <- decode.field("requester", webhooks_user_decoder())
  decode.success(
    WebhookInstallationRepositoriesAdded(
      enterprise: enterprise,
      repositories_removed: repositories_removed,
      repositories_added: repositories_added,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      repository_selection: repository_selection,
      installation: installation,
      requester: requester,
    ),
  )
}

pub fn webhook_installation_repositories_added_encode(
  data: WebhookInstallationRepositoriesAdded,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories_removed",
        json.array(_, fn(_) { panic as "object in array" })(
          data.repositories_removed,
        ),
      ),
      #(
        "repositories_added",
        webhooks_repositories_added_encode(data.repositories_added),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "repository_selection",
        webhooks_repository_selection_encode(data.repository_selection),
      ),
      #("installation", installation_encode(data.installation)),
      #("requester", webhooks_user_encode(data.requester))
    ],
  )
}

pub fn webhook_sponsorship_pending_tier_change_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field("changes", webhooks_changes_8_decoder())
  use effective_date <- decode.optional_field(
    "effective_date",
    None,
    decode.optional(webhooks_effective_date_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use sponsorship <- decode.field("sponsorship", webhooks_sponsorship_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSponsorshipPendingTierChange(
      enterprise: enterprise,
      changes: changes,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      sender: sender,
      sponsorship: sponsorship,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_sponsorship_pending_tier_change_encode(
  data: WebhookSponsorshipPendingTierChange,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("changes", webhooks_changes_8_encode(data.changes)),
      #(
        "effective_date",
        json.nullable(data.effective_date, webhooks_effective_date_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("sponsorship", webhooks_sponsorship_encode(data.sponsorship)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_config_decoder() {
  use content_type <- decode.optional_field(
    "content_type",
    None,
    decode.optional(webhook_config_content_type_decoder()),
  )
  use insecure_ssl <- decode.optional_field(
    "insecure_ssl",
    None,
    decode.optional(webhook_config_insecure_ssl_decoder()),
  )
  use url <- decode.optional_field(
    "url",
    None,
    decode.optional(webhook_config_url_decoder()),
  )
  use secret <- decode.optional_field(
    "secret",
    None,
    decode.optional(webhook_config_secret_decoder()),
  )
  decode.success(
    WebhookConfig(
      content_type: content_type,
      insecure_ssl: insecure_ssl,
      url: url,
      secret: secret,
    ),
  )
}

pub fn webhook_config_encode(data: WebhookConfig) {
  json.object(
    [
      #(
        "content_type",
        json.nullable(data.content_type, webhook_config_content_type_encode),
      ),
      #(
        "insecure_ssl",
        json.nullable(data.insecure_ssl, webhook_config_insecure_ssl_encode),
      ),
      #("url", json.nullable(data.url, webhook_config_url_encode)),
      #("secret", json.nullable(data.secret, webhook_config_secret_encode))
    ],
  )
}

pub fn language_decoder() {
  decode.success(Language)
}

pub fn language_encode(_data: Language) {
  json.object([])
}

pub fn pull_request_simple_decoder() {
  use head <- decode.field(
    "head",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.optional_field(
    "assignees",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use requested_teams <- decode.optional_field(
    "requested_teams",
    None,
    decode.optional(decode.list(team_decoder())),
  )
  use merged_at <- decode.optional_field(
    "merged_at",
    None,
    decode.optional(decode.string),
  )
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use review_comment_url <- decode.field("review_comment_url", decode.string)
  use auto_merge <- decode.field("auto_merge", auto_merge_decoder())
  use issue_url <- decode.field("issue_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use locked <- decode.field("locked", decode.bool)
  use merge_commit_sha <- decode.optional_field(
    "merge_commit_sha",
    None,
    decode.optional(decode.string),
  )
  use review_comments_url <- decode.field("review_comments_url", decode.string)
  use user <- decode.field("user", nullable_simple_user_decoder())
  use commits_url <- decode.field("commits_url", decode.string)
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", nullable_simple_user_decoder())
  use statuses_url <- decode.field("statuses_url", decode.string)
  use milestone <- decode.field("milestone", nullable_milestone_decoder())
  use state <- decode.field("state", decode.string)
  use base_ <- decode.field(
    "base",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use diff_url <- decode.field("diff_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use patch_url <- decode.field("patch_url", decode.string)
  use title <- decode.field("title", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use requested_reviewers <- decode.optional_field(
    "requested_reviewers",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field(
    "labels",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    PullRequestSimple(
      head: head,
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      requested_teams: requested_teams,
      merged_at: merged_at,
      closed_at: closed_at,
      review_comment_url: review_comment_url,
      auto_merge: auto_merge,
      issue_url: issue_url,
      number: number,
      created_at: created_at,
      locked: locked,
      merge_commit_sha: merge_commit_sha,
      review_comments_url: review_comments_url,
      user: user,
      commits_url: commits_url,
      author_association: author_association,
      url: url,
      assignee: assignee,
      statuses_url: statuses_url,
      milestone: milestone,
      state: state,
      base_: base_,
      diff_url: diff_url,
      updated_at: updated_at,
      node_id: node_id,
      patch_url: patch_url,
      title: title,
      links: links,
      id: id,
      html_url: html_url,
      requested_reviewers: requested_reviewers,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn pull_request_simple_encode(data: PullRequestSimple) {
  json.object(
    [
      #("head", fn(_) { panic as "Literal object inside field" }(data.head)),
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.nullable(data.assignees, json.array(_, simple_user_encode)),
      ),
      #("comments_url", json.string(data.comments_url)),
      #(
        "requested_teams",
        json.nullable(data.requested_teams, json.array(_, team_encode)),
      ),
      #("merged_at", json.nullable(data.merged_at, json.string)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("review_comment_url", json.string(data.review_comment_url)),
      #("auto_merge", auto_merge_encode(data.auto_merge)),
      #("issue_url", json.string(data.issue_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("locked", json.bool(data.locked)),
      #("merge_commit_sha", json.nullable(data.merge_commit_sha, json.string)),
      #("review_comments_url", json.string(data.review_comments_url)),
      #("user", nullable_simple_user_encode(data.user)),
      #("commits_url", json.string(data.commits_url)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("assignee", nullable_simple_user_encode(data.assignee)),
      #("statuses_url", json.string(data.statuses_url)),
      #("milestone", nullable_milestone_encode(data.milestone)),
      #("state", json.string(data.state)),
      #("base", fn(_) { panic as "Literal object inside field" }(data.base_)),
      #("diff_url", json.string(data.diff_url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("patch_url", json.string(data.patch_url)),
      #("title", json.string(data.title)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "requested_reviewers",
        json.nullable(
          data.requested_reviewers,
          json.array(_, simple_user_encode),
        ),
      ),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.array(_, fn(_) { panic as "object in array" })(data.labels),
      )
    ],
  )
}

pub fn app_permissions_decoder() {
  use statuses <- decode.optional_field(
    "statuses",
    None,
    decode.optional(decode.string),
  )
  use environments <- decode.optional_field(
    "environments",
    None,
    decode.optional(decode.string),
  )
  use organization_custom_org_roles <- decode.optional_field(
    "organization_custom_org_roles",
    None,
    decode.optional(decode.string),
  )
  use organization_personal_access_tokens <- decode.optional_field(
    "organization_personal_access_tokens",
    None,
    decode.optional(decode.string),
  )
  use starring <- decode.optional_field(
    "starring",
    None,
    decode.optional(decode.string),
  )
  use secrets <- decode.optional_field(
    "secrets",
    None,
    decode.optional(decode.string),
  )
  use organization_hooks <- decode.optional_field(
    "organization_hooks",
    None,
    decode.optional(decode.string),
  )
  use pages <- decode.optional_field(
    "pages",
    None,
    decode.optional(decode.string),
  )
  use organization_events <- decode.optional_field(
    "organization_events",
    None,
    decode.optional(decode.string),
  )
  use interaction_limits <- decode.optional_field(
    "interaction_limits",
    None,
    decode.optional(decode.string),
  )
  use organization_projects <- decode.optional_field(
    "organization_projects",
    None,
    decode.optional(decode.string),
  )
  use profile <- decode.optional_field(
    "profile",
    None,
    decode.optional(decode.string),
  )
  use team_discussions <- decode.optional_field(
    "team_discussions",
    None,
    decode.optional(decode.string),
  )
  use organization_administration <- decode.optional_field(
    "organization_administration",
    None,
    decode.optional(decode.string),
  )
  use checks <- decode.optional_field(
    "checks",
    None,
    decode.optional(decode.string),
  )
  use repository_custom_properties <- decode.optional_field(
    "repository_custom_properties",
    None,
    decode.optional(decode.string),
  )
  use packages <- decode.optional_field(
    "packages",
    None,
    decode.optional(decode.string),
  )
  use deployments <- decode.optional_field(
    "deployments",
    None,
    decode.optional(decode.string),
  )
  use repository_projects <- decode.optional_field(
    "repository_projects",
    None,
    decode.optional(decode.string),
  )
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(decode.string),
  )
  use organization_personal_access_token_requests <- decode.optional_field(
    "organization_personal_access_token_requests",
    None,
    decode.optional(decode.string),
  )
  use organization_self_hosted_runners <- decode.optional_field(
    "organization_self_hosted_runners",
    None,
    decode.optional(decode.string),
  )
  use single_file <- decode.optional_field(
    "single_file",
    None,
    decode.optional(decode.string),
  )
  use workflows <- decode.optional_field(
    "workflows",
    None,
    decode.optional(decode.string),
  )
  use followers <- decode.optional_field(
    "followers",
    None,
    decode.optional(decode.string),
  )
  use gpg_keys <- decode.optional_field(
    "gpg_keys",
    None,
    decode.optional(decode.string),
  )
  use organization_custom_properties <- decode.optional_field(
    "organization_custom_properties",
    None,
    decode.optional(decode.string),
  )
  use organization_plan <- decode.optional_field(
    "organization_plan",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning_alerts <- decode.optional_field(
    "secret_scanning_alerts",
    None,
    decode.optional(decode.string),
  )
  use dependabot_secrets <- decode.optional_field(
    "dependabot_secrets",
    None,
    decode.optional(decode.string),
  )
  use organization_secrets <- decode.optional_field(
    "organization_secrets",
    None,
    decode.optional(decode.string),
  )
  use security_events <- decode.optional_field(
    "security_events",
    None,
    decode.optional(decode.string),
  )
  use git_ssh_keys <- decode.optional_field(
    "git_ssh_keys",
    None,
    decode.optional(decode.string),
  )
  use members <- decode.optional_field(
    "members",
    None,
    decode.optional(decode.string),
  )
  use organization_packages <- decode.optional_field(
    "organization_packages",
    None,
    decode.optional(decode.string),
  )
  use codespaces <- decode.optional_field(
    "codespaces",
    None,
    decode.optional(decode.string),
  )
  use issues <- decode.optional_field(
    "issues",
    None,
    decode.optional(decode.string),
  )
  use contents <- decode.optional_field(
    "contents",
    None,
    decode.optional(decode.string),
  )
  use vulnerability_alerts <- decode.optional_field(
    "vulnerability_alerts",
    None,
    decode.optional(decode.string),
  )
  use repository_hooks <- decode.optional_field(
    "repository_hooks",
    None,
    decode.optional(decode.string),
  )
  use organization_announcement_banners <- decode.optional_field(
    "organization_announcement_banners",
    None,
    decode.optional(decode.string),
  )
  use organization_custom_roles <- decode.optional_field(
    "organization_custom_roles",
    None,
    decode.optional(decode.string),
  )
  use organization_user_blocking <- decode.optional_field(
    "organization_user_blocking",
    None,
    decode.optional(decode.string),
  )
  use actions <- decode.optional_field(
    "actions",
    None,
    decode.optional(decode.string),
  )
  use administration <- decode.optional_field(
    "administration",
    None,
    decode.optional(decode.string),
  )
  use pull_requests <- decode.optional_field(
    "pull_requests",
    None,
    decode.optional(decode.string),
  )
  use organization_copilot_seat_management <- decode.optional_field(
    "organization_copilot_seat_management",
    None,
    decode.optional(decode.string),
  )
  use email_addresses <- decode.optional_field(
    "email_addresses",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    AppPermissions(
      statuses: statuses,
      environments: environments,
      organization_custom_org_roles: organization_custom_org_roles,
      organization_personal_access_tokens: organization_personal_access_tokens,
      starring: starring,
      secrets: secrets,
      organization_hooks: organization_hooks,
      pages: pages,
      organization_events: organization_events,
      interaction_limits: interaction_limits,
      organization_projects: organization_projects,
      profile: profile,
      team_discussions: team_discussions,
      organization_administration: organization_administration,
      checks: checks,
      repository_custom_properties: repository_custom_properties,
      packages: packages,
      deployments: deployments,
      repository_projects: repository_projects,
      metadata: metadata,
      organization_personal_access_token_requests: organization_personal_access_token_requests,
      organization_self_hosted_runners: organization_self_hosted_runners,
      single_file: single_file,
      workflows: workflows,
      followers: followers,
      gpg_keys: gpg_keys,
      organization_custom_properties: organization_custom_properties,
      organization_plan: organization_plan,
      secret_scanning_alerts: secret_scanning_alerts,
      dependabot_secrets: dependabot_secrets,
      organization_secrets: organization_secrets,
      security_events: security_events,
      git_ssh_keys: git_ssh_keys,
      members: members,
      organization_packages: organization_packages,
      codespaces: codespaces,
      issues: issues,
      contents: contents,
      vulnerability_alerts: vulnerability_alerts,
      repository_hooks: repository_hooks,
      organization_announcement_banners: organization_announcement_banners,
      organization_custom_roles: organization_custom_roles,
      organization_user_blocking: organization_user_blocking,
      actions: actions,
      administration: administration,
      pull_requests: pull_requests,
      organization_copilot_seat_management: organization_copilot_seat_management,
      email_addresses: email_addresses,
    ),
  )
}

pub fn app_permissions_encode(data: AppPermissions) {
  json.object(
    [
      #("statuses", json.nullable(data.statuses, json.string)),
      #("environments", json.nullable(data.environments, json.string)),
      #(
        "organization_custom_org_roles",
        json.nullable(data.organization_custom_org_roles, json.string),
      ),
      #(
        "organization_personal_access_tokens",
        json.nullable(data.organization_personal_access_tokens, json.string),
      ),
      #("starring", json.nullable(data.starring, json.string)),
      #("secrets", json.nullable(data.secrets, json.string)),
      #(
        "organization_hooks",
        json.nullable(data.organization_hooks, json.string),
      ),
      #("pages", json.nullable(data.pages, json.string)),
      #(
        "organization_events",
        json.nullable(data.organization_events, json.string),
      ),
      #(
        "interaction_limits",
        json.nullable(data.interaction_limits, json.string),
      ),
      #(
        "organization_projects",
        json.nullable(data.organization_projects, json.string),
      ),
      #("profile", json.nullable(data.profile, json.string)),
      #("team_discussions", json.nullable(data.team_discussions, json.string)),
      #(
        "organization_administration",
        json.nullable(data.organization_administration, json.string),
      ),
      #("checks", json.nullable(data.checks, json.string)),
      #(
        "repository_custom_properties",
        json.nullable(data.repository_custom_properties, json.string),
      ),
      #("packages", json.nullable(data.packages, json.string)),
      #("deployments", json.nullable(data.deployments, json.string)),
      #(
        "repository_projects",
        json.nullable(data.repository_projects, json.string),
      ),
      #("metadata", json.nullable(data.metadata, json.string)),
      #(
        "organization_personal_access_token_requests",
        json.nullable(
          data.organization_personal_access_token_requests,
          json.string,
        ),
      ),
      #(
        "organization_self_hosted_runners",
        json.nullable(data.organization_self_hosted_runners, json.string),
      ),
      #("single_file", json.nullable(data.single_file, json.string)),
      #("workflows", json.nullable(data.workflows, json.string)),
      #("followers", json.nullable(data.followers, json.string)),
      #("gpg_keys", json.nullable(data.gpg_keys, json.string)),
      #(
        "organization_custom_properties",
        json.nullable(data.organization_custom_properties, json.string),
      ),
      #("organization_plan", json.nullable(data.organization_plan, json.string)),
      #(
        "secret_scanning_alerts",
        json.nullable(data.secret_scanning_alerts, json.string),
      ),
      #(
        "dependabot_secrets",
        json.nullable(data.dependabot_secrets, json.string),
      ),
      #(
        "organization_secrets",
        json.nullable(data.organization_secrets, json.string),
      ),
      #("security_events", json.nullable(data.security_events, json.string)),
      #("git_ssh_keys", json.nullable(data.git_ssh_keys, json.string)),
      #("members", json.nullable(data.members, json.string)),
      #(
        "organization_packages",
        json.nullable(data.organization_packages, json.string),
      ),
      #("codespaces", json.nullable(data.codespaces, json.string)),
      #("issues", json.nullable(data.issues, json.string)),
      #("contents", json.nullable(data.contents, json.string)),
      #(
        "vulnerability_alerts",
        json.nullable(data.vulnerability_alerts, json.string),
      ),
      #("repository_hooks", json.nullable(data.repository_hooks, json.string)),
      #(
        "organization_announcement_banners",
        json.nullable(data.organization_announcement_banners, json.string),
      ),
      #(
        "organization_custom_roles",
        json.nullable(data.organization_custom_roles, json.string),
      ),
      #(
        "organization_user_blocking",
        json.nullable(data.organization_user_blocking, json.string),
      ),
      #("actions", json.nullable(data.actions, json.string)),
      #("administration", json.nullable(data.administration, json.string)),
      #("pull_requests", json.nullable(data.pull_requests, json.string)),
      #(
        "organization_copilot_seat_management",
        json.nullable(data.organization_copilot_seat_management, json.string),
      ),
      #("email_addresses", json.nullable(data.email_addresses, json.string))
    ],
  )
}

pub fn simple_check_suite_decoder() {
  use head_branch <- decode.optional_field(
    "head_branch",
    None,
    decode.optional(decode.string),
  )
  use app <- decode.optional_field(
    "app",
    None,
    decode.optional(integration_decoder()),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(minimal_repository_decoder()),
  )
  use head_sha <- decode.optional_field(
    "head_sha",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use after <- decode.optional_field(
    "after",
    None,
    decode.optional(decode.string),
  )
  use pull_requests <- decode.optional_field(
    "pull_requests",
    None,
    decode.optional(decode.list(pull_request_minimal_decoder())),
  )
  use conclusion <- decode.optional_field(
    "conclusion",
    None,
    decode.optional(decode.string),
  )
  use before <- decode.optional_field(
    "before",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    SimpleCheckSuite(
      head_branch: head_branch,
      app: app,
      created_at: created_at,
      repository: repository,
      head_sha: head_sha,
      url: url,
      status: status,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      after: after,
      pull_requests: pull_requests,
      conclusion: conclusion,
      before: before,
    ),
  )
}

pub fn simple_check_suite_encode(data: SimpleCheckSuite) {
  json.object(
    [
      #("head_branch", json.nullable(data.head_branch, json.string)),
      #("app", json.nullable(data.app, integration_encode)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("repository", json.nullable(data.repository, minimal_repository_encode)),
      #("head_sha", json.nullable(data.head_sha, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("status", json.nullable(data.status, json.string)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("id", json.nullable(data.id, json.int)),
      #("after", json.nullable(data.after, json.string)),
      #(
        "pull_requests",
        json.nullable(
          data.pull_requests,
          json.array(_, pull_request_minimal_encode),
        ),
      ),
      #("conclusion", json.nullable(data.conclusion, json.string)),
      #("before", json.nullable(data.before, json.string))
    ],
  )
}

pub fn webhook_fork_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use forkee <- decode.field(
    "forkee",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookFork(
      enterprise: enterprise,
      forkee: forkee,
      repository: repository,
      organization: organization,
      sender: sender,
      installation: installation,
    ),
  )
}

pub fn webhook_fork_encode(data: WebhookFork) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("forkee", fn(_) { panic as "AllOf inside field" }(data.forkee)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn check_run_with_simple_check_suite_decoder() {
  use output <- decode.field(
    "output",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use check_suite <- decode.field("check_suite", simple_check_suite_decoder())
  use app <- decode.field("app", nullable_integration_decoder())
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_simple_decoder()),
  )
  use completed_at <- decode.optional_field(
    "completed_at",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use head_sha <- decode.field("head_sha", decode.string)
  use url <- decode.field("url", decode.string)
  use external_id <- decode.field("external_id", decode.string)
  use started_at <- decode.field("started_at", decode.string)
  use details_url <- decode.field("details_url", decode.string)
  use status <- decode.field("status", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use pull_requests <- decode.field(
    "pull_requests",
    decode.list(pull_request_minimal_decoder()),
  )
  use conclusion <- decode.optional_field(
    "conclusion",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CheckRunWithSimpleCheckSuite(
      output: output,
      check_suite: check_suite,
      app: app,
      deployment: deployment,
      completed_at: completed_at,
      name: name,
      head_sha: head_sha,
      url: url,
      external_id: external_id,
      started_at: started_at,
      details_url: details_url,
      status: status,
      node_id: node_id,
      id: id,
      html_url: html_url,
      pull_requests: pull_requests,
      conclusion: conclusion,
    ),
  )
}

pub fn check_run_with_simple_check_suite_encode(
  data: CheckRunWithSimpleCheckSuite,
) {
  json.object(
    [
      #("output", fn(_) { panic as "Literal object inside field" }(data.output)),
      #("check_suite", simple_check_suite_encode(data.check_suite)),
      #("app", nullable_integration_encode(data.app)),
      #("deployment", json.nullable(data.deployment, deployment_simple_encode)),
      #("completed_at", json.nullable(data.completed_at, json.string)),
      #("name", json.string(data.name)),
      #("head_sha", json.string(data.head_sha)),
      #("url", json.string(data.url)),
      #("external_id", json.string(data.external_id)),
      #("started_at", json.string(data.started_at)),
      #("details_url", json.string(data.details_url)),
      #("status", json.string(data.status)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "pull_requests",
        json.array(_, pull_request_minimal_encode)(data.pull_requests),
      ),
      #("conclusion", json.nullable(data.conclusion, json.string))
    ],
  )
}

pub fn copilot_dotcom_pull_requests_decoder() {
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use total_engaged_users <- decode.optional_field(
    "total_engaged_users",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CopilotDotcomPullRequests(
      repositories: repositories,
      total_engaged_users: total_engaged_users,
    ),
  )
}

pub fn copilot_dotcom_pull_requests_encode(data: CopilotDotcomPullRequests) {
  json.object(
    [
      #(
        "repositories",
        json.nullable(
          data.repositories,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("total_engaged_users", json.nullable(data.total_engaged_users, json.int))
    ],
  )
}

pub fn allowed_actions_decoder() {
  decode.string
}

pub fn allowed_actions_encode(data: AllowedActions) {
  json.string(data)
}

pub fn check_automated_security_fixes_decoder() {
  use enabled <- decode.field("enabled", decode.bool)
  use paused <- decode.field("paused", decode.bool)
  decode.success(CheckAutomatedSecurityFixes(enabled: enabled, paused: paused))
}

pub fn check_automated_security_fixes_encode(data: CheckAutomatedSecurityFixes) {
  json.object(
    [#("enabled", json.bool(data.enabled)), #("paused", json.bool(data.paused))],
  )
}

pub fn team_discussion_decoder() {
  use last_edited_at <- decode.optional_field(
    "last_edited_at",
    None,
    decode.optional(decode.string),
  )
  use body <- decode.field("body", decode.string)
  use private <- decode.field("private", decode.bool)
  use comments_url <- decode.field("comments_url", decode.string)
  use comments_count <- decode.field("comments_count", decode.int)
  use body_html <- decode.field("body_html", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use author <- decode.field("author", nullable_simple_user_decoder())
  use team_url <- decode.field("team_url", decode.string)
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use pinned <- decode.field("pinned", decode.bool)
  use html_url <- decode.field("html_url", decode.string)
  use body_version <- decode.field("body_version", decode.string)
  decode.success(
    TeamDiscussion(
      last_edited_at: last_edited_at,
      body: body,
      private: private,
      comments_url: comments_url,
      comments_count: comments_count,
      body_html: body_html,
      number: number,
      created_at: created_at,
      reactions: reactions,
      author: author,
      team_url: team_url,
      url: url,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      pinned: pinned,
      html_url: html_url,
      body_version: body_version,
    ),
  )
}

pub fn team_discussion_encode(data: TeamDiscussion) {
  json.object(
    [
      #("last_edited_at", json.nullable(data.last_edited_at, json.string)),
      #("body", json.string(data.body)),
      #("private", json.bool(data.private)),
      #("comments_url", json.string(data.comments_url)),
      #("comments_count", json.int(data.comments_count)),
      #("body_html", json.string(data.body_html)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("author", nullable_simple_user_encode(data.author)),
      #("team_url", json.string(data.team_url)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("pinned", json.bool(data.pinned)),
      #("html_url", json.string(data.html_url)),
      #("body_version", json.string(data.body_version))
    ],
  )
}

pub fn webhook_installation_repositories_removed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories_removed <- decode.field(
    "repositories_removed",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repositories_added <- decode.field(
    "repositories_added",
    webhooks_repositories_added_decoder(),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use repository_selection <- decode.field(
    "repository_selection",
    webhooks_repository_selection_decoder(),
  )
  use installation <- decode.field("installation", installation_decoder())
  use requester <- decode.field("requester", webhooks_user_decoder())
  decode.success(
    WebhookInstallationRepositoriesRemoved(
      enterprise: enterprise,
      repositories_removed: repositories_removed,
      repositories_added: repositories_added,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      repository_selection: repository_selection,
      installation: installation,
      requester: requester,
    ),
  )
}

pub fn webhook_installation_repositories_removed_encode(
  data: WebhookInstallationRepositoriesRemoved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories_removed",
        json.array(_, fn(_) { panic as "object in array" })(
          data.repositories_removed,
        ),
      ),
      #(
        "repositories_added",
        webhooks_repositories_added_encode(data.repositories_added),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "repository_selection",
        webhooks_repository_selection_encode(data.repository_selection),
      ),
      #("installation", installation_encode(data.installation)),
      #("requester", webhooks_user_encode(data.requester))
    ],
  )
}

pub fn starred_repository_decoder() {
  use repo <- decode.field("repo", repository_decoder())
  use starred_at <- decode.field("starred_at", decode.string)
  decode.success(StarredRepository(repo: repo, starred_at: starred_at))
}

pub fn starred_repository_encode(data: StarredRepository) {
  json.object(
    [
      #("repo", repository_encode(data.repo)),
      #("starred_at", json.string(data.starred_at))
    ],
  )
}

pub fn code_scanning_analysis_tool_version_decoder() {
  decode.string
}

pub fn code_scanning_analysis_tool_version_encode(
  data: CodeScanningAnalysisToolVersion,
) {
  json.string(data)
}

pub fn webhook_label_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.field("label", webhooks_label_decoder())
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookLabelEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_label_edited_encode(data: WebhookLabelEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", webhooks_label_encode(data.label)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_analysis_decoder() {
  use commit_sha <- decode.field(
    "commit_sha",
    code_scanning_analysis_commit_sha_decoder(),
  )
  use results_count <- decode.field("results_count", decode.int)
  use rules_count <- decode.field("rules_count", decode.int)
  use error <- decode.field("error", decode.string)
  use created_at <- decode.field(
    "created_at",
    code_scanning_analysis_created_at_decoder(),
  )
  use url <- decode.field("url", code_scanning_analysis_url_decoder())
  use ref <- decode.field("ref", code_scanning_ref_decoder())
  use environment <- decode.field(
    "environment",
    code_scanning_analysis_environment_decoder(),
  )
  use deletable <- decode.field("deletable", decode.bool)
  use tool <- decode.field("tool", code_scanning_analysis_tool_decoder())
  use sarif_id <- decode.field(
    "sarif_id",
    code_scanning_analysis_sarif_id_decoder(),
  )
  use id <- decode.field("id", decode.int)
  use analysis_key <- decode.field(
    "analysis_key",
    code_scanning_analysis_analysis_key_decoder(),
  )
  use warning <- decode.field("warning", decode.string)
  use category <- decode.optional_field(
    "category",
    None,
    decode.optional(code_scanning_analysis_category_decoder()),
  )
  decode.success(
    CodeScanningAnalysis(
      commit_sha: commit_sha,
      results_count: results_count,
      rules_count: rules_count,
      error: error,
      created_at: created_at,
      url: url,
      ref: ref,
      environment: environment,
      deletable: deletable,
      tool: tool,
      sarif_id: sarif_id,
      id: id,
      analysis_key: analysis_key,
      warning: warning,
      category: category,
    ),
  )
}

pub fn code_scanning_analysis_encode(data: CodeScanningAnalysis) {
  json.object(
    [
      #("commit_sha", code_scanning_analysis_commit_sha_encode(data.commit_sha)),
      #("results_count", json.int(data.results_count)),
      #("rules_count", json.int(data.rules_count)),
      #("error", json.string(data.error)),
      #("created_at", code_scanning_analysis_created_at_encode(data.created_at)),
      #("url", code_scanning_analysis_url_encode(data.url)),
      #("ref", code_scanning_ref_encode(data.ref)),
      #(
        "environment",
        code_scanning_analysis_environment_encode(data.environment),
      ),
      #("deletable", json.bool(data.deletable)),
      #("tool", code_scanning_analysis_tool_encode(data.tool)),
      #("sarif_id", code_scanning_analysis_sarif_id_encode(data.sarif_id)),
      #("id", json.int(data.id)),
      #(
        "analysis_key",
        code_scanning_analysis_analysis_key_encode(data.analysis_key),
      ),
      #("warning", json.string(data.warning)),
      #(
        "category",
        json.nullable(data.category, code_scanning_analysis_category_encode),
      )
    ],
  )
}

pub fn pull_request_merge_result_decoder() {
  use message <- decode.field("message", decode.string)
  use sha <- decode.field("sha", decode.string)
  use merged <- decode.field("merged", decode.bool)
  decode.success(
    PullRequestMergeResult(message: message, sha: sha, merged: merged),
  )
}

pub fn pull_request_merge_result_encode(data: PullRequestMergeResult) {
  json.object(
    [
      #("message", json.string(data.message)),
      #("sha", json.string(data.sha)),
      #("merged", json.bool(data.merged))
    ],
  )
}

pub fn oidc_custom_sub_decoder() {
  use include_claim_keys <- decode.field(
    "include_claim_keys",
    decode.list(decode.string),
  )
  decode.success(OidcCustomSub(include_claim_keys: include_claim_keys))
}

pub fn oidc_custom_sub_encode(data: OidcCustomSub) {
  json.object(
    [
      #(
        "include_claim_keys",
        json.array(_, json.string)(data.include_claim_keys),
      )
    ],
  )
}

pub fn content_submodule_decoder() {
  use size <- decode.field("size", decode.int)
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use path_ <- decode.field("path", decode.string)
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use submodule_git_url <- decode.field("submodule_git_url", decode.string)
  use download_url <- decode.optional_field(
    "download_url",
    None,
    decode.optional(decode.string),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use type_ <- decode.field("type", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ContentSubmodule(
      size: size,
      git_url: git_url,
      path_: path_,
      name: name,
      sha: sha,
      url: url,
      submodule_git_url: submodule_git_url,
      download_url: download_url,
      links: links,
      type_: type_,
      html_url: html_url,
    ),
  )
}

pub fn content_submodule_encode(data: ContentSubmodule) {
  json.object(
    [
      #("size", json.int(data.size)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("path", json.string(data.path_)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("submodule_git_url", json.string(data.submodule_git_url)),
      #("download_url", json.nullable(data.download_url, json.string)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("type", json.string(data.type_)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn git_ref_decoder() {
  use url <- decode.field("url", decode.string)
  use ref <- decode.field("ref", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use object <- decode.field(
    "object",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(GitRef(url: url, ref: ref, node_id: node_id, object: object))
}

pub fn git_ref_encode(data: GitRef) {
  json.object(
    [
      #("url", json.string(data.url)),
      #("ref", json.string(data.ref)),
      #("node_id", json.string(data.node_id)),
      #("object", fn(_) { panic as "Literal object inside field" }(data.object))
    ],
  )
}

pub fn pages_source_hash_decoder() {
  use branch <- decode.field("branch", decode.string)
  use path_ <- decode.field("path", decode.string)
  decode.success(PagesSourceHash(branch: branch, path_: path_))
}

pub fn pages_source_hash_encode(data: PagesSourceHash) {
  json.object(
    [#("branch", json.string(data.branch)), #("path", json.string(data.path_))],
  )
}

pub fn webhook_discussion_transferred_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionTransferred(
      enterprise: enterprise,
      changes: changes,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_transferred_encode(data: WebhookDiscussionTransferred) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_update_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleUpdate(parameters: parameters, type_: type_))
}

pub fn repository_rule_update_encode(data: RepositoryRuleUpdate) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn code_scanning_variant_analysis_repository_decoder() {
  use private <- decode.field("private", decode.bool)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use name <- decode.field("name", decode.string)
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use full_name <- decode.field("full_name", decode.string)
  decode.success(
    CodeScanningVariantAnalysisRepository(
      private: private,
      stargazers_count: stargazers_count,
      name: name,
      updated_at: updated_at,
      id: id,
      full_name: full_name,
    ),
  )
}

pub fn code_scanning_variant_analysis_repository_encode(
  data: CodeScanningVariantAnalysisRepository,
) {
  json.object(
    [
      #("private", json.bool(data.private)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("name", json.string(data.name)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("id", json.int(data.id)),
      #("full_name", json.string(data.full_name))
    ],
  )
}

pub fn runner_label_decoder() {
  use name <- decode.field("name", decode.string)
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  decode.success(RunnerLabel(name: name, type_: type_, id: id))
}

pub fn runner_label_encode(data: RunnerLabel) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("type", json.nullable(data.type_, json.string)),
      #("id", json.nullable(data.id, json.int))
    ],
  )
}

pub fn secret_scanning_location_pull_request_review_comment_decoder() {
  use pull_request_review_comment_url <- decode.field(
    "pull_request_review_comment_url",
    decode.string,
  )
  decode.success(
    SecretScanningLocationPullRequestReviewComment(
      pull_request_review_comment_url: pull_request_review_comment_url,
    ),
  )
}

pub fn secret_scanning_location_pull_request_review_comment_encode(
  data: SecretScanningLocationPullRequestReviewComment,
) {
  json.object(
    [
      #(
        "pull_request_review_comment_url",
        json.string(data.pull_request_review_comment_url),
      )
    ],
  )
}

pub fn label_search_result_item_decoder() {
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use default <- decode.field("default", decode.bool)
  use color <- decode.field("color", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use score <- decode.field("score", decode.float)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    LabelSearchResultItem(
      text_matches: text_matches,
      default: default,
      color: color,
      name: name,
      url: url,
      score: score,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn label_search_result_item_encode(data: LabelSearchResultItem) {
  json.object(
    [
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("default", json.bool(data.default)),
      #("color", json.string(data.color)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("score", json.float(data.score)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn code_scanning_ref_decoder() {
  decode.string
}

pub fn code_scanning_ref_encode(data: CodeScanningRef) {
  json.string(data)
}

pub fn commit_decoder() {
  use comments_url <- decode.field("comments_url", decode.string)
  use parents <- decode.field(
    "parents",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use committer <- decode.field(
    "committer",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use author <- decode.field(
    "author",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use files <- decode.optional_field(
    "files",
    None,
    decode.optional(decode.list(diff_entry_decoder())),
  )
  use node_id <- decode.field("node_id", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use stats <- decode.optional_field(
    "stats",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    Commit(
      comments_url: comments_url,
      parents: parents,
      committer: committer,
      author: author,
      sha: sha,
      url: url,
      commit: commit,
      files: files,
      node_id: node_id,
      html_url: html_url,
      stats: stats,
    ),
  )
}

pub fn commit_encode(data: Commit) {
  json.object(
    [
      #("comments_url", json.string(data.comments_url)),
      #(
        "parents",
        json.array(_, fn(_) { panic as "object in array" })(data.parents),
      ),
      #("committer", fn(_) { panic as "OneOf inside field" }(data.committer)),
      #("author", fn(_) { panic as "OneOf inside field" }(data.author)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit)),
      #("files", json.nullable(data.files, json.array(_, diff_entry_encode))),
      #("node_id", json.string(data.node_id)),
      #("html_url", json.string(data.html_url)),
      #(
        "stats",
        json.nullable(
          data.stats,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_pull_request_unassigned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(webhooks_user_mannequin_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestUnassigned(
      enterprise: enterprise,
      number: number,
      repository: repository,
      assignee: assignee,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_unassigned_encode(data: WebhookPullRequestUnassigned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("assignee", json.nullable(data.assignee, webhooks_user_mannequin_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_project_column_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use project_column <- decode.field(
    "project_column",
    webhooks_project_column_decoder(),
  )
  decode.success(
    WebhookProjectColumnEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      project_column: project_column,
    ),
  )
}

pub fn webhook_project_column_edited_encode(data: WebhookProjectColumnEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("project_column", webhooks_project_column_encode(data.project_column))
    ],
  )
}

pub fn webhooks_issue_decoder() {
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.field(
    "assignees",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use locked <- decode.optional_field(
    "locked",
    None,
    decode.optional(decode.bool),
  )
  use reactions <- decode.field(
    "reactions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author_association <- decode.field("author_association", decode.string)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use timeline_url <- decode.optional_field(
    "timeline_url",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(decode.string),
  )
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use comments <- decode.field("comments", decode.int)
  use pull_request <- decode.optional_field(
    "pull_request",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.optional_field(
    "labels",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  decode.success(
    WebhooksIssue(
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      closed_at: closed_at,
      events_url: events_url,
      number: number,
      created_at: created_at,
      locked: locked,
      reactions: reactions,
      user: user,
      author_association: author_association,
      labels_url: labels_url,
      url: url,
      assignee: assignee,
      milestone: milestone,
      timeline_url: timeline_url,
      state: state,
      state_reason: state_reason,
      comments: comments,
      pull_request: pull_request,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn webhooks_issue_encode(data: WebhooksIssue) {
  json.object(
    [
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.array(_, fn(_) { panic as "object in array" })(data.assignees),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("events_url", json.string(data.events_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("locked", json.nullable(data.locked, json.bool)),
      #(
        "reactions",
        fn(_) { panic as "Literal object inside field" }(data.reactions),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("author_association", json.string(data.author_association)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #(
        "assignee",
        json.nullable(
          data.assignee,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "milestone",
        json.nullable(
          data.milestone,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("timeline_url", json.nullable(data.timeline_url, json.string)),
      #("state", json.nullable(data.state, json.string)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("comments", json.int(data.comments)),
      #(
        "pull_request",
        json.nullable(
          data.pull_request,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "performed_via_github_app",
        json.nullable(
          data.performed_via_github_app,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.nullable(
          data.labels,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      )
    ],
  )
}

pub fn alert_updated_at_decoder() {
  decode.string
}

pub fn alert_updated_at_encode(data: AlertUpdatedAt) {
  json.string(data)
}

pub fn dependabot_public_key_decoder() {
  use key_id <- decode.field("key_id", decode.string)
  use key <- decode.field("key", decode.string)
  decode.success(DependabotPublicKey(key_id: key_id, key: key))
}

pub fn dependabot_public_key_encode(data: DependabotPublicKey) {
  json.object(
    [#("key_id", json.string(data.key_id)), #("key", json.string(data.key))],
  )
}

pub fn environment_approvals_decoder() {
  use environments <- decode.field(
    "environments",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use user <- decode.field("user", simple_user_decoder())
  use state <- decode.field("state", decode.string)
  use comment <- decode.field("comment", decode.string)
  decode.success(
    EnvironmentApprovals(
      environments: environments,
      user: user,
      state: state,
      comment: comment,
    ),
  )
}

pub fn environment_approvals_encode(data: EnvironmentApprovals) {
  json.object(
    [
      #(
        "environments",
        json.array(_, fn(_) { panic as "object in array" })(data.environments),
      ),
      #("user", simple_user_encode(data.user)),
      #("state", json.string(data.state)),
      #("comment", json.string(data.comment))
    ],
  )
}

pub fn webhook_deployment_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use deployment <- decode.field(
    "deployment",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.optional_field(
    "workflow_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow <- decode.field("workflow", webhooks_workflow_decoder())
  decode.success(
    WebhookDeploymentCreated(
      enterprise: enterprise,
      deployment: deployment,
      repository: repository,
      workflow_run: workflow_run,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow: workflow,
    ),
  )
}

pub fn webhook_deployment_created_encode(data: WebhookDeploymentCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "deployment",
        fn(_) { panic as "Literal object inside field" }(data.deployment),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        json.nullable(
          data.workflow_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("workflow", webhooks_workflow_encode(data.workflow))
    ],
  )
}

pub fn minimal_repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.optional_field(
    "default_branch",
    None,
    decode.optional(decode.string),
  )
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.optional_field("size", None, decode.optional(decode.int))
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.optional_field(
    "license",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use forks_count <- decode.optional_field(
    "forks_count",
    None,
    decode.optional(decode.int),
  )
  use fork <- decode.field("fork", decode.bool)
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use archived <- decode.optional_field(
    "archived",
    None,
    decode.optional(decode.bool),
  )
  use private <- decode.field("private", decode.bool)
  use security_and_analysis <- decode.optional_field(
    "security_and_analysis",
    None,
    decode.optional(security_and_analysis_decoder()),
  )
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.optional_field(
    "has_downloads",
    None,
    decode.optional(decode.bool),
  )
  use blobs_url <- decode.field("blobs_url", decode.string)
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use watchers_count <- decode.optional_field(
    "watchers_count",
    None,
    decode.optional(decode.int),
  )
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.optional_field(
    "stargazers_count",
    None,
    decode.optional(decode.int),
  )
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.optional_field(
    "clone_url",
    None,
    decode.optional(decode.string),
  )
  use code_of_conduct <- decode.optional_field(
    "code_of_conduct",
    None,
    decode.optional(code_of_conduct_decoder()),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.optional_field(
    "open_issues",
    None,
    decode.optional(decode.int),
  )
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use forks <- decode.optional_field("forks", None, decode.optional(decode.int))
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use owner <- decode.field("owner", simple_user_decoder())
  use role_name <- decode.optional_field(
    "role_name",
    None,
    decode.optional(decode.string),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.optional_field(
    "has_wiki",
    None,
    decode.optional(decode.bool),
  )
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.optional_field(
    "watchers",
    None,
    decode.optional(decode.int),
  )
  use node_id <- decode.field("node_id", decode.string)
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.optional_field(
    "ssh_url",
    None,
    decode.optional(decode.string),
  )
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use subscribers_count <- decode.optional_field(
    "subscribers_count",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.optional_field(
    "svn_url",
    None,
    decode.optional(decode.string),
  )
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.optional_field(
    "disabled",
    None,
    decode.optional(decode.bool),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use pulls_url <- decode.field("pulls_url", decode.string)
  use network_count <- decode.optional_field(
    "network_count",
    None,
    decode.optional(decode.int),
  )
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.optional_field(
    "has_projects",
    None,
    decode.optional(decode.bool),
  )
  use has_pages <- decode.optional_field(
    "has_pages",
    None,
    decode.optional(decode.bool),
  )
  use open_issues_count <- decode.optional_field(
    "open_issues_count",
    None,
    decode.optional(decode.int),
  )
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.optional_field(
    "has_issues",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    MinimalRepository(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      forks_count: forks_count,
      fork: fork,
      git_url: git_url,
      archived: archived,
      private: private,
      security_and_analysis: security_and_analysis,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      has_discussions: has_discussions,
      teams_url: teams_url,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      code_of_conduct: code_of_conduct,
      homepage: homepage,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      owner: owner,
      role_name: role_name,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      subscribers_count: subscribers_count,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      pulls_url: pulls_url,
      network_count: network_count,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn minimal_repository_encode(data: MinimalRepository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.nullable(data.default_branch, json.string)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.nullable(data.size, json.int)),
      #("forks_url", json.string(data.forks_url)),
      #(
        "license",
        json.nullable(
          data.license,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #("forks_count", json.nullable(data.forks_count, json.int)),
      #("fork", json.bool(data.fork)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("archived", json.nullable(data.archived, json.bool)),
      #("private", json.bool(data.private)),
      #(
        "security_and_analysis",
        json.nullable(data.security_and_analysis, security_and_analysis_encode),
      ),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.nullable(data.has_downloads, json.bool)),
      #("blobs_url", json.string(data.blobs_url)),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #("watchers_count", json.nullable(data.watchers_count, json.int)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.nullable(data.stargazers_count, json.int)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.nullable(data.clone_url, json.string)),
      #(
        "code_of_conduct",
        json.nullable(data.code_of_conduct, code_of_conduct_encode),
      ),
      #("homepage", json.nullable(data.homepage, json.string)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.nullable(data.open_issues, json.int)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #("forks", json.nullable(data.forks, json.int)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("owner", simple_user_encode(data.owner)),
      #("role_name", json.nullable(data.role_name, json.string)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.nullable(data.has_wiki, json.bool)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.nullable(data.watchers, json.int)),
      #("node_id", json.string(data.node_id)),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.nullable(data.ssh_url, json.string)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("subscribers_count", json.nullable(data.subscribers_count, json.int)),
      #("id", json.int(data.id)),
      #("svn_url", json.nullable(data.svn_url, json.string)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.nullable(data.disabled, json.bool)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("pulls_url", json.string(data.pulls_url)),
      #("network_count", json.nullable(data.network_count, json.int)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.nullable(data.has_projects, json.bool)),
      #("has_pages", json.nullable(data.has_pages, json.bool)),
      #("open_issues_count", json.nullable(data.open_issues_count, json.int)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.nullable(data.has_issues, json.bool))
    ],
  )
}

pub fn webhooks_issue_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use issue_url <- decode.field("issue_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.field(
    "reactions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author_association <- decode.field("author_association", decode.string)
  use url <- decode.field("url", decode.string)
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    integration_decoder(),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksIssueComment(
      body: body,
      issue_url: issue_url,
      created_at: created_at,
      reactions: reactions,
      user: user,
      author_association: author_association,
      url: url,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_issue_comment_encode(data: WebhooksIssueComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("issue_url", json.string(data.issue_url)),
      #("created_at", json.string(data.created_at)),
      #(
        "reactions",
        fn(_) { panic as "Literal object inside field" }(data.reactions),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("author_association", json.string(data.author_association)),
      #("url", json.string(data.url)),
      #(
        "performed_via_github_app",
        integration_encode(data.performed_via_github_app),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_secret_scanning_alert_location_created_decoder() {
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use location <- decode.field("location", secret_scanning_location_decoder())
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", secret_scanning_alert_webhook_decoder())
  decode.success(
    WebhookSecretScanningAlertLocationCreated(
      repository: repository,
      organization: organization,
      sender: sender,
      location: location,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_secret_scanning_alert_location_created_encode(
  data: WebhookSecretScanningAlertLocationCreated,
) {
  json.object(
    [
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("location", secret_scanning_location_encode(data.location)),
      #("action", json.nullable(data.action, json.string)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", secret_scanning_alert_webhook_encode(data.alert))
    ],
  )
}

pub fn nullable_team_simple_decoder() {
  use ldap_dn <- decode.optional_field(
    "ldap_dn",
    None,
    decode.optional(decode.string),
  )
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.field("members_url", decode.string)
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use url <- decode.field("url", decode.string)
  use permission <- decode.field("permission", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    NullableTeamSimple(
      ldap_dn: ldap_dn,
      privacy: privacy,
      members_url: members_url,
      name: name,
      slug: slug,
      url: url,
      permission: permission,
      node_id: node_id,
      repositories_url: repositories_url,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn nullable_team_simple_encode(data: NullableTeamSimple) {
  json.object(
    [
      #("ldap_dn", json.nullable(data.ldap_dn, json.string)),
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.string(data.members_url)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("url", json.string(data.url)),
      #("permission", json.string(data.permission)),
      #("node_id", json.string(data.node_id)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhooks_project_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use owner_url <- decode.field("owner_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use creator <- decode.optional_field(
    "creator",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use columns_url <- decode.field("columns_url", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksProject(
      body: body,
      owner_url: owner_url,
      number: number,
      created_at: created_at,
      name: name,
      creator: creator,
      columns_url: columns_url,
      url: url,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_project_encode(data: WebhooksProject) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("owner_url", json.string(data.owner_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #(
        "creator",
        json.nullable(
          data.creator,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("columns_url", json.string(data.columns_url)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_branch_protection_rule_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use rule <- decode.field("rule", webhooks_rule_decoder())
  decode.success(
    WebhookBranchProtectionRuleCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      rule: rule,
    ),
  )
}

pub fn webhook_branch_protection_rule_created_encode(
  data: WebhookBranchProtectionRuleCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("rule", webhooks_rule_encode(data.rule))
    ],
  )
}

pub fn copilot_usage_metrics_decoder() {
  use breakdown <- decode.optional_field(
    "breakdown",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use total_lines_accepted <- decode.optional_field(
    "total_lines_accepted",
    None,
    decode.optional(decode.int),
  )
  use total_suggestions_count <- decode.optional_field(
    "total_suggestions_count",
    None,
    decode.optional(decode.int),
  )
  use total_lines_suggested <- decode.optional_field(
    "total_lines_suggested",
    None,
    decode.optional(decode.int),
  )
  use total_active_users <- decode.optional_field(
    "total_active_users",
    None,
    decode.optional(decode.int),
  )
  use total_chat_turns <- decode.optional_field(
    "total_chat_turns",
    None,
    decode.optional(decode.int),
  )
  use total_chat_acceptances <- decode.optional_field(
    "total_chat_acceptances",
    None,
    decode.optional(decode.int),
  )
  use total_acceptances_count <- decode.optional_field(
    "total_acceptances_count",
    None,
    decode.optional(decode.int),
  )
  use day <- decode.field("day", decode.string)
  use total_active_chat_users <- decode.optional_field(
    "total_active_chat_users",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CopilotUsageMetrics(
      breakdown: breakdown,
      total_lines_accepted: total_lines_accepted,
      total_suggestions_count: total_suggestions_count,
      total_lines_suggested: total_lines_suggested,
      total_active_users: total_active_users,
      total_chat_turns: total_chat_turns,
      total_chat_acceptances: total_chat_acceptances,
      total_acceptances_count: total_acceptances_count,
      day: day,
      total_active_chat_users: total_active_chat_users,
    ),
  )
}

pub fn copilot_usage_metrics_encode(data: CopilotUsageMetrics) {
  json.object(
    [
      #(
        "breakdown",
        json.nullable(
          data.breakdown,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "total_lines_accepted",
        json.nullable(data.total_lines_accepted, json.int),
      ),
      #(
        "total_suggestions_count",
        json.nullable(data.total_suggestions_count, json.int),
      ),
      #(
        "total_lines_suggested",
        json.nullable(data.total_lines_suggested, json.int),
      ),
      #("total_active_users", json.nullable(data.total_active_users, json.int)),
      #("total_chat_turns", json.nullable(data.total_chat_turns, json.int)),
      #(
        "total_chat_acceptances",
        json.nullable(data.total_chat_acceptances, json.int),
      ),
      #(
        "total_acceptances_count",
        json.nullable(data.total_acceptances_count, json.int),
      ),
      #("day", json.string(data.day)),
      #(
        "total_active_chat_users",
        json.nullable(data.total_active_chat_users, json.int),
      )
    ],
  )
}

pub fn webhooks_release_one_decoder() {
  use draft <- decode.field("draft", decode.bool)
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assets <- decode.field(
    "assets",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use prerelease <- decode.field("prerelease", decode.bool)
  use published_at <- decode.optional_field(
    "published_at",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author <- decode.optional_field(
    "author",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use tag_name <- decode.field("tag_name", decode.string)
  use zipball_url <- decode.optional_field(
    "zipball_url",
    None,
    decode.optional(decode.string),
  )
  use upload_url <- decode.field("upload_url", decode.string)
  use assets_url <- decode.field("assets_url", decode.string)
  use tarball_url <- decode.optional_field(
    "tarball_url",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use discussion_url <- decode.optional_field(
    "discussion_url",
    None,
    decode.optional(decode.string),
  )
  use target_commitish <- decode.field("target_commitish", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksRelease1(
      draft: draft,
      body: body,
      assets: assets,
      prerelease: prerelease,
      published_at: published_at,
      created_at: created_at,
      reactions: reactions,
      author: author,
      name: name,
      url: url,
      tag_name: tag_name,
      zipball_url: zipball_url,
      upload_url: upload_url,
      assets_url: assets_url,
      tarball_url: tarball_url,
      node_id: node_id,
      discussion_url: discussion_url,
      target_commitish: target_commitish,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_release_one_encode(data: WebhooksRelease1) {
  json.object(
    [
      #("draft", json.bool(data.draft)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assets",
        json.array(_, fn(_) { panic as "object in array" })(data.assets),
      ),
      #("prerelease", json.bool(data.prerelease)),
      #("published_at", json.nullable(data.published_at, json.string)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #(
        "reactions",
        json.nullable(
          data.reactions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "author",
        json.nullable(
          data.author,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("tag_name", json.string(data.tag_name)),
      #("zipball_url", json.nullable(data.zipball_url, json.string)),
      #("upload_url", json.string(data.upload_url)),
      #("assets_url", json.string(data.assets_url)),
      #("tarball_url", json.nullable(data.tarball_url, json.string)),
      #("node_id", json.string(data.node_id)),
      #("discussion_url", json.nullable(data.discussion_url, json.string)),
      #("target_commitish", json.string(data.target_commitish)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_repository_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_edited_encode(data: WebhookRepositoryEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_pull_request_review_submitted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use review <- decode.field("review", webhooks_review_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReviewSubmitted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      review: review,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_review_submitted_encode(
  data: WebhookPullRequestReviewSubmitted,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #("review", webhooks_review_encode(data.review)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn nullable_repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use allow_update_branch <- decode.optional_field(
    "allow_update_branch",
    None,
    decode.optional(decode.bool),
  )
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.field("has_downloads", decode.bool)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use squash_merge_commit_message <- decode.optional_field(
    "squash_merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use merge_commit_message <- decode.optional_field(
    "merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use use_squash_pr_title_as_default <- decode.optional_field(
    "use_squash_pr_title_as_default",
    None,
    decode.optional(decode.bool),
  )
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use squash_merge_commit_title <- decode.optional_field(
    "squash_merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use merge_commit_title <- decode.optional_field(
    "merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use anonymous_access_enabled <- decode.optional_field(
    "anonymous_access_enabled",
    None,
    decode.optional(decode.bool),
  )
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    NullableRepository(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      forks_count: forks_count,
      fork: fork,
      allow_update_branch: allow_update_branch,
      git_url: git_url,
      archived: archived,
      private: private,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      squash_merge_commit_message: squash_merge_commit_message,
      has_discussions: has_discussions,
      teams_url: teams_url,
      merge_commit_message: merge_commit_message,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      use_squash_pr_title_as_default: use_squash_pr_title_as_default,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      owner: owner,
      starred_at: starred_at,
      allow_merge_commit: allow_merge_commit,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      squash_merge_commit_title: squash_merge_commit_title,
      merge_commit_title: merge_commit_title,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      anonymous_access_enabled: anonymous_access_enabled,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn nullable_repository_encode(data: NullableRepository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #(
        "allow_update_branch",
        json.nullable(data.allow_update_branch, json.bool),
      ),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.bool(data.has_downloads)),
      #("blobs_url", json.string(data.blobs_url)),
      #(
        "squash_merge_commit_message",
        json.nullable(data.squash_merge_commit_message, json.string),
      ),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #(
        "merge_commit_message",
        json.nullable(data.merge_commit_message, json.string),
      ),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #(
        "use_squash_pr_title_as_default",
        json.nullable(data.use_squash_pr_title_as_default, json.bool),
      ),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #("owner", simple_user_encode(data.owner)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #(
        "squash_merge_commit_title",
        json.nullable(data.squash_merge_commit_title, json.string),
      ),
      #(
        "merge_commit_title",
        json.nullable(data.merge_commit_title, json.string),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #(
        "anonymous_access_enabled",
        json.nullable(data.anonymous_access_enabled, json.bool),
      ),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn webhook_pull_request_review_thread_resolved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use thread <- decode.field(
    "thread",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReviewThreadResolved(
      enterprise: enterprise,
      thread: thread,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_review_thread_resolved_encode(
  data: WebhookPullRequestReviewThreadResolved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("thread", fn(_) { panic as "Literal object inside field" }(data.thread)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_gollum_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use pages <- decode.field(
    "pages",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookGollum(
      enterprise: enterprise,
      pages: pages,
      repository: repository,
      organization: organization,
      sender: sender,
      installation: installation,
    ),
  )
}

pub fn webhook_gollum_encode(data: WebhookGollum) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("pages", json.array(_, fn(_) { panic as "object in array" })(data.pages)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_project_closed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use project <- decode.field("project", webhooks_project_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectClosed(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      project: project,
      installation: installation,
    ),
  )
}

pub fn webhook_project_closed_encode(data: WebhookProjectClosed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("project", webhooks_project_encode(data.project)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_security_default_configurations_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn code_security_default_configurations_encode(
  data: CodeSecurityDefaultConfigurations,
) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn webhook_issues_labeled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(webhooks_label_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesLabeled(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_labeled_encode(data: WebhookIssuesLabeled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", json.nullable(data.label, webhooks_label_encode)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_sponsorship_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use sponsorship <- decode.field("sponsorship", webhooks_sponsorship_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSponsorshipEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      sponsorship: sponsorship,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_sponsorship_edited_encode(data: WebhookSponsorshipEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("sponsorship", webhooks_sponsorship_encode(data.sponsorship)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_sponsorship_tier_changed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field("changes", webhooks_changes_8_decoder())
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use sponsorship <- decode.field("sponsorship", webhooks_sponsorship_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSponsorshipTierChanged(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      sponsorship: sponsorship,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_sponsorship_tier_changed_encode(
  data: WebhookSponsorshipTierChanged,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("changes", webhooks_changes_8_encode(data.changes)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("sponsorship", webhooks_sponsorship_encode(data.sponsorship)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_pull_request_ready_for_review_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    pull_request_webhook_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReadyForReview(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_ready_for_review_encode(
  data: WebhookPullRequestReadyForReview,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("pull_request", pull_request_webhook_encode(data.pull_request)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_custom_property_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use definition <- decode.field("definition", custom_property_decoder())
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCustomPropertyCreated(
      enterprise: enterprise,
      organization: organization,
      definition: definition,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_custom_property_created_encode(data: WebhookCustomPropertyCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("definition", custom_property_encode(data.definition)),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_default_setup_decoder() {
  use query_suite <- decode.optional_field(
    "query_suite",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use schedule <- decode.optional_field(
    "schedule",
    None,
    decode.optional(decode.string),
  )
  use languages <- decode.optional_field(
    "languages",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    CodeScanningDefaultSetup(
      query_suite: query_suite,
      state: state,
      updated_at: updated_at,
      schedule: schedule,
      languages: languages,
    ),
  )
}

pub fn code_scanning_default_setup_encode(data: CodeScanningDefaultSetup) {
  json.object(
    [
      #("query_suite", json.nullable(data.query_suite, json.string)),
      #("state", json.nullable(data.state, json.string)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("schedule", json.nullable(data.schedule, json.string)),
      #("languages", json.nullable(data.languages, json.array(_, json.string)))
    ],
  )
}

pub fn webhook_organization_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use membership <- decode.optional_field(
    "membership",
    None,
    decode.optional(webhooks_membership_decoder()),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookOrganizationDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      membership: membership,
      installation: installation,
    ),
  )
}

pub fn webhook_organization_deleted_encode(data: WebhookOrganizationDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("membership", json.nullable(data.membership, webhooks_membership_encode)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_team_added_to_repository_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use team <- decode.field("team", webhooks_team_one_decoder())
  decode.success(
    WebhookTeamAddedToRepository(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      team: team,
    ),
  )
}

pub fn webhook_team_added_to_repository_encode(
  data: WebhookTeamAddedToRepository,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(
          data.repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("team", webhooks_team_one_encode(data.team))
    ],
  )
}

pub fn view_traffic_decoder() {
  use uniques <- decode.field("uniques", decode.int)
  use views <- decode.field("views", decode.list(traffic_decoder()))
  use count <- decode.field("count", decode.int)
  decode.success(ViewTraffic(uniques: uniques, views: views, count: count))
}

pub fn view_traffic_encode(data: ViewTraffic) {
  json.object(
    [
      #("uniques", json.int(data.uniques)),
      #("views", json.array(_, traffic_encode)(data.views)),
      #("count", json.int(data.count))
    ],
  )
}

pub fn deployment_branch_policy_decoder() {
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  decode.success(
    DeploymentBranchPolicy(name: name, node_id: node_id, type_: type_, id: id),
  )
}

pub fn deployment_branch_policy_encode(data: DeploymentBranchPolicy) {
  json.object(
    [
      #("name", json.nullable(data.name, json.string)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("type", json.nullable(data.type_, json.string)),
      #("id", json.nullable(data.id, json.int))
    ],
  )
}

pub fn repository_rule_pull_request_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRulePullRequest(parameters: parameters, type_: type_))
}

pub fn repository_rule_pull_request_encode(data: RepositoryRulePullRequest) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn simple_installation_decoder() {
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(SimpleInstallation(node_id: node_id, id: id))
}

pub fn simple_installation_encode(data: SimpleInstallation) {
  json.object(
    [#("node_id", json.string(data.node_id)), #("id", json.int(data.id))],
  )
}

pub fn webhooks_security_advisory_decoder() {
  use cwes <- decode.field(
    "cwes",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use published_at <- decode.field("published_at", decode.string)
  use summary <- decode.field("summary", decode.string)
  use cvss_severities <- decode.optional_field(
    "cvss_severities",
    None,
    decode.optional(cvss_severities_decoder()),
  )
  use references <- decode.field(
    "references",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use identifiers <- decode.field(
    "identifiers",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use ghsa_id <- decode.field("ghsa_id", decode.string)
  use withdrawn_at <- decode.optional_field(
    "withdrawn_at",
    None,
    decode.optional(decode.string),
  )
  use cvss <- decode.field(
    "cvss",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use vulnerabilities <- decode.field(
    "vulnerabilities",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use description <- decode.field("description", decode.string)
  use severity <- decode.field("severity", decode.string)
  decode.success(
    WebhooksSecurityAdvisory(
      cwes: cwes,
      published_at: published_at,
      summary: summary,
      cvss_severities: cvss_severities,
      references: references,
      identifiers: identifiers,
      ghsa_id: ghsa_id,
      withdrawn_at: withdrawn_at,
      cvss: cvss,
      updated_at: updated_at,
      vulnerabilities: vulnerabilities,
      description: description,
      severity: severity,
    ),
  )
}

pub fn webhooks_security_advisory_encode(data: WebhooksSecurityAdvisory) {
  json.object(
    [
      #("cwes", json.array(_, fn(_) { panic as "object in array" })(data.cwes)),
      #("published_at", json.string(data.published_at)),
      #("summary", json.string(data.summary)),
      #(
        "cvss_severities",
        json.nullable(data.cvss_severities, cvss_severities_encode),
      ),
      #(
        "references",
        json.array(_, fn(_) { panic as "object in array" })(data.references),
      ),
      #(
        "identifiers",
        json.array(_, fn(_) { panic as "object in array" })(data.identifiers),
      ),
      #("ghsa_id", json.string(data.ghsa_id)),
      #("withdrawn_at", json.nullable(data.withdrawn_at, json.string)),
      #("cvss", fn(_) { panic as "Literal object inside field" }(data.cvss)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "vulnerabilities",
        json.array(_, fn(_) { panic as "object in array" })(data.vulnerabilities),
      ),
      #("description", json.string(data.description)),
      #("severity", json.string(data.severity))
    ],
  )
}

pub fn webhook_pull_request_review_comment_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field(
    "comment",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookPullRequestReviewCommentCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_pull_request_review_comment_created_encode(
  data: WebhookPullRequestReviewCommentCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "comment",
        fn(_) { panic as "Literal object inside field" }(data.comment),
      )
    ],
  )
}

pub fn actor_decoder() {
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use display_login <- decode.optional_field(
    "display_login",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  decode.success(
    Actor(
      avatar_url: avatar_url,
      login: login,
      display_login: display_login,
      url: url,
      gravatar_id: gravatar_id,
      id: id,
    ),
  )
}

pub fn actor_encode(data: Actor) {
  json.object(
    [
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("display_login", json.nullable(data.display_login, json.string)),
      #("url", json.string(data.url)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn private_user_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use ldap_dn <- decode.optional_field(
    "ldap_dn",
    None,
    decode.optional(decode.string),
  )
  use twitter_username <- decode.optional_field(
    "twitter_username",
    None,
    decode.optional(decode.string),
  )
  use blog <- decode.optional_field("blog", None, decode.optional(decode.string))
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use bio <- decode.optional_field("bio", None, decode.optional(decode.string))
  use notification_email <- decode.optional_field(
    "notification_email",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use plan <- decode.optional_field(
    "plan",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use login <- decode.field("login", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use total_private_repos <- decode.field("total_private_repos", decode.int)
  use owned_private_repos <- decode.field("owned_private_repos", decode.int)
  use public_repos <- decode.field("public_repos", decode.int)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use collaborators <- decode.field("collaborators", decode.int)
  use hireable <- decode.optional_field(
    "hireable",
    None,
    decode.optional(decode.bool),
  )
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use following <- decode.field("following", decode.int)
  use repos_url <- decode.field("repos_url", decode.string)
  use private_gists <- decode.field("private_gists", decode.int)
  use followers <- decode.field("followers", decode.int)
  use two_factor_authentication <- decode.field(
    "two_factor_authentication",
    decode.bool,
  )
  use location <- decode.optional_field(
    "location",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use business_plus <- decode.optional_field(
    "business_plus",
    None,
    decode.optional(decode.bool),
  )
  use public_gists <- decode.field("public_gists", decode.int)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  use company <- decode.optional_field(
    "company",
    None,
    decode.optional(decode.string),
  )
  use disk_usage <- decode.field("disk_usage", decode.int)
  decode.success(
    PrivateUser(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      ldap_dn: ldap_dn,
      twitter_username: twitter_username,
      blog: blog,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      bio: bio,
      notification_email: notification_email,
      events_url: events_url,
      avatar_url: avatar_url,
      plan: plan,
      login: login,
      created_at: created_at,
      total_private_repos: total_private_repos,
      owned_private_repos: owned_private_repos,
      public_repos: public_repos,
      name: name,
      collaborators: collaborators,
      hireable: hireable,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      following: following,
      repos_url: repos_url,
      private_gists: private_gists,
      followers: followers,
      two_factor_authentication: two_factor_authentication,
      location: location,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      updated_at: updated_at,
      node_id: node_id,
      business_plus: business_plus,
      public_gists: public_gists,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
      company: company,
      disk_usage: disk_usage,
    ),
  )
}

pub fn private_user_encode(data: PrivateUser) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #("ldap_dn", json.nullable(data.ldap_dn, json.string)),
      #("twitter_username", json.nullable(data.twitter_username, json.string)),
      #("blog", json.nullable(data.blog, json.string)),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("bio", json.nullable(data.bio, json.string)),
      #(
        "notification_email",
        json.nullable(data.notification_email, json.string),
      ),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #(
        "plan",
        json.nullable(
          data.plan,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("login", json.string(data.login)),
      #("created_at", json.string(data.created_at)),
      #("total_private_repos", json.int(data.total_private_repos)),
      #("owned_private_repos", json.int(data.owned_private_repos)),
      #("public_repos", json.int(data.public_repos)),
      #("name", json.nullable(data.name, json.string)),
      #("collaborators", json.int(data.collaborators)),
      #("hireable", json.nullable(data.hireable, json.bool)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("following", json.int(data.following)),
      #("repos_url", json.string(data.repos_url)),
      #("private_gists", json.int(data.private_gists)),
      #("followers", json.int(data.followers)),
      #("two_factor_authentication", json.bool(data.two_factor_authentication)),
      #("location", json.nullable(data.location, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("business_plus", json.nullable(data.business_plus, json.bool)),
      #("public_gists", json.int(data.public_gists)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string)),
      #("company", json.nullable(data.company, json.string)),
      #("disk_usage", json.int(data.disk_usage))
    ],
  )
}

pub fn webhook_milestone_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.field("milestone", webhooks_milestone_3_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMilestoneCreated(
      enterprise: enterprise,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_milestone_created_encode(data: WebhookMilestoneCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", webhooks_milestone_3_encode(data.milestone)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_issues_pinned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field("issue", webhooks_issue_2_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesPinned(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_pinned_encode(data: WebhookIssuesPinned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", webhooks_issue_2_encode(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn gist_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    GistComment(
      body: body,
      created_at: created_at,
      user: user,
      author_association: author_association,
      url: url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
    ),
  )
}

pub fn gist_comment_encode(data: GistComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("created_at", json.string(data.created_at)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn custom_property_value_decoder() {
  use value <- decode.field(
    "value",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use property_name <- decode.field("property_name", decode.string)
  decode.success(CustomPropertyValue(value: value, property_name: property_name))
}

pub fn custom_property_value_encode(data: CustomPropertyValue) {
  json.object(
    [
      #("value", fn(_) { panic as "OneOf inside field" }(data.value)),
      #("property_name", json.string(data.property_name))
    ],
  )
}

pub fn webhook_project_card_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use project_card <- decode.field(
    "project_card",
    webhooks_project_card_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectCardCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      project_card: project_card,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_project_card_created_encode(data: WebhookProjectCardCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("project_card", webhooks_project_card_encode(data.project_card)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn check_suite_preference_decoder() {
  use repository <- decode.field("repository", minimal_repository_decoder())
  use preferences <- decode.field(
    "preferences",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    CheckSuitePreference(repository: repository, preferences: preferences),
  )
}

pub fn check_suite_preference_encode(data: CheckSuitePreference) {
  json.object(
    [
      #("repository", minimal_repository_encode(data.repository)),
      #(
        "preferences",
        fn(_) { panic as "Literal object inside field" }(data.preferences),
      )
    ],
  )
}

pub fn code_scanning_alert_dismissed_reason_decoder() {
  decode.string
}

pub fn code_scanning_alert_dismissed_reason_encode(
  data: CodeScanningAlertDismissedReason,
) {
  json.string(data)
}

pub fn codespace_with_full_repository_decoder() {
  use idle_timeout_notice <- decode.optional_field(
    "idle_timeout_notice",
    None,
    decode.optional(decode.string),
  )
  use recent_folders <- decode.field(
    "recent_folders",
    decode.list(decode.string),
  )
  use retention_period_minutes <- decode.optional_field(
    "retention_period_minutes",
    None,
    decode.optional(decode.int),
  )
  use web_url <- decode.field("web_url", decode.string)
  use machine <- decode.field("machine", nullable_codespace_machine_decoder())
  use pending_operation_disabled_reason <- decode.optional_field(
    "pending_operation_disabled_reason",
    None,
    decode.optional(decode.string),
  )
  use environment_id <- decode.optional_field(
    "environment_id",
    None,
    decode.optional(decode.string),
  )
  use display_name <- decode.optional_field(
    "display_name",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use repository <- decode.field("repository", full_repository_decoder())
  use prebuild <- decode.optional_field(
    "prebuild",
    None,
    decode.optional(decode.bool),
  )
  use name <- decode.field("name", decode.string)
  use last_used_at <- decode.field("last_used_at", decode.string)
  use runtime_constraints <- decode.optional_field(
    "runtime_constraints",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use start_url <- decode.field("start_url", decode.string)
  use stop_url <- decode.field("stop_url", decode.string)
  use owner <- decode.field("owner", simple_user_decoder())
  use billable_owner <- decode.field("billable_owner", simple_user_decoder())
  use location <- decode.field("location", decode.string)
  use idle_timeout_minutes <- decode.optional_field(
    "idle_timeout_minutes",
    None,
    decode.optional(decode.int),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use devcontainer_path <- decode.optional_field(
    "devcontainer_path",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use machines_url <- decode.field("machines_url", decode.string)
  use pulls_url <- decode.optional_field(
    "pulls_url",
    None,
    decode.optional(decode.string),
  )
  use pending_operation <- decode.optional_field(
    "pending_operation",
    None,
    decode.optional(decode.bool),
  )
  use retention_expires_at <- decode.optional_field(
    "retention_expires_at",
    None,
    decode.optional(decode.string),
  )
  use git_status <- decode.field(
    "git_status",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use publish_url <- decode.optional_field(
    "publish_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodespaceWithFullRepository(
      idle_timeout_notice: idle_timeout_notice,
      recent_folders: recent_folders,
      retention_period_minutes: retention_period_minutes,
      web_url: web_url,
      machine: machine,
      pending_operation_disabled_reason: pending_operation_disabled_reason,
      environment_id: environment_id,
      display_name: display_name,
      created_at: created_at,
      repository: repository,
      prebuild: prebuild,
      name: name,
      last_used_at: last_used_at,
      runtime_constraints: runtime_constraints,
      url: url,
      state: state,
      start_url: start_url,
      stop_url: stop_url,
      owner: owner,
      billable_owner: billable_owner,
      location: location,
      idle_timeout_minutes: idle_timeout_minutes,
      updated_at: updated_at,
      devcontainer_path: devcontainer_path,
      id: id,
      machines_url: machines_url,
      pulls_url: pulls_url,
      pending_operation: pending_operation,
      retention_expires_at: retention_expires_at,
      git_status: git_status,
      publish_url: publish_url,
    ),
  )
}

pub fn codespace_with_full_repository_encode(data: CodespaceWithFullRepository) {
  json.object(
    [
      #(
        "idle_timeout_notice",
        json.nullable(data.idle_timeout_notice, json.string),
      ),
      #("recent_folders", json.array(_, json.string)(data.recent_folders)),
      #(
        "retention_period_minutes",
        json.nullable(data.retention_period_minutes, json.int),
      ),
      #("web_url", json.string(data.web_url)),
      #("machine", nullable_codespace_machine_encode(data.machine)),
      #(
        "pending_operation_disabled_reason",
        json.nullable(data.pending_operation_disabled_reason, json.string),
      ),
      #("environment_id", json.nullable(data.environment_id, json.string)),
      #("display_name", json.nullable(data.display_name, json.string)),
      #("created_at", json.string(data.created_at)),
      #("repository", full_repository_encode(data.repository)),
      #("prebuild", json.nullable(data.prebuild, json.bool)),
      #("name", json.string(data.name)),
      #("last_used_at", json.string(data.last_used_at)),
      #(
        "runtime_constraints",
        json.nullable(
          data.runtime_constraints,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("start_url", json.string(data.start_url)),
      #("stop_url", json.string(data.stop_url)),
      #("owner", simple_user_encode(data.owner)),
      #("billable_owner", simple_user_encode(data.billable_owner)),
      #("location", json.string(data.location)),
      #(
        "idle_timeout_minutes",
        json.nullable(data.idle_timeout_minutes, json.int),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("devcontainer_path", json.nullable(data.devcontainer_path, json.string)),
      #("id", json.int(data.id)),
      #("machines_url", json.string(data.machines_url)),
      #("pulls_url", json.nullable(data.pulls_url, json.string)),
      #("pending_operation", json.nullable(data.pending_operation, json.bool)),
      #(
        "retention_expires_at",
        json.nullable(data.retention_expires_at, json.string),
      ),
      #(
        "git_status",
        fn(_) { panic as "Literal object inside field" }(data.git_status),
      ),
      #("publish_url", json.nullable(data.publish_url, json.string))
    ],
  )
}

pub fn cvss_severities_decoder() {
  use cvss_v3 <- decode.optional_field(
    "cvss_v3",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use cvss_v4 <- decode.optional_field(
    "cvss_v4",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(CvssSeverities(cvss_v3: cvss_v3, cvss_v4: cvss_v4))
}

pub fn cvss_severities_encode(data: CvssSeverities) {
  json.object(
    [
      #(
        "cvss_v3",
        json.nullable(
          data.cvss_v3,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "cvss_v4",
        json.nullable(
          data.cvss_v4,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn integration_installation_request_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use account <- decode.field(
    "account",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use requester <- decode.field("requester", simple_user_decoder())
  decode.success(
    IntegrationInstallationRequest(
      created_at: created_at,
      account: account,
      node_id: node_id,
      id: id,
      requester: requester,
    ),
  )
}

pub fn integration_installation_request_encode(
  data: IntegrationInstallationRequest,
) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("account", fn(_) { panic as "AnyOf inside field" }(data.account)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("id", json.int(data.id)),
      #("requester", simple_user_encode(data.requester))
    ],
  )
}

pub fn branch_with_protection_decoder() {
  use protection_url <- decode.field("protection_url", decode.string)
  use name <- decode.field("name", decode.string)
  use protected <- decode.field("protected", decode.bool)
  use pattern <- decode.optional_field(
    "pattern",
    None,
    decode.optional(decode.string),
  )
  use commit <- decode.field("commit", commit_decoder())
  use protection <- decode.field("protection", branch_protection_decoder())
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use required_approving_review_count <- decode.optional_field(
    "required_approving_review_count",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    BranchWithProtection(
      protection_url: protection_url,
      name: name,
      protected: protected,
      pattern: pattern,
      commit: commit,
      protection: protection,
      links: links,
      required_approving_review_count: required_approving_review_count,
    ),
  )
}

pub fn branch_with_protection_encode(data: BranchWithProtection) {
  json.object(
    [
      #("protection_url", json.string(data.protection_url)),
      #("name", json.string(data.name)),
      #("protected", json.bool(data.protected)),
      #("pattern", json.nullable(data.pattern, json.string)),
      #("commit", commit_encode(data.commit)),
      #("protection", branch_protection_encode(data.protection)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #(
        "required_approving_review_count",
        json.nullable(data.required_approving_review_count, json.int),
      )
    ],
  )
}

pub fn validation_error_decoder() {
  use message <- decode.field("message", decode.string)
  use documentation_url <- decode.field("documentation_url", decode.string)
  use errors <- decode.optional_field(
    "errors",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  decode.success(
    ValidationError(
      message: message,
      documentation_url: documentation_url,
      errors: errors,
    ),
  )
}

pub fn validation_error_encode(data: ValidationError) {
  json.object(
    [
      #("message", json.string(data.message)),
      #("documentation_url", json.string(data.documentation_url)),
      #(
        "errors",
        json.nullable(
          data.errors,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      )
    ],
  )
}

pub fn webhook_code_scanning_alert_appeared_in_branch_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use commit_oid <- decode.field(
    "commit_oid",
    webhooks_code_scanning_commit_oid_decoder(),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.field("ref", webhooks_code_scanning_ref_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookCodeScanningAlertAppearedInBranch(
      enterprise: enterprise,
      commit_oid: commit_oid,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_code_scanning_alert_appeared_in_branch_encode(
  data: WebhookCodeScanningAlertAppearedInBranch,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("commit_oid", webhooks_code_scanning_commit_oid_encode(data.commit_oid)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", webhooks_code_scanning_ref_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn secret_scanning_location_decoder() {
  use details <- decode.optional_field(
    "details",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  decode.success(SecretScanningLocation(details: details, type_: type_))
}

pub fn secret_scanning_location_encode(data: SecretScanningLocation) {
  json.object(
    [
      #(
        "details",
        json.nullable(data.details, fn(_) { panic as "OneOf inside field" }),
      ),
      #("type", json.nullable(data.type_, json.string))
    ],
  )
}

pub fn webhook_star_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookStarDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_star_deleted_encode(data: WebhookStarDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn label_decoder() {
  use default <- decode.field("default", decode.bool)
  use color <- decode.field("color", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Label(
      default: default,
      color: color,
      name: name,
      url: url,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn label_encode(data: Label) {
  json.object(
    [
      #("default", json.bool(data.default)),
      #("color", json.string(data.color)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhook_org_block_unblocked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use blocked_user <- decode.field("blocked_user", webhooks_user_decoder())
  decode.success(
    WebhookOrgBlockUnblocked(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      blocked_user: blocked_user,
    ),
  )
}

pub fn webhook_org_block_unblocked_encode(data: WebhookOrgBlockUnblocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("blocked_user", webhooks_user_encode(data.blocked_user))
    ],
  )
}

pub fn webhook_projects_v2_item_reordered_decoder() {
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemReordered(
      changes: changes,
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_reordered_encode(
  data: WebhookProjectsV2ItemReordered,
) {
  json.object(
    [
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn commit_search_result_item_decoder() {
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use parents <- decode.field(
    "parents",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", minimal_repository_decoder())
  use committer <- decode.field("committer", nullable_git_user_decoder())
  use author <- decode.field("author", nullable_simple_user_decoder())
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use score <- decode.field("score", decode.float)
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use node_id <- decode.field("node_id", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    CommitSearchResultItem(
      text_matches: text_matches,
      comments_url: comments_url,
      parents: parents,
      repository: repository,
      committer: committer,
      author: author,
      sha: sha,
      url: url,
      score: score,
      commit: commit,
      node_id: node_id,
      html_url: html_url,
    ),
  )
}

pub fn commit_search_result_item_encode(data: CommitSearchResultItem) {
  json.object(
    [
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("comments_url", json.string(data.comments_url)),
      #(
        "parents",
        json.array(_, fn(_) { panic as "object in array" })(data.parents),
      ),
      #("repository", minimal_repository_encode(data.repository)),
      #("committer", nullable_git_user_encode(data.committer)),
      #("author", nullable_simple_user_encode(data.author)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("score", json.float(data.score)),
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit)),
      #("node_id", json.string(data.node_id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn integration_decoder() {
  use permissions <- decode.field(
    "permissions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use client_secret <- decode.optional_field(
    "client_secret",
    None,
    decode.optional(decode.string),
  )
  use installations_count <- decode.optional_field(
    "installations_count",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use slug <- decode.optional_field("slug", None, decode.optional(decode.string))
  use client_id <- decode.optional_field(
    "client_id",
    None,
    decode.optional(decode.string),
  )
  use owner <- decode.field("owner", nullable_simple_user_decoder())
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use pem <- decode.optional_field("pem", None, decode.optional(decode.string))
  use webhook_secret <- decode.optional_field(
    "webhook_secret",
    None,
    decode.optional(decode.string),
  )
  use events <- decode.field("events", decode.list(decode.string))
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use external_url <- decode.field("external_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Integration(
      permissions: permissions,
      client_secret: client_secret,
      installations_count: installations_count,
      created_at: created_at,
      name: name,
      slug: slug,
      client_id: client_id,
      owner: owner,
      updated_at: updated_at,
      node_id: node_id,
      pem: pem,
      webhook_secret: webhook_secret,
      events: events,
      id: id,
      html_url: html_url,
      external_url: external_url,
      description: description,
    ),
  )
}

pub fn integration_encode(data: Integration) {
  json.object(
    [
      #(
        "permissions",
        fn(_) { panic as "Literal object inside field" }(data.permissions),
      ),
      #("client_secret", json.nullable(data.client_secret, json.string)),
      #("installations_count", json.nullable(data.installations_count, json.int)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("slug", json.nullable(data.slug, json.string)),
      #("client_id", json.nullable(data.client_id, json.string)),
      #("owner", nullable_simple_user_encode(data.owner)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("pem", json.nullable(data.pem, json.string)),
      #("webhook_secret", json.nullable(data.webhook_secret, json.string)),
      #("events", json.array(_, json.string)(data.events)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("external_url", json.string(data.external_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhook_check_run_rerequested_form_encoded_decoder() {
  use payload <- decode.field("payload", decode.string)
  decode.success(WebhookCheckRunRerequestedFormEncoded(payload: payload))
}

pub fn webhook_check_run_rerequested_form_encoded_encode(
  data: WebhookCheckRunRerequestedFormEncoded,
) {
  json.object([#("payload", json.string(data.payload))])
}

pub fn webhook_discussion_category_changed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionCategoryChanged(
      enterprise: enterprise,
      changes: changes,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_category_changed_encode(
  data: WebhookDiscussionCategoryChanged,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_workflow_run_requested_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.field(
    "workflow_run",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow <- decode.field("workflow", webhooks_workflow_decoder())
  decode.success(
    WebhookWorkflowRunRequested(
      enterprise: enterprise,
      repository: repository,
      workflow_run: workflow_run,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow: workflow,
    ),
  )
}

pub fn webhook_workflow_run_requested_encode(data: WebhookWorkflowRunRequested) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        fn(_) { panic as "Literal object inside field" }(data.workflow_run),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("workflow", webhooks_workflow_encode(data.workflow))
    ],
  )
}

pub fn check_annotation_decoder() {
  use path_ <- decode.field("path", decode.string)
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use raw_details <- decode.optional_field(
    "raw_details",
    None,
    decode.optional(decode.string),
  )
  use blob_href <- decode.field("blob_href", decode.string)
  use start_line <- decode.field("start_line", decode.int)
  use start_column <- decode.optional_field(
    "start_column",
    None,
    decode.optional(decode.int),
  )
  use annotation_level <- decode.optional_field(
    "annotation_level",
    None,
    decode.optional(decode.string),
  )
  use end_line <- decode.field("end_line", decode.int)
  use title <- decode.optional_field(
    "title",
    None,
    decode.optional(decode.string),
  )
  use end_column <- decode.optional_field(
    "end_column",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CheckAnnotation(
      path_: path_,
      message: message,
      raw_details: raw_details,
      blob_href: blob_href,
      start_line: start_line,
      start_column: start_column,
      annotation_level: annotation_level,
      end_line: end_line,
      title: title,
      end_column: end_column,
    ),
  )
}

pub fn check_annotation_encode(data: CheckAnnotation) {
  json.object(
    [
      #("path", json.string(data.path_)),
      #("message", json.nullable(data.message, json.string)),
      #("raw_details", json.nullable(data.raw_details, json.string)),
      #("blob_href", json.string(data.blob_href)),
      #("start_line", json.int(data.start_line)),
      #("start_column", json.nullable(data.start_column, json.int)),
      #("annotation_level", json.nullable(data.annotation_level, json.string)),
      #("end_line", json.int(data.end_line)),
      #("title", json.nullable(data.title, json.string)),
      #("end_column", json.nullable(data.end_column, json.int))
    ],
  )
}

pub fn marketplace_listing_plan_decoder() {
  use unit_name <- decode.optional_field(
    "unit_name",
    None,
    decode.optional(decode.string),
  )
  use has_free_trial <- decode.field("has_free_trial", decode.bool)
  use number <- decode.field("number", decode.int)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use bullets <- decode.field("bullets", decode.list(decode.string))
  use price_model <- decode.field("price_model", decode.string)
  use accounts_url <- decode.field("accounts_url", decode.string)
  use monthly_price_in_cents <- decode.field(
    "monthly_price_in_cents",
    decode.int,
  )
  use id <- decode.field("id", decode.int)
  use yearly_price_in_cents <- decode.field("yearly_price_in_cents", decode.int)
  use description <- decode.field("description", decode.string)
  decode.success(
    MarketplaceListingPlan(
      unit_name: unit_name,
      has_free_trial: has_free_trial,
      number: number,
      name: name,
      url: url,
      state: state,
      bullets: bullets,
      price_model: price_model,
      accounts_url: accounts_url,
      monthly_price_in_cents: monthly_price_in_cents,
      id: id,
      yearly_price_in_cents: yearly_price_in_cents,
      description: description,
    ),
  )
}

pub fn marketplace_listing_plan_encode(data: MarketplaceListingPlan) {
  json.object(
    [
      #("unit_name", json.nullable(data.unit_name, json.string)),
      #("has_free_trial", json.bool(data.has_free_trial)),
      #("number", json.int(data.number)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("bullets", json.array(_, json.string)(data.bullets)),
      #("price_model", json.string(data.price_model)),
      #("accounts_url", json.string(data.accounts_url)),
      #("monthly_price_in_cents", json.int(data.monthly_price_in_cents)),
      #("id", json.int(data.id)),
      #("yearly_price_in_cents", json.int(data.yearly_price_in_cents)),
      #("description", json.string(data.description))
    ],
  )
}

pub fn team_role_assignment_decoder() {
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.field("members_url", decode.string)
  use parent <- decode.field("parent", nullable_team_simple_decoder())
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use assignment <- decode.optional_field(
    "assignment",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use permission <- decode.field("permission", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    TeamRoleAssignment(
      permissions: permissions,
      privacy: privacy,
      members_url: members_url,
      parent: parent,
      name: name,
      slug: slug,
      assignment: assignment,
      url: url,
      permission: permission,
      node_id: node_id,
      repositories_url: repositories_url,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn team_role_assignment_encode(data: TeamRoleAssignment) {
  json.object(
    [
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.string(data.members_url)),
      #("parent", nullable_team_simple_encode(data.parent)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("assignment", json.nullable(data.assignment, json.string)),
      #("url", json.string(data.url)),
      #("permission", json.string(data.permission)),
      #("node_id", json.string(data.node_id)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhook_projects_v2_project_closed_decoder() {
  use projects_v2 <- decode.field("projects_v2", projects_v2_decoder())
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ProjectClosed(
      projects_v2: projects_v2,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_project_closed_encode(
  data: WebhookProjectsV2ProjectClosed,
) {
  json.object(
    [
      #("projects_v2", projects_v2_encode(data.projects_v2)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_repository_ruleset_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use repository_ruleset <- decode.field(
    "repository_ruleset",
    repository_ruleset_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryRulesetCreated(
      enterprise: enterprise,
      repository: repository,
      repository_ruleset: repository_ruleset,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_ruleset_created_encode(
  data: WebhookRepositoryRulesetCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("repository_ruleset", repository_ruleset_encode(data.repository_ruleset)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_code_scanning_ref_decoder() {
  decode.string
}

pub fn webhooks_code_scanning_ref_encode(data: WebhooksCodeScanningRef) {
  json.string(data)
}

pub fn enabled_repositories_decoder() {
  decode.string
}

pub fn enabled_repositories_encode(data: EnabledRepositories) {
  json.string(data)
}

pub fn nullable_repository_webhooks_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use custom_properties <- decode.optional_field(
    "custom_properties",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use allow_update_branch <- decode.optional_field(
    "allow_update_branch",
    None,
    decode.optional(decode.bool),
  )
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.field("has_downloads", decode.bool)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use squash_merge_commit_message <- decode.optional_field(
    "squash_merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use merge_commit_message <- decode.optional_field(
    "merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use template_repository <- decode.optional_field(
    "template_repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use use_squash_pr_title_as_default <- decode.optional_field(
    "use_squash_pr_title_as_default",
    None,
    decode.optional(decode.bool),
  )
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use squash_merge_commit_title <- decode.optional_field(
    "squash_merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use merge_commit_title <- decode.optional_field(
    "merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use anonymous_access_enabled <- decode.optional_field(
    "anonymous_access_enabled",
    None,
    decode.optional(decode.bool),
  )
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use subscribers_count <- decode.optional_field(
    "subscribers_count",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use network_count <- decode.optional_field(
    "network_count",
    None,
    decode.optional(decode.int),
  )
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    NullableRepositoryWebhooks(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      custom_properties: custom_properties,
      forks_count: forks_count,
      fork: fork,
      allow_update_branch: allow_update_branch,
      git_url: git_url,
      archived: archived,
      private: private,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      squash_merge_commit_message: squash_merge_commit_message,
      has_discussions: has_discussions,
      teams_url: teams_url,
      merge_commit_message: merge_commit_message,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      template_repository: template_repository,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      use_squash_pr_title_as_default: use_squash_pr_title_as_default,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      organization: organization,
      owner: owner,
      starred_at: starred_at,
      allow_merge_commit: allow_merge_commit,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      squash_merge_commit_title: squash_merge_commit_title,
      merge_commit_title: merge_commit_title,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      anonymous_access_enabled: anonymous_access_enabled,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      subscribers_count: subscribers_count,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      network_count: network_count,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn nullable_repository_webhooks_encode(data: NullableRepositoryWebhooks) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #(
        "custom_properties",
        json.nullable(
          data.custom_properties,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #(
        "allow_update_branch",
        json.nullable(data.allow_update_branch, json.bool),
      ),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.bool(data.has_downloads)),
      #("blobs_url", json.string(data.blobs_url)),
      #(
        "squash_merge_commit_message",
        json.nullable(data.squash_merge_commit_message, json.string),
      ),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #(
        "merge_commit_message",
        json.nullable(data.merge_commit_message, json.string),
      ),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #(
        "template_repository",
        json.nullable(
          data.template_repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #(
        "use_squash_pr_title_as_default",
        json.nullable(data.use_squash_pr_title_as_default, json.bool),
      ),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #(
        "organization",
        json.nullable(data.organization, nullable_simple_user_encode),
      ),
      #("owner", simple_user_encode(data.owner)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #(
        "squash_merge_commit_title",
        json.nullable(data.squash_merge_commit_title, json.string),
      ),
      #(
        "merge_commit_title",
        json.nullable(data.merge_commit_title, json.string),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #(
        "anonymous_access_enabled",
        json.nullable(data.anonymous_access_enabled, json.bool),
      ),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("subscribers_count", json.nullable(data.subscribers_count, json.int)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("network_count", json.nullable(data.network_count, json.int)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn webhook_project_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use project <- decode.field("project", webhooks_project_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      project: project,
      installation: installation,
    ),
  )
}

pub fn webhook_project_edited_encode(data: WebhookProjectEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #("project", webhooks_project_encode(data.project)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_analysis_category_decoder() {
  decode.string
}

pub fn code_scanning_analysis_category_encode(data: CodeScanningAnalysisCategory) {
  json.string(data)
}

pub fn classroom_decoder() {
  use archived <- decode.field("archived", decode.bool)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use organization <- decode.field(
    "organization",
    simple_classroom_organization_decoder(),
  )
  use id <- decode.field("id", decode.int)
  decode.success(
    Classroom(
      archived: archived,
      name: name,
      url: url,
      organization: organization,
      id: id,
    ),
  )
}

pub fn classroom_encode(data: Classroom) {
  json.object(
    [
      #("archived", json.bool(data.archived)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("organization", simple_classroom_organization_encode(data.organization)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_projects_v2_item_deleted_decoder() {
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemDeleted(
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_deleted_encode(
  data: WebhookProjectsV2ItemDeleted,
) {
  json.object(
    [
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_variant_analysis_repo_task_decoder() {
  use artifact_url <- decode.optional_field(
    "artifact_url",
    None,
    decode.optional(decode.string),
  )
  use artifact_size_in_bytes <- decode.optional_field(
    "artifact_size_in_bytes",
    None,
    decode.optional(decode.int),
  )
  use database_commit_sha <- decode.optional_field(
    "database_commit_sha",
    None,
    decode.optional(decode.string),
  )
  use repository <- decode.field("repository", simple_repository_decoder())
  use result_count <- decode.optional_field(
    "result_count",
    None,
    decode.optional(decode.int),
  )
  use failure_message <- decode.optional_field(
    "failure_message",
    None,
    decode.optional(decode.string),
  )
  use analysis_status <- decode.field(
    "analysis_status",
    code_scanning_variant_analysis_status_decoder(),
  )
  use source_location_prefix <- decode.optional_field(
    "source_location_prefix",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeScanningVariantAnalysisRepoTask(
      artifact_url: artifact_url,
      artifact_size_in_bytes: artifact_size_in_bytes,
      database_commit_sha: database_commit_sha,
      repository: repository,
      result_count: result_count,
      failure_message: failure_message,
      analysis_status: analysis_status,
      source_location_prefix: source_location_prefix,
    ),
  )
}

pub fn code_scanning_variant_analysis_repo_task_encode(
  data: CodeScanningVariantAnalysisRepoTask,
) {
  json.object(
    [
      #("artifact_url", json.nullable(data.artifact_url, json.string)),
      #(
        "artifact_size_in_bytes",
        json.nullable(data.artifact_size_in_bytes, json.int),
      ),
      #(
        "database_commit_sha",
        json.nullable(data.database_commit_sha, json.string),
      ),
      #("repository", simple_repository_encode(data.repository)),
      #("result_count", json.nullable(data.result_count, json.int)),
      #("failure_message", json.nullable(data.failure_message, json.string)),
      #(
        "analysis_status",
        code_scanning_variant_analysis_status_encode(data.analysis_status),
      ),
      #(
        "source_location_prefix",
        json.nullable(data.source_location_prefix, json.string),
      )
    ],
  )
}

pub fn runner_application_decoder() {
  use os <- decode.field("os", decode.string)
  use filename <- decode.field("filename", decode.string)
  use temp_download_token <- decode.optional_field(
    "temp_download_token",
    None,
    decode.optional(decode.string),
  )
  use architecture <- decode.field("architecture", decode.string)
  use download_url <- decode.field("download_url", decode.string)
  use sha256_checksum <- decode.optional_field(
    "sha256_checksum",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RunnerApplication(
      os: os,
      filename: filename,
      temp_download_token: temp_download_token,
      architecture: architecture,
      download_url: download_url,
      sha256_checksum: sha256_checksum,
    ),
  )
}

pub fn runner_application_encode(data: RunnerApplication) {
  json.object(
    [
      #("os", json.string(data.os)),
      #("filename", json.string(data.filename)),
      #(
        "temp_download_token",
        json.nullable(data.temp_download_token, json.string),
      ),
      #("architecture", json.string(data.architecture)),
      #("download_url", json.string(data.download_url)),
      #("sha256_checksum", json.nullable(data.sha256_checksum, json.string))
    ],
  )
}

pub fn workflow_usage_decoder() {
  use billable <- decode.field(
    "billable",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(WorkflowUsage(billable: billable))
}

pub fn workflow_usage_encode(data: WorkflowUsage) {
  json.object(
    [
      #(
        "billable",
        fn(_) { panic as "Literal object inside field" }(data.billable),
      )
    ],
  )
}

pub fn environment_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use protection_rules <- decode.optional_field(
    "protection_rules",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use deployment_branch_policy <- decode.optional_field(
    "deployment_branch_policy",
    None,
    decode.optional(deployment_branch_policy_settings_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    Environment(
      created_at: created_at,
      name: name,
      url: url,
      protection_rules: protection_rules,
      deployment_branch_policy: deployment_branch_policy,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn environment_encode(data: Environment) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #(
        "protection_rules",
        json.nullable(
          data.protection_rules,
          json.array(_, fn(_) { panic as "Anyoas.AnyOf in array" }),
        ),
      ),
      #(
        "deployment_branch_policy",
        json.nullable(
          data.deployment_branch_policy,
          deployment_branch_policy_settings_encode,
        ),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn check_suite_decoder() {
  use head_branch <- decode.optional_field(
    "head_branch",
    None,
    decode.optional(decode.string),
  )
  use app <- decode.field("app", nullable_integration_decoder())
  use latest_check_runs_count <- decode.field(
    "latest_check_runs_count",
    decode.int,
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use repository <- decode.field("repository", minimal_repository_decoder())
  use head_sha <- decode.field("head_sha", decode.string)
  use check_runs_url <- decode.field("check_runs_url", decode.string)
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  use rerequestable <- decode.optional_field(
    "rerequestable",
    None,
    decode.optional(decode.bool),
  )
  use head_commit <- decode.field("head_commit", simple_commit_decoder())
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use after <- decode.optional_field(
    "after",
    None,
    decode.optional(decode.string),
  )
  use pull_requests <- decode.optional_field(
    "pull_requests",
    None,
    decode.optional(decode.list(pull_request_minimal_decoder())),
  )
  use conclusion <- decode.optional_field(
    "conclusion",
    None,
    decode.optional(decode.string),
  )
  use before <- decode.optional_field(
    "before",
    None,
    decode.optional(decode.string),
  )
  use runs_rerequestable <- decode.optional_field(
    "runs_rerequestable",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    CheckSuite(
      head_branch: head_branch,
      app: app,
      latest_check_runs_count: latest_check_runs_count,
      created_at: created_at,
      repository: repository,
      head_sha: head_sha,
      check_runs_url: check_runs_url,
      url: url,
      status: status,
      rerequestable: rerequestable,
      head_commit: head_commit,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      after: after,
      pull_requests: pull_requests,
      conclusion: conclusion,
      before: before,
      runs_rerequestable: runs_rerequestable,
    ),
  )
}

pub fn check_suite_encode(data: CheckSuite) {
  json.object(
    [
      #("head_branch", json.nullable(data.head_branch, json.string)),
      #("app", nullable_integration_encode(data.app)),
      #("latest_check_runs_count", json.int(data.latest_check_runs_count)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("repository", minimal_repository_encode(data.repository)),
      #("head_sha", json.string(data.head_sha)),
      #("check_runs_url", json.string(data.check_runs_url)),
      #("url", json.nullable(data.url, json.string)),
      #("status", json.nullable(data.status, json.string)),
      #("rerequestable", json.nullable(data.rerequestable, json.bool)),
      #("head_commit", simple_commit_encode(data.head_commit)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("after", json.nullable(data.after, json.string)),
      #(
        "pull_requests",
        json.nullable(
          data.pull_requests,
          json.array(_, pull_request_minimal_encode),
        ),
      ),
      #("conclusion", json.nullable(data.conclusion, json.string)),
      #("before", json.nullable(data.before, json.string)),
      #("runs_rerequestable", json.nullable(data.runs_rerequestable, json.bool))
    ],
  )
}

pub fn codespace_machine_decoder() {
  use display_name <- decode.field("display_name", decode.string)
  use name <- decode.field("name", decode.string)
  use cpus <- decode.field("cpus", decode.int)
  use operating_system <- decode.field("operating_system", decode.string)
  use memory_in_bytes <- decode.field("memory_in_bytes", decode.int)
  use prebuild_availability <- decode.optional_field(
    "prebuild_availability",
    None,
    decode.optional(decode.string),
  )
  use storage_in_bytes <- decode.field("storage_in_bytes", decode.int)
  decode.success(
    CodespaceMachine(
      display_name: display_name,
      name: name,
      cpus: cpus,
      operating_system: operating_system,
      memory_in_bytes: memory_in_bytes,
      prebuild_availability: prebuild_availability,
      storage_in_bytes: storage_in_bytes,
    ),
  )
}

pub fn codespace_machine_encode(data: CodespaceMachine) {
  json.object(
    [
      #("display_name", json.string(data.display_name)),
      #("name", json.string(data.name)),
      #("cpus", json.int(data.cpus)),
      #("operating_system", json.string(data.operating_system)),
      #("memory_in_bytes", json.int(data.memory_in_bytes)),
      #(
        "prebuild_availability",
        json.nullable(data.prebuild_availability, json.string),
      ),
      #("storage_in_bytes", json.int(data.storage_in_bytes))
    ],
  )
}

pub fn webhook_code_scanning_alert_reopened_by_user_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use commit_oid <- decode.field(
    "commit_oid",
    webhooks_code_scanning_commit_oid_decoder(),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.field("ref", webhooks_code_scanning_ref_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookCodeScanningAlertReopenedByUser(
      enterprise: enterprise,
      commit_oid: commit_oid,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_code_scanning_alert_reopened_by_user_encode(
  data: WebhookCodeScanningAlertReopenedByUser,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("commit_oid", webhooks_code_scanning_commit_oid_encode(data.commit_oid)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", webhooks_code_scanning_ref_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn webhooks_sponsorship_decoder() {
  use tier <- decode.field(
    "tier",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use created_at <- decode.field("created_at", decode.string)
  use privacy_level <- decode.field("privacy_level", decode.string)
  use sponsorable <- decode.optional_field(
    "sponsorable",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use node_id <- decode.field("node_id", decode.string)
  use maintainer <- decode.optional_field(
    "maintainer",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use sponsor <- decode.optional_field(
    "sponsor",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    WebhooksSponsorship(
      tier: tier,
      created_at: created_at,
      privacy_level: privacy_level,
      sponsorable: sponsorable,
      node_id: node_id,
      maintainer: maintainer,
      sponsor: sponsor,
    ),
  )
}

pub fn webhooks_sponsorship_encode(data: WebhooksSponsorship) {
  json.object(
    [
      #("tier", fn(_) { panic as "Literal object inside field" }(data.tier)),
      #("created_at", json.string(data.created_at)),
      #("privacy_level", json.string(data.privacy_level)),
      #(
        "sponsorable",
        json.nullable(
          data.sponsorable,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("node_id", json.string(data.node_id)),
      #(
        "maintainer",
        json.nullable(
          data.maintainer,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "sponsor",
        json.nullable(
          data.sponsor,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn timeline_assigned_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", simple_user_decoder())
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    TimelineAssignedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      assignee: assignee,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn timeline_assigned_issue_event_encode(data: TimelineAssignedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("assignee", simple_user_encode(data.assignee)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn unlabeled_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use label <- decode.field(
    "label",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    UnlabeledIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      label: label,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn unlabeled_issue_event_encode(data: UnlabeledIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("label", fn(_) { panic as "Literal object inside field" }(data.label)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn participation_stats_decoder() {
  use all <- decode.field("all", decode.list(decode.int))
  use owner <- decode.field("owner", decode.list(decode.int))
  decode.success(ParticipationStats(all: all, owner: owner))
}

pub fn participation_stats_encode(data: ParticipationStats) {
  json.object(
    [
      #("all", json.array(_, json.int)(data.all)),
      #("owner", json.array(_, json.int)(data.owner))
    ],
  )
}

pub fn webhook_dependabot_alert_dismissed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertDismissed(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_dismissed_encode(
  data: WebhookDependabotAlertDismissed,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn code_scanning_alert_items_decoder() {
  use dismissed_comment <- decode.optional_field(
    "dismissed_comment",
    None,
    decode.optional(code_scanning_alert_dismissed_comment_decoder()),
  )
  use number <- decode.field("number", alert_number_decoder())
  use dismissed_at <- decode.field("dismissed_at", alert_dismissed_at_decoder())
  use created_at <- decode.field("created_at", alert_created_at_decoder())
  use dismissed_by <- decode.field(
    "dismissed_by",
    nullable_simple_user_decoder(),
  )
  use instances_url <- decode.field(
    "instances_url",
    alert_instances_url_decoder(),
  )
  use url <- decode.field("url", alert_url_decoder())
  use state <- decode.field("state", code_scanning_alert_state_decoder())
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(alert_updated_at_decoder()),
  )
  use tool <- decode.field("tool", code_scanning_analysis_tool_decoder())
  use dismissed_reason <- decode.field(
    "dismissed_reason",
    code_scanning_alert_dismissed_reason_decoder(),
  )
  use html_url <- decode.field("html_url", alert_html_url_decoder())
  use rule <- decode.field("rule", code_scanning_alert_rule_summary_decoder())
  use most_recent_instance <- decode.field(
    "most_recent_instance",
    code_scanning_alert_instance_decoder(),
  )
  use fixed_at <- decode.optional_field(
    "fixed_at",
    None,
    decode.optional(alert_fixed_at_decoder()),
  )
  decode.success(
    CodeScanningAlertItems(
      dismissed_comment: dismissed_comment,
      number: number,
      dismissed_at: dismissed_at,
      created_at: created_at,
      dismissed_by: dismissed_by,
      instances_url: instances_url,
      url: url,
      state: state,
      updated_at: updated_at,
      tool: tool,
      dismissed_reason: dismissed_reason,
      html_url: html_url,
      rule: rule,
      most_recent_instance: most_recent_instance,
      fixed_at: fixed_at,
    ),
  )
}

pub fn code_scanning_alert_items_encode(data: CodeScanningAlertItems) {
  json.object(
    [
      #(
        "dismissed_comment",
        json.nullable(
          data.dismissed_comment,
          code_scanning_alert_dismissed_comment_encode,
        ),
      ),
      #("number", alert_number_encode(data.number)),
      #("dismissed_at", alert_dismissed_at_encode(data.dismissed_at)),
      #("created_at", alert_created_at_encode(data.created_at)),
      #("dismissed_by", nullable_simple_user_encode(data.dismissed_by)),
      #("instances_url", alert_instances_url_encode(data.instances_url)),
      #("url", alert_url_encode(data.url)),
      #("state", code_scanning_alert_state_encode(data.state)),
      #("updated_at", json.nullable(data.updated_at, alert_updated_at_encode)),
      #("tool", code_scanning_analysis_tool_encode(data.tool)),
      #(
        "dismissed_reason",
        code_scanning_alert_dismissed_reason_encode(data.dismissed_reason),
      ),
      #("html_url", alert_html_url_encode(data.html_url)),
      #("rule", code_scanning_alert_rule_summary_encode(data.rule)),
      #(
        "most_recent_instance",
        code_scanning_alert_instance_encode(data.most_recent_instance),
      ),
      #("fixed_at", json.nullable(data.fixed_at, alert_fixed_at_encode))
    ],
  )
}

pub fn secret_scanning_location_discussion_comment_decoder() {
  use discussion_comment_url <- decode.field(
    "discussion_comment_url",
    decode.string,
  )
  decode.success(
    SecretScanningLocationDiscussionComment(
      discussion_comment_url: discussion_comment_url,
    ),
  )
}

pub fn secret_scanning_location_discussion_comment_encode(
  data: SecretScanningLocationDiscussionComment,
) {
  json.object(
    [#("discussion_comment_url", json.string(data.discussion_comment_url))],
  )
}

pub fn referenced_workflow_decoder() {
  use path_ <- decode.field("path", decode.string)
  use sha <- decode.field("sha", decode.string)
  use ref <- decode.optional_field("ref", None, decode.optional(decode.string))
  decode.success(ReferencedWorkflow(path_: path_, sha: sha, ref: ref))
}

pub fn referenced_workflow_encode(data: ReferencedWorkflow) {
  json.object(
    [
      #("path", json.string(data.path_)),
      #("sha", json.string(data.sha)),
      #("ref", json.nullable(data.ref, json.string))
    ],
  )
}

pub fn webhook_secret_scanning_alert_publicly_leaked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", secret_scanning_alert_webhook_decoder())
  decode.success(
    WebhookSecretScanningAlertPubliclyLeaked(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_secret_scanning_alert_publicly_leaked_encode(
  data: WebhookSecretScanningAlertPubliclyLeaked,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", secret_scanning_alert_webhook_encode(data.alert))
    ],
  )
}

pub fn repository_collaborator_permission_decoder() {
  use user <- decode.field("user", nullable_collaborator_decoder())
  use permission <- decode.field("permission", decode.string)
  use role_name <- decode.field("role_name", decode.string)
  decode.success(
    RepositoryCollaboratorPermission(
      user: user,
      permission: permission,
      role_name: role_name,
    ),
  )
}

pub fn repository_collaborator_permission_encode(
  data: RepositoryCollaboratorPermission,
) {
  json.object(
    [
      #("user", nullable_collaborator_encode(data.user)),
      #("permission", json.string(data.permission)),
      #("role_name", json.string(data.role_name))
    ],
  )
}

pub fn organization_invitation_decoder() {
  use invitation_teams_url <- decode.field("invitation_teams_url", decode.string)
  use invitation_source <- decode.optional_field(
    "invitation_source",
    None,
    decode.optional(decode.string),
  )
  use failed_reason <- decode.optional_field(
    "failed_reason",
    None,
    decode.optional(decode.string),
  )
  use inviter <- decode.field("inviter", simple_user_decoder())
  use login <- decode.optional_field(
    "login",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use team_count <- decode.field("team_count", decode.int)
  use failed_at <- decode.optional_field(
    "failed_at",
    None,
    decode.optional(decode.string),
  )
  use role <- decode.field("role", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationInvitation(
      invitation_teams_url: invitation_teams_url,
      invitation_source: invitation_source,
      failed_reason: failed_reason,
      inviter: inviter,
      login: login,
      created_at: created_at,
      team_count: team_count,
      failed_at: failed_at,
      role: role,
      node_id: node_id,
      id: id,
      email: email,
    ),
  )
}

pub fn organization_invitation_encode(data: OrganizationInvitation) {
  json.object(
    [
      #("invitation_teams_url", json.string(data.invitation_teams_url)),
      #("invitation_source", json.nullable(data.invitation_source, json.string)),
      #("failed_reason", json.nullable(data.failed_reason, json.string)),
      #("inviter", simple_user_encode(data.inviter)),
      #("login", json.nullable(data.login, json.string)),
      #("created_at", json.string(data.created_at)),
      #("team_count", json.int(data.team_count)),
      #("failed_at", json.nullable(data.failed_at, json.string)),
      #("role", json.string(data.role)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn code_scanning_alert_classification_decoder() {
  decode.string
}

pub fn code_scanning_alert_classification_encode(
  data: CodeScanningAlertClassification,
) {
  json.string(data)
}

pub fn short_branch_decoder() {
  use protection_url <- decode.optional_field(
    "protection_url",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use protected <- decode.field("protected", decode.bool)
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use protection <- decode.optional_field(
    "protection",
    None,
    decode.optional(branch_protection_decoder()),
  )
  decode.success(
    ShortBranch(
      protection_url: protection_url,
      name: name,
      protected: protected,
      commit: commit,
      protection: protection,
    ),
  )
}

pub fn short_branch_encode(data: ShortBranch) {
  json.object(
    [
      #("protection_url", json.nullable(data.protection_url, json.string)),
      #("name", json.string(data.name)),
      #("protected", json.bool(data.protected)),
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit)),
      #("protection", json.nullable(data.protection, branch_protection_encode))
    ],
  )
}

pub fn webhook_pull_request_unlocked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestUnlocked(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_unlocked_encode(data: WebhookPullRequestUnlocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn status_decoder() {
  use target_url <- decode.optional_field(
    "target_url",
    None,
    decode.optional(decode.string),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use context <- decode.field("context", decode.string)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Status(
      target_url: target_url,
      avatar_url: avatar_url,
      created_at: created_at,
      creator: creator,
      url: url,
      context: context,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn status_encode(data: Status) {
  json.object(
    [
      #("target_url", json.nullable(data.target_url, json.string)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("url", json.string(data.url)),
      #("context", json.string(data.context)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn git_commit_decoder() {
  use message <- decode.field("message", decode.string)
  use parents <- decode.field(
    "parents",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use committer <- decode.field(
    "committer",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use author <- decode.field(
    "author",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use verification <- decode.field(
    "verification",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use html_url <- decode.field("html_url", decode.string)
  use tree <- decode.field(
    "tree",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    GitCommit(
      message: message,
      parents: parents,
      committer: committer,
      author: author,
      sha: sha,
      url: url,
      node_id: node_id,
      verification: verification,
      html_url: html_url,
      tree: tree,
    ),
  )
}

pub fn git_commit_encode(data: GitCommit) {
  json.object(
    [
      #("message", json.string(data.message)),
      #(
        "parents",
        json.array(_, fn(_) { panic as "object in array" })(data.parents),
      ),
      #(
        "committer",
        fn(_) { panic as "Literal object inside field" }(data.committer),
      ),
      #("author", fn(_) { panic as "Literal object inside field" }(data.author)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("node_id", json.string(data.node_id)),
      #(
        "verification",
        fn(_) { panic as "Literal object inside field" }(data.verification),
      ),
      #("html_url", json.string(data.html_url)),
      #("tree", fn(_) { panic as "Literal object inside field" }(data.tree))
    ],
  )
}

pub fn webhooks_team_one_decoder() {
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.optional_field(
    "members_url",
    None,
    decode.optional(decode.string),
  )
  use parent <- decode.optional_field(
    "parent",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use name <- decode.field("name", decode.string)
  use slug <- decode.optional_field("slug", None, decode.optional(decode.string))
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use permission <- decode.optional_field(
    "permission",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use repositories_url <- decode.optional_field(
    "repositories_url",
    None,
    decode.optional(decode.string),
  )
  use deleted <- decode.optional_field(
    "deleted",
    None,
    decode.optional(decode.bool),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksTeam1(
      privacy: privacy,
      members_url: members_url,
      parent: parent,
      name: name,
      slug: slug,
      url: url,
      permission: permission,
      node_id: node_id,
      repositories_url: repositories_url,
      deleted: deleted,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn webhooks_team_one_encode(data: WebhooksTeam1) {
  json.object(
    [
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.nullable(data.members_url, json.string)),
      #(
        "parent",
        json.nullable(
          data.parent,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("name", json.string(data.name)),
      #("slug", json.nullable(data.slug, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("permission", json.nullable(data.permission, json.string)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("repositories_url", json.nullable(data.repositories_url, json.string)),
      #("deleted", json.nullable(data.deleted, json.bool)),
      #("id", json.int(data.id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn issue_search_result_item_decoder() {
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.optional_field(
    "assignees",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use locked <- decode.field("locked", decode.bool)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_decoder()),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", nullable_simple_user_decoder())
  use milestone <- decode.field("milestone", nullable_milestone_decoder())
  use timeline_url <- decode.optional_field(
    "timeline_url",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.field("state", decode.string)
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use score <- decode.field("score", decode.float)
  use comments <- decode.field("comments", decode.int)
  use pull_request <- decode.optional_field(
    "pull_request",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field(
    "labels",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    IssueSearchResultItem(
      text_matches: text_matches,
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      closed_at: closed_at,
      body_html: body_html,
      events_url: events_url,
      number: number,
      created_at: created_at,
      body_text: body_text,
      locked: locked,
      repository: repository,
      reactions: reactions,
      user: user,
      author_association: author_association,
      labels_url: labels_url,
      url: url,
      assignee: assignee,
      milestone: milestone,
      timeline_url: timeline_url,
      state: state,
      state_reason: state_reason,
      score: score,
      comments: comments,
      pull_request: pull_request,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn issue_search_result_item_encode(data: IssueSearchResultItem) {
  json.object(
    [
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.nullable(data.assignees, json.array(_, simple_user_encode)),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("events_url", json.string(data.events_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("locked", json.bool(data.locked)),
      #("repository", json.nullable(data.repository, repository_encode)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("assignee", nullable_simple_user_encode(data.assignee)),
      #("milestone", nullable_milestone_encode(data.milestone)),
      #("timeline_url", json.nullable(data.timeline_url, json.string)),
      #("state", json.string(data.state)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("score", json.float(data.score)),
      #("comments", json.int(data.comments)),
      #(
        "pull_request",
        json.nullable(
          data.pull_request,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.array(_, fn(_) { panic as "object in array" })(data.labels),
      )
    ],
  )
}

pub fn status_check_policy_decoder() {
  use contexts <- decode.field("contexts", decode.list(decode.string))
  use strict <- decode.field("strict", decode.bool)
  use checks <- decode.field(
    "checks",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use contexts_url <- decode.field("contexts_url", decode.string)
  decode.success(
    StatusCheckPolicy(
      contexts: contexts,
      strict: strict,
      checks: checks,
      url: url,
      contexts_url: contexts_url,
    ),
  )
}

pub fn status_check_policy_encode(data: StatusCheckPolicy) {
  json.object(
    [
      #("contexts", json.array(_, json.string)(data.contexts)),
      #("strict", json.bool(data.strict)),
      #(
        "checks",
        json.array(_, fn(_) { panic as "object in array" })(data.checks),
      ),
      #("url", json.string(data.url)),
      #("contexts_url", json.string(data.contexts_url))
    ],
  )
}

pub fn repository_rule_enforcement_decoder() {
  decode.string
}

pub fn repository_rule_enforcement_encode(data: RepositoryRuleEnforcement) {
  json.string(data)
}

pub fn organization_programmatic_access_grant_request_decoder() {
  use token_id <- decode.field("token_id", decode.int)
  use permissions <- decode.field(
    "permissions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(decode.string),
  )
  use token_expires_at <- decode.optional_field(
    "token_expires_at",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use token_name <- decode.field("token_name", decode.string)
  use token_last_used_at <- decode.optional_field(
    "token_last_used_at",
    None,
    decode.optional(decode.string),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use repository_selection <- decode.field("repository_selection", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use token_expired <- decode.field("token_expired", decode.bool)
  decode.success(
    OrganizationProgrammaticAccessGrantRequest(
      token_id: token_id,
      permissions: permissions,
      reason: reason,
      token_expires_at: token_expires_at,
      created_at: created_at,
      token_name: token_name,
      token_last_used_at: token_last_used_at,
      owner: owner,
      repository_selection: repository_selection,
      repositories_url: repositories_url,
      id: id,
      token_expired: token_expired,
    ),
  )
}

pub fn organization_programmatic_access_grant_request_encode(
  data: OrganizationProgrammaticAccessGrantRequest,
) {
  json.object(
    [
      #("token_id", json.int(data.token_id)),
      #(
        "permissions",
        fn(_) { panic as "Literal object inside field" }(data.permissions),
      ),
      #("reason", json.nullable(data.reason, json.string)),
      #("token_expires_at", json.nullable(data.token_expires_at, json.string)),
      #("created_at", json.string(data.created_at)),
      #("token_name", json.string(data.token_name)),
      #(
        "token_last_used_at",
        json.nullable(data.token_last_used_at, json.string),
      ),
      #("owner", simple_user_encode(data.owner)),
      #("repository_selection", json.string(data.repository_selection)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("token_expired", json.bool(data.token_expired))
    ],
  )
}

pub fn nullable_collaborator_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use role_name <- decode.field("role_name", decode.string)
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    NullableCollaborator(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      permissions: permissions,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      role_name: role_name,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn nullable_collaborator_encode(data: NullableCollaborator) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("repos_url", json.string(data.repos_url)),
      #("role_name", json.string(data.role_name)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("node_id", json.string(data.node_id)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn webhook_dependabot_alert_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertReopened(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_reopened_encode(
  data: WebhookDependabotAlertReopened,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn secret_scanning_location_issue_comment_decoder() {
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  decode.success(
    SecretScanningLocationIssueComment(issue_comment_url: issue_comment_url),
  )
}

pub fn secret_scanning_location_issue_comment_encode(
  data: SecretScanningLocationIssueComment,
) {
  json.object([#("issue_comment_url", json.string(data.issue_comment_url))])
}

pub fn webhook_discussion_unlocked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionUnlocked(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_unlocked_encode(data: WebhookDiscussionUnlocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn actions_default_workflow_permissions_decoder() {
  decode.string
}

pub fn actions_default_workflow_permissions_encode(
  data: ActionsDefaultWorkflowPermissions,
) {
  json.string(data)
}

pub fn secret_scanning_location_pull_request_comment_decoder() {
  use pull_request_comment_url <- decode.field(
    "pull_request_comment_url",
    decode.string,
  )
  decode.success(
    SecretScanningLocationPullRequestComment(
      pull_request_comment_url: pull_request_comment_url,
    ),
  )
}

pub fn secret_scanning_location_pull_request_comment_encode(
  data: SecretScanningLocationPullRequestComment,
) {
  json.object(
    [#("pull_request_comment_url", json.string(data.pull_request_comment_url))],
  )
}

pub fn webhook_release_published_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use release <- decode.field("release", webhooks_release_one_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleasePublished(
      enterprise: enterprise,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_published_encode(data: WebhookReleasePublished) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("release", webhooks_release_one_encode(data.release)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn nullable_git_user_decoder() {
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use date <- decode.optional_field("date", None, decode.optional(decode.string))
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(NullableGitUser(name: name, date: date, email: email))
}

pub fn nullable_git_user_encode(data: NullableGitUser) {
  json.object(
    [
      #("name", json.nullable(data.name, json.string)),
      #("date", json.nullable(data.date, json.string)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn artifact_decoder() {
  use expired <- decode.field("expired", decode.bool)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use workflow_run <- decode.optional_field(
    "workflow_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use size_in_bytes <- decode.field("size_in_bytes", decode.int)
  use archive_download_url <- decode.field("archive_download_url", decode.string)
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use expires_at <- decode.optional_field(
    "expires_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Artifact(
      expired: expired,
      created_at: created_at,
      workflow_run: workflow_run,
      name: name,
      url: url,
      size_in_bytes: size_in_bytes,
      archive_download_url: archive_download_url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      expires_at: expires_at,
    ),
  )
}

pub fn artifact_encode(data: Artifact) {
  json.object(
    [
      #("expired", json.bool(data.expired)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #(
        "workflow_run",
        json.nullable(
          data.workflow_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("size_in_bytes", json.int(data.size_in_bytes)),
      #("archive_download_url", json.string(data.archive_download_url)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("expires_at", json.nullable(data.expires_at, json.string))
    ],
  )
}

pub fn simple_commit_decoder() {
  use message <- decode.field("message", decode.string)
  use committer <- decode.optional_field(
    "committer",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author <- decode.optional_field(
    "author",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use timestamp <- decode.field("timestamp", decode.string)
  use id <- decode.field("id", decode.string)
  use tree_id <- decode.field("tree_id", decode.string)
  decode.success(
    SimpleCommit(
      message: message,
      committer: committer,
      author: author,
      timestamp: timestamp,
      id: id,
      tree_id: tree_id,
    ),
  )
}

pub fn simple_commit_encode(data: SimpleCommit) {
  json.object(
    [
      #("message", json.string(data.message)),
      #(
        "committer",
        json.nullable(
          data.committer,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "author",
        json.nullable(
          data.author,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("timestamp", json.string(data.timestamp)),
      #("id", json.string(data.id)),
      #("tree_id", json.string(data.tree_id))
    ],
  )
}

pub fn webhook_dependabot_alert_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_created_encode(
  data: WebhookDependabotAlertCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn webhook_repository_import_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use status <- decode.field("status", decode.string)
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryImport(
      enterprise: enterprise,
      repository: repository,
      status: status,
      organization: organization,
      sender: sender,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_import_encode(data: WebhookRepositoryImport) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("status", json.string(data.status)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn protected_branch_pull_request_review_decoder() {
  use dismiss_stale_reviews <- decode.field("dismiss_stale_reviews", decode.bool)
  use bypass_pull_request_allowances <- decode.optional_field(
    "bypass_pull_request_allowances",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use dismissal_restrictions <- decode.optional_field(
    "dismissal_restrictions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use require_code_owner_reviews <- decode.field(
    "require_code_owner_reviews",
    decode.bool,
  )
  use require_last_push_approval <- decode.optional_field(
    "require_last_push_approval",
    None,
    decode.optional(decode.bool),
  )
  use required_approving_review_count <- decode.optional_field(
    "required_approving_review_count",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    ProtectedBranchPullRequestReview(
      dismiss_stale_reviews: dismiss_stale_reviews,
      bypass_pull_request_allowances: bypass_pull_request_allowances,
      url: url,
      dismissal_restrictions: dismissal_restrictions,
      require_code_owner_reviews: require_code_owner_reviews,
      require_last_push_approval: require_last_push_approval,
      required_approving_review_count: required_approving_review_count,
    ),
  )
}

pub fn protected_branch_pull_request_review_encode(
  data: ProtectedBranchPullRequestReview,
) {
  json.object(
    [
      #("dismiss_stale_reviews", json.bool(data.dismiss_stale_reviews)),
      #(
        "bypass_pull_request_allowances",
        json.nullable(
          data.bypass_pull_request_allowances,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.nullable(data.url, json.string)),
      #(
        "dismissal_restrictions",
        json.nullable(
          data.dismissal_restrictions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("require_code_owner_reviews", json.bool(data.require_code_owner_reviews)),
      #(
        "require_last_push_approval",
        json.nullable(data.require_last_push_approval, json.bool),
      ),
      #(
        "required_approving_review_count",
        json.nullable(data.required_approving_review_count, json.int),
      )
    ],
  )
}

pub fn ssh_signing_key_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use key <- decode.field("key", decode.string)
  decode.success(
    SshSigningKey(created_at: created_at, title: title, id: id, key: key),
  )
}

pub fn ssh_signing_key_encode(data: SshSigningKey) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn webhook_check_run_requested_action_decoder() {
  use requested_action <- decode.optional_field(
    "requested_action",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use check_run <- decode.field(
    "check_run",
    check_run_with_simple_check_suite_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckRunRequestedAction(
      requested_action: requested_action,
      repository: repository,
      organization: organization,
      check_run: check_run,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_run_requested_action_encode(
  data: WebhookCheckRunRequestedAction,
) {
  json.object(
    [
      #(
        "requested_action",
        json.nullable(
          data.requested_action,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("check_run", check_run_with_simple_check_suite_encode(data.check_run)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_violation_error_decoder() {
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use documentation_url <- decode.optional_field(
    "documentation_url",
    None,
    decode.optional(decode.string),
  )
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryRuleViolationError(
      message: message,
      documentation_url: documentation_url,
      metadata: metadata,
      status: status,
    ),
  )
}

pub fn repository_rule_violation_error_encode(data: RepositoryRuleViolationError) {
  json.object(
    [
      #("message", json.nullable(data.message, json.string)),
      #("documentation_url", json.nullable(data.documentation_url, json.string)),
      #(
        "metadata",
        json.nullable(
          data.metadata,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("status", json.nullable(data.status, json.string))
    ],
  )
}

pub fn webhook_create_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use ref_type <- decode.field("ref_type", decode.string)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use pusher_type <- decode.field(
    "pusher_type",
    webhooks_deploy_pusher_type_decoder(),
  )
  use ref <- decode.field("ref", webhooks_ref_0_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use master_branch <- decode.field("master_branch", decode.string)
  decode.success(
    WebhookCreate(
      enterprise: enterprise,
      ref_type: ref_type,
      repository: repository,
      pusher_type: pusher_type,
      ref: ref,
      organization: organization,
      sender: sender,
      installation: installation,
      description: description,
      master_branch: master_branch,
    ),
  )
}

pub fn webhook_create_encode(data: WebhookCreate) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("ref_type", json.string(data.ref_type)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("pusher_type", webhooks_deploy_pusher_type_encode(data.pusher_type)),
      #("ref", webhooks_ref_0_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("description", json.nullable(data.description, json.string)),
      #("master_branch", json.string(data.master_branch))
    ],
  )
}

pub fn webhook_workflow_dispatch_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use inputs <- decode.optional_field(
    "inputs",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.field("ref", decode.string)
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow <- decode.field("workflow", decode.string)
  decode.success(
    WebhookWorkflowDispatch(
      enterprise: enterprise,
      inputs: inputs,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      installation: installation,
      workflow: workflow,
    ),
  )
}

pub fn webhook_workflow_dispatch_encode(data: WebhookWorkflowDispatch) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "inputs",
        json.nullable(
          data.inputs,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", json.string(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("workflow", json.string(data.workflow))
    ],
  )
}

pub fn content_tree_decoder() {
  use size <- decode.field("size", decode.int)
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use path_ <- decode.field("path", decode.string)
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use entries <- decode.optional_field(
    "entries",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use download_url <- decode.optional_field(
    "download_url",
    None,
    decode.optional(decode.string),
  )
  use content <- decode.optional_field(
    "content",
    None,
    decode.optional(decode.string),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use type_ <- decode.field("type", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ContentTree(
      size: size,
      git_url: git_url,
      path_: path_,
      name: name,
      sha: sha,
      url: url,
      entries: entries,
      download_url: download_url,
      content: content,
      links: links,
      type_: type_,
      html_url: html_url,
    ),
  )
}

pub fn content_tree_encode(data: ContentTree) {
  json.object(
    [
      #("size", json.int(data.size)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("path", json.string(data.path_)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #(
        "entries",
        json.nullable(
          data.entries,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("download_url", json.nullable(data.download_url, json.string)),
      #("content", json.nullable(data.content, json.string)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("type", json.string(data.type_)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn webhook_branch_protection_configuration_disabled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookBranchProtectionConfigurationDisabled(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_branch_protection_configuration_disabled_encode(
  data: WebhookBranchProtectionConfigurationDisabled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_issues_demilestoned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(webhooks_milestone_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesDemilestoned(
      enterprise: enterprise,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_demilestoned_encode(data: WebhookIssuesDemilestoned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", json.nullable(data.milestone, webhooks_milestone_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_security_configuration_for_repository_decoder() {
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  use configuration <- decode.optional_field(
    "configuration",
    None,
    decode.optional(code_security_configuration_decoder()),
  )
  decode.success(
    CodeSecurityConfigurationForRepository(
      status: status,
      configuration: configuration,
    ),
  )
}

pub fn code_security_configuration_for_repository_encode(
  data: CodeSecurityConfigurationForRepository,
) {
  json.object(
    [
      #("status", json.nullable(data.status, json.string)),
      #(
        "configuration",
        json.nullable(data.configuration, code_security_configuration_encode),
      )
    ],
  )
}

pub fn review_requested_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use requested_team <- decode.optional_field(
    "requested_team",
    None,
    decode.optional(team_decoder()),
  )
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use review_requester <- decode.field("review_requester", simple_user_decoder())
  use requested_reviewer <- decode.optional_field(
    "requested_reviewer",
    None,
    decode.optional(simple_user_decoder()),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    ReviewRequestedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      requested_team: requested_team,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      review_requester: review_requester,
      requested_reviewer: requested_reviewer,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn review_requested_issue_event_encode(data: ReviewRequestedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("requested_team", json.nullable(data.requested_team, team_encode)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("review_requester", simple_user_encode(data.review_requester)),
      #(
        "requested_reviewer",
        json.nullable(data.requested_reviewer, simple_user_encode),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn actions_cache_usage_org_enterprise_decoder() {
  use total_active_caches_size_in_bytes <- decode.field(
    "total_active_caches_size_in_bytes",
    decode.int,
  )
  use total_active_caches_count <- decode.field(
    "total_active_caches_count",
    decode.int,
  )
  decode.success(
    ActionsCacheUsageOrgEnterprise(
      total_active_caches_size_in_bytes: total_active_caches_size_in_bytes,
      total_active_caches_count: total_active_caches_count,
    ),
  )
}

pub fn actions_cache_usage_org_enterprise_encode(
  data: ActionsCacheUsageOrgEnterprise,
) {
  json.object(
    [
      #(
        "total_active_caches_size_in_bytes",
        json.int(data.total_active_caches_size_in_bytes),
      ),
      #("total_active_caches_count", json.int(data.total_active_caches_count))
    ],
  )
}

pub fn workflow_run_usage_decoder() {
  use billable <- decode.field(
    "billable",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use run_duration_ms <- decode.optional_field(
    "run_duration_ms",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    WorkflowRunUsage(billable: billable, run_duration_ms: run_duration_ms),
  )
}

pub fn workflow_run_usage_encode(data: WorkflowRunUsage) {
  json.object(
    [
      #(
        "billable",
        fn(_) { panic as "Literal object inside field" }(data.billable),
      ),
      #("run_duration_ms", json.nullable(data.run_duration_ms, json.int))
    ],
  )
}

pub fn webhook_package_published_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use package <- decode.field(
    "package",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPackagePublished(
      enterprise: enterprise,
      package: package,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_package_published_encode(data: WebhookPackagePublished) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "package",
        fn(_) { panic as "Literal object inside field" }(data.package),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_projects_v2_project_edited_decoder() {
  use projects_v2 <- decode.field("projects_v2", projects_v2_decoder())
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ProjectEdited(
      projects_v2: projects_v2,
      changes: changes,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_project_edited_encode(
  data: WebhookProjectsV2ProjectEdited,
) {
  json.object(
    [
      #("projects_v2", projects_v2_encode(data.projects_v2)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_security_advisory_published_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use security_advisory <- decode.field(
    "security_advisory",
    webhooks_security_advisory_decoder(),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSecurityAdvisoryPublished(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      security_advisory: security_advisory,
      installation: installation,
    ),
  )
}

pub fn webhook_security_advisory_published_encode(
  data: WebhookSecurityAdvisoryPublished,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "security_advisory",
        webhooks_security_advisory_encode(data.security_advisory),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_organization_member_added_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use membership <- decode.field("membership", webhooks_membership_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookOrganizationMemberAdded(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      membership: membership,
      installation: installation,
    ),
  )
}

pub fn webhook_organization_member_added_encode(
  data: WebhookOrganizationMemberAdded,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("membership", webhooks_membership_encode(data.membership)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn codespaces_permissions_check_for_devcontainer_decoder() {
  use accepted <- decode.field("accepted", decode.bool)
  decode.success(CodespacesPermissionsCheckForDevcontainer(accepted: accepted))
}

pub fn codespaces_permissions_check_for_devcontainer_encode(
  data: CodespacesPermissionsCheckForDevcontainer,
) {
  json.object([#("accepted", json.bool(data.accepted))])
}

pub fn actions_enabled_decoder() {
  decode.bool
}

pub fn actions_enabled_encode(data: ActionsEnabled) {
  json.bool(data)
}

pub fn repository_ruleset_conditions_repository_property_target_decoder() {
  use repository_property <- decode.field(
    "repository_property",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    RepositoryRulesetConditionsRepositoryPropertyTarget(
      repository_property: repository_property,
    ),
  )
}

pub fn repository_ruleset_conditions_repository_property_target_encode(
  data: RepositoryRulesetConditionsRepositoryPropertyTarget,
) {
  json.object(
    [
      #(
        "repository_property",
        fn(_) { panic as "Literal object inside field" }(
          data.repository_property,
        ),
      )
    ],
  )
}

pub fn package_version_decoder() {
  use license <- decode.optional_field(
    "license",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use package_html_url <- decode.field("package_html_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use deleted_at <- decode.optional_field(
    "deleted_at",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    PackageVersion(
      license: license,
      created_at: created_at,
      name: name,
      url: url,
      metadata: metadata,
      package_html_url: package_html_url,
      updated_at: updated_at,
      deleted_at: deleted_at,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn package_version_encode(data: PackageVersion) {
  json.object(
    [
      #("license", json.nullable(data.license, json.string)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #(
        "metadata",
        json.nullable(
          data.metadata,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("package_html_url", json.string(data.package_html_url)),
      #("updated_at", json.string(data.updated_at)),
      #("deleted_at", json.nullable(data.deleted_at, json.string)),
      #("id", json.int(data.id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn pages_deployment_status_decoder() {
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  decode.success(PagesDeploymentStatus(status: status))
}

pub fn pages_deployment_status_encode(data: PagesDeploymentStatus) {
  json.object([#("status", json.nullable(data.status, json.string))])
}

pub fn webhook_projects_v2_project_deleted_decoder() {
  use projects_v2 <- decode.field("projects_v2", projects_v2_decoder())
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ProjectDeleted(
      projects_v2: projects_v2,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_project_deleted_encode(
  data: WebhookProjectsV2ProjectDeleted,
) {
  json.object(
    [
      #("projects_v2", projects_v2_encode(data.projects_v2)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_label_decoder() {
  use default <- decode.field("default", decode.bool)
  use color <- decode.field("color", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksLabel(
      default: default,
      color: color,
      name: name,
      url: url,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn webhooks_label_encode(data: WebhooksLabel) {
  json.object(
    [
      #("default", json.bool(data.default)),
      #("color", json.string(data.color)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn pull_request_webhook_decoder() {
  panic as "AllOf"
}

pub fn pull_request_webhook_encode(_data: PullRequestWebhook) {
  panic as "AllOf"
}

pub fn actions_workflow_access_to_repository_decoder() {
  use access_level <- decode.field("access_level", decode.string)
  decode.success(ActionsWorkflowAccessToRepository(access_level: access_level))
}

pub fn actions_workflow_access_to_repository_encode(
  data: ActionsWorkflowAccessToRepository,
) {
  json.object([#("access_level", json.string(data.access_level))])
}

pub fn webhook_organization_member_removed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use membership <- decode.field("membership", webhooks_membership_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookOrganizationMemberRemoved(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      membership: membership,
      installation: installation,
    ),
  )
}

pub fn webhook_organization_member_removed_encode(
  data: WebhookOrganizationMemberRemoved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("membership", webhooks_membership_encode(data.membership)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn projects_v2_item_decoder() {
  use content_type <- decode.field(
    "content_type",
    projects_v2_item_content_type_decoder(),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.optional_field(
    "creator",
    None,
    decode.optional(simple_user_decoder()),
  )
  use archived_at <- decode.optional_field(
    "archived_at",
    None,
    decode.optional(decode.string),
  )
  use project_node_id <- decode.optional_field(
    "project_node_id",
    None,
    decode.optional(decode.string),
  )
  use content_node_id <- decode.field("content_node_id", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.float)
  decode.success(
    ProjectsV2Item(
      content_type: content_type,
      created_at: created_at,
      creator: creator,
      archived_at: archived_at,
      project_node_id: project_node_id,
      content_node_id: content_node_id,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
    ),
  )
}

pub fn projects_v2_item_encode(data: ProjectsV2Item) {
  json.object(
    [
      #("content_type", projects_v2_item_content_type_encode(data.content_type)),
      #("created_at", json.string(data.created_at)),
      #("creator", json.nullable(data.creator, simple_user_encode)),
      #("archived_at", json.nullable(data.archived_at, json.string)),
      #("project_node_id", json.nullable(data.project_node_id, json.string)),
      #("content_node_id", json.string(data.content_node_id)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("id", json.float(data.id))
    ],
  )
}

pub fn code_scanning_sarifs_status_decoder() {
  use errors <- decode.optional_field(
    "errors",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use analyses_url <- decode.optional_field(
    "analyses_url",
    None,
    decode.optional(decode.string),
  )
  use processing_status <- decode.optional_field(
    "processing_status",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeScanningSarifsStatus(
      errors: errors,
      analyses_url: analyses_url,
      processing_status: processing_status,
    ),
  )
}

pub fn code_scanning_sarifs_status_encode(data: CodeScanningSarifsStatus) {
  json.object(
    [
      #("errors", json.nullable(data.errors, json.array(_, json.string))),
      #("analyses_url", json.nullable(data.analyses_url, json.string)),
      #("processing_status", json.nullable(data.processing_status, json.string))
    ],
  )
}

pub fn actions_repository_permissions_decoder() {
  use enabled <- decode.field("enabled", actions_enabled_decoder())
  use allowed_actions <- decode.optional_field(
    "allowed_actions",
    None,
    decode.optional(allowed_actions_decoder()),
  )
  use selected_actions_url <- decode.optional_field(
    "selected_actions_url",
    None,
    decode.optional(selected_actions_url_decoder()),
  )
  decode.success(
    ActionsRepositoryPermissions(
      enabled: enabled,
      allowed_actions: allowed_actions,
      selected_actions_url: selected_actions_url,
    ),
  )
}

pub fn actions_repository_permissions_encode(data: ActionsRepositoryPermissions) {
  json.object(
    [
      #("enabled", actions_enabled_encode(data.enabled)),
      #(
        "allowed_actions",
        json.nullable(data.allowed_actions, allowed_actions_encode),
      ),
      #(
        "selected_actions_url",
        json.nullable(data.selected_actions_url, selected_actions_url_encode),
      )
    ],
  )
}

pub fn code_of_conduct_simple_decoder() {
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use key <- decode.field("key", decode.string)
  decode.success(
    CodeOfConductSimple(name: name, url: url, html_url: html_url, key: key),
  )
}

pub fn code_of_conduct_simple_encode(data: CodeOfConductSimple) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn classroom_assignment_grade_decoder() {
  use points_awarded <- decode.field("points_awarded", decode.int)
  use submission_timestamp <- decode.field("submission_timestamp", decode.string)
  use group_name <- decode.optional_field(
    "group_name",
    None,
    decode.optional(decode.string),
  )
  use starter_code_url <- decode.field("starter_code_url", decode.string)
  use points_available <- decode.field("points_available", decode.int)
  use github_username <- decode.field("github_username", decode.string)
  use student_repository_name <- decode.field(
    "student_repository_name",
    decode.string,
  )
  use assignment_name <- decode.field("assignment_name", decode.string)
  use assignment_url <- decode.field("assignment_url", decode.string)
  use roster_identifier <- decode.field("roster_identifier", decode.string)
  use student_repository_url <- decode.field(
    "student_repository_url",
    decode.string,
  )
  decode.success(
    ClassroomAssignmentGrade(
      points_awarded: points_awarded,
      submission_timestamp: submission_timestamp,
      group_name: group_name,
      starter_code_url: starter_code_url,
      points_available: points_available,
      github_username: github_username,
      student_repository_name: student_repository_name,
      assignment_name: assignment_name,
      assignment_url: assignment_url,
      roster_identifier: roster_identifier,
      student_repository_url: student_repository_url,
    ),
  )
}

pub fn classroom_assignment_grade_encode(data: ClassroomAssignmentGrade) {
  json.object(
    [
      #("points_awarded", json.int(data.points_awarded)),
      #("submission_timestamp", json.string(data.submission_timestamp)),
      #("group_name", json.nullable(data.group_name, json.string)),
      #("starter_code_url", json.string(data.starter_code_url)),
      #("points_available", json.int(data.points_available)),
      #("github_username", json.string(data.github_username)),
      #("student_repository_name", json.string(data.student_repository_name)),
      #("assignment_name", json.string(data.assignment_name)),
      #("assignment_url", json.string(data.assignment_url)),
      #("roster_identifier", json.string(data.roster_identifier)),
      #("student_repository_url", json.string(data.student_repository_url))
    ],
  )
}

pub fn webhook_code_scanning_alert_fixed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use commit_oid <- decode.field(
    "commit_oid",
    webhooks_code_scanning_commit_oid_decoder(),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.field("ref", webhooks_code_scanning_ref_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookCodeScanningAlertFixed(
      enterprise: enterprise,
      commit_oid: commit_oid,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_code_scanning_alert_fixed_encode(
  data: WebhookCodeScanningAlertFixed,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("commit_oid", webhooks_code_scanning_commit_oid_encode(data.commit_oid)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", webhooks_code_scanning_ref_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn custom_property_decoder() {
  use value_type <- decode.field("value_type", decode.string)
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use default_value <- decode.optional_field(
    "default_value",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use values_editable_by <- decode.optional_field(
    "values_editable_by",
    None,
    decode.optional(decode.string),
  )
  use property_name <- decode.field("property_name", decode.string)
  use allowed_values <- decode.optional_field(
    "allowed_values",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use source_type <- decode.optional_field(
    "source_type",
    None,
    decode.optional(decode.string),
  )
  use required <- decode.optional_field(
    "required",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    CustomProperty(
      value_type: value_type,
      url: url,
      default_value: default_value,
      values_editable_by: values_editable_by,
      property_name: property_name,
      allowed_values: allowed_values,
      description: description,
      source_type: source_type,
      required: required,
    ),
  )
}

pub fn custom_property_encode(data: CustomProperty) {
  json.object(
    [
      #("value_type", json.string(data.value_type)),
      #("url", json.nullable(data.url, json.string)),
      #(
        "default_value",
        json.nullable(
          data.default_value,
          fn(_) { panic as "OneOf inside field" },
        ),
      ),
      #(
        "values_editable_by",
        json.nullable(data.values_editable_by, json.string),
      ),
      #("property_name", json.string(data.property_name)),
      #(
        "allowed_values",
        json.nullable(data.allowed_values, json.array(_, json.string)),
      ),
      #("description", json.nullable(data.description, json.string)),
      #("source_type", json.nullable(data.source_type, json.string)),
      #("required", json.nullable(data.required, json.bool))
    ],
  )
}

pub fn branch_short_decoder() {
  use name <- decode.field("name", decode.string)
  use protected <- decode.field("protected", decode.bool)
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(BranchShort(name: name, protected: protected, commit: commit))
}

pub fn branch_short_encode(data: BranchShort) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("protected", json.bool(data.protected)),
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit))
    ],
  )
}

pub fn organization_dependabot_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use visibility <- decode.field("visibility", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use selected_repositories_url <- decode.optional_field(
    "selected_repositories_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationDependabotSecret(
      created_at: created_at,
      name: name,
      visibility: visibility,
      updated_at: updated_at,
      selected_repositories_url: selected_repositories_url,
    ),
  )
}

pub fn organization_dependabot_secret_encode(data: OrganizationDependabotSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("visibility", json.string(data.visibility)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "selected_repositories_url",
        json.nullable(data.selected_repositories_url, json.string),
      )
    ],
  )
}

pub fn code_scanning_organization_alert_items_decoder() {
  use dismissed_comment <- decode.optional_field(
    "dismissed_comment",
    None,
    decode.optional(code_scanning_alert_dismissed_comment_decoder()),
  )
  use number <- decode.field("number", alert_number_decoder())
  use dismissed_at <- decode.field("dismissed_at", alert_dismissed_at_decoder())
  use created_at <- decode.field("created_at", alert_created_at_decoder())
  use repository <- decode.field("repository", simple_repository_decoder())
  use dismissed_by <- decode.field(
    "dismissed_by",
    nullable_simple_user_decoder(),
  )
  use instances_url <- decode.field(
    "instances_url",
    alert_instances_url_decoder(),
  )
  use url <- decode.field("url", alert_url_decoder())
  use state <- decode.field("state", code_scanning_alert_state_decoder())
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(alert_updated_at_decoder()),
  )
  use tool <- decode.field("tool", code_scanning_analysis_tool_decoder())
  use dismissed_reason <- decode.field(
    "dismissed_reason",
    code_scanning_alert_dismissed_reason_decoder(),
  )
  use html_url <- decode.field("html_url", alert_html_url_decoder())
  use rule <- decode.field("rule", code_scanning_alert_rule_summary_decoder())
  use most_recent_instance <- decode.field(
    "most_recent_instance",
    code_scanning_alert_instance_decoder(),
  )
  use fixed_at <- decode.optional_field(
    "fixed_at",
    None,
    decode.optional(alert_fixed_at_decoder()),
  )
  decode.success(
    CodeScanningOrganizationAlertItems(
      dismissed_comment: dismissed_comment,
      number: number,
      dismissed_at: dismissed_at,
      created_at: created_at,
      repository: repository,
      dismissed_by: dismissed_by,
      instances_url: instances_url,
      url: url,
      state: state,
      updated_at: updated_at,
      tool: tool,
      dismissed_reason: dismissed_reason,
      html_url: html_url,
      rule: rule,
      most_recent_instance: most_recent_instance,
      fixed_at: fixed_at,
    ),
  )
}

pub fn code_scanning_organization_alert_items_encode(
  data: CodeScanningOrganizationAlertItems,
) {
  json.object(
    [
      #(
        "dismissed_comment",
        json.nullable(
          data.dismissed_comment,
          code_scanning_alert_dismissed_comment_encode,
        ),
      ),
      #("number", alert_number_encode(data.number)),
      #("dismissed_at", alert_dismissed_at_encode(data.dismissed_at)),
      #("created_at", alert_created_at_encode(data.created_at)),
      #("repository", simple_repository_encode(data.repository)),
      #("dismissed_by", nullable_simple_user_encode(data.dismissed_by)),
      #("instances_url", alert_instances_url_encode(data.instances_url)),
      #("url", alert_url_encode(data.url)),
      #("state", code_scanning_alert_state_encode(data.state)),
      #("updated_at", json.nullable(data.updated_at, alert_updated_at_encode)),
      #("tool", code_scanning_analysis_tool_encode(data.tool)),
      #(
        "dismissed_reason",
        code_scanning_alert_dismissed_reason_encode(data.dismissed_reason),
      ),
      #("html_url", alert_html_url_encode(data.html_url)),
      #("rule", code_scanning_alert_rule_summary_encode(data.rule)),
      #(
        "most_recent_instance",
        code_scanning_alert_instance_encode(data.most_recent_instance),
      ),
      #("fixed_at", json.nullable(data.fixed_at, alert_fixed_at_encode))
    ],
  )
}

pub fn webhook_issues_milestoned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.field("milestone", webhooks_milestone_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesMilestoned(
      enterprise: enterprise,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_milestoned_encode(data: WebhookIssuesMilestoned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", webhooks_milestone_encode(data.milestone)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_workflow_run_completed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.field(
    "workflow_run",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow <- decode.field("workflow", webhooks_workflow_decoder())
  decode.success(
    WebhookWorkflowRunCompleted(
      enterprise: enterprise,
      repository: repository,
      workflow_run: workflow_run,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow: workflow,
    ),
  )
}

pub fn webhook_workflow_run_completed_encode(data: WebhookWorkflowRunCompleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        fn(_) { panic as "Literal object inside field" }(data.workflow_run),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("workflow", webhooks_workflow_encode(data.workflow))
    ],
  )
}

pub fn runner_decoder() {
  use os <- decode.field("os", decode.string)
  use runner_group_id <- decode.optional_field(
    "runner_group_id",
    None,
    decode.optional(decode.int),
  )
  use name <- decode.field("name", decode.string)
  use status <- decode.field("status", decode.string)
  use busy <- decode.field("busy", decode.bool)
  use id <- decode.field("id", decode.int)
  use labels <- decode.field("labels", decode.list(runner_label_decoder()))
  decode.success(
    Runner(
      os: os,
      runner_group_id: runner_group_id,
      name: name,
      status: status,
      busy: busy,
      id: id,
      labels: labels,
    ),
  )
}

pub fn runner_encode(data: Runner) {
  json.object(
    [
      #("os", json.string(data.os)),
      #("runner_group_id", json.nullable(data.runner_group_id, json.int)),
      #("name", json.string(data.name)),
      #("status", json.string(data.status)),
      #("busy", json.bool(data.busy)),
      #("id", json.int(data.id)),
      #("labels", json.array(_, runner_label_encode)(data.labels))
    ],
  )
}

pub fn org_repo_custom_property_values_decoder() {
  use repository_name <- decode.field("repository_name", decode.string)
  use repository_full_name <- decode.field("repository_full_name", decode.string)
  use repository_id <- decode.field("repository_id", decode.int)
  use properties <- decode.field(
    "properties",
    decode.list(custom_property_value_decoder()),
  )
  decode.success(
    OrgRepoCustomPropertyValues(
      repository_name: repository_name,
      repository_full_name: repository_full_name,
      repository_id: repository_id,
      properties: properties,
    ),
  )
}

pub fn org_repo_custom_property_values_encode(data: OrgRepoCustomPropertyValues) {
  json.object(
    [
      #("repository_name", json.string(data.repository_name)),
      #("repository_full_name", json.string(data.repository_full_name)),
      #("repository_id", json.int(data.repository_id)),
      #(
        "properties",
        json.array(_, custom_property_value_encode)(data.properties),
      )
    ],
  )
}

pub fn webhook_repository_dispatch_sample_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use branch <- decode.field("branch", decode.string)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use client_payload <- decode.optional_field(
    "client_payload",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use installation <- decode.field("installation", simple_installation_decoder())
  decode.success(
    WebhookRepositoryDispatchSample(
      enterprise: enterprise,
      branch: branch,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      client_payload: client_payload,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_dispatch_sample_encode(
  data: WebhookRepositoryDispatchSample,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("branch", json.string(data.branch)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "client_payload",
        json.nullable(
          data.client_payload,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("installation", simple_installation_encode(data.installation))
    ],
  )
}

pub fn content_file_decoder() {
  use size <- decode.field("size", decode.int)
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use path_ <- decode.field("path", decode.string)
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use submodule_git_url <- decode.optional_field(
    "submodule_git_url",
    None,
    decode.optional(decode.string),
  )
  use target <- decode.optional_field(
    "target",
    None,
    decode.optional(decode.string),
  )
  use encoding <- decode.field("encoding", decode.string)
  use download_url <- decode.optional_field(
    "download_url",
    None,
    decode.optional(decode.string),
  )
  use content <- decode.field("content", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use type_ <- decode.field("type", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ContentFile(
      size: size,
      git_url: git_url,
      path_: path_,
      name: name,
      sha: sha,
      url: url,
      submodule_git_url: submodule_git_url,
      target: target,
      encoding: encoding,
      download_url: download_url,
      content: content,
      links: links,
      type_: type_,
      html_url: html_url,
    ),
  )
}

pub fn content_file_encode(data: ContentFile) {
  json.object(
    [
      #("size", json.int(data.size)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("path", json.string(data.path_)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("submodule_git_url", json.nullable(data.submodule_git_url, json.string)),
      #("target", json.nullable(data.target, json.string)),
      #("encoding", json.string(data.encoding)),
      #("download_url", json.nullable(data.download_url, json.string)),
      #("content", json.string(data.content)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("type", json.string(data.type_)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn timeline_reviewed_event_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use commit_id <- decode.field("commit_id", decode.string)
  use pull_request_url <- decode.field("pull_request_url", decode.string)
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use user <- decode.field("user", simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use state <- decode.field("state", decode.string)
  use submitted_at <- decode.optional_field(
    "submitted_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    TimelineReviewedEvent(
      body: body,
      commit_id: commit_id,
      pull_request_url: pull_request_url,
      body_html: body_html,
      body_text: body_text,
      user: user,
      author_association: author_association,
      state: state,
      submitted_at: submitted_at,
      node_id: node_id,
      event: event,
      links: links,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn timeline_reviewed_event_encode(data: TimelineReviewedEvent) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("commit_id", json.string(data.commit_id)),
      #("pull_request_url", json.string(data.pull_request_url)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("user", simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("state", json.string(data.state)),
      #("submitted_at", json.nullable(data.submitted_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_config_insecure_ssl_decoder() {
  panic as "OneOf"
}

pub fn webhook_config_insecure_ssl_encode(_data: WebhookConfigInsecureSsl) {
  panic as "OneOf"
}

pub fn webhook_issue_comment_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field(
    "comment",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookIssueCommentCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_issue_comment_created_encode(data: WebhookIssueCommentCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "AllOf inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "comment",
        fn(_) { panic as "Literal object inside field" }(data.comment),
      )
    ],
  )
}

pub fn page_build_decoder() {
  use pusher <- decode.field("pusher", nullable_simple_user_decoder())
  use error <- decode.field(
    "error",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use status <- decode.field("status", decode.string)
  use duration <- decode.field("duration", decode.int)
  use commit <- decode.field("commit", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  decode.success(
    PageBuild(
      pusher: pusher,
      error: error,
      created_at: created_at,
      url: url,
      status: status,
      duration: duration,
      commit: commit,
      updated_at: updated_at,
    ),
  )
}

pub fn page_build_encode(data: PageBuild) {
  json.object(
    [
      #("pusher", nullable_simple_user_encode(data.pusher)),
      #("error", fn(_) { panic as "Literal object inside field" }(data.error)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("status", json.string(data.status)),
      #("duration", json.int(data.duration)),
      #("commit", json.string(data.commit)),
      #("updated_at", json.string(data.updated_at))
    ],
  )
}

pub fn secret_scanning_location_commit_decoder() {
  use commit_sha <- decode.field("commit_sha", decode.string)
  use path_ <- decode.field("path", decode.string)
  use commit_url <- decode.field("commit_url", decode.string)
  use blob_sha <- decode.field("blob_sha", decode.string)
  use blob_url <- decode.field("blob_url", decode.string)
  use start_line <- decode.field("start_line", decode.float)
  use start_column <- decode.field("start_column", decode.float)
  use end_line <- decode.field("end_line", decode.float)
  use end_column <- decode.field("end_column", decode.float)
  decode.success(
    SecretScanningLocationCommit(
      commit_sha: commit_sha,
      path_: path_,
      commit_url: commit_url,
      blob_sha: blob_sha,
      blob_url: blob_url,
      start_line: start_line,
      start_column: start_column,
      end_line: end_line,
      end_column: end_column,
    ),
  )
}

pub fn secret_scanning_location_commit_encode(data: SecretScanningLocationCommit) {
  json.object(
    [
      #("commit_sha", json.string(data.commit_sha)),
      #("path", json.string(data.path_)),
      #("commit_url", json.string(data.commit_url)),
      #("blob_sha", json.string(data.blob_sha)),
      #("blob_url", json.string(data.blob_url)),
      #("start_line", json.float(data.start_line)),
      #("start_column", json.float(data.start_column)),
      #("end_line", json.float(data.end_line)),
      #("end_column", json.float(data.end_column))
    ],
  )
}

pub fn milestone_decoder() {
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", decode.int)
  use due_on <- decode.optional_field(
    "due_on",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use closed_issues <- decode.field("closed_issues", decode.int)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Milestone(
      closed_at: closed_at,
      number: number,
      due_on: due_on,
      created_at: created_at,
      creator: creator,
      closed_issues: closed_issues,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn milestone_encode(data: Milestone) {
  json.object(
    [
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("number", json.int(data.number)),
      #("due_on", json.nullable(data.due_on, json.string)),
      #("created_at", json.string(data.created_at)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("closed_issues", json.int(data.closed_issues)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn organization_programmatic_access_grant_decoder() {
  use token_id <- decode.field("token_id", decode.int)
  use permissions <- decode.field(
    "permissions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use token_expires_at <- decode.optional_field(
    "token_expires_at",
    None,
    decode.optional(decode.string),
  )
  use token_name <- decode.field("token_name", decode.string)
  use access_granted_at <- decode.field("access_granted_at", decode.string)
  use token_last_used_at <- decode.optional_field(
    "token_last_used_at",
    None,
    decode.optional(decode.string),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use repository_selection <- decode.field("repository_selection", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use token_expired <- decode.field("token_expired", decode.bool)
  decode.success(
    OrganizationProgrammaticAccessGrant(
      token_id: token_id,
      permissions: permissions,
      token_expires_at: token_expires_at,
      token_name: token_name,
      access_granted_at: access_granted_at,
      token_last_used_at: token_last_used_at,
      owner: owner,
      repository_selection: repository_selection,
      repositories_url: repositories_url,
      id: id,
      token_expired: token_expired,
    ),
  )
}

pub fn organization_programmatic_access_grant_encode(
  data: OrganizationProgrammaticAccessGrant,
) {
  json.object(
    [
      #("token_id", json.int(data.token_id)),
      #(
        "permissions",
        fn(_) { panic as "Literal object inside field" }(data.permissions),
      ),
      #("token_expires_at", json.nullable(data.token_expires_at, json.string)),
      #("token_name", json.string(data.token_name)),
      #("access_granted_at", json.string(data.access_granted_at)),
      #(
        "token_last_used_at",
        json.nullable(data.token_last_used_at, json.string),
      ),
      #("owner", simple_user_encode(data.owner)),
      #("repository_selection", json.string(data.repository_selection)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("token_expired", json.bool(data.token_expired))
    ],
  )
}

pub fn organization_role_decoder() {
  use permissions <- decode.field("permissions", decode.list(decode.string))
  use base_role <- decode.optional_field(
    "base_role",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use organization <- decode.field(
    "organization",
    nullable_simple_user_decoder(),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use source <- decode.optional_field(
    "source",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationRole(
      permissions: permissions,
      base_role: base_role,
      created_at: created_at,
      name: name,
      organization: organization,
      updated_at: updated_at,
      source: source,
      id: id,
      description: description,
    ),
  )
}

pub fn organization_role_encode(data: OrganizationRole) {
  json.object(
    [
      #("permissions", json.array(_, json.string)(data.permissions)),
      #("base_role", json.nullable(data.base_role, json.string)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("organization", nullable_simple_user_encode(data.organization)),
      #("updated_at", json.string(data.updated_at)),
      #("source", json.nullable(data.source, json.string)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhook_push_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use compare <- decode.field("compare", decode.string)
  use base_ref <- decode.field("base_ref", webhooks_nullable_string_decoder())
  use pusher <- decode.field(
    "pusher",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use created <- decode.field("created", decode.bool)
  use repository <- decode.field(
    "repository",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use ref <- decode.field("ref", decode.string)
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use head_commit <- decode.optional_field(
    "head_commit",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use deleted <- decode.field("deleted", decode.bool)
  use forced <- decode.field("forced", decode.bool)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use after <- decode.field("after", decode.string)
  use commits <- decode.field(
    "commits",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use before <- decode.field("before", decode.string)
  decode.success(
    WebhookPush(
      enterprise: enterprise,
      compare: compare,
      base_ref: base_ref,
      pusher: pusher,
      created: created,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      head_commit: head_commit,
      deleted: deleted,
      forced: forced,
      installation: installation,
      after: after,
      commits: commits,
      before: before,
    ),
  )
}

pub fn webhook_push_encode(data: WebhookPush) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("compare", json.string(data.compare)),
      #("base_ref", webhooks_nullable_string_encode(data.base_ref)),
      #("pusher", fn(_) { panic as "Literal object inside field" }(data.pusher)),
      #("created", json.bool(data.created)),
      #(
        "repository",
        fn(_) { panic as "Literal object inside field" }(data.repository),
      ),
      #("ref", json.string(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #(
        "head_commit",
        json.nullable(
          data.head_commit,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("deleted", json.bool(data.deleted)),
      #("forced", json.bool(data.forced)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("after", json.string(data.after)),
      #(
        "commits",
        json.array(_, fn(_) { panic as "object in array" })(data.commits),
      ),
      #("before", json.string(data.before))
    ],
  )
}

pub fn gpg_key_decoder() {
  use raw_key <- decode.optional_field(
    "raw_key",
    None,
    decode.optional(decode.string),
  )
  use can_certify <- decode.field("can_certify", decode.bool)
  use public_key <- decode.field("public_key", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use can_sign <- decode.field("can_sign", decode.bool)
  use can_encrypt_storage <- decode.field("can_encrypt_storage", decode.bool)
  use subkeys <- decode.field(
    "subkeys",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use emails <- decode.field(
    "emails",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use primary_key_id <- decode.optional_field(
    "primary_key_id",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use key_id <- decode.field("key_id", decode.string)
  use expires_at <- decode.optional_field(
    "expires_at",
    None,
    decode.optional(decode.string),
  )
  use can_encrypt_comms <- decode.field("can_encrypt_comms", decode.bool)
  use revoked <- decode.field("revoked", decode.bool)
  decode.success(
    GpgKey(
      raw_key: raw_key,
      can_certify: can_certify,
      public_key: public_key,
      created_at: created_at,
      name: name,
      can_sign: can_sign,
      can_encrypt_storage: can_encrypt_storage,
      subkeys: subkeys,
      emails: emails,
      primary_key_id: primary_key_id,
      id: id,
      key_id: key_id,
      expires_at: expires_at,
      can_encrypt_comms: can_encrypt_comms,
      revoked: revoked,
    ),
  )
}

pub fn gpg_key_encode(data: GpgKey) {
  json.object(
    [
      #("raw_key", json.nullable(data.raw_key, json.string)),
      #("can_certify", json.bool(data.can_certify)),
      #("public_key", json.string(data.public_key)),
      #("created_at", json.string(data.created_at)),
      #("name", json.nullable(data.name, json.string)),
      #("can_sign", json.bool(data.can_sign)),
      #("can_encrypt_storage", json.bool(data.can_encrypt_storage)),
      #(
        "subkeys",
        json.array(_, fn(_) { panic as "object in array" })(data.subkeys),
      ),
      #(
        "emails",
        json.array(_, fn(_) { panic as "object in array" })(data.emails),
      ),
      #("primary_key_id", json.nullable(data.primary_key_id, json.int)),
      #("id", json.int(data.id)),
      #("key_id", json.string(data.key_id)),
      #("expires_at", json.nullable(data.expires_at, json.string)),
      #("can_encrypt_comms", json.bool(data.can_encrypt_comms)),
      #("revoked", json.bool(data.revoked))
    ],
  )
}

pub fn pull_request_review_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use original_line <- decode.optional_field(
    "original_line",
    None,
    decode.optional(decode.int),
  )
  use commit_id <- decode.field("commit_id", decode.string)
  use diff_hunk <- decode.field("diff_hunk", decode.string)
  use path_ <- decode.field("path", decode.string)
  use pull_request_url <- decode.field("pull_request_url", decode.string)
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use position <- decode.optional_field(
    "position",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", simple_user_decoder())
  use subject_type <- decode.optional_field(
    "subject_type",
    None,
    decode.optional(decode.string),
  )
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use in_reply_to_id <- decode.optional_field(
    "in_reply_to_id",
    None,
    decode.optional(decode.int),
  )
  use start_line <- decode.optional_field(
    "start_line",
    None,
    decode.optional(decode.int),
  )
  use start_side <- decode.optional_field(
    "start_side",
    None,
    decode.optional(decode.string),
  )
  use line <- decode.optional_field("line", None, decode.optional(decode.int))
  use original_commit_id <- decode.field("original_commit_id", decode.string)
  use side <- decode.optional_field("side", None, decode.optional(decode.string))
  use updated_at <- decode.field("updated_at", decode.string)
  use original_position <- decode.optional_field(
    "original_position",
    None,
    decode.optional(decode.int),
  )
  use node_id <- decode.field("node_id", decode.string)
  use pull_request_review_id <- decode.optional_field(
    "pull_request_review_id",
    None,
    decode.optional(decode.int),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use original_start_line <- decode.optional_field(
    "original_start_line",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    PullRequestReviewComment(
      body: body,
      original_line: original_line,
      commit_id: commit_id,
      diff_hunk: diff_hunk,
      path_: path_,
      pull_request_url: pull_request_url,
      body_html: body_html,
      position: position,
      created_at: created_at,
      body_text: body_text,
      reactions: reactions,
      user: user,
      subject_type: subject_type,
      author_association: author_association,
      url: url,
      in_reply_to_id: in_reply_to_id,
      start_line: start_line,
      start_side: start_side,
      line: line,
      original_commit_id: original_commit_id,
      side: side,
      updated_at: updated_at,
      original_position: original_position,
      node_id: node_id,
      pull_request_review_id: pull_request_review_id,
      links: links,
      id: id,
      html_url: html_url,
      original_start_line: original_start_line,
    ),
  )
}

pub fn pull_request_review_comment_encode(data: PullRequestReviewComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("original_line", json.nullable(data.original_line, json.int)),
      #("commit_id", json.string(data.commit_id)),
      #("diff_hunk", json.string(data.diff_hunk)),
      #("path", json.string(data.path_)),
      #("pull_request_url", json.string(data.pull_request_url)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("position", json.nullable(data.position, json.int)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", simple_user_encode(data.user)),
      #("subject_type", json.nullable(data.subject_type, json.string)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("in_reply_to_id", json.nullable(data.in_reply_to_id, json.int)),
      #("start_line", json.nullable(data.start_line, json.int)),
      #("start_side", json.nullable(data.start_side, json.string)),
      #("line", json.nullable(data.line, json.int)),
      #("original_commit_id", json.string(data.original_commit_id)),
      #("side", json.nullable(data.side, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("original_position", json.nullable(data.original_position, json.int)),
      #("node_id", json.string(data.node_id)),
      #(
        "pull_request_review_id",
        json.nullable(data.pull_request_review_id, json.int),
      ),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("original_start_line", json.nullable(data.original_start_line, json.int))
    ],
  )
}

pub fn metadata_decoder() {
  decode.success(Metadata)
}

pub fn metadata_encode(_data: Metadata) {
  json.object([])
}

pub fn webhook_pull_request_review_thread_unresolved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use thread <- decode.field(
    "thread",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReviewThreadUnresolved(
      enterprise: enterprise,
      thread: thread,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_review_thread_unresolved_encode(
  data: WebhookPullRequestReviewThreadUnresolved,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("thread", fn(_) { panic as "Literal object inside field" }(data.thread)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn activity_decoder() {
  use activity_type <- decode.field("activity_type", decode.string)
  use ref <- decode.field("ref", decode.string)
  use actor <- decode.field("actor", nullable_simple_user_decoder())
  use timestamp <- decode.field("timestamp", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use after <- decode.field("after", decode.string)
  use before <- decode.field("before", decode.string)
  decode.success(
    Activity(
      activity_type: activity_type,
      ref: ref,
      actor: actor,
      timestamp: timestamp,
      node_id: node_id,
      id: id,
      after: after,
      before: before,
    ),
  )
}

pub fn activity_encode(data: Activity) {
  json.object(
    [
      #("activity_type", json.string(data.activity_type)),
      #("ref", json.string(data.ref)),
      #("actor", nullable_simple_user_encode(data.actor)),
      #("timestamp", json.string(data.timestamp)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("after", json.string(data.after)),
      #("before", json.string(data.before))
    ],
  )
}

pub fn packages_billing_usage_decoder() {
  use total_paid_gigabytes_bandwidth_used <- decode.field(
    "total_paid_gigabytes_bandwidth_used",
    decode.int,
  )
  use total_gigabytes_bandwidth_used <- decode.field(
    "total_gigabytes_bandwidth_used",
    decode.int,
  )
  use included_gigabytes_bandwidth <- decode.field(
    "included_gigabytes_bandwidth",
    decode.int,
  )
  decode.success(
    PackagesBillingUsage(
      total_paid_gigabytes_bandwidth_used: total_paid_gigabytes_bandwidth_used,
      total_gigabytes_bandwidth_used: total_gigabytes_bandwidth_used,
      included_gigabytes_bandwidth: included_gigabytes_bandwidth,
    ),
  )
}

pub fn packages_billing_usage_encode(data: PackagesBillingUsage) {
  json.object(
    [
      #(
        "total_paid_gigabytes_bandwidth_used",
        json.int(data.total_paid_gigabytes_bandwidth_used),
      ),
      #(
        "total_gigabytes_bandwidth_used",
        json.int(data.total_gigabytes_bandwidth_used),
      ),
      #(
        "included_gigabytes_bandwidth",
        json.int(data.included_gigabytes_bandwidth),
      )
    ],
  )
}

pub fn alert_instances_url_decoder() {
  decode.string
}

pub fn alert_instances_url_encode(data: AlertInstancesUrl) {
  json.string(data)
}

pub fn webhook_projects_v2_item_edited_decoder() {
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemEdited(
      changes: changes,
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_edited_encode(data: WebhookProjectsV2ItemEdited) {
  json.object(
    [
      #(
        "changes",
        json.nullable(data.changes, fn(_) { panic as "OneOf inside field" }),
      ),
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_repository_archived_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryArchived(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_archived_encode(data: WebhookRepositoryArchived) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn page_build_status_decoder() {
  use url <- decode.field("url", decode.string)
  use status <- decode.field("status", decode.string)
  decode.success(PageBuildStatus(url: url, status: status))
}

pub fn page_build_status_encode(data: PageBuildStatus) {
  json.object(
    [#("url", json.string(data.url)), #("status", json.string(data.status))],
  )
}

pub fn protected_branch_required_status_check_decoder() {
  use contexts <- decode.field("contexts", decode.list(decode.string))
  use enforcement_level <- decode.optional_field(
    "enforcement_level",
    None,
    decode.optional(decode.string),
  )
  use strict <- decode.optional_field(
    "strict",
    None,
    decode.optional(decode.bool),
  )
  use checks <- decode.field(
    "checks",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use contexts_url <- decode.optional_field(
    "contexts_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ProtectedBranchRequiredStatusCheck(
      contexts: contexts,
      enforcement_level: enforcement_level,
      strict: strict,
      checks: checks,
      url: url,
      contexts_url: contexts_url,
    ),
  )
}

pub fn protected_branch_required_status_check_encode(
  data: ProtectedBranchRequiredStatusCheck,
) {
  json.object(
    [
      #("contexts", json.array(_, json.string)(data.contexts)),
      #("enforcement_level", json.nullable(data.enforcement_level, json.string)),
      #("strict", json.nullable(data.strict, json.bool)),
      #(
        "checks",
        json.array(_, fn(_) { panic as "object in array" })(data.checks),
      ),
      #("url", json.nullable(data.url, json.string)),
      #("contexts_url", json.nullable(data.contexts_url, json.string))
    ],
  )
}

pub fn page_decoder() {
  use https_certificate <- decode.optional_field(
    "https_certificate",
    None,
    decode.optional(pages_https_certificate_decoder()),
  )
  use protected_domain_state <- decode.optional_field(
    "protected_domain_state",
    None,
    decode.optional(decode.string),
  )
  use public <- decode.field("public", decode.bool)
  use custom_404 <- decode.field("custom_404", decode.bool)
  use build_type <- decode.optional_field(
    "build_type",
    None,
    decode.optional(decode.string),
  )
  use cname <- decode.optional_field(
    "cname",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  use https_enforced <- decode.optional_field(
    "https_enforced",
    None,
    decode.optional(decode.bool),
  )
  use source <- decode.optional_field(
    "source",
    None,
    decode.optional(pages_source_hash_decoder()),
  )
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use pending_domain_unverified_at <- decode.optional_field(
    "pending_domain_unverified_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Page(
      https_certificate: https_certificate,
      protected_domain_state: protected_domain_state,
      public: public,
      custom_404: custom_404,
      build_type: build_type,
      cname: cname,
      url: url,
      status: status,
      https_enforced: https_enforced,
      source: source,
      html_url: html_url,
      pending_domain_unverified_at: pending_domain_unverified_at,
    ),
  )
}

pub fn page_encode(data: Page) {
  json.object(
    [
      #(
        "https_certificate",
        json.nullable(data.https_certificate, pages_https_certificate_encode),
      ),
      #(
        "protected_domain_state",
        json.nullable(data.protected_domain_state, json.string),
      ),
      #("public", json.bool(data.public)),
      #("custom_404", json.bool(data.custom_404)),
      #("build_type", json.nullable(data.build_type, json.string)),
      #("cname", json.nullable(data.cname, json.string)),
      #("url", json.string(data.url)),
      #("status", json.nullable(data.status, json.string)),
      #("https_enforced", json.nullable(data.https_enforced, json.bool)),
      #("source", json.nullable(data.source, pages_source_hash_encode)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #(
        "pending_domain_unverified_at",
        json.nullable(data.pending_domain_unverified_at, json.string),
      )
    ],
  )
}

pub fn webhook_marketplace_purchase_purchased_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use effective_date <- decode.field("effective_date", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use marketplace_purchase <- decode.field(
    "marketplace_purchase",
    webhooks_marketplace_purchase_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use previous_marketplace_purchase <- decode.optional_field(
    "previous_marketplace_purchase",
    None,
    decode.optional(webhooks_previous_marketplace_purchase_decoder()),
  )
  decode.success(
    WebhookMarketplacePurchasePurchased(
      enterprise: enterprise,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      marketplace_purchase: marketplace_purchase,
      sender: sender,
      action: action,
      installation: installation,
      previous_marketplace_purchase: previous_marketplace_purchase,
    ),
  )
}

pub fn webhook_marketplace_purchase_purchased_encode(
  data: WebhookMarketplacePurchasePurchased,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("effective_date", json.string(data.effective_date)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "marketplace_purchase",
        webhooks_marketplace_purchase_encode(data.marketplace_purchase),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "previous_marketplace_purchase",
        json.nullable(
          data.previous_marketplace_purchase,
          webhooks_previous_marketplace_purchase_encode,
        ),
      )
    ],
  )
}

pub fn secret_scanning_location_pull_request_body_decoder() {
  use pull_request_body_url <- decode.field(
    "pull_request_body_url",
    decode.string,
  )
  decode.success(
    SecretScanningLocationPullRequestBody(
      pull_request_body_url: pull_request_body_url,
    ),
  )
}

pub fn secret_scanning_location_pull_request_body_encode(
  data: SecretScanningLocationPullRequestBody,
) {
  json.object(
    [#("pull_request_body_url", json.string(data.pull_request_body_url))],
  )
}

pub fn scim_error_decoder() {
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use documentation_url <- decode.optional_field(
    "documentation_url",
    None,
    decode.optional(decode.string),
  )
  use scim_type <- decode.optional_field(
    "scimType",
    None,
    decode.optional(decode.string),
  )
  use detail <- decode.optional_field(
    "detail",
    None,
    decode.optional(decode.string),
  )
  use schemas <- decode.optional_field(
    "schemas",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    ScimError(
      message: message,
      documentation_url: documentation_url,
      scim_type: scim_type,
      detail: detail,
      schemas: schemas,
      status: status,
    ),
  )
}

pub fn scim_error_encode(data: ScimError) {
  json.object(
    [
      #("message", json.nullable(data.message, json.string)),
      #("documentation_url", json.nullable(data.documentation_url, json.string)),
      #("scimType", json.nullable(data.scim_type, json.string)),
      #("detail", json.nullable(data.detail, json.string)),
      #("schemas", json.nullable(data.schemas, json.array(_, json.string))),
      #("status", json.nullable(data.status, json.int))
    ],
  )
}

pub fn referrer_traffic_decoder() {
  use uniques <- decode.field("uniques", decode.int)
  use count <- decode.field("count", decode.int)
  use referrer <- decode.field("referrer", decode.string)
  decode.success(
    ReferrerTraffic(uniques: uniques, count: count, referrer: referrer),
  )
}

pub fn referrer_traffic_encode(data: ReferrerTraffic) {
  json.object(
    [
      #("uniques", json.int(data.uniques)),
      #("count", json.int(data.count)),
      #("referrer", json.string(data.referrer))
    ],
  )
}

pub fn manifest_decoder() {
  use name <- decode.field("name", decode.string)
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(metadata_decoder()),
  )
  use resolved <- decode.optional_field(
    "resolved",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use file <- decode.optional_field(
    "file",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    Manifest(name: name, metadata: metadata, resolved: resolved, file: file),
  )
}

pub fn manifest_encode(data: Manifest) {
  json.object(
    [
      #("name", json.string(data.name)),
      #("metadata", json.nullable(data.metadata, metadata_encode)),
      #(
        "resolved",
        json.nullable(
          data.resolved,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "file",
        json.nullable(
          data.file,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_project_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(nullable_repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use project <- decode.field("project", webhooks_project_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      project: project,
      installation: installation,
    ),
  )
}

pub fn webhook_project_deleted_encode(data: WebhookProjectDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(data.repository, nullable_repository_webhooks_encode),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #("project", webhooks_project_encode(data.project)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_tag_name_pattern_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleTagNamePattern(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_tag_name_pattern_encode(
  data: RepositoryRuleTagNamePattern,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn secret_scanning_location_issue_body_decoder() {
  use issue_body_url <- decode.field("issue_body_url", decode.string)
  decode.success(SecretScanningLocationIssueBody(issue_body_url: issue_body_url))
}

pub fn secret_scanning_location_issue_body_encode(
  data: SecretScanningLocationIssueBody,
) {
  json.object([#("issue_body_url", json.string(data.issue_body_url))])
}

pub fn webhook_sub_issues_sub_issue_added_decoder() {
  use sub_issue_id <- decode.field("sub_issue_id", decode.float)
  use parent_issue <- decode.field("parent_issue", issue_decoder())
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use parent_issue_id <- decode.field("parent_issue_id", decode.float)
  use action <- decode.field("action", decode.string)
  use sub_issue_repo <- decode.field("sub_issue_repo", repository_decoder())
  use sub_issue <- decode.field("sub_issue", issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSubIssuesSubIssueAdded(
      sub_issue_id: sub_issue_id,
      parent_issue: parent_issue,
      repository: repository,
      organization: organization,
      sender: sender,
      parent_issue_id: parent_issue_id,
      action: action,
      sub_issue_repo: sub_issue_repo,
      sub_issue: sub_issue,
      installation: installation,
    ),
  )
}

pub fn webhook_sub_issues_sub_issue_added_encode(
  data: WebhookSubIssuesSubIssueAdded,
) {
  json.object(
    [
      #("sub_issue_id", json.float(data.sub_issue_id)),
      #("parent_issue", issue_encode(data.parent_issue)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("parent_issue_id", json.float(data.parent_issue_id)),
      #("action", json.string(data.action)),
      #("sub_issue_repo", repository_encode(data.sub_issue_repo)),
      #("sub_issue", issue_encode(data.sub_issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn topic_decoder() {
  use names <- decode.field("names", decode.list(decode.string))
  decode.success(Topic(names: names))
}

pub fn topic_encode(data: Topic) {
  json.object([#("names", json.array(_, json.string)(data.names))])
}

pub fn webhook_sub_issues_sub_issue_removed_decoder() {
  use sub_issue_id <- decode.field("sub_issue_id", decode.float)
  use parent_issue <- decode.field("parent_issue", issue_decoder())
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use parent_issue_id <- decode.field("parent_issue_id", decode.float)
  use action <- decode.field("action", decode.string)
  use sub_issue_repo <- decode.field("sub_issue_repo", repository_decoder())
  use sub_issue <- decode.field("sub_issue", issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSubIssuesSubIssueRemoved(
      sub_issue_id: sub_issue_id,
      parent_issue: parent_issue,
      repository: repository,
      organization: organization,
      sender: sender,
      parent_issue_id: parent_issue_id,
      action: action,
      sub_issue_repo: sub_issue_repo,
      sub_issue: sub_issue,
      installation: installation,
    ),
  )
}

pub fn webhook_sub_issues_sub_issue_removed_encode(
  data: WebhookSubIssuesSubIssueRemoved,
) {
  json.object(
    [
      #("sub_issue_id", json.float(data.sub_issue_id)),
      #("parent_issue", issue_encode(data.parent_issue)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("parent_issue_id", json.float(data.parent_issue_id)),
      #("action", json.string(data.action)),
      #("sub_issue_repo", repository_encode(data.sub_issue_repo)),
      #("sub_issue", issue_encode(data.sub_issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn public_user_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use twitter_username <- decode.optional_field(
    "twitter_username",
    None,
    decode.optional(decode.string),
  )
  use blog <- decode.optional_field("blog", None, decode.optional(decode.string))
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use bio <- decode.optional_field("bio", None, decode.optional(decode.string))
  use notification_email <- decode.optional_field(
    "notification_email",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use plan <- decode.optional_field(
    "plan",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use login <- decode.field("login", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use total_private_repos <- decode.optional_field(
    "total_private_repos",
    None,
    decode.optional(decode.int),
  )
  use owned_private_repos <- decode.optional_field(
    "owned_private_repos",
    None,
    decode.optional(decode.int),
  )
  use public_repos <- decode.field("public_repos", decode.int)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use collaborators <- decode.optional_field(
    "collaborators",
    None,
    decode.optional(decode.int),
  )
  use hireable <- decode.optional_field(
    "hireable",
    None,
    decode.optional(decode.bool),
  )
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use following <- decode.field("following", decode.int)
  use repos_url <- decode.field("repos_url", decode.string)
  use private_gists <- decode.optional_field(
    "private_gists",
    None,
    decode.optional(decode.int),
  )
  use followers <- decode.field("followers", decode.int)
  use location <- decode.optional_field(
    "location",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use public_gists <- decode.field("public_gists", decode.int)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  use company <- decode.optional_field(
    "company",
    None,
    decode.optional(decode.string),
  )
  use disk_usage <- decode.optional_field(
    "disk_usage",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    PublicUser(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      twitter_username: twitter_username,
      blog: blog,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      bio: bio,
      notification_email: notification_email,
      events_url: events_url,
      avatar_url: avatar_url,
      plan: plan,
      login: login,
      created_at: created_at,
      total_private_repos: total_private_repos,
      owned_private_repos: owned_private_repos,
      public_repos: public_repos,
      name: name,
      collaborators: collaborators,
      hireable: hireable,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      following: following,
      repos_url: repos_url,
      private_gists: private_gists,
      followers: followers,
      location: location,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      updated_at: updated_at,
      node_id: node_id,
      public_gists: public_gists,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
      company: company,
      disk_usage: disk_usage,
    ),
  )
}

pub fn public_user_encode(data: PublicUser) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #("twitter_username", json.nullable(data.twitter_username, json.string)),
      #("blog", json.nullable(data.blog, json.string)),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("bio", json.nullable(data.bio, json.string)),
      #(
        "notification_email",
        json.nullable(data.notification_email, json.string),
      ),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #(
        "plan",
        json.nullable(
          data.plan,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("login", json.string(data.login)),
      #("created_at", json.string(data.created_at)),
      #("total_private_repos", json.nullable(data.total_private_repos, json.int)),
      #("owned_private_repos", json.nullable(data.owned_private_repos, json.int)),
      #("public_repos", json.int(data.public_repos)),
      #("name", json.nullable(data.name, json.string)),
      #("collaborators", json.nullable(data.collaborators, json.int)),
      #("hireable", json.nullable(data.hireable, json.bool)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("following", json.int(data.following)),
      #("repos_url", json.string(data.repos_url)),
      #("private_gists", json.nullable(data.private_gists, json.int)),
      #("followers", json.int(data.followers)),
      #("location", json.nullable(data.location, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("public_gists", json.int(data.public_gists)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string)),
      #("company", json.nullable(data.company, json.string)),
      #("disk_usage", json.nullable(data.disk_usage, json.int))
    ],
  )
}

pub fn repository_rule_params_workflow_file_reference_decoder() {
  use path_ <- decode.field("path", decode.string)
  use sha <- decode.optional_field("sha", None, decode.optional(decode.string))
  use repository_id <- decode.field("repository_id", decode.int)
  use ref <- decode.optional_field("ref", None, decode.optional(decode.string))
  decode.success(
    RepositoryRuleParamsWorkflowFileReference(
      path_: path_,
      sha: sha,
      repository_id: repository_id,
      ref: ref,
    ),
  )
}

pub fn repository_rule_params_workflow_file_reference_encode(
  data: RepositoryRuleParamsWorkflowFileReference,
) {
  json.object(
    [
      #("path", json.string(data.path_)),
      #("sha", json.nullable(data.sha, json.string)),
      #("repository_id", json.int(data.repository_id)),
      #("ref", json.nullable(data.ref, json.string))
    ],
  )
}

pub fn projects_v2_decoder() {
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use public <- decode.field("public", decode.bool)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", simple_user_decoder())
  use owner <- decode.field("owner", simple_user_decoder())
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use short_description <- decode.optional_field(
    "short_description",
    None,
    decode.optional(decode.string),
  )
  use deleted_at <- decode.optional_field(
    "deleted_at",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.float)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use deleted_by <- decode.field("deleted_by", nullable_simple_user_decoder())
  decode.success(
    ProjectsV2(
      closed_at: closed_at,
      public: public,
      number: number,
      created_at: created_at,
      creator: creator,
      owner: owner,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      short_description: short_description,
      deleted_at: deleted_at,
      id: id,
      description: description,
      deleted_by: deleted_by,
    ),
  )
}

pub fn projects_v2_encode(data: ProjectsV2) {
  json.object(
    [
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("public", json.bool(data.public)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("creator", simple_user_encode(data.creator)),
      #("owner", simple_user_encode(data.owner)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("short_description", json.nullable(data.short_description, json.string)),
      #("deleted_at", json.nullable(data.deleted_at, json.string)),
      #("id", json.float(data.id)),
      #("description", json.nullable(data.description, json.string)),
      #("deleted_by", nullable_simple_user_encode(data.deleted_by))
    ],
  )
}

pub fn repository_rule_params_status_check_configuration_decoder() {
  use integration_id <- decode.optional_field(
    "integration_id",
    None,
    decode.optional(decode.int),
  )
  use context <- decode.field("context", decode.string)
  decode.success(
    RepositoryRuleParamsStatusCheckConfiguration(
      integration_id: integration_id,
      context: context,
    ),
  )
}

pub fn repository_rule_params_status_check_configuration_encode(
  data: RepositoryRuleParamsStatusCheckConfiguration,
) {
  json.object(
    [
      #("integration_id", json.nullable(data.integration_id, json.int)),
      #("context", json.string(data.context))
    ],
  )
}

pub fn secret_scanning_location_discussion_body_decoder() {
  use discussion_body_url <- decode.field("discussion_body_url", decode.string)
  decode.success(
    SecretScanningLocationDiscussionBody(
      discussion_body_url: discussion_body_url,
    ),
  )
}

pub fn secret_scanning_location_discussion_body_encode(
  data: SecretScanningLocationDiscussionBody,
) {
  json.object([#("discussion_body_url", json.string(data.discussion_body_url))])
}

pub fn migration_decoder() {
  use org_metadata_only <- decode.field("org_metadata_only", decode.bool)
  use repositories <- decode.field(
    "repositories",
    decode.list(repository_decoder()),
  )
  use guid <- decode.field("guid", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use exclude_attachments <- decode.field("exclude_attachments", decode.bool)
  use exclude_owner_projects <- decode.field(
    "exclude_owner_projects",
    decode.bool,
  )
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use exclude_releases <- decode.field("exclude_releases", decode.bool)
  use archive_url <- decode.optional_field(
    "archive_url",
    None,
    decode.optional(decode.string),
  )
  use owner <- decode.field("owner", nullable_simple_user_decoder())
  use exclude_metadata <- decode.field("exclude_metadata", decode.bool)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use exclude <- decode.optional_field(
    "exclude",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use id <- decode.field("id", decode.int)
  use exclude_git_data <- decode.field("exclude_git_data", decode.bool)
  use lock_repositories <- decode.field("lock_repositories", decode.bool)
  decode.success(
    Migration(
      org_metadata_only: org_metadata_only,
      repositories: repositories,
      guid: guid,
      created_at: created_at,
      exclude_attachments: exclude_attachments,
      exclude_owner_projects: exclude_owner_projects,
      url: url,
      state: state,
      exclude_releases: exclude_releases,
      archive_url: archive_url,
      owner: owner,
      exclude_metadata: exclude_metadata,
      updated_at: updated_at,
      node_id: node_id,
      exclude: exclude,
      id: id,
      exclude_git_data: exclude_git_data,
      lock_repositories: lock_repositories,
    ),
  )
}

pub fn migration_encode(data: Migration) {
  json.object(
    [
      #("org_metadata_only", json.bool(data.org_metadata_only)),
      #("repositories", json.array(_, repository_encode)(data.repositories)),
      #("guid", json.string(data.guid)),
      #("created_at", json.string(data.created_at)),
      #("exclude_attachments", json.bool(data.exclude_attachments)),
      #("exclude_owner_projects", json.bool(data.exclude_owner_projects)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("exclude_releases", json.bool(data.exclude_releases)),
      #("archive_url", json.nullable(data.archive_url, json.string)),
      #("owner", nullable_simple_user_encode(data.owner)),
      #("exclude_metadata", json.bool(data.exclude_metadata)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("exclude", json.nullable(data.exclude, json.array(_, json.string))),
      #("id", json.int(data.id)),
      #("exclude_git_data", json.bool(data.exclude_git_data)),
      #("lock_repositories", json.bool(data.lock_repositories))
    ],
  )
}

pub fn code_of_conduct_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use key <- decode.field("key", decode.string)
  decode.success(
    CodeOfConduct(body: body, name: name, url: url, html_url: html_url, key: key),
  )
}

pub fn code_of_conduct_encode(data: CodeOfConduct) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn interaction_limit_response_decoder() {
  use origin <- decode.field("origin", decode.string)
  use limit <- decode.field("limit", interaction_group_decoder())
  use expires_at <- decode.field("expires_at", decode.string)
  decode.success(
    InteractionLimitResponse(
      origin: origin,
      limit: limit,
      expires_at: expires_at,
    ),
  )
}

pub fn interaction_limit_response_encode(data: InteractionLimitResponse) {
  json.object(
    [
      #("origin", json.string(data.origin)),
      #("limit", interaction_group_encode(data.limit)),
      #("expires_at", json.string(data.expires_at))
    ],
  )
}

pub fn webhook_team_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use team <- decode.field("team", webhooks_team_one_decoder())
  decode.success(
    WebhookTeamCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      team: team,
    ),
  )
}

pub fn webhook_team_created_encode(data: WebhookTeamCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(
          data.repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("team", webhooks_team_one_encode(data.team))
    ],
  )
}

pub fn demilestoned_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use milestone <- decode.field(
    "milestone",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    DemilestonedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      milestone: milestone,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn demilestoned_issue_event_encode(data: DemilestonedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #(
        "milestone",
        fn(_) { panic as "Literal object inside field" }(data.milestone),
      ),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhooks_pull_request_5_decoder() {
  use head <- decode.field(
    "head",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use draft <- decode.field("draft", decode.bool)
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.field(
    "assignees",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use mergeable_state <- decode.optional_field(
    "mergeable_state",
    None,
    decode.optional(decode.string),
  )
  use requested_teams <- decode.field(
    "requested_teams",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use deletions <- decode.optional_field(
    "deletions",
    None,
    decode.optional(decode.int),
  )
  use merged_at <- decode.optional_field(
    "merged_at",
    None,
    decode.optional(decode.string),
  )
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use review_comment_url <- decode.field("review_comment_url", decode.string)
  use auto_merge <- decode.optional_field(
    "auto_merge",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use issue_url <- decode.field("issue_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use merged_by <- decode.optional_field(
    "merged_by",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use locked <- decode.field("locked", decode.bool)
  use merge_commit_sha <- decode.optional_field(
    "merge_commit_sha",
    None,
    decode.optional(decode.string),
  )
  use review_comments_url <- decode.field("review_comments_url", decode.string)
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use changed_files <- decode.optional_field(
    "changed_files",
    None,
    decode.optional(decode.int),
  )
  use merged <- decode.optional_field(
    "merged",
    None,
    decode.optional(decode.bool),
  )
  use author_association <- decode.field("author_association", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use maintainer_can_modify <- decode.optional_field(
    "maintainer_can_modify",
    None,
    decode.optional(decode.bool),
  )
  use state <- decode.field("state", decode.string)
  use base_ <- decode.field(
    "base",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use mergeable <- decode.optional_field(
    "mergeable",
    None,
    decode.optional(decode.bool),
  )
  use comments <- decode.optional_field(
    "comments",
    None,
    decode.optional(decode.int),
  )
  use diff_url <- decode.field("diff_url", decode.string)
  use additions <- decode.optional_field(
    "additions",
    None,
    decode.optional(decode.int),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use patch_url <- decode.field("patch_url", decode.string)
  use title <- decode.field("title", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use review_comments <- decode.optional_field(
    "review_comments",
    None,
    decode.optional(decode.int),
  )
  use commits <- decode.optional_field(
    "commits",
    None,
    decode.optional(decode.int),
  )
  use requested_reviewers <- decode.field(
    "requested_reviewers",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use rebaseable <- decode.optional_field(
    "rebaseable",
    None,
    decode.optional(decode.bool),
  )
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field(
    "labels",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    WebhooksPullRequest5(
      head: head,
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      mergeable_state: mergeable_state,
      requested_teams: requested_teams,
      deletions: deletions,
      merged_at: merged_at,
      closed_at: closed_at,
      review_comment_url: review_comment_url,
      auto_merge: auto_merge,
      issue_url: issue_url,
      number: number,
      created_at: created_at,
      merged_by: merged_by,
      locked: locked,
      merge_commit_sha: merge_commit_sha,
      review_comments_url: review_comments_url,
      user: user,
      commits_url: commits_url,
      changed_files: changed_files,
      merged: merged,
      author_association: author_association,
      url: url,
      assignee: assignee,
      statuses_url: statuses_url,
      milestone: milestone,
      maintainer_can_modify: maintainer_can_modify,
      state: state,
      base_: base_,
      mergeable: mergeable,
      comments: comments,
      diff_url: diff_url,
      additions: additions,
      updated_at: updated_at,
      node_id: node_id,
      patch_url: patch_url,
      title: title,
      links: links,
      id: id,
      html_url: html_url,
      review_comments: review_comments,
      commits: commits,
      requested_reviewers: requested_reviewers,
      rebaseable: rebaseable,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn webhooks_pull_request_5_encode(data: WebhooksPullRequest5) {
  json.object(
    [
      #("head", fn(_) { panic as "Literal object inside field" }(data.head)),
      #("draft", json.bool(data.draft)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.array(_, fn(_) { panic as "object in array" })(data.assignees),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("mergeable_state", json.nullable(data.mergeable_state, json.string)),
      #(
        "requested_teams",
        json.array(_, fn(_) { panic as "object in array" })(data.requested_teams),
      ),
      #("deletions", json.nullable(data.deletions, json.int)),
      #("merged_at", json.nullable(data.merged_at, json.string)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("review_comment_url", json.string(data.review_comment_url)),
      #(
        "auto_merge",
        json.nullable(
          data.auto_merge,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("issue_url", json.string(data.issue_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #(
        "merged_by",
        json.nullable(
          data.merged_by,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("locked", json.bool(data.locked)),
      #("merge_commit_sha", json.nullable(data.merge_commit_sha, json.string)),
      #("review_comments_url", json.string(data.review_comments_url)),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("commits_url", json.string(data.commits_url)),
      #("changed_files", json.nullable(data.changed_files, json.int)),
      #("merged", json.nullable(data.merged, json.bool)),
      #("author_association", json.string(data.author_association)),
      #("url", json.string(data.url)),
      #(
        "assignee",
        json.nullable(
          data.assignee,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("statuses_url", json.string(data.statuses_url)),
      #(
        "milestone",
        json.nullable(
          data.milestone,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "maintainer_can_modify",
        json.nullable(data.maintainer_can_modify, json.bool),
      ),
      #("state", json.string(data.state)),
      #("base", fn(_) { panic as "Literal object inside field" }(data.base_)),
      #("mergeable", json.nullable(data.mergeable, json.bool)),
      #("comments", json.nullable(data.comments, json.int)),
      #("diff_url", json.string(data.diff_url)),
      #("additions", json.nullable(data.additions, json.int)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("patch_url", json.string(data.patch_url)),
      #("title", json.string(data.title)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("review_comments", json.nullable(data.review_comments, json.int)),
      #("commits", json.nullable(data.commits, json.int)),
      #(
        "requested_reviewers",
        json.array(_, fn(_) { panic as "Oneoas.OneOf in array" })(
          data.requested_reviewers,
        ),
      ),
      #("rebaseable", json.nullable(data.rebaseable, json.bool)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.array(_, fn(_) { panic as "object in array" })(data.labels),
      )
    ],
  )
}

pub fn repository_rule_required_deployments_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleRequiredDeployments(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_required_deployments_encode(
  data: RepositoryRuleRequiredDeployments,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn issue_event_for_issue_decoder() {
  panic as "AnyOf"
}

pub fn issue_event_for_issue_encode(_data: IssueEventForIssue) {
  panic as "AnyOf"
}

pub fn short_blob_decoder() {
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  decode.success(ShortBlob(sha: sha, url: url))
}

pub fn short_blob_encode(data: ShortBlob) {
  json.object([#("sha", json.string(data.sha)), #("url", json.string(data.url))])
}

pub fn repository_rule_merge_queue_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleMergeQueue(parameters: parameters, type_: type_))
}

pub fn repository_rule_merge_queue_encode(data: RepositoryRuleMergeQueue) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn webhook_issues_unpinned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field("issue", webhooks_issue_2_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesUnpinned(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_unpinned_encode(data: WebhookIssuesUnpinned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", webhooks_issue_2_encode(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn link_with_type_decoder() {
  use href <- decode.field("href", decode.string)
  use type_ <- decode.field("type", decode.string)
  decode.success(LinkWithType(href: href, type_: type_))
}

pub fn link_with_type_encode(data: LinkWithType) {
  json.object(
    [#("href", json.string(data.href)), #("type", json.string(data.type_))],
  )
}

pub fn code_scanning_alert_dismissed_comment_decoder() {
  decode.string
}

pub fn code_scanning_alert_dismissed_comment_encode(
  data: CodeScanningAlertDismissedComment,
) {
  json.string(data)
}

pub fn webhooks_user_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.optional_field(
    "gists_url",
    None,
    decode.optional(decode.string),
  )
  use following_url <- decode.optional_field(
    "following_url",
    None,
    decode.optional(decode.string),
  )
  use followers_url <- decode.optional_field(
    "followers_url",
    None,
    decode.optional(decode.string),
  )
  use subscriptions_url <- decode.optional_field(
    "subscriptions_url",
    None,
    decode.optional(decode.string),
  )
  use received_events_url <- decode.optional_field(
    "received_events_url",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.optional_field(
    "events_url",
    None,
    decode.optional(decode.string),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use starred_url <- decode.optional_field(
    "starred_url",
    None,
    decode.optional(decode.string),
  )
  use organizations_url <- decode.optional_field(
    "organizations_url",
    None,
    decode.optional(decode.string),
  )
  use repos_url <- decode.optional_field(
    "repos_url",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.optional_field(
    "site_admin",
    None,
    decode.optional(decode.bool),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use deleted <- decode.optional_field(
    "deleted",
    None,
    decode.optional(decode.bool),
  )
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksUser(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      deleted: deleted,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn webhooks_user_encode(data: WebhooksUser) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.nullable(data.gists_url, json.string)),
      #("following_url", json.nullable(data.following_url, json.string)),
      #("followers_url", json.nullable(data.followers_url, json.string)),
      #("subscriptions_url", json.nullable(data.subscriptions_url, json.string)),
      #(
        "received_events_url",
        json.nullable(data.received_events_url, json.string),
      ),
      #("events_url", json.nullable(data.events_url, json.string)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("starred_url", json.nullable(data.starred_url, json.string)),
      #("organizations_url", json.nullable(data.organizations_url, json.string)),
      #("repos_url", json.nullable(data.repos_url, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.nullable(data.site_admin, json.bool)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("deleted", json.nullable(data.deleted, json.bool)),
      #("type", json.nullable(data.type_, json.string)),
      #("id", json.int(data.id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn interaction_expiry_decoder() {
  decode.string
}

pub fn interaction_expiry_encode(data: InteractionExpiry) {
  json.string(data)
}

pub fn repository_rule_committer_email_pattern_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleCommitterEmailPattern(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_committer_email_pattern_encode(
  data: RepositoryRuleCommitterEmailPattern,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn code_scanning_variant_analysis_skipped_repo_group_decoder() {
  use repositories <- decode.field(
    "repositories",
    decode.list(code_scanning_variant_analysis_repository_decoder()),
  )
  use repository_count <- decode.field("repository_count", decode.int)
  decode.success(
    CodeScanningVariantAnalysisSkippedRepoGroup(
      repositories: repositories,
      repository_count: repository_count,
    ),
  )
}

pub fn code_scanning_variant_analysis_skipped_repo_group_encode(
  data: CodeScanningVariantAnalysisSkippedRepoGroup,
) {
  json.object(
    [
      #(
        "repositories",
        json.array(_, code_scanning_variant_analysis_repository_encode)(
          data.repositories,
        ),
      ),
      #("repository_count", json.int(data.repository_count))
    ],
  )
}

pub fn webhook_check_run_completed_decoder() {
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use check_run <- decode.field(
    "check_run",
    check_run_with_simple_check_suite_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckRunCompleted(
      repository: repository,
      organization: organization,
      check_run: check_run,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_run_completed_encode(data: WebhookCheckRunCompleted) {
  json.object(
    [
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("check_run", check_run_with_simple_check_suite_encode(data.check_run)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.nullable(data.action, json.string)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_pull_request_review_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use review <- decode.field("review", webhooks_review_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReviewEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      review: review,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_review_edited_encode(
  data: WebhookPullRequestReviewEdited,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #("review", webhooks_review_encode(data.review)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_dependabot_alert_reintroduced_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertReintroduced(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_reintroduced_encode(
  data: WebhookDependabotAlertReintroduced,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn rate_limit_decoder() {
  use reset <- decode.field("reset", decode.int)
  use remaining <- decode.field("remaining", decode.int)
  use limit <- decode.field("limit", decode.int)
  use used <- decode.field("used", decode.int)
  decode.success(
    RateLimit(reset: reset, remaining: remaining, limit: limit, used: used),
  )
}

pub fn rate_limit_encode(data: RateLimit) {
  json.object(
    [
      #("reset", json.int(data.reset)),
      #("remaining", json.int(data.remaining)),
      #("limit", json.int(data.limit)),
      #("used", json.int(data.used))
    ],
  )
}

pub fn codespaces_public_key_decoder() {
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use title <- decode.optional_field(
    "title",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use key_id <- decode.field("key_id", decode.string)
  use key <- decode.field("key", decode.string)
  decode.success(
    CodespacesPublicKey(
      created_at: created_at,
      url: url,
      title: title,
      id: id,
      key_id: key_id,
      key: key,
    ),
  )
}

pub fn codespaces_public_key_encode(data: CodespacesPublicKey) {
  json.object(
    [
      #("created_at", json.nullable(data.created_at, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("title", json.nullable(data.title, json.string)),
      #("id", json.nullable(data.id, json.int)),
      #("key_id", json.string(data.key_id)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn secret_scanning_alert_resolution_comment_decoder() {
  decode.string
}

pub fn secret_scanning_alert_resolution_comment_encode(
  data: SecretScanningAlertResolutionComment,
) {
  json.string(data)
}

pub fn social_account_decoder() {
  use url <- decode.field("url", decode.string)
  use provider <- decode.field("provider", decode.string)
  decode.success(SocialAccount(url: url, provider: provider))
}

pub fn social_account_encode(data: SocialAccount) {
  json.object(
    [#("url", json.string(data.url)), #("provider", json.string(data.provider))],
  )
}

pub fn webhook_org_block_blocked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use blocked_user <- decode.field("blocked_user", webhooks_user_decoder())
  decode.success(
    WebhookOrgBlockBlocked(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      blocked_user: blocked_user,
    ),
  )
}

pub fn webhook_org_block_blocked_encode(data: WebhookOrgBlockBlocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("blocked_user", webhooks_user_encode(data.blocked_user))
    ],
  )
}

pub fn nullable_issue_decoder() {
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.optional_field(
    "assignees",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use number <- decode.field("number", decode.int)
  use closed_by <- decode.optional_field(
    "closed_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use locked <- decode.field("locked", decode.bool)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_decoder()),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", nullable_simple_user_decoder())
  use milestone <- decode.field("milestone", nullable_milestone_decoder())
  use timeline_url <- decode.optional_field(
    "timeline_url",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.field("state", decode.string)
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use comments <- decode.field("comments", decode.int)
  use pull_request <- decode.optional_field(
    "pull_request",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field(
    "labels",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    NullableIssue(
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      closed_at: closed_at,
      body_html: body_html,
      events_url: events_url,
      number: number,
      closed_by: closed_by,
      created_at: created_at,
      body_text: body_text,
      locked: locked,
      repository: repository,
      reactions: reactions,
      user: user,
      author_association: author_association,
      labels_url: labels_url,
      url: url,
      assignee: assignee,
      milestone: milestone,
      timeline_url: timeline_url,
      state: state,
      state_reason: state_reason,
      comments: comments,
      pull_request: pull_request,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn nullable_issue_encode(data: NullableIssue) {
  json.object(
    [
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.nullable(data.assignees, json.array(_, simple_user_encode)),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("events_url", json.string(data.events_url)),
      #("number", json.int(data.number)),
      #("closed_by", json.nullable(data.closed_by, nullable_simple_user_encode)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("locked", json.bool(data.locked)),
      #("repository", json.nullable(data.repository, repository_encode)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("assignee", nullable_simple_user_encode(data.assignee)),
      #("milestone", nullable_milestone_encode(data.milestone)),
      #("timeline_url", json.nullable(data.timeline_url, json.string)),
      #("state", json.string(data.state)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("comments", json.int(data.comments)),
      #(
        "pull_request",
        json.nullable(
          data.pull_request,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.array(_, fn(_) { panic as "Oneoas.OneOf in array" })(data.labels),
      )
    ],
  )
}

pub fn webhook_personal_access_token_request_cancelled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use personal_access_token_request <- decode.field(
    "personal_access_token_request",
    personal_access_token_request_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", simple_installation_decoder())
  decode.success(
    WebhookPersonalAccessTokenRequestCancelled(
      enterprise: enterprise,
      personal_access_token_request: personal_access_token_request,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_personal_access_token_request_cancelled_encode(
  data: WebhookPersonalAccessTokenRequestCancelled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "personal_access_token_request",
        personal_access_token_request_encode(data.personal_access_token_request),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", simple_installation_encode(data.installation))
    ],
  )
}

pub fn issue_event_label_decoder() {
  use color <- decode.optional_field(
    "color",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  decode.success(IssueEventLabel(color: color, name: name))
}

pub fn issue_event_label_encode(data: IssueEventLabel) {
  json.object(
    [
      #("color", json.nullable(data.color, json.string)),
      #("name", json.nullable(data.name, json.string))
    ],
  )
}

pub fn porter_large_file_decoder() {
  use size <- decode.field("size", decode.int)
  use path_ <- decode.field("path", decode.string)
  use oid <- decode.field("oid", decode.string)
  use ref_name <- decode.field("ref_name", decode.string)
  decode.success(
    PorterLargeFile(size: size, path_: path_, oid: oid, ref_name: ref_name),
  )
}

pub fn porter_large_file_encode(data: PorterLargeFile) {
  json.object(
    [
      #("size", json.int(data.size)),
      #("path", json.string(data.path_)),
      #("oid", json.string(data.oid)),
      #("ref_name", json.string(data.ref_name))
    ],
  )
}

pub fn license_content_decoder() {
  use size <- decode.field("size", decode.int)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use path_ <- decode.field("path", decode.string)
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use encoding <- decode.field("encoding", decode.string)
  use download_url <- decode.optional_field(
    "download_url",
    None,
    decode.optional(decode.string),
  )
  use content <- decode.field("content", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use type_ <- decode.field("type", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    LicenseContent(
      size: size,
      license: license,
      git_url: git_url,
      path_: path_,
      name: name,
      sha: sha,
      url: url,
      encoding: encoding,
      download_url: download_url,
      content: content,
      links: links,
      type_: type_,
      html_url: html_url,
    ),
  )
}

pub fn license_content_encode(data: LicenseContent) {
  json.object(
    [
      #("size", json.int(data.size)),
      #("license", nullable_license_simple_encode(data.license)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("path", json.string(data.path_)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("encoding", json.string(data.encoding)),
      #("download_url", json.nullable(data.download_url, json.string)),
      #("content", json.string(data.content)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("type", json.string(data.type_)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn code_scanning_default_setup_update_response_decoder() {
  use run_id <- decode.optional_field(
    "run_id",
    None,
    decode.optional(decode.int),
  )
  use run_url <- decode.optional_field(
    "run_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeScanningDefaultSetupUpdateResponse(run_id: run_id, run_url: run_url),
  )
}

pub fn code_scanning_default_setup_update_response_encode(
  data: CodeScanningDefaultSetupUpdateResponse,
) {
  json.object(
    [
      #("run_id", json.nullable(data.run_id, json.int)),
      #("run_url", json.nullable(data.run_url, json.string))
    ],
  )
}

pub fn content_symlink_decoder() {
  use size <- decode.field("size", decode.int)
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use path_ <- decode.field("path", decode.string)
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use target <- decode.field("target", decode.string)
  use download_url <- decode.optional_field(
    "download_url",
    None,
    decode.optional(decode.string),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use type_ <- decode.field("type", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ContentSymlink(
      size: size,
      git_url: git_url,
      path_: path_,
      name: name,
      sha: sha,
      url: url,
      target: target,
      download_url: download_url,
      links: links,
      type_: type_,
      html_url: html_url,
    ),
  )
}

pub fn content_symlink_encode(data: ContentSymlink) {
  json.object(
    [
      #("size", json.int(data.size)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("path", json.string(data.path_)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("target", json.string(data.target)),
      #("download_url", json.nullable(data.download_url, json.string)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("type", json.string(data.type_)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn webhooks_milestone_decoder() {
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", decode.int)
  use due_on <- decode.optional_field(
    "due_on",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.optional_field(
    "creator",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use closed_issues <- decode.field("closed_issues", decode.int)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksMilestone(
      closed_at: closed_at,
      number: number,
      due_on: due_on,
      created_at: created_at,
      creator: creator,
      closed_issues: closed_issues,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn webhooks_milestone_encode(data: WebhooksMilestone) {
  json.object(
    [
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("number", json.int(data.number)),
      #("due_on", json.nullable(data.due_on, json.string)),
      #("created_at", json.string(data.created_at)),
      #(
        "creator",
        json.nullable(
          data.creator,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("closed_issues", json.int(data.closed_issues)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn code_scanning_analysis_tool_decoder() {
  use guid <- decode.optional_field(
    "guid",
    None,
    decode.optional(code_scanning_analysis_tool_guid_decoder()),
  )
  use name <- decode.optional_field(
    "name",
    None,
    decode.optional(code_scanning_analysis_tool_name_decoder()),
  )
  use version <- decode.optional_field(
    "version",
    None,
    decode.optional(code_scanning_analysis_tool_version_decoder()),
  )
  decode.success(
    CodeScanningAnalysisTool(guid: guid, name: name, version: version),
  )
}

pub fn code_scanning_analysis_tool_encode(data: CodeScanningAnalysisTool) {
  json.object(
    [
      #(
        "guid",
        json.nullable(data.guid, code_scanning_analysis_tool_guid_encode),
      ),
      #(
        "name",
        json.nullable(data.name, code_scanning_analysis_tool_name_encode),
      ),
      #(
        "version",
        json.nullable(data.version, code_scanning_analysis_tool_version_encode),
      )
    ],
  )
}

pub fn code_scanning_analysis_created_at_decoder() {
  decode.string
}

pub fn code_scanning_analysis_created_at_encode(
  data: CodeScanningAnalysisCreatedAt,
) {
  json.string(data)
}

pub fn clone_traffic_decoder() {
  use uniques <- decode.field("uniques", decode.int)
  use count <- decode.field("count", decode.int)
  use clones <- decode.field("clones", decode.list(traffic_decoder()))
  decode.success(CloneTraffic(uniques: uniques, count: count, clones: clones))
}

pub fn clone_traffic_encode(data: CloneTraffic) {
  json.object(
    [
      #("uniques", json.int(data.uniques)),
      #("count", json.int(data.count)),
      #("clones", json.array(_, traffic_encode)(data.clones))
    ],
  )
}

pub fn milestoned_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use milestone <- decode.field(
    "milestone",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    MilestonedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      milestone: milestone,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn milestoned_issue_event_encode(data: MilestonedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #(
        "milestone",
        fn(_) { panic as "Literal object inside field" }(data.milestone),
      ),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn repository_rule_creation_decoder() {
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleCreation(type_: type_))
}

pub fn repository_rule_creation_encode(data: RepositoryRuleCreation) {
  json.object([#("type", json.string(data.type_))])
}

pub fn added_to_project_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use project_card <- decode.optional_field(
    "project_card",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    AddedToProjectIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      project_card: project_card,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn added_to_project_issue_event_encode(data: AddedToProjectIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #(
        "project_card",
        json.nullable(
          data.project_card,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn wait_timer_decoder() {
  decode.int
}

pub fn wait_timer_encode(data: WaitTimer) {
  json.int(data)
}

pub fn review_dismissed_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use dismissed_review <- decode.field(
    "dismissed_review",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    ReviewDismissedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      dismissed_review: dismissed_review,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn review_dismissed_issue_event_encode(data: ReviewDismissedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #(
        "dismissed_review",
        fn(_) { panic as "Literal object inside field" }(data.dismissed_review),
      ),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_registry_package_published_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use registry_package <- decode.field(
    "registry_package",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRegistryPackagePublished(
      enterprise: enterprise,
      registry_package: registry_package,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_registry_package_published_encode(
  data: WebhookRegistryPackagePublished,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "registry_package",
        fn(_) { panic as "Literal object inside field" }(data.registry_package),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_watch_started_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookWatchStarted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_watch_started_encode(data: WebhookWatchStarted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn simple_commit_status_decoder() {
  use target_url <- decode.optional_field(
    "target_url",
    None,
    decode.optional(decode.string),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use context <- decode.field("context", decode.string)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use required <- decode.optional_field(
    "required",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    SimpleCommitStatus(
      target_url: target_url,
      avatar_url: avatar_url,
      created_at: created_at,
      url: url,
      context: context,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      description: description,
      required: required,
    ),
  )
}

pub fn simple_commit_status_encode(data: SimpleCommitStatus) {
  json.object(
    [
      #("target_url", json.nullable(data.target_url, json.string)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("context", json.string(data.context)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string)),
      #("required", json.nullable(data.required, json.bool))
    ],
  )
}

pub fn selected_actions_url_decoder() {
  decode.string
}

pub fn selected_actions_url_encode(data: SelectedActionsUrl) {
  json.string(data)
}

pub fn repository_rule_params_code_scanning_tool_decoder() {
  use security_alerts_threshold <- decode.field(
    "security_alerts_threshold",
    decode.string,
  )
  use alerts_threshold <- decode.field("alerts_threshold", decode.string)
  use tool <- decode.field("tool", decode.string)
  decode.success(
    RepositoryRuleParamsCodeScanningTool(
      security_alerts_threshold: security_alerts_threshold,
      alerts_threshold: alerts_threshold,
      tool: tool,
    ),
  )
}

pub fn repository_rule_params_code_scanning_tool_encode(
  data: RepositoryRuleParamsCodeScanningTool,
) {
  json.object(
    [
      #("security_alerts_threshold", json.string(data.security_alerts_threshold)),
      #("alerts_threshold", json.string(data.alerts_threshold)),
      #("tool", json.string(data.tool))
    ],
  )
}

pub fn webhook_workflow_job_in_progress_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow_job <- decode.field(
    "workflow_job",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookWorkflowJobInProgress(
      enterprise: enterprise,
      deployment: deployment,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow_job: workflow_job,
    ),
  )
}

pub fn webhook_workflow_job_in_progress_encode(
  data: WebhookWorkflowJobInProgress,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("deployment", json.nullable(data.deployment, deployment_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "workflow_job",
        fn(_) { panic as "AllOf inside field" }(data.workflow_job),
      )
    ],
  )
}

pub fn repository_advisory_create_decoder() {
  use cvss_vector_string <- decode.optional_field(
    "cvss_vector_string",
    None,
    decode.optional(decode.string),
  )
  use summary <- decode.field("summary", decode.string)
  use cve_id <- decode.optional_field(
    "cve_id",
    None,
    decode.optional(decode.string),
  )
  use cwe_ids <- decode.optional_field(
    "cwe_ids",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use credits <- decode.optional_field(
    "credits",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use vulnerabilities <- decode.field(
    "vulnerabilities",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use start_private_fork <- decode.optional_field(
    "start_private_fork",
    None,
    decode.optional(decode.bool),
  )
  use description <- decode.field("description", decode.string)
  use severity <- decode.optional_field(
    "severity",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryAdvisoryCreate(
      cvss_vector_string: cvss_vector_string,
      summary: summary,
      cve_id: cve_id,
      cwe_ids: cwe_ids,
      credits: credits,
      vulnerabilities: vulnerabilities,
      start_private_fork: start_private_fork,
      description: description,
      severity: severity,
    ),
  )
}

pub fn repository_advisory_create_encode(data: RepositoryAdvisoryCreate) {
  json.object(
    [
      #(
        "cvss_vector_string",
        json.nullable(data.cvss_vector_string, json.string),
      ),
      #("summary", json.string(data.summary)),
      #("cve_id", json.nullable(data.cve_id, json.string)),
      #("cwe_ids", json.nullable(data.cwe_ids, json.array(_, json.string))),
      #(
        "credits",
        json.nullable(
          data.credits,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "vulnerabilities",
        json.array(_, fn(_) { panic as "object in array" })(data.vulnerabilities),
      ),
      #("start_private_fork", json.nullable(data.start_private_fork, json.bool)),
      #("description", json.string(data.description)),
      #("severity", json.nullable(data.severity, json.string))
    ],
  )
}

pub fn webhook_repository_vulnerability_alert_reopen_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", webhooks_alert_decoder())
  decode.success(
    WebhookRepositoryVulnerabilityAlertReopen(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_repository_vulnerability_alert_reopen_encode(
  data: WebhookRepositoryVulnerabilityAlertReopen,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", webhooks_alert_encode(data.alert))
    ],
  )
}

pub fn webhook_release_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use release <- decode.field("release", webhooks_release_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleaseCreated(
      enterprise: enterprise,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_created_encode(data: WebhookReleaseCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("release", webhooks_release_encode(data.release)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn api_overview_decoder() {
  use verifiable_password_authentication <- decode.field(
    "verifiable_password_authentication",
    decode.bool,
  )
  use pages <- decode.optional_field(
    "pages",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use ssh_key_fingerprints <- decode.optional_field(
    "ssh_key_fingerprints",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use ssh_keys <- decode.optional_field(
    "ssh_keys",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use copilot <- decode.optional_field(
    "copilot",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use packages <- decode.optional_field(
    "packages",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use domains <- decode.optional_field(
    "domains",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use hooks <- decode.optional_field(
    "hooks",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use actions_macos <- decode.optional_field(
    "actions_macos",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use dependabot <- decode.optional_field(
    "dependabot",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use importer <- decode.optional_field(
    "importer",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use git <- decode.optional_field(
    "git",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use web <- decode.optional_field(
    "web",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use github_enterprise_importer <- decode.optional_field(
    "github_enterprise_importer",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use codespaces <- decode.optional_field(
    "codespaces",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use api <- decode.optional_field(
    "api",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use actions <- decode.optional_field(
    "actions",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    ApiOverview(
      verifiable_password_authentication: verifiable_password_authentication,
      pages: pages,
      ssh_key_fingerprints: ssh_key_fingerprints,
      ssh_keys: ssh_keys,
      copilot: copilot,
      packages: packages,
      domains: domains,
      hooks: hooks,
      actions_macos: actions_macos,
      dependabot: dependabot,
      importer: importer,
      git: git,
      web: web,
      github_enterprise_importer: github_enterprise_importer,
      codespaces: codespaces,
      api: api,
      actions: actions,
    ),
  )
}

pub fn api_overview_encode(data: ApiOverview) {
  json.object(
    [
      #(
        "verifiable_password_authentication",
        json.bool(data.verifiable_password_authentication),
      ),
      #("pages", json.nullable(data.pages, json.array(_, json.string))),
      #(
        "ssh_key_fingerprints",
        json.nullable(
          data.ssh_key_fingerprints,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("ssh_keys", json.nullable(data.ssh_keys, json.array(_, json.string))),
      #("copilot", json.nullable(data.copilot, json.array(_, json.string))),
      #("packages", json.nullable(data.packages, json.array(_, json.string))),
      #(
        "domains",
        json.nullable(
          data.domains,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("hooks", json.nullable(data.hooks, json.array(_, json.string))),
      #(
        "actions_macos",
        json.nullable(data.actions_macos, json.array(_, json.string)),
      ),
      #("dependabot", json.nullable(data.dependabot, json.array(_, json.string))),
      #("importer", json.nullable(data.importer, json.array(_, json.string))),
      #("git", json.nullable(data.git, json.array(_, json.string))),
      #("web", json.nullable(data.web, json.array(_, json.string))),
      #(
        "github_enterprise_importer",
        json.nullable(
          data.github_enterprise_importer,
          json.array(_, json.string),
        ),
      ),
      #("codespaces", json.nullable(data.codespaces, json.array(_, json.string))),
      #("api", json.nullable(data.api, json.array(_, json.string))),
      #("actions", json.nullable(data.actions, json.array(_, json.string)))
    ],
  )
}

pub fn webhook_organization_member_invited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(webhooks_user_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use invitation <- decode.field(
    "invitation",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookOrganizationMemberInvited(
      enterprise: enterprise,
      repository: repository,
      user: user,
      organization: organization,
      sender: sender,
      action: action,
      invitation: invitation,
      installation: installation,
    ),
  )
}

pub fn webhook_organization_member_invited_encode(
  data: WebhookOrganizationMemberInvited,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("user", json.nullable(data.user, webhooks_user_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "invitation",
        fn(_) { panic as "Literal object inside field" }(data.invitation),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_security_configuration_repositories_decoder() {
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(simple_repository_decoder()),
  )
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeSecurityConfigurationRepositories(repository: repository, status: status),
  )
}

pub fn code_security_configuration_repositories_encode(
  data: CodeSecurityConfigurationRepositories,
) {
  json.object(
    [
      #("repository", json.nullable(data.repository, simple_repository_encode)),
      #("status", json.nullable(data.status, json.string))
    ],
  )
}

pub fn webhooks_repositories_added_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn webhooks_repositories_added_encode(data: WebhooksRepositoriesAdded) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn webhook_repository_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_deleted_encode(data: WebhookRepositoryDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn organization_simple_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use members_url <- decode.field("members_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use issues_url <- decode.field("issues_url", decode.string)
  use url <- decode.field("url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use public_members_url <- decode.field("public_members_url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationSimple(
      hooks_url: hooks_url,
      members_url: members_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      issues_url: issues_url,
      url: url,
      repos_url: repos_url,
      public_members_url: public_members_url,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn organization_simple_encode(data: OrganizationSimple) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("members_url", json.string(data.members_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("issues_url", json.string(data.issues_url)),
      #("url", json.string(data.url)),
      #("repos_url", json.string(data.repos_url)),
      #("public_members_url", json.string(data.public_members_url)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhooks_workflow_job_run_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use status <- decode.field("status", decode.string)
  use environment <- decode.field("environment", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksWorkflowJobRun(
      created_at: created_at,
      status: status,
      environment: environment,
      updated_at: updated_at,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_workflow_job_run_encode(data: WebhooksWorkflowJobRun) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("status", json.string(data.status)),
      #("environment", json.string(data.environment)),
      #("updated_at", json.string(data.updated_at)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn tag_protection_decoder() {
  use enabled <- decode.optional_field(
    "enabled",
    None,
    decode.optional(decode.bool),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use pattern <- decode.field("pattern", decode.string)
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  decode.success(
    TagProtection(
      enabled: enabled,
      created_at: created_at,
      pattern: pattern,
      updated_at: updated_at,
      id: id,
    ),
  )
}

pub fn tag_protection_encode(data: TagProtection) {
  json.object(
    [
      #("enabled", json.nullable(data.enabled, json.bool)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("pattern", json.string(data.pattern)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("id", json.nullable(data.id, json.int))
    ],
  )
}

pub fn security_advisory_credit_types_decoder() {
  decode.string
}

pub fn security_advisory_credit_types_encode(data: SecurityAdvisoryCreditTypes) {
  json.string(data)
}

pub fn org_hook_decoder() {
  use ping_url <- decode.field("ping_url", decode.string)
  use config <- decode.field(
    "config",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use deliveries_url <- decode.optional_field(
    "deliveries_url",
    None,
    decode.optional(decode.string),
  )
  use active <- decode.field("active", decode.bool)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use events <- decode.field("events", decode.list(decode.string))
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    OrgHook(
      ping_url: ping_url,
      config: config,
      deliveries_url: deliveries_url,
      active: active,
      created_at: created_at,
      name: name,
      url: url,
      updated_at: updated_at,
      events: events,
      type_: type_,
      id: id,
    ),
  )
}

pub fn org_hook_encode(data: OrgHook) {
  json.object(
    [
      #("ping_url", json.string(data.ping_url)),
      #("config", fn(_) { panic as "Literal object inside field" }(data.config)),
      #("deliveries_url", json.nullable(data.deliveries_url, json.string)),
      #("active", json.bool(data.active)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("events", json.array(_, json.string)(data.events)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn timeline_unassigned_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", simple_user_decoder())
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    TimelineUnassignedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      assignee: assignee,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn timeline_unassigned_issue_event_encode(data: TimelineUnassignedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("assignee", simple_user_encode(data.assignee)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn hovercard_decoder() {
  use contexts <- decode.field(
    "contexts",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(Hovercard(contexts: contexts))
}

pub fn hovercard_encode(data: Hovercard) {
  json.object(
    [
      #(
        "contexts",
        json.array(_, fn(_) { panic as "object in array" })(data.contexts),
      )
    ],
  )
}

pub fn copilot_dotcom_chat_decoder() {
  use models <- decode.optional_field(
    "models",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use total_engaged_users <- decode.optional_field(
    "total_engaged_users",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CopilotDotcomChat(models: models, total_engaged_users: total_engaged_users),
  )
}

pub fn copilot_dotcom_chat_encode(data: CopilotDotcomChat) {
  json.object(
    [
      #(
        "models",
        json.nullable(
          data.models,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("total_engaged_users", json.nullable(data.total_engaged_users, json.int))
    ],
  )
}

pub fn pages_https_certificate_decoder() {
  use domains <- decode.field("domains", decode.list(decode.string))
  use state <- decode.field("state", decode.string)
  use description <- decode.field("description", decode.string)
  use expires_at <- decode.optional_field(
    "expires_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    PagesHttpsCertificate(
      domains: domains,
      state: state,
      description: description,
      expires_at: expires_at,
    ),
  )
}

pub fn pages_https_certificate_encode(data: PagesHttpsCertificate) {
  json.object(
    [
      #("domains", json.array(_, json.string)(data.domains)),
      #("state", json.string(data.state)),
      #("description", json.string(data.description)),
      #("expires_at", json.nullable(data.expires_at, json.string))
    ],
  )
}

pub fn webhook_project_column_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(nullable_repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use project_column <- decode.field(
    "project_column",
    webhooks_project_column_decoder(),
  )
  decode.success(
    WebhookProjectColumnDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      project_column: project_column,
    ),
  )
}

pub fn webhook_project_column_deleted_encode(data: WebhookProjectColumnDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(data.repository, nullable_repository_webhooks_encode),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("project_column", webhooks_project_column_encode(data.project_column))
    ],
  )
}

pub fn secret_scanning_location_discussion_title_decoder() {
  use discussion_title_url <- decode.field("discussion_title_url", decode.string)
  decode.success(
    SecretScanningLocationDiscussionTitle(
      discussion_title_url: discussion_title_url,
    ),
  )
}

pub fn secret_scanning_location_discussion_title_encode(
  data: SecretScanningLocationDiscussionTitle,
) {
  json.object(
    [#("discussion_title_url", json.string(data.discussion_title_url))],
  )
}

pub fn repository_rule_required_linear_history_decoder() {
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleRequiredLinearHistory(type_: type_))
}

pub fn repository_rule_required_linear_history_encode(
  data: RepositoryRuleRequiredLinearHistory,
) {
  json.object([#("type", json.string(data.type_))])
}

pub fn webhook_pull_request_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    pull_request_webhook_decoder(),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReopened(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_reopened_encode(data: WebhookPullRequestReopened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("pull_request", pull_request_webhook_encode(data.pull_request)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_projects_v2_item_converted_decoder() {
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemConverted(
      changes: changes,
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_converted_encode(
  data: WebhookProjectsV2ItemConverted,
) {
  json.object(
    [
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn actions_variable_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use value <- decode.field("value", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  decode.success(
    ActionsVariable(
      created_at: created_at,
      name: name,
      value: value,
      updated_at: updated_at,
    ),
  )
}

pub fn actions_variable_encode(data: ActionsVariable) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("value", json.string(data.value)),
      #("updated_at", json.string(data.updated_at))
    ],
  )
}

pub fn webhooks_nullable_string_decoder() {
  decode.string
}

pub fn webhooks_nullable_string_encode(data: WebhooksNullableString) {
  json.string(data)
}

pub fn codespaces_org_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use visibility <- decode.field("visibility", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use selected_repositories_url <- decode.optional_field(
    "selected_repositories_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodespacesOrgSecret(
      created_at: created_at,
      name: name,
      visibility: visibility,
      updated_at: updated_at,
      selected_repositories_url: selected_repositories_url,
    ),
  )
}

pub fn codespaces_org_secret_encode(data: CodespacesOrgSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("visibility", json.string(data.visibility)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "selected_repositories_url",
        json.nullable(data.selected_repositories_url, json.string),
      )
    ],
  )
}

pub fn webhook_pull_request_enqueued_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", decode.int)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestEnqueued(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_enqueued_encode(data: WebhookPullRequestEnqueued) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", json.int(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_discussion_answered_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use answer <- decode.field("answer", webhooks_answer_decoder())
  decode.success(
    WebhookDiscussionAnswered(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      answer: answer,
    ),
  )
}

pub fn webhook_discussion_answered_encode(data: WebhookDiscussionAnswered) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("answer", webhooks_answer_encode(data.answer))
    ],
  )
}

pub fn labeled_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use label <- decode.field(
    "label",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    LabeledIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      label: label,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn labeled_issue_event_encode(data: LabeledIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("label", fn(_) { panic as "Literal object inside field" }(data.label)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn rule_suites_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn rule_suites_encode(data: RuleSuites) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn protected_branch_admin_enforced_decoder() {
  use enabled <- decode.field("enabled", decode.bool)
  use url <- decode.field("url", decode.string)
  decode.success(ProtectedBranchAdminEnforced(enabled: enabled, url: url))
}

pub fn protected_branch_admin_enforced_encode(data: ProtectedBranchAdminEnforced) {
  json.object(
    [#("enabled", json.bool(data.enabled)), #("url", json.string(data.url))],
  )
}

pub fn webhooks_number_decoder() {
  decode.int
}

pub fn webhooks_number_encode(data: WebhooksNumber) {
  json.int(data)
}

pub fn webhooks_repositories_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn webhooks_repositories_encode(data: WebhooksRepositories) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn nullable_scoped_installation_decoder() {
  use single_file_paths <- decode.optional_field(
    "single_file_paths",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use permissions <- decode.field("permissions", app_permissions_decoder())
  use has_multiple_single_files <- decode.optional_field(
    "has_multiple_single_files",
    None,
    decode.optional(decode.bool),
  )
  use account <- decode.field("account", simple_user_decoder())
  use single_file_name <- decode.optional_field(
    "single_file_name",
    None,
    decode.optional(decode.string),
  )
  use repository_selection <- decode.field("repository_selection", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  decode.success(
    NullableScopedInstallation(
      single_file_paths: single_file_paths,
      permissions: permissions,
      has_multiple_single_files: has_multiple_single_files,
      account: account,
      single_file_name: single_file_name,
      repository_selection: repository_selection,
      repositories_url: repositories_url,
    ),
  )
}

pub fn nullable_scoped_installation_encode(data: NullableScopedInstallation) {
  json.object(
    [
      #(
        "single_file_paths",
        json.nullable(data.single_file_paths, json.array(_, json.string)),
      ),
      #("permissions", app_permissions_encode(data.permissions)),
      #(
        "has_multiple_single_files",
        json.nullable(data.has_multiple_single_files, json.bool),
      ),
      #("account", simple_user_encode(data.account)),
      #("single_file_name", json.nullable(data.single_file_name, json.string)),
      #("repository_selection", json.string(data.repository_selection)),
      #("repositories_url", json.string(data.repositories_url))
    ],
  )
}

pub fn webhook_installation_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(webhooks_repositories_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", installation_decoder())
  use requester <- decode.optional_field(
    "requester",
    None,
    decode.optional(webhooks_user_decoder()),
  )
  decode.success(
    WebhookInstallationCreated(
      enterprise: enterprise,
      repositories: repositories,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      requester: requester,
    ),
  )
}

pub fn webhook_installation_created_encode(data: WebhookInstallationCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories",
        json.nullable(data.repositories, webhooks_repositories_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", installation_encode(data.installation)),
      #("requester", json.nullable(data.requester, webhooks_user_encode))
    ],
  )
}

pub fn actions_public_key_decoder() {
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use title <- decode.optional_field(
    "title",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use key_id <- decode.field("key_id", decode.string)
  use key <- decode.field("key", decode.string)
  decode.success(
    ActionsPublicKey(
      created_at: created_at,
      url: url,
      title: title,
      id: id,
      key_id: key_id,
      key: key,
    ),
  )
}

pub fn actions_public_key_encode(data: ActionsPublicKey) {
  json.object(
    [
      #("created_at", json.nullable(data.created_at, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("title", json.nullable(data.title, json.string)),
      #("id", json.nullable(data.id, json.int)),
      #("key_id", json.string(data.key_id)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn selected_actions_decoder() {
  use patterns_allowed <- decode.optional_field(
    "patterns_allowed",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use verified_allowed <- decode.optional_field(
    "verified_allowed",
    None,
    decode.optional(decode.bool),
  )
  use github_owned_allowed <- decode.optional_field(
    "github_owned_allowed",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    SelectedActions(
      patterns_allowed: patterns_allowed,
      verified_allowed: verified_allowed,
      github_owned_allowed: github_owned_allowed,
    ),
  )
}

pub fn selected_actions_encode(data: SelectedActions) {
  json.object(
    [
      #(
        "patterns_allowed",
        json.nullable(data.patterns_allowed, json.array(_, json.string)),
      ),
      #("verified_allowed", json.nullable(data.verified_allowed, json.bool)),
      #(
        "github_owned_allowed",
        json.nullable(data.github_owned_allowed, json.bool),
      )
    ],
  )
}

pub fn secret_scanning_location_issue_title_decoder() {
  use issue_title_url <- decode.field("issue_title_url", decode.string)
  decode.success(
    SecretScanningLocationIssueTitle(issue_title_url: issue_title_url),
  )
}

pub fn secret_scanning_location_issue_title_encode(
  data: SecretScanningLocationIssueTitle,
) {
  json.object([#("issue_title_url", json.string(data.issue_title_url))])
}

pub fn code_scanning_analysis_commit_sha_decoder() {
  decode.string
}

pub fn code_scanning_analysis_commit_sha_encode(
  data: CodeScanningAnalysisCommitSha,
) {
  json.string(data)
}

pub fn webhooks_reviewers_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn webhooks_reviewers_encode(data: WebhooksReviewers) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn dependency_decoder() {
  use dependencies <- decode.optional_field(
    "dependencies",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(metadata_decoder()),
  )
  use scope <- decode.optional_field(
    "scope",
    None,
    decode.optional(decode.string),
  )
  use package_url <- decode.optional_field(
    "package_url",
    None,
    decode.optional(decode.string),
  )
  use relationship <- decode.optional_field(
    "relationship",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Dependency(
      dependencies: dependencies,
      metadata: metadata,
      scope: scope,
      package_url: package_url,
      relationship: relationship,
    ),
  )
}

pub fn dependency_encode(data: Dependency) {
  json.object(
    [
      #(
        "dependencies",
        json.nullable(data.dependencies, json.array(_, json.string)),
      ),
      #("metadata", json.nullable(data.metadata, metadata_encode)),
      #("scope", json.nullable(data.scope, json.string)),
      #("package_url", json.nullable(data.package_url, json.string)),
      #("relationship", json.nullable(data.relationship, json.string))
    ],
  )
}

pub fn issue_event_project_card_decoder() {
  use project_id <- decode.field("project_id", decode.int)
  use project_url <- decode.field("project_url", decode.string)
  use previous_column_name <- decode.optional_field(
    "previous_column_name",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use column_name <- decode.field("column_name", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    IssueEventProjectCard(
      project_id: project_id,
      project_url: project_url,
      previous_column_name: previous_column_name,
      url: url,
      column_name: column_name,
      id: id,
    ),
  )
}

pub fn issue_event_project_card_encode(data: IssueEventProjectCard) {
  json.object(
    [
      #("project_id", json.int(data.project_id)),
      #("project_url", json.string(data.project_url)),
      #(
        "previous_column_name",
        json.nullable(data.previous_column_name, json.string),
      ),
      #("url", json.string(data.url)),
      #("column_name", json.string(data.column_name)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn secret_scanning_location_pull_request_title_decoder() {
  use pull_request_title_url <- decode.field(
    "pull_request_title_url",
    decode.string,
  )
  decode.success(
    SecretScanningLocationPullRequestTitle(
      pull_request_title_url: pull_request_title_url,
    ),
  )
}

pub fn secret_scanning_location_pull_request_title_encode(
  data: SecretScanningLocationPullRequestTitle,
) {
  json.object(
    [#("pull_request_title_url", json.string(data.pull_request_title_url))],
  )
}

pub fn webhook_branch_protection_configuration_enabled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookBranchProtectionConfigurationEnabled(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_branch_protection_configuration_enabled_encode(
  data: WebhookBranchProtectionConfigurationEnabled,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_deployment_review_requested_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use workflow_job_run <- decode.field(
    "workflow_job_run",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.optional_field(
    "workflow_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use reviewers <- decode.field(
    "reviewers",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use requestor <- decode.field("requestor", webhooks_user_decoder())
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use environment <- decode.field("environment", decode.string)
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use since <- decode.field("since", decode.string)
  decode.success(
    WebhookDeploymentReviewRequested(
      enterprise: enterprise,
      workflow_job_run: workflow_job_run,
      repository: repository,
      workflow_run: workflow_run,
      reviewers: reviewers,
      requestor: requestor,
      organization: organization,
      environment: environment,
      sender: sender,
      action: action,
      installation: installation,
      since: since,
    ),
  )
}

pub fn webhook_deployment_review_requested_encode(
  data: WebhookDeploymentReviewRequested,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "workflow_job_run",
        fn(_) { panic as "Literal object inside field" }(data.workflow_job_run),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        json.nullable(
          data.workflow_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "reviewers",
        json.array(_, fn(_) { panic as "object in array" })(data.reviewers),
      ),
      #("requestor", webhooks_user_encode(data.requestor)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("environment", json.string(data.environment)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("since", json.string(data.since))
    ],
  )
}

pub fn webhook_discussion_comment_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_comment_decoder())
  decode.success(
    WebhookDiscussionCommentCreated(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_discussion_comment_created_encode(
  data: WebhookDiscussionCommentCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_comment_encode(data.comment))
    ],
  )
}

pub fn dependabot_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  decode.success(
    DependabotSecret(created_at: created_at, name: name, updated_at: updated_at),
  )
}

pub fn dependabot_secret_encode(data: DependabotSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("updated_at", json.string(data.updated_at))
    ],
  )
}

pub fn code_scanning_analysis_tool_name_decoder() {
  decode.string
}

pub fn code_scanning_analysis_tool_name_encode(
  data: CodeScanningAnalysisToolName,
) {
  json.string(data)
}

pub fn webhook_check_run_created_decoder() {
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use check_run <- decode.field(
    "check_run",
    check_run_with_simple_check_suite_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckRunCreated(
      repository: repository,
      organization: organization,
      check_run: check_run,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_run_created_encode(data: WebhookCheckRunCreated) {
  json.object(
    [
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("check_run", check_run_with_simple_check_suite_encode(data.check_run)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.nullable(data.action, json.string)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_ruleset_conditions_repository_id_target_decoder() {
  use repository_id <- decode.field(
    "repository_id",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    RepositoryRulesetConditionsRepositoryIdTarget(repository_id: repository_id),
  )
}

pub fn repository_ruleset_conditions_repository_id_target_encode(
  data: RepositoryRulesetConditionsRepositoryIdTarget,
) {
  json.object(
    [
      #(
        "repository_id",
        fn(_) { panic as "Literal object inside field" }(data.repository_id),
      )
    ],
  )
}

pub fn validation_error_simple_decoder() {
  use message <- decode.field("message", decode.string)
  use documentation_url <- decode.field("documentation_url", decode.string)
  use errors <- decode.optional_field(
    "errors",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    ValidationErrorSimple(
      message: message,
      documentation_url: documentation_url,
      errors: errors,
    ),
  )
}

pub fn validation_error_simple_encode(data: ValidationErrorSimple) {
  json.object(
    [
      #("message", json.string(data.message)),
      #("documentation_url", json.string(data.documentation_url)),
      #("errors", json.nullable(data.errors, json.array(_, json.string)))
    ],
  )
}

pub fn webhook_repository_vulnerability_alert_create_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", webhooks_alert_decoder())
  decode.success(
    WebhookRepositoryVulnerabilityAlertCreate(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_repository_vulnerability_alert_create_encode(
  data: WebhookRepositoryVulnerabilityAlertCreate,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", webhooks_alert_encode(data.alert))
    ],
  )
}

pub fn hook_response_decoder() {
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use code <- decode.optional_field("code", None, decode.optional(decode.int))
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  decode.success(HookResponse(message: message, code: code, status: status))
}

pub fn hook_response_encode(data: HookResponse) {
  json.object(
    [
      #("message", json.nullable(data.message, json.string)),
      #("code", json.nullable(data.code, json.int)),
      #("status", json.nullable(data.status, json.string))
    ],
  )
}

pub fn repository_rule_branch_name_pattern_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleBranchNamePattern(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_branch_name_pattern_encode(
  data: RepositoryRuleBranchNamePattern,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn issue_comment_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use issue_url <- decode.field("issue_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    IssueComment(
      body: body,
      body_html: body_html,
      issue_url: issue_url,
      created_at: created_at,
      body_text: body_text,
      reactions: reactions,
      user: user,
      author_association: author_association,
      url: url,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn issue_comment_encode(data: IssueComment) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("issue_url", json.string(data.issue_url)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn codeowners_errors_decoder() {
  use errors <- decode.field(
    "errors",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(CodeownersErrors(errors: errors))
}

pub fn codeowners_errors_encode(data: CodeownersErrors) {
  json.object(
    [
      #(
        "errors",
        json.array(_, fn(_) { panic as "object in array" })(data.errors),
      )
    ],
  )
}

pub fn marketplace_account_decoder() {
  use login <- decode.field("login", decode.string)
  use organization_billing_email <- decode.optional_field(
    "organization_billing_email",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    MarketplaceAccount(
      login: login,
      organization_billing_email: organization_billing_email,
      url: url,
      node_id: node_id,
      type_: type_,
      id: id,
      email: email,
    ),
  )
}

pub fn marketplace_account_encode(data: MarketplaceAccount) {
  json.object(
    [
      #("login", json.string(data.login)),
      #(
        "organization_billing_email",
        json.nullable(data.organization_billing_email, json.string),
      ),
      #("url", json.string(data.url)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn webhook_projects_v2_status_update_created_decoder() {
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use projects_v2_status_update <- decode.field(
    "projects_v2_status_update",
    projects_v2_status_update_decoder(),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2StatusUpdateCreated(
      organization: organization,
      sender: sender,
      action: action,
      projects_v2_status_update: projects_v2_status_update,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_status_update_created_encode(
  data: WebhookProjectsV2StatusUpdateCreated,
) {
  json.object(
    [
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "projects_v2_status_update",
        projects_v2_status_update_encode(data.projects_v2_status_update),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_check_suite_rerequested_decoder() {
  use check_suite <- decode.field(
    "check_suite",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCheckSuiteRerequested(
      check_suite: check_suite,
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_check_suite_rerequested_encode(data: WebhookCheckSuiteRerequested) {
  json.object(
    [
      #(
        "check_suite",
        fn(_) { panic as "Literal object inside field" }(data.check_suite),
      ),
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_advisory_vulnerability_decoder() {
  use vulnerable_functions <- decode.optional_field(
    "vulnerable_functions",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use package <- decode.optional_field(
    "package",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use patched_versions <- decode.optional_field(
    "patched_versions",
    None,
    decode.optional(decode.string),
  )
  use vulnerable_version_range <- decode.optional_field(
    "vulnerable_version_range",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryAdvisoryVulnerability(
      vulnerable_functions: vulnerable_functions,
      package: package,
      patched_versions: patched_versions,
      vulnerable_version_range: vulnerable_version_range,
    ),
  )
}

pub fn repository_advisory_vulnerability_encode(
  data: RepositoryAdvisoryVulnerability,
) {
  json.object(
    [
      #(
        "vulnerable_functions",
        json.nullable(data.vulnerable_functions, json.array(_, json.string)),
      ),
      #(
        "package",
        json.nullable(
          data.package,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("patched_versions", json.nullable(data.patched_versions, json.string)),
      #(
        "vulnerable_version_range",
        json.nullable(data.vulnerable_version_range, json.string),
      )
    ],
  )
}

pub fn webhook_issues_assigned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(webhooks_user_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field("issue", webhooks_issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesAssigned(
      enterprise: enterprise,
      repository: repository,
      assignee: assignee,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_assigned_encode(data: WebhookIssuesAssigned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("assignee", json.nullable(data.assignee, webhooks_user_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", webhooks_issue_encode(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_discussion_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionReopened(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_reopened_encode(data: WebhookDiscussionReopened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_discussion_unlabeled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.field("label", webhooks_label_decoder())
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionUnlabeled(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_unlabeled_encode(data: WebhookDiscussionUnlabeled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", webhooks_label_encode(data.label)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_ping_form_encoded_decoder() {
  use payload <- decode.field("payload", decode.string)
  decode.success(WebhookPingFormEncoded(payload: payload))
}

pub fn webhook_ping_form_encoded_encode(data: WebhookPingFormEncoded) {
  json.object([#("payload", json.string(data.payload))])
}

pub fn gist_history_decoder() {
  use change_status <- decode.optional_field(
    "change_status",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use committed_at <- decode.optional_field(
    "committed_at",
    None,
    decode.optional(decode.string),
  )
  use version <- decode.optional_field(
    "version",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    GistHistory(
      change_status: change_status,
      user: user,
      url: url,
      committed_at: committed_at,
      version: version,
    ),
  )
}

pub fn gist_history_encode(data: GistHistory) {
  json.object(
    [
      #(
        "change_status",
        json.nullable(
          data.change_status,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("user", json.nullable(data.user, nullable_simple_user_encode)),
      #("url", json.nullable(data.url, json.string)),
      #("committed_at", json.nullable(data.committed_at, json.string)),
      #("version", json.nullable(data.version, json.string))
    ],
  )
}

pub fn repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use allow_update_branch <- decode.optional_field(
    "allow_update_branch",
    None,
    decode.optional(decode.bool),
  )
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.field("has_downloads", decode.bool)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use squash_merge_commit_message <- decode.optional_field(
    "squash_merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use merge_commit_message <- decode.optional_field(
    "merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use use_squash_pr_title_as_default <- decode.optional_field(
    "use_squash_pr_title_as_default",
    None,
    decode.optional(decode.bool),
  )
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use squash_merge_commit_title <- decode.optional_field(
    "squash_merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use merge_commit_title <- decode.optional_field(
    "merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use anonymous_access_enabled <- decode.optional_field(
    "anonymous_access_enabled",
    None,
    decode.optional(decode.bool),
  )
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    Repository(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      forks_count: forks_count,
      fork: fork,
      allow_update_branch: allow_update_branch,
      git_url: git_url,
      archived: archived,
      private: private,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      squash_merge_commit_message: squash_merge_commit_message,
      has_discussions: has_discussions,
      teams_url: teams_url,
      merge_commit_message: merge_commit_message,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      use_squash_pr_title_as_default: use_squash_pr_title_as_default,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      owner: owner,
      starred_at: starred_at,
      allow_merge_commit: allow_merge_commit,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      squash_merge_commit_title: squash_merge_commit_title,
      merge_commit_title: merge_commit_title,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      anonymous_access_enabled: anonymous_access_enabled,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn repository_encode(data: Repository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #(
        "allow_update_branch",
        json.nullable(data.allow_update_branch, json.bool),
      ),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.bool(data.has_downloads)),
      #("blobs_url", json.string(data.blobs_url)),
      #(
        "squash_merge_commit_message",
        json.nullable(data.squash_merge_commit_message, json.string),
      ),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #(
        "merge_commit_message",
        json.nullable(data.merge_commit_message, json.string),
      ),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #(
        "use_squash_pr_title_as_default",
        json.nullable(data.use_squash_pr_title_as_default, json.bool),
      ),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #("owner", simple_user_encode(data.owner)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #(
        "squash_merge_commit_title",
        json.nullable(data.squash_merge_commit_title, json.string),
      ),
      #(
        "merge_commit_title",
        json.nullable(data.merge_commit_title, json.string),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #(
        "anonymous_access_enabled",
        json.nullable(data.anonymous_access_enabled, json.bool),
      ),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn porter_author_decoder() {
  use remote_name <- decode.field("remote_name", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use remote_id <- decode.field("remote_id", decode.string)
  use import_url <- decode.field("import_url", decode.string)
  use id <- decode.field("id", decode.int)
  use email <- decode.field("email", decode.string)
  decode.success(
    PorterAuthor(
      remote_name: remote_name,
      name: name,
      url: url,
      remote_id: remote_id,
      import_url: import_url,
      id: id,
      email: email,
    ),
  )
}

pub fn porter_author_encode(data: PorterAuthor) {
  json.object(
    [
      #("remote_name", json.string(data.remote_name)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("remote_id", json.string(data.remote_id)),
      #("import_url", json.string(data.import_url)),
      #("id", json.int(data.id)),
      #("email", json.string(data.email))
    ],
  )
}

pub fn team_discussion_comment_decoder() {
  use last_edited_at <- decode.optional_field(
    "last_edited_at",
    None,
    decode.optional(decode.string),
  )
  use body <- decode.field("body", decode.string)
  use body_html <- decode.field("body_html", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use author <- decode.field("author", nullable_simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use discussion_url <- decode.field("discussion_url", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use body_version <- decode.field("body_version", decode.string)
  decode.success(
    TeamDiscussionComment(
      last_edited_at: last_edited_at,
      body: body,
      body_html: body_html,
      number: number,
      created_at: created_at,
      reactions: reactions,
      author: author,
      url: url,
      updated_at: updated_at,
      node_id: node_id,
      discussion_url: discussion_url,
      html_url: html_url,
      body_version: body_version,
    ),
  )
}

pub fn team_discussion_comment_encode(data: TeamDiscussionComment) {
  json.object(
    [
      #("last_edited_at", json.nullable(data.last_edited_at, json.string)),
      #("body", json.string(data.body)),
      #("body_html", json.string(data.body_html)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("author", nullable_simple_user_encode(data.author)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("discussion_url", json.string(data.discussion_url)),
      #("html_url", json.string(data.html_url)),
      #("body_version", json.string(data.body_version))
    ],
  )
}

pub fn projects_v2_item_content_type_decoder() {
  decode.string
}

pub fn projects_v2_item_content_type_encode(data: ProjectsV2ItemContentType) {
  json.string(data)
}

pub fn webhook_pull_request_unlabeled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(webhooks_label_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestUnlabeled(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_unlabeled_encode(data: WebhookPullRequestUnlabeled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", json.nullable(data.label, webhooks_label_encode)),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_discussion_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionDeleted(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_deleted_encode(data: WebhookDiscussionDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhooks_deploy_key_decoder() {
  use enabled <- decode.optional_field(
    "enabled",
    None,
    decode.optional(decode.bool),
  )
  use last_used <- decode.optional_field(
    "last_used",
    None,
    decode.optional(decode.string),
  )
  use verified <- decode.field("verified", decode.bool)
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use read_only <- decode.field("read_only", decode.bool)
  use added_by <- decode.optional_field(
    "added_by",
    None,
    decode.optional(decode.string),
  )
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use key <- decode.field("key", decode.string)
  decode.success(
    WebhooksDeployKey(
      enabled: enabled,
      last_used: last_used,
      verified: verified,
      created_at: created_at,
      url: url,
      read_only: read_only,
      added_by: added_by,
      title: title,
      id: id,
      key: key,
    ),
  )
}

pub fn webhooks_deploy_key_encode(data: WebhooksDeployKey) {
  json.object(
    [
      #("enabled", json.nullable(data.enabled, json.bool)),
      #("last_used", json.nullable(data.last_used, json.string)),
      #("verified", json.bool(data.verified)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("read_only", json.bool(data.read_only)),
      #("added_by", json.nullable(data.added_by, json.string)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn repository_advisory_credit_decoder() {
  use user <- decode.field("user", simple_user_decoder())
  use state <- decode.field("state", decode.string)
  use type_ <- decode.field("type", security_advisory_credit_types_decoder())
  decode.success(
    RepositoryAdvisoryCredit(user: user, state: state, type_: type_),
  )
}

pub fn repository_advisory_credit_encode(data: RepositoryAdvisoryCredit) {
  json.object(
    [
      #("user", simple_user_encode(data.user)),
      #("state", json.string(data.state)),
      #("type", security_advisory_credit_types_encode(data.type_))
    ],
  )
}

pub fn thread_decoder() {
  use reason <- decode.field("reason", decode.string)
  use repository <- decode.field("repository", minimal_repository_decoder())
  use subject <- decode.field(
    "subject",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use subscription_url <- decode.field("subscription_url", decode.string)
  use url <- decode.field("url", decode.string)
  use unread <- decode.field("unread", decode.bool)
  use last_read_at <- decode.optional_field(
    "last_read_at",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use id <- decode.field("id", decode.string)
  decode.success(
    Thread(
      reason: reason,
      repository: repository,
      subject: subject,
      subscription_url: subscription_url,
      url: url,
      unread: unread,
      last_read_at: last_read_at,
      updated_at: updated_at,
      id: id,
    ),
  )
}

pub fn thread_encode(data: Thread) {
  json.object(
    [
      #("reason", json.string(data.reason)),
      #("repository", minimal_repository_encode(data.repository)),
      #(
        "subject",
        fn(_) { panic as "Literal object inside field" }(data.subject),
      ),
      #("subscription_url", json.string(data.subscription_url)),
      #("url", json.string(data.url)),
      #("unread", json.bool(data.unread)),
      #("last_read_at", json.nullable(data.last_read_at, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("id", json.string(data.id))
    ],
  )
}

pub fn webhook_github_app_authorization_revoked_decoder() {
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  decode.success(
    WebhookGithubAppAuthorizationRevoked(sender: sender, action: action),
  )
}

pub fn webhook_github_app_authorization_revoked_encode(
  data: WebhookGithubAppAuthorizationRevoked,
) {
  json.object(
    [
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action))
    ],
  )
}

pub fn release_asset_decoder() {
  use content_type <- decode.field("content_type", decode.string)
  use size <- decode.field("size", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use uploader <- decode.field("uploader", nullable_simple_user_decoder())
  use browser_download_url <- decode.field("browser_download_url", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use download_count <- decode.field("download_count", decode.int)
  use id <- decode.field("id", decode.int)
  decode.success(
    ReleaseAsset(
      content_type: content_type,
      size: size,
      created_at: created_at,
      name: name,
      uploader: uploader,
      browser_download_url: browser_download_url,
      url: url,
      state: state,
      label: label,
      updated_at: updated_at,
      node_id: node_id,
      download_count: download_count,
      id: id,
    ),
  )
}

pub fn release_asset_encode(data: ReleaseAsset) {
  json.object(
    [
      #("content_type", json.string(data.content_type)),
      #("size", json.int(data.size)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("uploader", nullable_simple_user_encode(data.uploader)),
      #("browser_download_url", json.string(data.browser_download_url)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("label", json.nullable(data.label, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("download_count", json.int(data.download_count)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_label_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.field("label", webhooks_label_decoder())
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookLabelDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_label_deleted_encode(data: WebhookLabelDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", webhooks_label_encode(data.label)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_alert_severity_decoder() {
  decode.string
}

pub fn code_scanning_alert_severity_encode(data: CodeScanningAlertSeverity) {
  json.string(data)
}

pub fn review_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use original_line <- decode.optional_field(
    "original_line",
    None,
    decode.optional(decode.int),
  )
  use commit_id <- decode.field("commit_id", decode.string)
  use diff_hunk <- decode.field("diff_hunk", decode.string)
  use path_ <- decode.field("path", decode.string)
  use pull_request_url <- decode.field("pull_request_url", decode.string)
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use position <- decode.optional_field(
    "position",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use in_reply_to_id <- decode.optional_field(
    "in_reply_to_id",
    None,
    decode.optional(decode.int),
  )
  use start_line <- decode.optional_field(
    "start_line",
    None,
    decode.optional(decode.int),
  )
  use start_side <- decode.optional_field(
    "start_side",
    None,
    decode.optional(decode.string),
  )
  use line <- decode.optional_field("line", None, decode.optional(decode.int))
  use original_commit_id <- decode.field("original_commit_id", decode.string)
  use side <- decode.optional_field("side", None, decode.optional(decode.string))
  use updated_at <- decode.field("updated_at", decode.string)
  use original_position <- decode.field("original_position", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use pull_request_review_id <- decode.optional_field(
    "pull_request_review_id",
    None,
    decode.optional(decode.int),
  )
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use original_start_line <- decode.optional_field(
    "original_start_line",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    ReviewComment(
      body: body,
      original_line: original_line,
      commit_id: commit_id,
      diff_hunk: diff_hunk,
      path_: path_,
      pull_request_url: pull_request_url,
      body_html: body_html,
      position: position,
      created_at: created_at,
      body_text: body_text,
      reactions: reactions,
      user: user,
      author_association: author_association,
      url: url,
      in_reply_to_id: in_reply_to_id,
      start_line: start_line,
      start_side: start_side,
      line: line,
      original_commit_id: original_commit_id,
      side: side,
      updated_at: updated_at,
      original_position: original_position,
      node_id: node_id,
      pull_request_review_id: pull_request_review_id,
      links: links,
      id: id,
      html_url: html_url,
      original_start_line: original_start_line,
    ),
  )
}

pub fn review_comment_encode(data: ReviewComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("original_line", json.nullable(data.original_line, json.int)),
      #("commit_id", json.string(data.commit_id)),
      #("diff_hunk", json.string(data.diff_hunk)),
      #("path", json.string(data.path_)),
      #("pull_request_url", json.string(data.pull_request_url)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("position", json.nullable(data.position, json.int)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("in_reply_to_id", json.nullable(data.in_reply_to_id, json.int)),
      #("start_line", json.nullable(data.start_line, json.int)),
      #("start_side", json.nullable(data.start_side, json.string)),
      #("line", json.nullable(data.line, json.int)),
      #("original_commit_id", json.string(data.original_commit_id)),
      #("side", json.nullable(data.side, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("original_position", json.int(data.original_position)),
      #("node_id", json.string(data.node_id)),
      #(
        "pull_request_review_id",
        json.nullable(data.pull_request_review_id, json.int),
      ),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("original_start_line", json.nullable(data.original_start_line, json.int))
    ],
  )
}

pub fn codespaces_user_public_key_decoder() {
  use key_id <- decode.field("key_id", decode.string)
  use key <- decode.field("key", decode.string)
  decode.success(CodespacesUserPublicKey(key_id: key_id, key: key))
}

pub fn codespaces_user_public_key_encode(data: CodespacesUserPublicKey) {
  json.object(
    [#("key_id", json.string(data.key_id)), #("key", json.string(data.key))],
  )
}

pub fn diff_entry_decoder() {
  use changes <- decode.field("changes", decode.int)
  use deletions <- decode.field("deletions", decode.int)
  use filename <- decode.field("filename", decode.string)
  use patch <- decode.optional_field(
    "patch",
    None,
    decode.optional(decode.string),
  )
  use contents_url <- decode.field("contents_url", decode.string)
  use sha <- decode.field("sha", decode.string)
  use blob_url <- decode.field("blob_url", decode.string)
  use previous_filename <- decode.optional_field(
    "previous_filename",
    None,
    decode.optional(decode.string),
  )
  use status <- decode.field("status", decode.string)
  use additions <- decode.field("additions", decode.int)
  use raw_url <- decode.field("raw_url", decode.string)
  decode.success(
    DiffEntry(
      changes: changes,
      deletions: deletions,
      filename: filename,
      patch: patch,
      contents_url: contents_url,
      sha: sha,
      blob_url: blob_url,
      previous_filename: previous_filename,
      status: status,
      additions: additions,
      raw_url: raw_url,
    ),
  )
}

pub fn diff_entry_encode(data: DiffEntry) {
  json.object(
    [
      #("changes", json.int(data.changes)),
      #("deletions", json.int(data.deletions)),
      #("filename", json.string(data.filename)),
      #("patch", json.nullable(data.patch, json.string)),
      #("contents_url", json.string(data.contents_url)),
      #("sha", json.string(data.sha)),
      #("blob_url", json.string(data.blob_url)),
      #("previous_filename", json.nullable(data.previous_filename, json.string)),
      #("status", json.string(data.status)),
      #("additions", json.int(data.additions)),
      #("raw_url", json.string(data.raw_url))
    ],
  )
}

pub fn webhook_deploy_key_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use key <- decode.field("key", webhooks_deploy_key_decoder())
  decode.success(
    WebhookDeployKeyCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      key: key,
    ),
  )
}

pub fn webhook_deploy_key_created_encode(data: WebhookDeployKeyCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("key", webhooks_deploy_key_encode(data.key))
    ],
  )
}

pub fn merge_group_decoder() {
  use base_ref <- decode.field("base_ref", decode.string)
  use head_sha <- decode.field("head_sha", decode.string)
  use head_ref <- decode.field("head_ref", decode.string)
  use head_commit <- decode.field("head_commit", simple_commit_decoder())
  use base_sha <- decode.field("base_sha", decode.string)
  decode.success(
    MergeGroup(
      base_ref: base_ref,
      head_sha: head_sha,
      head_ref: head_ref,
      head_commit: head_commit,
      base_sha: base_sha,
    ),
  )
}

pub fn merge_group_encode(data: MergeGroup) {
  json.object(
    [
      #("base_ref", json.string(data.base_ref)),
      #("head_sha", json.string(data.head_sha)),
      #("head_ref", json.string(data.head_ref)),
      #("head_commit", simple_commit_encode(data.head_commit)),
      #("base_sha", json.string(data.base_sha))
    ],
  )
}

pub fn nullable_license_simple_decoder() {
  use spdx_id <- decode.optional_field(
    "spdx_id",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use node_id <- decode.field("node_id", decode.string)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use key <- decode.field("key", decode.string)
  decode.success(
    NullableLicenseSimple(
      spdx_id: spdx_id,
      name: name,
      url: url,
      node_id: node_id,
      html_url: html_url,
      key: key,
    ),
  )
}

pub fn nullable_license_simple_encode(data: NullableLicenseSimple) {
  json.object(
    [
      #("spdx_id", json.nullable(data.spdx_id, json.string)),
      #("name", json.string(data.name)),
      #("url", json.nullable(data.url, json.string)),
      #("node_id", json.string(data.node_id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn project_column_decoder() {
  use project_url <- decode.field("project_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use cards_url <- decode.field("cards_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    ProjectColumn(
      project_url: project_url,
      created_at: created_at,
      name: name,
      url: url,
      cards_url: cards_url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
    ),
  )
}

pub fn project_column_encode(data: ProjectColumn) {
  json.object(
    [
      #("project_url", json.string(data.project_url)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("cards_url", json.string(data.cards_url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn secret_scanning_push_protection_bypass_reason_decoder() {
  decode.string
}

pub fn secret_scanning_push_protection_bypass_reason_encode(
  data: SecretScanningPushProtectionBypassReason,
) {
  json.string(data)
}

pub fn commit_comment_decoder() {
  use body <- decode.field("body", decode.string)
  use commit_id <- decode.field("commit_id", decode.string)
  use path_ <- decode.optional_field(
    "path",
    None,
    decode.optional(decode.string),
  )
  use position <- decode.optional_field(
    "position",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use line <- decode.optional_field("line", None, decode.optional(decode.int))
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    CommitComment(
      body: body,
      commit_id: commit_id,
      path_: path_,
      position: position,
      created_at: created_at,
      reactions: reactions,
      user: user,
      author_association: author_association,
      url: url,
      line: line,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn commit_comment_encode(data: CommitComment) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("commit_id", json.string(data.commit_id)),
      #("path", json.nullable(data.path_, json.string)),
      #("position", json.nullable(data.position, json.int)),
      #("created_at", json.string(data.created_at)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", nullable_simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("line", json.nullable(data.line, json.int)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn basic_error_decoder() {
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use documentation_url <- decode.optional_field(
    "documentation_url",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    BasicError(
      message: message,
      documentation_url: documentation_url,
      url: url,
      status: status,
    ),
  )
}

pub fn basic_error_encode(data: BasicError) {
  json.object(
    [
      #("message", json.nullable(data.message, json.string)),
      #("documentation_url", json.nullable(data.documentation_url, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("status", json.nullable(data.status, json.string))
    ],
  )
}

pub fn team_project_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use private <- decode.optional_field(
    "private",
    None,
    decode.optional(decode.bool),
  )
  use owner_url <- decode.field("owner_url", decode.string)
  use permissions <- decode.field(
    "permissions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use creator <- decode.field("creator", simple_user_decoder())
  use columns_url <- decode.field("columns_url", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use organization_permission <- decode.optional_field(
    "organization_permission",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    TeamProject(
      body: body,
      private: private,
      owner_url: owner_url,
      permissions: permissions,
      number: number,
      created_at: created_at,
      name: name,
      creator: creator,
      columns_url: columns_url,
      url: url,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      organization_permission: organization_permission,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn team_project_encode(data: TeamProject) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("private", json.nullable(data.private, json.bool)),
      #("owner_url", json.string(data.owner_url)),
      #(
        "permissions",
        fn(_) { panic as "Literal object inside field" }(data.permissions),
      ),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("creator", simple_user_encode(data.creator)),
      #("columns_url", json.string(data.columns_url)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #(
        "organization_permission",
        json.nullable(data.organization_permission, json.string),
      ),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn code_scanning_alert_rule_decoder() {
  use security_severity_level <- decode.optional_field(
    "security_severity_level",
    None,
    decode.optional(decode.string),
  )
  use help <- decode.optional_field("help", None, decode.optional(decode.string))
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use full_description <- decode.optional_field(
    "full_description",
    None,
    decode.optional(decode.string),
  )
  use help_uri <- decode.optional_field(
    "help_uri",
    None,
    decode.optional(decode.string),
  )
  use tags <- decode.optional_field(
    "tags",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.string))
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use severity <- decode.optional_field(
    "severity",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeScanningAlertRule(
      security_severity_level: security_severity_level,
      help: help,
      name: name,
      full_description: full_description,
      help_uri: help_uri,
      tags: tags,
      id: id,
      description: description,
      severity: severity,
    ),
  )
}

pub fn code_scanning_alert_rule_encode(data: CodeScanningAlertRule) {
  json.object(
    [
      #(
        "security_severity_level",
        json.nullable(data.security_severity_level, json.string),
      ),
      #("help", json.nullable(data.help, json.string)),
      #("name", json.nullable(data.name, json.string)),
      #("full_description", json.nullable(data.full_description, json.string)),
      #("help_uri", json.nullable(data.help_uri, json.string)),
      #("tags", json.nullable(data.tags, json.array(_, json.string))),
      #("id", json.nullable(data.id, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("severity", json.nullable(data.severity, json.string))
    ],
  )
}

pub fn webhook_issues_closed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesClosed(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_closed_encode(data: WebhookIssuesClosed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "AllOf inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn organization_full_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use dependency_graph_enabled_for_new_repositories <- decode.optional_field(
    "dependency_graph_enabled_for_new_repositories",
    None,
    decode.optional(decode.bool),
  )
  use has_organization_projects <- decode.field(
    "has_organization_projects",
    decode.bool,
  )
  use twitter_username <- decode.optional_field(
    "twitter_username",
    None,
    decode.optional(decode.string),
  )
  use members_allowed_repository_creation_type <- decode.optional_field(
    "members_allowed_repository_creation_type",
    None,
    decode.optional(decode.string),
  )
  use dependabot_security_updates_enabled_for_new_repositories <- decode.optional_field(
    "dependabot_security_updates_enabled_for_new_repositories",
    None,
    decode.optional(decode.bool),
  )
  use blog <- decode.optional_field("blog", None, decode.optional(decode.string))
  use default_repository_permission <- decode.optional_field(
    "default_repository_permission",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning_push_protection_custom_link <- decode.optional_field(
    "secret_scanning_push_protection_custom_link",
    None,
    decode.optional(decode.string),
  )
  use two_factor_requirement_enabled <- decode.optional_field(
    "two_factor_requirement_enabled",
    None,
    decode.optional(decode.bool),
  )
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use members_url <- decode.field("members_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use plan <- decode.optional_field(
    "plan",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use login <- decode.field("login", decode.string)
  use has_repository_projects <- decode.field(
    "has_repository_projects",
    decode.bool,
  )
  use created_at <- decode.field("created_at", decode.string)
  use secret_scanning_push_protection_custom_link_enabled <- decode.optional_field(
    "secret_scanning_push_protection_custom_link_enabled",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use total_private_repos <- decode.optional_field(
    "total_private_repos",
    None,
    decode.optional(decode.int),
  )
  use owned_private_repos <- decode.optional_field(
    "owned_private_repos",
    None,
    decode.optional(decode.int),
  )
  use public_repos <- decode.field("public_repos", decode.int)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use members_can_fork_private_repositories <- decode.optional_field(
    "members_can_fork_private_repositories",
    None,
    decode.optional(decode.bool),
  )
  use collaborators <- decode.optional_field(
    "collaborators",
    None,
    decode.optional(decode.int),
  )
  use deploy_keys_enabled_for_repositories <- decode.optional_field(
    "deploy_keys_enabled_for_repositories",
    None,
    decode.optional(decode.bool),
  )
  use url <- decode.field("url", decode.string)
  use members_can_create_public_repositories <- decode.optional_field(
    "members_can_create_public_repositories",
    None,
    decode.optional(decode.bool),
  )
  use archived_at <- decode.optional_field(
    "archived_at",
    None,
    decode.optional(decode.string),
  )
  use following <- decode.field("following", decode.int)
  use repos_url <- decode.field("repos_url", decode.string)
  use members_can_create_private_repositories <- decode.optional_field(
    "members_can_create_private_repositories",
    None,
    decode.optional(decode.bool),
  )
  use public_members_url <- decode.field("public_members_url", decode.string)
  use private_gists <- decode.optional_field(
    "private_gists",
    None,
    decode.optional(decode.int),
  )
  use followers <- decode.field("followers", decode.int)
  use location <- decode.optional_field(
    "location",
    None,
    decode.optional(decode.string),
  )
  use members_can_create_pages <- decode.optional_field(
    "members_can_create_pages",
    None,
    decode.optional(decode.bool),
  )
  use dependabot_alerts_enabled_for_new_repositories <- decode.optional_field(
    "dependabot_alerts_enabled_for_new_repositories",
    None,
    decode.optional(decode.bool),
  )
  use members_can_create_repositories <- decode.optional_field(
    "members_can_create_repositories",
    None,
    decode.optional(decode.bool),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use billing_email <- decode.optional_field(
    "billing_email",
    None,
    decode.optional(decode.string),
  )
  use public_gists <- decode.field("public_gists", decode.int)
  use members_can_create_private_pages <- decode.optional_field(
    "members_can_create_private_pages",
    None,
    decode.optional(decode.bool),
  )
  use secret_scanning_enabled_for_new_repositories <- decode.optional_field(
    "secret_scanning_enabled_for_new_repositories",
    None,
    decode.optional(decode.bool),
  )
  use type_ <- decode.field("type", decode.string)
  use secret_scanning_push_protection_enabled_for_new_repositories <- decode.optional_field(
    "secret_scanning_push_protection_enabled_for_new_repositories",
    None,
    decode.optional(decode.bool),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use members_can_create_public_pages <- decode.optional_field(
    "members_can_create_public_pages",
    None,
    decode.optional(decode.bool),
  )
  use members_can_create_internal_repositories <- decode.optional_field(
    "members_can_create_internal_repositories",
    None,
    decode.optional(decode.bool),
  )
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use company <- decode.optional_field(
    "company",
    None,
    decode.optional(decode.string),
  )
  use is_verified <- decode.optional_field(
    "is_verified",
    None,
    decode.optional(decode.bool),
  )
  use advanced_security_enabled_for_new_repositories <- decode.optional_field(
    "advanced_security_enabled_for_new_repositories",
    None,
    decode.optional(decode.bool),
  )
  use disk_usage <- decode.optional_field(
    "disk_usage",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    OrganizationFull(
      hooks_url: hooks_url,
      dependency_graph_enabled_for_new_repositories: dependency_graph_enabled_for_new_repositories,
      has_organization_projects: has_organization_projects,
      twitter_username: twitter_username,
      members_allowed_repository_creation_type: members_allowed_repository_creation_type,
      dependabot_security_updates_enabled_for_new_repositories: dependabot_security_updates_enabled_for_new_repositories,
      blog: blog,
      default_repository_permission: default_repository_permission,
      secret_scanning_push_protection_custom_link: secret_scanning_push_protection_custom_link,
      two_factor_requirement_enabled: two_factor_requirement_enabled,
      web_commit_signoff_required: web_commit_signoff_required,
      members_url: members_url,
      events_url: events_url,
      avatar_url: avatar_url,
      plan: plan,
      login: login,
      has_repository_projects: has_repository_projects,
      created_at: created_at,
      secret_scanning_push_protection_custom_link_enabled: secret_scanning_push_protection_custom_link_enabled,
      issues_url: issues_url,
      total_private_repos: total_private_repos,
      owned_private_repos: owned_private_repos,
      public_repos: public_repos,
      name: name,
      members_can_fork_private_repositories: members_can_fork_private_repositories,
      collaborators: collaborators,
      deploy_keys_enabled_for_repositories: deploy_keys_enabled_for_repositories,
      url: url,
      members_can_create_public_repositories: members_can_create_public_repositories,
      archived_at: archived_at,
      following: following,
      repos_url: repos_url,
      members_can_create_private_repositories: members_can_create_private_repositories,
      public_members_url: public_members_url,
      private_gists: private_gists,
      followers: followers,
      location: location,
      members_can_create_pages: members_can_create_pages,
      dependabot_alerts_enabled_for_new_repositories: dependabot_alerts_enabled_for_new_repositories,
      members_can_create_repositories: members_can_create_repositories,
      updated_at: updated_at,
      node_id: node_id,
      billing_email: billing_email,
      public_gists: public_gists,
      members_can_create_private_pages: members_can_create_private_pages,
      secret_scanning_enabled_for_new_repositories: secret_scanning_enabled_for_new_repositories,
      type_: type_,
      secret_scanning_push_protection_enabled_for_new_repositories: secret_scanning_push_protection_enabled_for_new_repositories,
      id: id,
      html_url: html_url,
      members_can_create_public_pages: members_can_create_public_pages,
      members_can_create_internal_repositories: members_can_create_internal_repositories,
      email: email,
      description: description,
      company: company,
      is_verified: is_verified,
      advanced_security_enabled_for_new_repositories: advanced_security_enabled_for_new_repositories,
      disk_usage: disk_usage,
    ),
  )
}

pub fn organization_full_encode(data: OrganizationFull) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #(
        "dependency_graph_enabled_for_new_repositories",
        json.nullable(
          data.dependency_graph_enabled_for_new_repositories,
          json.bool,
        ),
      ),
      #("has_organization_projects", json.bool(data.has_organization_projects)),
      #("twitter_username", json.nullable(data.twitter_username, json.string)),
      #(
        "members_allowed_repository_creation_type",
        json.nullable(data.members_allowed_repository_creation_type, json.string),
      ),
      #(
        "dependabot_security_updates_enabled_for_new_repositories",
        json.nullable(
          data.dependabot_security_updates_enabled_for_new_repositories,
          json.bool,
        ),
      ),
      #("blog", json.nullable(data.blog, json.string)),
      #(
        "default_repository_permission",
        json.nullable(data.default_repository_permission, json.string),
      ),
      #(
        "secret_scanning_push_protection_custom_link",
        json.nullable(
          data.secret_scanning_push_protection_custom_link,
          json.string,
        ),
      ),
      #(
        "two_factor_requirement_enabled",
        json.nullable(data.two_factor_requirement_enabled, json.bool),
      ),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("members_url", json.string(data.members_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #(
        "plan",
        json.nullable(
          data.plan,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("login", json.string(data.login)),
      #("has_repository_projects", json.bool(data.has_repository_projects)),
      #("created_at", json.string(data.created_at)),
      #(
        "secret_scanning_push_protection_custom_link_enabled",
        json.nullable(
          data.secret_scanning_push_protection_custom_link_enabled,
          json.bool,
        ),
      ),
      #("issues_url", json.string(data.issues_url)),
      #("total_private_repos", json.nullable(data.total_private_repos, json.int)),
      #("owned_private_repos", json.nullable(data.owned_private_repos, json.int)),
      #("public_repos", json.int(data.public_repos)),
      #("name", json.nullable(data.name, json.string)),
      #(
        "members_can_fork_private_repositories",
        json.nullable(data.members_can_fork_private_repositories, json.bool),
      ),
      #("collaborators", json.nullable(data.collaborators, json.int)),
      #(
        "deploy_keys_enabled_for_repositories",
        json.nullable(data.deploy_keys_enabled_for_repositories, json.bool),
      ),
      #("url", json.string(data.url)),
      #(
        "members_can_create_public_repositories",
        json.nullable(data.members_can_create_public_repositories, json.bool),
      ),
      #("archived_at", json.nullable(data.archived_at, json.string)),
      #("following", json.int(data.following)),
      #("repos_url", json.string(data.repos_url)),
      #(
        "members_can_create_private_repositories",
        json.nullable(data.members_can_create_private_repositories, json.bool),
      ),
      #("public_members_url", json.string(data.public_members_url)),
      #("private_gists", json.nullable(data.private_gists, json.int)),
      #("followers", json.int(data.followers)),
      #("location", json.nullable(data.location, json.string)),
      #(
        "members_can_create_pages",
        json.nullable(data.members_can_create_pages, json.bool),
      ),
      #(
        "dependabot_alerts_enabled_for_new_repositories",
        json.nullable(
          data.dependabot_alerts_enabled_for_new_repositories,
          json.bool,
        ),
      ),
      #(
        "members_can_create_repositories",
        json.nullable(data.members_can_create_repositories, json.bool),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("billing_email", json.nullable(data.billing_email, json.string)),
      #("public_gists", json.int(data.public_gists)),
      #(
        "members_can_create_private_pages",
        json.nullable(data.members_can_create_private_pages, json.bool),
      ),
      #(
        "secret_scanning_enabled_for_new_repositories",
        json.nullable(
          data.secret_scanning_enabled_for_new_repositories,
          json.bool,
        ),
      ),
      #("type", json.string(data.type_)),
      #(
        "secret_scanning_push_protection_enabled_for_new_repositories",
        json.nullable(
          data.secret_scanning_push_protection_enabled_for_new_repositories,
          json.bool,
        ),
      ),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "members_can_create_public_pages",
        json.nullable(data.members_can_create_public_pages, json.bool),
      ),
      #(
        "members_can_create_internal_repositories",
        json.nullable(data.members_can_create_internal_repositories, json.bool),
      ),
      #("email", json.nullable(data.email, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("company", json.nullable(data.company, json.string)),
      #("is_verified", json.nullable(data.is_verified, json.bool)),
      #(
        "advanced_security_enabled_for_new_repositories",
        json.nullable(
          data.advanced_security_enabled_for_new_repositories,
          json.bool,
        ),
      ),
      #("disk_usage", json.nullable(data.disk_usage, json.int))
    ],
  )
}

pub fn code_scanning_analysis_tool_guid_decoder() {
  decode.string
}

pub fn code_scanning_analysis_tool_guid_encode(
  data: CodeScanningAnalysisToolGuid,
) {
  json.string(data)
}

pub fn alert_created_at_decoder() {
  decode.string
}

pub fn alert_created_at_encode(data: AlertCreatedAt) {
  json.string(data)
}

pub fn webhook_custom_property_updated_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use definition <- decode.field("definition", custom_property_decoder())
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCustomPropertyUpdated(
      enterprise: enterprise,
      organization: organization,
      definition: definition,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_custom_property_updated_encode(data: WebhookCustomPropertyUpdated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("definition", custom_property_encode(data.definition)),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn reaction_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use user <- decode.field("user", nullable_simple_user_decoder())
  use node_id <- decode.field("node_id", decode.string)
  use content <- decode.field("content", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    Reaction(
      created_at: created_at,
      user: user,
      node_id: node_id,
      content: content,
      id: id,
    ),
  )
}

pub fn reaction_encode(data: Reaction) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("user", nullable_simple_user_encode(data.user)),
      #("node_id", json.string(data.node_id)),
      #("content", json.string(data.content)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn autolink_decoder() {
  use is_alphanumeric <- decode.field("is_alphanumeric", decode.bool)
  use url_template <- decode.field("url_template", decode.string)
  use key_prefix <- decode.field("key_prefix", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    Autolink(
      is_alphanumeric: is_alphanumeric,
      url_template: url_template,
      key_prefix: key_prefix,
      id: id,
    ),
  )
}

pub fn autolink_encode(data: Autolink) {
  json.object(
    [
      #("is_alphanumeric", json.bool(data.is_alphanumeric)),
      #("url_template", json.string(data.url_template)),
      #("key_prefix", json.string(data.key_prefix)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhooks_issue_2_decoder() {
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.field(
    "assignees",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use locked <- decode.optional_field(
    "locked",
    None,
    decode.optional(decode.bool),
  )
  use reactions <- decode.field(
    "reactions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author_association <- decode.field("author_association", decode.string)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use timeline_url <- decode.optional_field(
    "timeline_url",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(decode.string),
  )
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use comments <- decode.field("comments", decode.int)
  use pull_request <- decode.optional_field(
    "pull_request",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.optional_field(
    "labels",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  decode.success(
    WebhooksIssue2(
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      closed_at: closed_at,
      events_url: events_url,
      number: number,
      created_at: created_at,
      locked: locked,
      reactions: reactions,
      user: user,
      author_association: author_association,
      labels_url: labels_url,
      url: url,
      assignee: assignee,
      milestone: milestone,
      timeline_url: timeline_url,
      state: state,
      state_reason: state_reason,
      comments: comments,
      pull_request: pull_request,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn webhooks_issue_2_encode(data: WebhooksIssue2) {
  json.object(
    [
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.array(_, fn(_) { panic as "object in array" })(data.assignees),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("events_url", json.string(data.events_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("locked", json.nullable(data.locked, json.bool)),
      #(
        "reactions",
        fn(_) { panic as "Literal object inside field" }(data.reactions),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("author_association", json.string(data.author_association)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #(
        "assignee",
        json.nullable(
          data.assignee,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "milestone",
        json.nullable(
          data.milestone,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("timeline_url", json.nullable(data.timeline_url, json.string)),
      #("state", json.nullable(data.state, json.string)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("comments", json.int(data.comments)),
      #(
        "pull_request",
        json.nullable(
          data.pull_request,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "performed_via_github_app",
        json.nullable(
          data.performed_via_github_app,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.nullable(
          data.labels,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      )
    ],
  )
}

pub fn actions_get_default_workflow_permissions_decoder() {
  use default_workflow_permissions <- decode.field(
    "default_workflow_permissions",
    actions_default_workflow_permissions_decoder(),
  )
  use can_approve_pull_request_reviews <- decode.field(
    "can_approve_pull_request_reviews",
    actions_can_approve_pull_request_reviews_decoder(),
  )
  decode.success(
    ActionsGetDefaultWorkflowPermissions(
      default_workflow_permissions: default_workflow_permissions,
      can_approve_pull_request_reviews: can_approve_pull_request_reviews,
    ),
  )
}

pub fn actions_get_default_workflow_permissions_encode(
  data: ActionsGetDefaultWorkflowPermissions,
) {
  json.object(
    [
      #(
        "default_workflow_permissions",
        actions_default_workflow_permissions_encode(
          data.default_workflow_permissions,
        ),
      ),
      #(
        "can_approve_pull_request_reviews",
        actions_can_approve_pull_request_reviews_encode(
          data.can_approve_pull_request_reviews,
        ),
      )
    ],
  )
}

pub fn webhook_issues_transferred_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field("issue", webhooks_issue_2_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesTransferred(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_transferred_encode(data: WebhookIssuesTransferred) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", webhooks_issue_2_encode(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn enterprise_team_decoder() {
  use sync_to_organizations <- decode.field(
    "sync_to_organizations",
    decode.string,
  )
  use members_url <- decode.field("members_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use group_id <- decode.optional_field(
    "group_id",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    EnterpriseTeam(
      sync_to_organizations: sync_to_organizations,
      members_url: members_url,
      created_at: created_at,
      name: name,
      slug: slug,
      url: url,
      updated_at: updated_at,
      id: id,
      html_url: html_url,
      group_id: group_id,
    ),
  )
}

pub fn enterprise_team_encode(data: EnterpriseTeam) {
  json.object(
    [
      #("sync_to_organizations", json.string(data.sync_to_organizations)),
      #("members_url", json.string(data.members_url)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("group_id", json.nullable(data.group_id, json.string))
    ],
  )
}

pub fn copilot_organization_details_decoder() {
  use cli <- decode.optional_field("cli", None, decode.optional(decode.string))
  use platform_chat <- decode.optional_field(
    "platform_chat",
    None,
    decode.optional(decode.string),
  )
  use seat_breakdown <- decode.field(
    "seat_breakdown",
    copilot_seat_breakdown_decoder(),
  )
  use ide_chat <- decode.optional_field(
    "ide_chat",
    None,
    decode.optional(decode.string),
  )
  use seat_management_setting <- decode.field(
    "seat_management_setting",
    decode.string,
  )
  use plan_type <- decode.optional_field(
    "plan_type",
    None,
    decode.optional(decode.string),
  )
  use public_code_suggestions <- decode.field(
    "public_code_suggestions",
    decode.string,
  )
  decode.success(
    CopilotOrganizationDetails(
      cli: cli,
      platform_chat: platform_chat,
      seat_breakdown: seat_breakdown,
      ide_chat: ide_chat,
      seat_management_setting: seat_management_setting,
      plan_type: plan_type,
      public_code_suggestions: public_code_suggestions,
    ),
  )
}

pub fn copilot_organization_details_encode(data: CopilotOrganizationDetails) {
  json.object(
    [
      #("cli", json.nullable(data.cli, json.string)),
      #("platform_chat", json.nullable(data.platform_chat, json.string)),
      #("seat_breakdown", copilot_seat_breakdown_encode(data.seat_breakdown)),
      #("ide_chat", json.nullable(data.ide_chat, json.string)),
      #("seat_management_setting", json.string(data.seat_management_setting)),
      #("plan_type", json.nullable(data.plan_type, json.string)),
      #("public_code_suggestions", json.string(data.public_code_suggestions))
    ],
  )
}

pub fn issue_event_milestone_decoder() {
  use title <- decode.field("title", decode.string)
  decode.success(IssueEventMilestone(title: title))
}

pub fn issue_event_milestone_encode(data: IssueEventMilestone) {
  json.object([#("title", json.string(data.title))])
}

pub fn webhooks_effective_date_decoder() {
  decode.string
}

pub fn webhooks_effective_date_encode(data: WebhooksEffectiveDate) {
  json.string(data)
}

pub fn code_security_configuration_decoder() {
  use enforcement <- decode.optional_field(
    "enforcement",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning <- decode.optional_field(
    "secret_scanning",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning_non_provider_patterns <- decode.optional_field(
    "secret_scanning_non_provider_patterns",
    None,
    decode.optional(decode.string),
  )
  use code_scanning_default_setup <- decode.optional_field(
    "code_scanning_default_setup",
    None,
    decode.optional(decode.string),
  )
  use dependabot_alerts <- decode.optional_field(
    "dependabot_alerts",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning_delegated_bypass_options <- decode.optional_field(
    "secret_scanning_delegated_bypass_options",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use secret_scanning_delegated_bypass <- decode.optional_field(
    "secret_scanning_delegated_bypass",
    None,
    decode.optional(decode.string),
  )
  use target_type <- decode.optional_field(
    "target_type",
    None,
    decode.optional(decode.string),
  )
  use dependency_graph_autosubmit_action_options <- decode.optional_field(
    "dependency_graph_autosubmit_action_options",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use dependency_graph_autosubmit_action <- decode.optional_field(
    "dependency_graph_autosubmit_action",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use private_vulnerability_reporting <- decode.optional_field(
    "private_vulnerability_reporting",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use dependabot_security_updates <- decode.optional_field(
    "dependabot_security_updates",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning_validity_checks <- decode.optional_field(
    "secret_scanning_validity_checks",
    None,
    decode.optional(decode.string),
  )
  use dependency_graph <- decode.optional_field(
    "dependency_graph",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use advanced_security <- decode.optional_field(
    "advanced_security",
    None,
    decode.optional(decode.string),
  )
  use secret_scanning_push_protection <- decode.optional_field(
    "secret_scanning_push_protection",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeSecurityConfiguration(
      enforcement: enforcement,
      secret_scanning: secret_scanning,
      secret_scanning_non_provider_patterns: secret_scanning_non_provider_patterns,
      code_scanning_default_setup: code_scanning_default_setup,
      dependabot_alerts: dependabot_alerts,
      secret_scanning_delegated_bypass_options: secret_scanning_delegated_bypass_options,
      secret_scanning_delegated_bypass: secret_scanning_delegated_bypass,
      target_type: target_type,
      dependency_graph_autosubmit_action_options: dependency_graph_autosubmit_action_options,
      dependency_graph_autosubmit_action: dependency_graph_autosubmit_action,
      created_at: created_at,
      name: name,
      url: url,
      private_vulnerability_reporting: private_vulnerability_reporting,
      updated_at: updated_at,
      dependabot_security_updates: dependabot_security_updates,
      secret_scanning_validity_checks: secret_scanning_validity_checks,
      dependency_graph: dependency_graph,
      id: id,
      html_url: html_url,
      description: description,
      advanced_security: advanced_security,
      secret_scanning_push_protection: secret_scanning_push_protection,
    ),
  )
}

pub fn code_security_configuration_encode(data: CodeSecurityConfiguration) {
  json.object(
    [
      #("enforcement", json.nullable(data.enforcement, json.string)),
      #("secret_scanning", json.nullable(data.secret_scanning, json.string)),
      #(
        "secret_scanning_non_provider_patterns",
        json.nullable(data.secret_scanning_non_provider_patterns, json.string),
      ),
      #(
        "code_scanning_default_setup",
        json.nullable(data.code_scanning_default_setup, json.string),
      ),
      #("dependabot_alerts", json.nullable(data.dependabot_alerts, json.string)),
      #(
        "secret_scanning_delegated_bypass_options",
        json.nullable(
          data.secret_scanning_delegated_bypass_options,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "secret_scanning_delegated_bypass",
        json.nullable(data.secret_scanning_delegated_bypass, json.string),
      ),
      #("target_type", json.nullable(data.target_type, json.string)),
      #(
        "dependency_graph_autosubmit_action_options",
        json.nullable(
          data.dependency_graph_autosubmit_action_options,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "dependency_graph_autosubmit_action",
        json.nullable(data.dependency_graph_autosubmit_action, json.string),
      ),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #(
        "private_vulnerability_reporting",
        json.nullable(data.private_vulnerability_reporting, json.string),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #(
        "dependabot_security_updates",
        json.nullable(data.dependabot_security_updates, json.string),
      ),
      #(
        "secret_scanning_validity_checks",
        json.nullable(data.secret_scanning_validity_checks, json.string),
      ),
      #("dependency_graph", json.nullable(data.dependency_graph, json.string)),
      #("id", json.nullable(data.id, json.int)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("advanced_security", json.nullable(data.advanced_security, json.string)),
      #(
        "secret_scanning_push_protection",
        json.nullable(data.secret_scanning_push_protection, json.string),
      )
    ],
  )
}

pub fn webhooks_user_mannequin_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.optional_field(
    "gists_url",
    None,
    decode.optional(decode.string),
  )
  use following_url <- decode.optional_field(
    "following_url",
    None,
    decode.optional(decode.string),
  )
  use followers_url <- decode.optional_field(
    "followers_url",
    None,
    decode.optional(decode.string),
  )
  use subscriptions_url <- decode.optional_field(
    "subscriptions_url",
    None,
    decode.optional(decode.string),
  )
  use received_events_url <- decode.optional_field(
    "received_events_url",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.optional_field(
    "events_url",
    None,
    decode.optional(decode.string),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use starred_url <- decode.optional_field(
    "starred_url",
    None,
    decode.optional(decode.string),
  )
  use organizations_url <- decode.optional_field(
    "organizations_url",
    None,
    decode.optional(decode.string),
  )
  use repos_url <- decode.optional_field(
    "repos_url",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.optional_field(
    "site_admin",
    None,
    decode.optional(decode.bool),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use deleted <- decode.optional_field(
    "deleted",
    None,
    decode.optional(decode.bool),
  )
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksUserMannequin(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      deleted: deleted,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn webhooks_user_mannequin_encode(data: WebhooksUserMannequin) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.nullable(data.gists_url, json.string)),
      #("following_url", json.nullable(data.following_url, json.string)),
      #("followers_url", json.nullable(data.followers_url, json.string)),
      #("subscriptions_url", json.nullable(data.subscriptions_url, json.string)),
      #(
        "received_events_url",
        json.nullable(data.received_events_url, json.string),
      ),
      #("events_url", json.nullable(data.events_url, json.string)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("starred_url", json.nullable(data.starred_url, json.string)),
      #("organizations_url", json.nullable(data.organizations_url, json.string)),
      #("repos_url", json.nullable(data.repos_url, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.nullable(data.site_admin, json.bool)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("deleted", json.nullable(data.deleted, json.bool)),
      #("type", json.nullable(data.type_, json.string)),
      #("id", json.int(data.id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn webhook_security_and_analysis_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", full_repository_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSecurityAndAnalysis(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      installation: installation,
    ),
  )
}

pub fn webhook_security_and_analysis_encode(data: WebhookSecurityAndAnalysis) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", full_repository_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn content_traffic_decoder() {
  use uniques <- decode.field("uniques", decode.int)
  use path_ <- decode.field("path", decode.string)
  use count <- decode.field("count", decode.int)
  use title <- decode.field("title", decode.string)
  decode.success(
    ContentTraffic(uniques: uniques, path_: path_, count: count, title: title),
  )
}

pub fn content_traffic_encode(data: ContentTraffic) {
  json.object(
    [
      #("uniques", json.int(data.uniques)),
      #("path", json.string(data.path_)),
      #("count", json.int(data.count)),
      #("title", json.string(data.title))
    ],
  )
}

pub fn webhook_pull_request_review_requested_decoder() {
  panic as "OneOf"
}

pub fn webhook_pull_request_review_requested_encode(
  _data: WebhookPullRequestReviewRequested,
) {
  panic as "OneOf"
}

pub fn secret_scanning_push_protection_bypass_decoder() {
  use token_type <- decode.optional_field(
    "token_type",
    None,
    decode.optional(decode.string),
  )
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(secret_scanning_push_protection_bypass_reason_decoder()),
  )
  use expire_at <- decode.optional_field(
    "expire_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    SecretScanningPushProtectionBypass(
      token_type: token_type,
      reason: reason,
      expire_at: expire_at,
    ),
  )
}

pub fn secret_scanning_push_protection_bypass_encode(
  data: SecretScanningPushProtectionBypass,
) {
  json.object(
    [
      #("token_type", json.nullable(data.token_type, json.string)),
      #(
        "reason",
        json.nullable(
          data.reason,
          secret_scanning_push_protection_bypass_reason_encode,
        ),
      ),
      #("expire_at", json.nullable(data.expire_at, json.string))
    ],
  )
}

pub fn webhook_ping_decoder() {
  use hook <- decode.optional_field(
    "hook",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use zen <- decode.optional_field("zen", None, decode.optional(decode.string))
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use hook_id <- decode.optional_field(
    "hook_id",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    WebhookPing(
      hook: hook,
      zen: zen,
      repository: repository,
      organization: organization,
      sender: sender,
      hook_id: hook_id,
    ),
  )
}

pub fn webhook_ping_encode(data: WebhookPing) {
  json.object(
    [
      #(
        "hook",
        json.nullable(
          data.hook,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("zen", json.nullable(data.zen, json.string)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("hook_id", json.nullable(data.hook_id, json.int))
    ],
  )
}

pub fn webhook_secret_scanning_alert_validated_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", secret_scanning_alert_webhook_decoder())
  decode.success(
    WebhookSecretScanningAlertValidated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_secret_scanning_alert_validated_encode(
  data: WebhookSecretScanningAlertValidated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", secret_scanning_alert_webhook_encode(data.alert))
    ],
  )
}

pub fn webhooks_approver_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.optional_field(
    "gists_url",
    None,
    decode.optional(decode.string),
  )
  use following_url <- decode.optional_field(
    "following_url",
    None,
    decode.optional(decode.string),
  )
  use followers_url <- decode.optional_field(
    "followers_url",
    None,
    decode.optional(decode.string),
  )
  use subscriptions_url <- decode.optional_field(
    "subscriptions_url",
    None,
    decode.optional(decode.string),
  )
  use received_events_url <- decode.optional_field(
    "received_events_url",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.optional_field(
    "events_url",
    None,
    decode.optional(decode.string),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use login <- decode.optional_field(
    "login",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use starred_url <- decode.optional_field(
    "starred_url",
    None,
    decode.optional(decode.string),
  )
  use organizations_url <- decode.optional_field(
    "organizations_url",
    None,
    decode.optional(decode.string),
  )
  use repos_url <- decode.optional_field(
    "repos_url",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.optional_field(
    "site_admin",
    None,
    decode.optional(decode.bool),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use type_ <- decode.optional_field(
    "type",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksApprover(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_approver_encode(data: WebhooksApprover) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.nullable(data.gists_url, json.string)),
      #("following_url", json.nullable(data.following_url, json.string)),
      #("followers_url", json.nullable(data.followers_url, json.string)),
      #("subscriptions_url", json.nullable(data.subscriptions_url, json.string)),
      #(
        "received_events_url",
        json.nullable(data.received_events_url, json.string),
      ),
      #("events_url", json.nullable(data.events_url, json.string)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("login", json.nullable(data.login, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("starred_url", json.nullable(data.starred_url, json.string)),
      #("organizations_url", json.nullable(data.organizations_url, json.string)),
      #("repos_url", json.nullable(data.repos_url, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.nullable(data.site_admin, json.bool)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("type", json.nullable(data.type_, json.string)),
      #("id", json.nullable(data.id, json.int)),
      #("html_url", json.nullable(data.html_url, json.string))
    ],
  )
}

pub fn file_commit_decoder() {
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use content <- decode.optional_field(
    "content",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(FileCommit(commit: commit, content: content))
}

pub fn file_commit_encode(data: FileCommit) {
  json.object(
    [
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit)),
      #(
        "content",
        json.nullable(
          data.content,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_rubygems_metadata_decoder() {
  use commit_oid <- decode.optional_field(
    "commit_oid",
    None,
    decode.optional(decode.string),
  )
  use dependencies <- decode.optional_field(
    "dependencies",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use readme <- decode.optional_field(
    "readme",
    None,
    decode.optional(decode.string),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repo <- decode.optional_field("repo", None, decode.optional(decode.string))
  use platform <- decode.optional_field(
    "platform",
    None,
    decode.optional(decode.string),
  )
  use version_info <- decode.optional_field(
    "version_info",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhookRubygemsMetadata(
      commit_oid: commit_oid,
      dependencies: dependencies,
      name: name,
      readme: readme,
      homepage: homepage,
      metadata: metadata,
      repo: repo,
      platform: platform,
      version_info: version_info,
      description: description,
    ),
  )
}

pub fn webhook_rubygems_metadata_encode(data: WebhookRubygemsMetadata) {
  json.object(
    [
      #("commit_oid", json.nullable(data.commit_oid, json.string)),
      #(
        "dependencies",
        json.nullable(
          data.dependencies,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("name", json.nullable(data.name, json.string)),
      #("readme", json.nullable(data.readme, json.string)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #(
        "metadata",
        json.nullable(
          data.metadata,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repo", json.nullable(data.repo, json.string)),
      #("platform", json.nullable(data.platform, json.string)),
      #(
        "version_info",
        json.nullable(
          data.version_info,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn deployment_protection_rule_decoder() {
  use app <- decode.field("app", custom_deployment_rule_app_decoder())
  use enabled <- decode.field("enabled", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    DeploymentProtectionRule(
      app: app,
      enabled: enabled,
      node_id: node_id,
      id: id,
    ),
  )
}

pub fn deployment_protection_rule_encode(data: DeploymentProtectionRule) {
  json.object(
    [
      #("app", custom_deployment_rule_app_encode(data.app)),
      #("enabled", json.bool(data.enabled)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn runner_groups_org_decoder() {
  use default <- decode.field("default", decode.bool)
  use allows_public_repositories <- decode.field(
    "allows_public_repositories",
    decode.bool,
  )
  use name <- decode.field("name", decode.string)
  use inherited_allows_public_repositories <- decode.optional_field(
    "inherited_allows_public_repositories",
    None,
    decode.optional(decode.bool),
  )
  use selected_workflows <- decode.optional_field(
    "selected_workflows",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use visibility <- decode.field("visibility", decode.string)
  use runners_url <- decode.field("runners_url", decode.string)
  use restricted_to_workflows <- decode.optional_field(
    "restricted_to_workflows",
    None,
    decode.optional(decode.bool),
  )
  use inherited <- decode.field("inherited", decode.bool)
  use id <- decode.field("id", decode.float)
  use hosted_runners_url <- decode.optional_field(
    "hosted_runners_url",
    None,
    decode.optional(decode.string),
  )
  use selected_repositories_url <- decode.optional_field(
    "selected_repositories_url",
    None,
    decode.optional(decode.string),
  )
  use workflow_restrictions_read_only <- decode.optional_field(
    "workflow_restrictions_read_only",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    RunnerGroupsOrg(
      default: default,
      allows_public_repositories: allows_public_repositories,
      name: name,
      inherited_allows_public_repositories: inherited_allows_public_repositories,
      selected_workflows: selected_workflows,
      visibility: visibility,
      runners_url: runners_url,
      restricted_to_workflows: restricted_to_workflows,
      inherited: inherited,
      id: id,
      hosted_runners_url: hosted_runners_url,
      selected_repositories_url: selected_repositories_url,
      workflow_restrictions_read_only: workflow_restrictions_read_only,
    ),
  )
}

pub fn runner_groups_org_encode(data: RunnerGroupsOrg) {
  json.object(
    [
      #("default", json.bool(data.default)),
      #("allows_public_repositories", json.bool(data.allows_public_repositories)),
      #("name", json.string(data.name)),
      #(
        "inherited_allows_public_repositories",
        json.nullable(data.inherited_allows_public_repositories, json.bool),
      ),
      #(
        "selected_workflows",
        json.nullable(data.selected_workflows, json.array(_, json.string)),
      ),
      #("visibility", json.string(data.visibility)),
      #("runners_url", json.string(data.runners_url)),
      #(
        "restricted_to_workflows",
        json.nullable(data.restricted_to_workflows, json.bool),
      ),
      #("inherited", json.bool(data.inherited)),
      #("id", json.float(data.id)),
      #(
        "hosted_runners_url",
        json.nullable(data.hosted_runners_url, json.string),
      ),
      #(
        "selected_repositories_url",
        json.nullable(data.selected_repositories_url, json.string),
      ),
      #(
        "workflow_restrictions_read_only",
        json.nullable(data.workflow_restrictions_read_only, json.bool),
      )
    ],
  )
}

pub fn repo_codespaces_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  decode.success(
    RepoCodespacesSecret(
      created_at: created_at,
      name: name,
      updated_at: updated_at,
    ),
  )
}

pub fn repo_codespaces_secret_encode(data: RepoCodespacesSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("updated_at", json.string(data.updated_at))
    ],
  )
}

pub fn enterprise_webhooks_decoder() {
  use avatar_url <- decode.field("avatar_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use website_url <- decode.optional_field(
    "website_url",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    EnterpriseWebhooks(
      avatar_url: avatar_url,
      created_at: created_at,
      name: name,
      slug: slug,
      website_url: website_url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn enterprise_webhooks_encode(data: EnterpriseWebhooks) {
  json.object(
    [
      #("avatar_url", json.string(data.avatar_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("website_url", json.nullable(data.website_url, json.string)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn nullable_integration_decoder() {
  use permissions <- decode.field(
    "permissions",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use client_secret <- decode.optional_field(
    "client_secret",
    None,
    decode.optional(decode.string),
  )
  use installations_count <- decode.optional_field(
    "installations_count",
    None,
    decode.optional(decode.int),
  )
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use slug <- decode.optional_field("slug", None, decode.optional(decode.string))
  use client_id <- decode.optional_field(
    "client_id",
    None,
    decode.optional(decode.string),
  )
  use owner <- decode.field("owner", nullable_simple_user_decoder())
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use pem <- decode.optional_field("pem", None, decode.optional(decode.string))
  use webhook_secret <- decode.optional_field(
    "webhook_secret",
    None,
    decode.optional(decode.string),
  )
  use events <- decode.field("events", decode.list(decode.string))
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use external_url <- decode.field("external_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    NullableIntegration(
      permissions: permissions,
      client_secret: client_secret,
      installations_count: installations_count,
      created_at: created_at,
      name: name,
      slug: slug,
      client_id: client_id,
      owner: owner,
      updated_at: updated_at,
      node_id: node_id,
      pem: pem,
      webhook_secret: webhook_secret,
      events: events,
      id: id,
      html_url: html_url,
      external_url: external_url,
      description: description,
    ),
  )
}

pub fn nullable_integration_encode(data: NullableIntegration) {
  json.object(
    [
      #(
        "permissions",
        fn(_) { panic as "Literal object inside field" }(data.permissions),
      ),
      #("client_secret", json.nullable(data.client_secret, json.string)),
      #("installations_count", json.nullable(data.installations_count, json.int)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("slug", json.nullable(data.slug, json.string)),
      #("client_id", json.nullable(data.client_id, json.string)),
      #("owner", nullable_simple_user_encode(data.owner)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("pem", json.nullable(data.pem, json.string)),
      #("webhook_secret", json.nullable(data.webhook_secret, json.string)),
      #("events", json.array(_, json.string)(data.events)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("external_url", json.string(data.external_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn full_repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.field("default_branch", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.field("size", decode.int)
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.field("license", nullable_license_simple_decoder())
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use custom_properties <- decode.optional_field(
    "custom_properties",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use forks_count <- decode.field("forks_count", decode.int)
  use fork <- decode.field("fork", decode.bool)
  use allow_update_branch <- decode.optional_field(
    "allow_update_branch",
    None,
    decode.optional(decode.bool),
  )
  use git_url <- decode.field("git_url", decode.string)
  use archived <- decode.field("archived", decode.bool)
  use private <- decode.field("private", decode.bool)
  use security_and_analysis <- decode.optional_field(
    "security_and_analysis",
    None,
    decode.optional(security_and_analysis_decoder()),
  )
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.optional_field(
    "has_downloads",
    None,
    decode.optional(decode.bool),
  )
  use blobs_url <- decode.field("blobs_url", decode.string)
  use squash_merge_commit_message <- decode.optional_field(
    "squash_merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use has_discussions <- decode.field("has_discussions", decode.bool)
  use teams_url <- decode.field("teams_url", decode.string)
  use merge_commit_message <- decode.optional_field(
    "merge_commit_message",
    None,
    decode.optional(decode.string),
  )
  use watchers_count <- decode.field("watchers_count", decode.int)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.field("stargazers_count", decode.int)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use parent <- decode.optional_field(
    "parent",
    None,
    decode.optional(repository_decoder()),
  )
  use created_at <- decode.field("created_at", decode.string)
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.field("clone_url", decode.string)
  use code_of_conduct <- decode.optional_field(
    "code_of_conduct",
    None,
    decode.optional(code_of_conduct_simple_decoder()),
  )
  use allow_squash_merge <- decode.optional_field(
    "allow_squash_merge",
    None,
    decode.optional(decode.bool),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use template_repository <- decode.optional_field(
    "template_repository",
    None,
    decode.optional(nullable_repository_decoder()),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use use_squash_pr_title_as_default <- decode.optional_field(
    "use_squash_pr_title_as_default",
    None,
    decode.optional(decode.bool),
  )
  use forks <- decode.field("forks", decode.int)
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use allow_rebase_merge <- decode.optional_field(
    "allow_rebase_merge",
    None,
    decode.optional(decode.bool),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use owner <- decode.field("owner", simple_user_decoder())
  use allow_merge_commit <- decode.optional_field(
    "allow_merge_commit",
    None,
    decode.optional(decode.bool),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.field("has_wiki", decode.bool)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use squash_merge_commit_title <- decode.optional_field(
    "squash_merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use merge_commit_title <- decode.optional_field(
    "merge_commit_title",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use watchers <- decode.field("watchers", decode.int)
  use node_id <- decode.field("node_id", decode.string)
  use anonymous_access_enabled <- decode.optional_field(
    "anonymous_access_enabled",
    None,
    decode.optional(decode.bool),
  )
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.field("ssh_url", decode.string)
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.field("pushed_at", decode.string)
  use downloads_url <- decode.field("downloads_url", decode.string)
  use source <- decode.optional_field(
    "source",
    None,
    decode.optional(repository_decoder()),
  )
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use subscribers_count <- decode.field("subscribers_count", decode.int)
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.field("svn_url", decode.string)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.field("disabled", decode.bool)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use allow_auto_merge <- decode.optional_field(
    "allow_auto_merge",
    None,
    decode.optional(decode.bool),
  )
  use pulls_url <- decode.field("pulls_url", decode.string)
  use network_count <- decode.field("network_count", decode.int)
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.field("has_projects", decode.bool)
  use has_pages <- decode.field("has_pages", decode.bool)
  use master_branch <- decode.optional_field(
    "master_branch",
    None,
    decode.optional(decode.string),
  )
  use open_issues_count <- decode.field("open_issues_count", decode.int)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.field("has_issues", decode.bool)
  decode.success(
    FullRepository(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      custom_properties: custom_properties,
      forks_count: forks_count,
      fork: fork,
      allow_update_branch: allow_update_branch,
      git_url: git_url,
      archived: archived,
      private: private,
      security_and_analysis: security_and_analysis,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      squash_merge_commit_message: squash_merge_commit_message,
      has_discussions: has_discussions,
      teams_url: teams_url,
      merge_commit_message: merge_commit_message,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      parent: parent,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      code_of_conduct: code_of_conduct,
      allow_squash_merge: allow_squash_merge,
      homepage: homepage,
      template_repository: template_repository,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      use_squash_pr_title_as_default: use_squash_pr_title_as_default,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      allow_rebase_merge: allow_rebase_merge,
      organization: organization,
      owner: owner,
      allow_merge_commit: allow_merge_commit,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      squash_merge_commit_title: squash_merge_commit_title,
      merge_commit_title: merge_commit_title,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      anonymous_access_enabled: anonymous_access_enabled,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      source: source,
      subscribers_url: subscribers_url,
      subscribers_count: subscribers_count,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      allow_auto_merge: allow_auto_merge,
      pulls_url: pulls_url,
      network_count: network_count,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      master_branch: master_branch,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn full_repository_encode(data: FullRepository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.string(data.default_branch)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.int(data.size)),
      #("forks_url", json.string(data.forks_url)),
      #("license", nullable_license_simple_encode(data.license)),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #(
        "custom_properties",
        json.nullable(
          data.custom_properties,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("forks_count", json.int(data.forks_count)),
      #("fork", json.bool(data.fork)),
      #(
        "allow_update_branch",
        json.nullable(data.allow_update_branch, json.bool),
      ),
      #("git_url", json.string(data.git_url)),
      #("archived", json.bool(data.archived)),
      #("private", json.bool(data.private)),
      #(
        "security_and_analysis",
        json.nullable(data.security_and_analysis, security_and_analysis_encode),
      ),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.nullable(data.has_downloads, json.bool)),
      #("blobs_url", json.string(data.blobs_url)),
      #(
        "squash_merge_commit_message",
        json.nullable(data.squash_merge_commit_message, json.string),
      ),
      #("has_discussions", json.bool(data.has_discussions)),
      #("teams_url", json.string(data.teams_url)),
      #(
        "merge_commit_message",
        json.nullable(data.merge_commit_message, json.string),
      ),
      #("watchers_count", json.int(data.watchers_count)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.int(data.stargazers_count)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("parent", json.nullable(data.parent, repository_encode)),
      #("created_at", json.string(data.created_at)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.string(data.clone_url)),
      #(
        "code_of_conduct",
        json.nullable(data.code_of_conduct, code_of_conduct_simple_encode),
      ),
      #("allow_squash_merge", json.nullable(data.allow_squash_merge, json.bool)),
      #("homepage", json.nullable(data.homepage, json.string)),
      #(
        "template_repository",
        json.nullable(data.template_repository, nullable_repository_encode),
      ),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #(
        "use_squash_pr_title_as_default",
        json.nullable(data.use_squash_pr_title_as_default, json.bool),
      ),
      #("forks", json.int(data.forks)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("allow_rebase_merge", json.nullable(data.allow_rebase_merge, json.bool)),
      #(
        "organization",
        json.nullable(data.organization, nullable_simple_user_encode),
      ),
      #("owner", simple_user_encode(data.owner)),
      #("allow_merge_commit", json.nullable(data.allow_merge_commit, json.bool)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.bool(data.has_wiki)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #(
        "squash_merge_commit_title",
        json.nullable(data.squash_merge_commit_title, json.string),
      ),
      #(
        "merge_commit_title",
        json.nullable(data.merge_commit_title, json.string),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("watchers", json.int(data.watchers)),
      #("node_id", json.string(data.node_id)),
      #(
        "anonymous_access_enabled",
        json.nullable(data.anonymous_access_enabled, json.bool),
      ),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.string(data.ssh_url)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.string(data.pushed_at)),
      #("downloads_url", json.string(data.downloads_url)),
      #("source", json.nullable(data.source, repository_encode)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("subscribers_count", json.int(data.subscribers_count)),
      #("id", json.int(data.id)),
      #("svn_url", json.string(data.svn_url)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.bool(data.disabled)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("allow_auto_merge", json.nullable(data.allow_auto_merge, json.bool)),
      #("pulls_url", json.string(data.pulls_url)),
      #("network_count", json.int(data.network_count)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.bool(data.has_projects)),
      #("has_pages", json.bool(data.has_pages)),
      #("master_branch", json.nullable(data.master_branch, json.string)),
      #("open_issues_count", json.int(data.open_issues_count)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.bool(data.has_issues))
    ],
  )
}

pub fn webhook_repository_unarchived_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryUnarchived(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_unarchived_encode(data: WebhookRepositoryUnarchived) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn simple_classroom_organization_decoder() {
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    SimpleClassroomOrganization(
      avatar_url: avatar_url,
      login: login,
      name: name,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn simple_classroom_organization_encode(data: SimpleClassroomOrganization) {
  json.object(
    [
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_projects_v2_item_archived_decoder() {
  use changes <- decode.field("changes", webhooks_project_changes_decoder())
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemArchived(
      changes: changes,
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_archived_encode(
  data: WebhookProjectsV2ItemArchived,
) {
  json.object(
    [
      #("changes", webhooks_project_changes_encode(data.changes)),
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn dependency_graph_spdx_sbom_decoder() {
  use sbom <- decode.field(
    "sbom",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(DependencyGraphSpdxSbom(sbom: sbom))
}

pub fn dependency_graph_spdx_sbom_encode(data: DependencyGraphSpdxSbom) {
  json.object(
    [#("sbom", fn(_) { panic as "Literal object inside field" }(data.sbom))],
  )
}

pub fn alert_dismissed_at_decoder() {
  decode.string
}

pub fn alert_dismissed_at_encode(data: AlertDismissedAt) {
  json.string(data)
}

pub fn org_ruleset_conditions_decoder() {
  decode.success(OrgRulesetConditions)
}

pub fn org_ruleset_conditions_encode(_data: OrgRulesetConditions) {
  json.object([])
}

pub fn discussion_decoder() {
  use body <- decode.field("body", decode.string)
  use answer_chosen_by <- decode.optional_field(
    "answer_chosen_by",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use locked <- decode.field("locked", decode.bool)
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author_association <- decode.field("author_association", decode.string)
  use timeline_url <- decode.optional_field(
    "timeline_url",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.field("state", decode.string)
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use comments <- decode.field("comments", decode.int)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use answer_html_url <- decode.optional_field(
    "answer_html_url",
    None,
    decode.optional(decode.string),
  )
  use category <- decode.field(
    "category",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use answer_chosen_at <- decode.optional_field(
    "answer_chosen_at",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.optional_field(
    "labels",
    None,
    decode.optional(decode.list(label_decoder())),
  )
  decode.success(
    Discussion(
      body: body,
      answer_chosen_by: answer_chosen_by,
      number: number,
      created_at: created_at,
      locked: locked,
      reactions: reactions,
      user: user,
      author_association: author_association,
      timeline_url: timeline_url,
      state: state,
      state_reason: state_reason,
      comments: comments,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
      answer_html_url: answer_html_url,
      category: category,
      active_lock_reason: active_lock_reason,
      answer_chosen_at: answer_chosen_at,
      labels: labels,
    ),
  )
}

pub fn discussion_encode(data: Discussion) {
  json.object(
    [
      #("body", json.string(data.body)),
      #(
        "answer_chosen_by",
        json.nullable(
          data.answer_chosen_by,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("locked", json.bool(data.locked)),
      #(
        "reactions",
        json.nullable(
          data.reactions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("author_association", json.string(data.author_association)),
      #("timeline_url", json.nullable(data.timeline_url, json.string)),
      #("state", json.string(data.state)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("comments", json.int(data.comments)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("answer_html_url", json.nullable(data.answer_html_url, json.string)),
      #(
        "category",
        fn(_) { panic as "Literal object inside field" }(data.category),
      ),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #("answer_chosen_at", json.nullable(data.answer_chosen_at, json.string)),
      #("labels", json.nullable(data.labels, json.array(_, label_encode)))
    ],
  )
}

pub fn webhook_status_decoder() {
  use target_url <- decode.optional_field(
    "target_url",
    None,
    decode.optional(decode.string),
  )
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use avatar_url <- decode.optional_field(
    "avatar_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use name <- decode.field("name", decode.string)
  use sha <- decode.field("sha", decode.string)
  use context <- decode.field("context", decode.string)
  use branches <- decode.field(
    "branches",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use state <- decode.field("state", decode.string)
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use commit <- decode.field(
    "commit",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhookStatus(
      target_url: target_url,
      enterprise: enterprise,
      avatar_url: avatar_url,
      created_at: created_at,
      repository: repository,
      name: name,
      sha: sha,
      context: context,
      branches: branches,
      state: state,
      organization: organization,
      sender: sender,
      commit: commit,
      updated_at: updated_at,
      installation: installation,
      id: id,
      description: description,
    ),
  )
}

pub fn webhook_status_encode(data: WebhookStatus) {
  json.object(
    [
      #("target_url", json.nullable(data.target_url, json.string)),
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("avatar_url", json.nullable(data.avatar_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("name", json.string(data.name)),
      #("sha", json.string(data.sha)),
      #("context", json.string(data.context)),
      #(
        "branches",
        json.array(_, fn(_) { panic as "object in array" })(data.branches),
      ),
      #("state", json.string(data.state)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("commit", fn(_) { panic as "Literal object inside field" }(data.commit)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhook_meta_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use hook <- decode.field(
    "hook",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(nullable_repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use hook_id <- decode.field("hook_id", decode.int)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMetaDeleted(
      enterprise: enterprise,
      hook: hook,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      hook_id: hook_id,
      installation: installation,
    ),
  )
}

pub fn webhook_meta_deleted_encode(data: WebhookMetaDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("hook", fn(_) { panic as "Literal object inside field" }(data.hook)),
      #(
        "repository",
        json.nullable(data.repository, nullable_repository_webhooks_encode),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #("hook_id", json.int(data.hook_id)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_security_advisory_withdrawn_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use security_advisory <- decode.field(
    "security_advisory",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSecurityAdvisoryWithdrawn(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      security_advisory: security_advisory,
      installation: installation,
    ),
  )
}

pub fn webhook_security_advisory_withdrawn_encode(
  data: WebhookSecurityAdvisoryWithdrawn,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "security_advisory",
        fn(_) { panic as "Literal object inside field" }(data.security_advisory),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn oidc_custom_sub_repo_decoder() {
  use use_default <- decode.field("use_default", decode.bool)
  use include_claim_keys <- decode.optional_field(
    "include_claim_keys",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    OidcCustomSubRepo(
      use_default: use_default,
      include_claim_keys: include_claim_keys,
    ),
  )
}

pub fn oidc_custom_sub_repo_encode(data: OidcCustomSubRepo) {
  json.object(
    [
      #("use_default", json.bool(data.use_default)),
      #(
        "include_claim_keys",
        json.nullable(data.include_claim_keys, json.array(_, json.string)),
      )
    ],
  )
}

pub fn webhook_team_add_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use team <- decode.field("team", webhooks_team_one_decoder())
  decode.success(
    WebhookTeamAdd(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      installation: installation,
      team: team,
    ),
  )
}

pub fn webhook_team_add_encode(data: WebhookTeamAdd) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("team", webhooks_team_one_encode(data.team))
    ],
  )
}

pub fn webhook_branch_protection_rule_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use rule <- decode.field("rule", webhooks_rule_decoder())
  decode.success(
    WebhookBranchProtectionRuleDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      rule: rule,
    ),
  )
}

pub fn webhook_branch_protection_rule_deleted_encode(
  data: WebhookBranchProtectionRuleDeleted,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("rule", webhooks_rule_encode(data.rule))
    ],
  )
}

pub fn webhook_discussion_pinned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionPinned(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_pinned_encode(data: WebhookDiscussionPinned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn assigned_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", simple_user_decoder())
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  use assigner <- decode.field("assigner", simple_user_decoder())
  decode.success(
    AssignedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      assignee: assignee,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
      assigner: assigner,
    ),
  )
}

pub fn assigned_issue_event_encode(data: AssignedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("assignee", simple_user_encode(data.assignee)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id)),
      #("assigner", simple_user_encode(data.assigner))
    ],
  )
}

pub fn pull_request_decoder() {
  use head <- decode.field(
    "head",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use draft <- decode.optional_field("draft", None, decode.optional(decode.bool))
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assignees <- decode.optional_field(
    "assignees",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use comments_url <- decode.field("comments_url", decode.string)
  use mergeable_state <- decode.field("mergeable_state", decode.string)
  use requested_teams <- decode.optional_field(
    "requested_teams",
    None,
    decode.optional(decode.list(team_simple_decoder())),
  )
  use deletions <- decode.field("deletions", decode.int)
  use merged_at <- decode.optional_field(
    "merged_at",
    None,
    decode.optional(decode.string),
  )
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use review_comment_url <- decode.field("review_comment_url", decode.string)
  use auto_merge <- decode.field("auto_merge", auto_merge_decoder())
  use issue_url <- decode.field("issue_url", decode.string)
  use number <- decode.field("number", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use merged_by <- decode.field("merged_by", nullable_simple_user_decoder())
  use locked <- decode.field("locked", decode.bool)
  use merge_commit_sha <- decode.optional_field(
    "merge_commit_sha",
    None,
    decode.optional(decode.string),
  )
  use review_comments_url <- decode.field("review_comments_url", decode.string)
  use user <- decode.field("user", simple_user_decoder())
  use commits_url <- decode.field("commits_url", decode.string)
  use changed_files <- decode.field("changed_files", decode.int)
  use merged <- decode.field("merged", decode.bool)
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", nullable_simple_user_decoder())
  use statuses_url <- decode.field("statuses_url", decode.string)
  use milestone <- decode.field("milestone", nullable_milestone_decoder())
  use maintainer_can_modify <- decode.field("maintainer_can_modify", decode.bool)
  use state <- decode.field("state", decode.string)
  use base_ <- decode.field(
    "base",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use mergeable <- decode.optional_field(
    "mergeable",
    None,
    decode.optional(decode.bool),
  )
  use comments <- decode.field("comments", decode.int)
  use diff_url <- decode.field("diff_url", decode.string)
  use additions <- decode.field("additions", decode.int)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use patch_url <- decode.field("patch_url", decode.string)
  use title <- decode.field("title", decode.string)
  use links <- decode.field(
    "_links",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use review_comments <- decode.field("review_comments", decode.int)
  use commits <- decode.field("commits", decode.int)
  use requested_reviewers <- decode.optional_field(
    "requested_reviewers",
    None,
    decode.optional(decode.list(simple_user_decoder())),
  )
  use rebaseable <- decode.optional_field(
    "rebaseable",
    None,
    decode.optional(decode.bool),
  )
  use active_lock_reason <- decode.optional_field(
    "active_lock_reason",
    None,
    decode.optional(decode.string),
  )
  use labels <- decode.field(
    "labels",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    PullRequest(
      head: head,
      draft: draft,
      body: body,
      assignees: assignees,
      comments_url: comments_url,
      mergeable_state: mergeable_state,
      requested_teams: requested_teams,
      deletions: deletions,
      merged_at: merged_at,
      closed_at: closed_at,
      review_comment_url: review_comment_url,
      auto_merge: auto_merge,
      issue_url: issue_url,
      number: number,
      created_at: created_at,
      merged_by: merged_by,
      locked: locked,
      merge_commit_sha: merge_commit_sha,
      review_comments_url: review_comments_url,
      user: user,
      commits_url: commits_url,
      changed_files: changed_files,
      merged: merged,
      author_association: author_association,
      url: url,
      assignee: assignee,
      statuses_url: statuses_url,
      milestone: milestone,
      maintainer_can_modify: maintainer_can_modify,
      state: state,
      base_: base_,
      mergeable: mergeable,
      comments: comments,
      diff_url: diff_url,
      additions: additions,
      updated_at: updated_at,
      node_id: node_id,
      patch_url: patch_url,
      title: title,
      links: links,
      id: id,
      html_url: html_url,
      review_comments: review_comments,
      commits: commits,
      requested_reviewers: requested_reviewers,
      rebaseable: rebaseable,
      active_lock_reason: active_lock_reason,
      labels: labels,
    ),
  )
}

pub fn pull_request_encode(data: PullRequest) {
  json.object(
    [
      #("head", fn(_) { panic as "Literal object inside field" }(data.head)),
      #("draft", json.nullable(data.draft, json.bool)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assignees",
        json.nullable(data.assignees, json.array(_, simple_user_encode)),
      ),
      #("comments_url", json.string(data.comments_url)),
      #("mergeable_state", json.string(data.mergeable_state)),
      #(
        "requested_teams",
        json.nullable(data.requested_teams, json.array(_, team_simple_encode)),
      ),
      #("deletions", json.int(data.deletions)),
      #("merged_at", json.nullable(data.merged_at, json.string)),
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("review_comment_url", json.string(data.review_comment_url)),
      #("auto_merge", auto_merge_encode(data.auto_merge)),
      #("issue_url", json.string(data.issue_url)),
      #("number", json.int(data.number)),
      #("created_at", json.string(data.created_at)),
      #("merged_by", nullable_simple_user_encode(data.merged_by)),
      #("locked", json.bool(data.locked)),
      #("merge_commit_sha", json.nullable(data.merge_commit_sha, json.string)),
      #("review_comments_url", json.string(data.review_comments_url)),
      #("user", simple_user_encode(data.user)),
      #("commits_url", json.string(data.commits_url)),
      #("changed_files", json.int(data.changed_files)),
      #("merged", json.bool(data.merged)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("assignee", nullable_simple_user_encode(data.assignee)),
      #("statuses_url", json.string(data.statuses_url)),
      #("milestone", nullable_milestone_encode(data.milestone)),
      #("maintainer_can_modify", json.bool(data.maintainer_can_modify)),
      #("state", json.string(data.state)),
      #("base", fn(_) { panic as "Literal object inside field" }(data.base_)),
      #("mergeable", json.nullable(data.mergeable, json.bool)),
      #("comments", json.int(data.comments)),
      #("diff_url", json.string(data.diff_url)),
      #("additions", json.int(data.additions)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("patch_url", json.string(data.patch_url)),
      #("title", json.string(data.title)),
      #("_links", fn(_) { panic as "Literal object inside field" }(data.links)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("review_comments", json.int(data.review_comments)),
      #("commits", json.int(data.commits)),
      #(
        "requested_reviewers",
        json.nullable(
          data.requested_reviewers,
          json.array(_, simple_user_encode),
        ),
      ),
      #("rebaseable", json.nullable(data.rebaseable, json.bool)),
      #(
        "active_lock_reason",
        json.nullable(data.active_lock_reason, json.string),
      ),
      #(
        "labels",
        json.array(_, fn(_) { panic as "object in array" })(data.labels),
      )
    ],
  )
}

pub fn combined_billing_usage_decoder() {
  use estimated_storage_for_month <- decode.field(
    "estimated_storage_for_month",
    decode.int,
  )
  use estimated_paid_storage_for_month <- decode.field(
    "estimated_paid_storage_for_month",
    decode.int,
  )
  use days_left_in_billing_cycle <- decode.field(
    "days_left_in_billing_cycle",
    decode.int,
  )
  decode.success(
    CombinedBillingUsage(
      estimated_storage_for_month: estimated_storage_for_month,
      estimated_paid_storage_for_month: estimated_paid_storage_for_month,
      days_left_in_billing_cycle: days_left_in_billing_cycle,
    ),
  )
}

pub fn combined_billing_usage_encode(data: CombinedBillingUsage) {
  json.object(
    [
      #(
        "estimated_storage_for_month",
        json.int(data.estimated_storage_for_month),
      ),
      #(
        "estimated_paid_storage_for_month",
        json.int(data.estimated_paid_storage_for_month),
      ),
      #("days_left_in_billing_cycle", json.int(data.days_left_in_billing_cycle))
    ],
  )
}

pub fn secret_scanning_alert_webhook_decoder() {
  use push_protection_bypass_request_html_url <- decode.optional_field(
    "push_protection_bypass_request_html_url",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypassed <- decode.optional_field(
    "push_protection_bypassed",
    None,
    decode.optional(decode.bool),
  )
  use number <- decode.optional_field(
    "number",
    None,
    decode.optional(alert_number_decoder()),
  )
  use secret_type <- decode.optional_field(
    "secret_type",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(alert_created_at_decoder()),
  )
  use push_protection_bypassed_at <- decode.optional_field(
    "push_protection_bypassed_at",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypass_request_reviewer <- decode.optional_field(
    "push_protection_bypass_request_reviewer",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use publicly_leaked <- decode.optional_field(
    "publicly_leaked",
    None,
    decode.optional(decode.bool),
  )
  use resolution <- decode.optional_field(
    "resolution",
    None,
    decode.optional(secret_scanning_alert_resolution_webhook_decoder()),
  )
  use resolution_comment <- decode.optional_field(
    "resolution_comment",
    None,
    decode.optional(decode.string),
  )
  use locations_url <- decode.optional_field(
    "locations_url",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypassed_by <- decode.optional_field(
    "push_protection_bypassed_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use url <- decode.optional_field(
    "url",
    None,
    decode.optional(alert_url_decoder()),
  )
  use validity <- decode.optional_field(
    "validity",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(nullable_alert_updated_at_decoder()),
  )
  use multi_repo <- decode.optional_field(
    "multi_repo",
    None,
    decode.optional(decode.bool),
  )
  use push_protection_bypass_request_comment <- decode.optional_field(
    "push_protection_bypass_request_comment",
    None,
    decode.optional(decode.string),
  )
  use resolved_at <- decode.optional_field(
    "resolved_at",
    None,
    decode.optional(decode.string),
  )
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(alert_html_url_decoder()),
  )
  use secret_type_display_name <- decode.optional_field(
    "secret_type_display_name",
    None,
    decode.optional(decode.string),
  )
  use resolved_by <- decode.optional_field(
    "resolved_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  decode.success(
    SecretScanningAlertWebhook(
      push_protection_bypass_request_html_url: push_protection_bypass_request_html_url,
      push_protection_bypassed: push_protection_bypassed,
      number: number,
      secret_type: secret_type,
      created_at: created_at,
      push_protection_bypassed_at: push_protection_bypassed_at,
      push_protection_bypass_request_reviewer: push_protection_bypass_request_reviewer,
      publicly_leaked: publicly_leaked,
      resolution: resolution,
      resolution_comment: resolution_comment,
      locations_url: locations_url,
      push_protection_bypassed_by: push_protection_bypassed_by,
      url: url,
      validity: validity,
      updated_at: updated_at,
      multi_repo: multi_repo,
      push_protection_bypass_request_comment: push_protection_bypass_request_comment,
      resolved_at: resolved_at,
      html_url: html_url,
      secret_type_display_name: secret_type_display_name,
      resolved_by: resolved_by,
    ),
  )
}

pub fn secret_scanning_alert_webhook_encode(data: SecretScanningAlertWebhook) {
  json.object(
    [
      #(
        "push_protection_bypass_request_html_url",
        json.nullable(data.push_protection_bypass_request_html_url, json.string),
      ),
      #(
        "push_protection_bypassed",
        json.nullable(data.push_protection_bypassed, json.bool),
      ),
      #("number", json.nullable(data.number, alert_number_encode)),
      #("secret_type", json.nullable(data.secret_type, json.string)),
      #("created_at", json.nullable(data.created_at, alert_created_at_encode)),
      #(
        "push_protection_bypassed_at",
        json.nullable(data.push_protection_bypassed_at, json.string),
      ),
      #(
        "push_protection_bypass_request_reviewer",
        json.nullable(
          data.push_protection_bypass_request_reviewer,
          nullable_simple_user_encode,
        ),
      ),
      #("publicly_leaked", json.nullable(data.publicly_leaked, json.bool)),
      #(
        "resolution",
        json.nullable(
          data.resolution,
          secret_scanning_alert_resolution_webhook_encode,
        ),
      ),
      #(
        "resolution_comment",
        json.nullable(data.resolution_comment, json.string),
      ),
      #("locations_url", json.nullable(data.locations_url, json.string)),
      #(
        "push_protection_bypassed_by",
        json.nullable(
          data.push_protection_bypassed_by,
          nullable_simple_user_encode,
        ),
      ),
      #("url", json.nullable(data.url, alert_url_encode)),
      #("validity", json.nullable(data.validity, json.string)),
      #(
        "updated_at",
        json.nullable(data.updated_at, nullable_alert_updated_at_encode),
      ),
      #("multi_repo", json.nullable(data.multi_repo, json.bool)),
      #(
        "push_protection_bypass_request_comment",
        json.nullable(data.push_protection_bypass_request_comment, json.string),
      ),
      #("resolved_at", json.nullable(data.resolved_at, json.string)),
      #("html_url", json.nullable(data.html_url, alert_html_url_encode)),
      #(
        "secret_type_display_name",
        json.nullable(data.secret_type_display_name, json.string),
      ),
      #(
        "resolved_by",
        json.nullable(data.resolved_by, nullable_simple_user_encode),
      )
    ],
  )
}

pub fn classroom_assignment_decoder() {
  use feedback_pull_requests_enabled <- decode.field(
    "feedback_pull_requests_enabled",
    decode.bool,
  )
  use accepted <- decode.field("accepted", decode.int)
  use public_repo <- decode.field("public_repo", decode.bool)
  use slug <- decode.field("slug", decode.string)
  use starter_code_repository <- decode.field(
    "starter_code_repository",
    simple_classroom_repository_decoder(),
  )
  use editor <- decode.field("editor", decode.string)
  use invite_link <- decode.field("invite_link", decode.string)
  use passing <- decode.field("passing", decode.int)
  use classroom <- decode.field("classroom", classroom_decoder())
  use title <- decode.field("title", decode.string)
  use deadline <- decode.optional_field(
    "deadline",
    None,
    decode.optional(decode.string),
  )
  use language <- decode.field("language", decode.string)
  use type_ <- decode.field("type", decode.string)
  use submitted <- decode.field("submitted", decode.int)
  use id <- decode.field("id", decode.int)
  use max_teams <- decode.optional_field(
    "max_teams",
    None,
    decode.optional(decode.int),
  )
  use invitations_enabled <- decode.field("invitations_enabled", decode.bool)
  use max_members <- decode.optional_field(
    "max_members",
    None,
    decode.optional(decode.int),
  )
  use students_are_repo_admins <- decode.field(
    "students_are_repo_admins",
    decode.bool,
  )
  decode.success(
    ClassroomAssignment(
      feedback_pull_requests_enabled: feedback_pull_requests_enabled,
      accepted: accepted,
      public_repo: public_repo,
      slug: slug,
      starter_code_repository: starter_code_repository,
      editor: editor,
      invite_link: invite_link,
      passing: passing,
      classroom: classroom,
      title: title,
      deadline: deadline,
      language: language,
      type_: type_,
      submitted: submitted,
      id: id,
      max_teams: max_teams,
      invitations_enabled: invitations_enabled,
      max_members: max_members,
      students_are_repo_admins: students_are_repo_admins,
    ),
  )
}

pub fn classroom_assignment_encode(data: ClassroomAssignment) {
  json.object(
    [
      #(
        "feedback_pull_requests_enabled",
        json.bool(data.feedback_pull_requests_enabled),
      ),
      #("accepted", json.int(data.accepted)),
      #("public_repo", json.bool(data.public_repo)),
      #("slug", json.string(data.slug)),
      #(
        "starter_code_repository",
        simple_classroom_repository_encode(data.starter_code_repository),
      ),
      #("editor", json.string(data.editor)),
      #("invite_link", json.string(data.invite_link)),
      #("passing", json.int(data.passing)),
      #("classroom", classroom_encode(data.classroom)),
      #("title", json.string(data.title)),
      #("deadline", json.nullable(data.deadline, json.string)),
      #("language", json.string(data.language)),
      #("type", json.string(data.type_)),
      #("submitted", json.int(data.submitted)),
      #("id", json.int(data.id)),
      #("max_teams", json.nullable(data.max_teams, json.int)),
      #("invitations_enabled", json.bool(data.invitations_enabled)),
      #("max_members", json.nullable(data.max_members, json.int)),
      #("students_are_repo_admins", json.bool(data.students_are_repo_admins))
    ],
  )
}

pub fn webhook_installation_target_renamed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use target_type <- decode.field("target_type", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use account <- decode.field(
    "account",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", simple_installation_decoder())
  decode.success(
    WebhookInstallationTargetRenamed(
      enterprise: enterprise,
      changes: changes,
      target_type: target_type,
      repository: repository,
      account: account,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_installation_target_renamed_encode(
  data: WebhookInstallationTargetRenamed,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("target_type", json.string(data.target_type)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "account",
        fn(_) { panic as "Literal object inside field" }(data.account),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #("installation", simple_installation_encode(data.installation))
    ],
  )
}

pub fn nullable_codespace_machine_decoder() {
  use display_name <- decode.field("display_name", decode.string)
  use name <- decode.field("name", decode.string)
  use cpus <- decode.field("cpus", decode.int)
  use operating_system <- decode.field("operating_system", decode.string)
  use memory_in_bytes <- decode.field("memory_in_bytes", decode.int)
  use prebuild_availability <- decode.optional_field(
    "prebuild_availability",
    None,
    decode.optional(decode.string),
  )
  use storage_in_bytes <- decode.field("storage_in_bytes", decode.int)
  decode.success(
    NullableCodespaceMachine(
      display_name: display_name,
      name: name,
      cpus: cpus,
      operating_system: operating_system,
      memory_in_bytes: memory_in_bytes,
      prebuild_availability: prebuild_availability,
      storage_in_bytes: storage_in_bytes,
    ),
  )
}

pub fn nullable_codespace_machine_encode(data: NullableCodespaceMachine) {
  json.object(
    [
      #("display_name", json.string(data.display_name)),
      #("name", json.string(data.name)),
      #("cpus", json.int(data.cpus)),
      #("operating_system", json.string(data.operating_system)),
      #("memory_in_bytes", json.int(data.memory_in_bytes)),
      #(
        "prebuild_availability",
        json.nullable(data.prebuild_availability, json.string),
      ),
      #("storage_in_bytes", json.int(data.storage_in_bytes))
    ],
  )
}

pub fn release_notes_content_decoder() {
  use body <- decode.field("body", decode.string)
  use name <- decode.field("name", decode.string)
  decode.success(ReleaseNotesContent(body: body, name: name))
}

pub fn release_notes_content_encode(data: ReleaseNotesContent) {
  json.object(
    [#("body", json.string(data.body)), #("name", json.string(data.name))],
  )
}

pub fn moved_column_in_project_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use project_card <- decode.optional_field(
    "project_card",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    MovedColumnInProjectIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      project_card: project_card,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn moved_column_in_project_issue_event_encode(
  data: MovedColumnInProjectIssueEvent,
) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #(
        "project_card",
        json.nullable(
          data.project_card,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_custom_property_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use definition <- decode.field(
    "definition",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCustomPropertyDeleted(
      enterprise: enterprise,
      organization: organization,
      definition: definition,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_custom_property_deleted_encode(data: WebhookCustomPropertyDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "definition",
        fn(_) { panic as "Literal object inside field" }(data.definition),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_check_run_created_form_encoded_decoder() {
  use payload <- decode.field("payload", decode.string)
  decode.success(WebhookCheckRunCreatedFormEncoded(payload: payload))
}

pub fn webhook_check_run_created_form_encoded_encode(
  data: WebhookCheckRunCreatedFormEncoded,
) {
  json.object([#("payload", json.string(data.payload))])
}

pub fn rule_suite_decoder() {
  use repository_name <- decode.optional_field(
    "repository_name",
    None,
    decode.optional(decode.string),
  )
  use evaluation_result <- decode.optional_field(
    "evaluation_result",
    None,
    decode.optional(decode.string),
  )
  use actor_id <- decode.optional_field(
    "actor_id",
    None,
    decode.optional(decode.int),
  )
  use after_sha <- decode.optional_field(
    "after_sha",
    None,
    decode.optional(decode.string),
  )
  use before_sha <- decode.optional_field(
    "before_sha",
    None,
    decode.optional(decode.string),
  )
  use repository_id <- decode.optional_field(
    "repository_id",
    None,
    decode.optional(decode.int),
  )
  use ref <- decode.optional_field("ref", None, decode.optional(decode.string))
  use rule_evaluations <- decode.optional_field(
    "rule_evaluations",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use actor_name <- decode.optional_field(
    "actor_name",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.int))
  use result <- decode.optional_field(
    "result",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RuleSuite(
      repository_name: repository_name,
      evaluation_result: evaluation_result,
      actor_id: actor_id,
      after_sha: after_sha,
      before_sha: before_sha,
      repository_id: repository_id,
      ref: ref,
      rule_evaluations: rule_evaluations,
      actor_name: actor_name,
      pushed_at: pushed_at,
      id: id,
      result: result,
    ),
  )
}

pub fn rule_suite_encode(data: RuleSuite) {
  json.object(
    [
      #("repository_name", json.nullable(data.repository_name, json.string)),
      #("evaluation_result", json.nullable(data.evaluation_result, json.string)),
      #("actor_id", json.nullable(data.actor_id, json.int)),
      #("after_sha", json.nullable(data.after_sha, json.string)),
      #("before_sha", json.nullable(data.before_sha, json.string)),
      #("repository_id", json.nullable(data.repository_id, json.int)),
      #("ref", json.nullable(data.ref, json.string)),
      #(
        "rule_evaluations",
        json.nullable(
          data.rule_evaluations,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("actor_name", json.nullable(data.actor_name, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("id", json.nullable(data.id, json.int)),
      #("result", json.nullable(data.result, json.string))
    ],
  )
}

pub fn review_custom_gates_state_required_decoder() {
  use state <- decode.field("state", decode.string)
  use environment_name <- decode.field("environment_name", decode.string)
  use comment <- decode.optional_field(
    "comment",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ReviewCustomGatesStateRequired(
      state: state,
      environment_name: environment_name,
      comment: comment,
    ),
  )
}

pub fn review_custom_gates_state_required_encode(
  data: ReviewCustomGatesStateRequired,
) {
  json.object(
    [
      #("state", json.string(data.state)),
      #("environment_name", json.string(data.environment_name)),
      #("comment", json.nullable(data.comment, json.string))
    ],
  )
}

pub fn webhook_issues_locked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesLocked(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_locked_encode(data: WebhookIssuesLocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_repository_advisory_published_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use repository_advisory <- decode.field(
    "repository_advisory",
    repository_advisory_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryAdvisoryPublished(
      enterprise: enterprise,
      repository: repository,
      repository_advisory: repository_advisory,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_advisory_published_encode(
  data: WebhookRepositoryAdvisoryPublished,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "repository_advisory",
        repository_advisory_encode(data.repository_advisory),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn release_decoder() {
  use draft <- decode.field("draft", decode.bool)
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assets <- decode.field("assets", decode.list(release_asset_decoder()))
  use prerelease <- decode.field("prerelease", decode.bool)
  use published_at <- decode.optional_field(
    "published_at",
    None,
    decode.optional(decode.string),
  )
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use author <- decode.field("author", simple_user_decoder())
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use tag_name <- decode.field("tag_name", decode.string)
  use zipball_url <- decode.optional_field(
    "zipball_url",
    None,
    decode.optional(decode.string),
  )
  use upload_url <- decode.field("upload_url", decode.string)
  use assets_url <- decode.field("assets_url", decode.string)
  use tarball_url <- decode.optional_field(
    "tarball_url",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use discussion_url <- decode.optional_field(
    "discussion_url",
    None,
    decode.optional(decode.string),
  )
  use mentions_count <- decode.optional_field(
    "mentions_count",
    None,
    decode.optional(decode.int),
  )
  use target_commitish <- decode.field("target_commitish", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    Release(
      draft: draft,
      body: body,
      assets: assets,
      prerelease: prerelease,
      published_at: published_at,
      body_html: body_html,
      created_at: created_at,
      body_text: body_text,
      reactions: reactions,
      author: author,
      name: name,
      url: url,
      tag_name: tag_name,
      zipball_url: zipball_url,
      upload_url: upload_url,
      assets_url: assets_url,
      tarball_url: tarball_url,
      node_id: node_id,
      discussion_url: discussion_url,
      mentions_count: mentions_count,
      target_commitish: target_commitish,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn release_encode(data: Release) {
  json.object(
    [
      #("draft", json.bool(data.draft)),
      #("body", json.nullable(data.body, json.string)),
      #("assets", json.array(_, release_asset_encode)(data.assets)),
      #("prerelease", json.bool(data.prerelease)),
      #("published_at", json.nullable(data.published_at, json.string)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("author", simple_user_encode(data.author)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("tag_name", json.string(data.tag_name)),
      #("zipball_url", json.nullable(data.zipball_url, json.string)),
      #("upload_url", json.string(data.upload_url)),
      #("assets_url", json.string(data.assets_url)),
      #("tarball_url", json.nullable(data.tarball_url, json.string)),
      #("node_id", json.string(data.node_id)),
      #("discussion_url", json.nullable(data.discussion_url, json.string)),
      #("mentions_count", json.nullable(data.mentions_count, json.int)),
      #("target_commitish", json.string(data.target_commitish)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn repository_rule_workflows_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleWorkflows(parameters: parameters, type_: type_))
}

pub fn repository_rule_workflows_encode(data: RepositoryRuleWorkflows) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn webhook_discussion_comment_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_comment_decoder())
  decode.success(
    WebhookDiscussionCommentEdited(
      enterprise: enterprise,
      changes: changes,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_discussion_comment_edited_encode(
  data: WebhookDiscussionCommentEdited,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_comment_encode(data.comment))
    ],
  )
}

pub fn webhook_installation_unsuspend_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(webhooks_repositories_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.field("installation", installation_decoder())
  decode.success(
    WebhookInstallationUnsuspend(
      enterprise: enterprise,
      repositories: repositories,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_installation_unsuspend_encode(data: WebhookInstallationUnsuspend) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repositories",
        json.nullable(data.repositories, webhooks_repositories_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("installation", installation_encode(data.installation))
    ],
  )
}

pub fn webhook_pull_request_review_comment_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_review_comment_decoder())
  decode.success(
    WebhookPullRequestReviewCommentDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_pull_request_review_comment_deleted_encode(
  data: WebhookPullRequestReviewCommentDeleted,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_review_comment_encode(data.comment))
    ],
  )
}

pub fn webhook_sponsorship_pending_cancellation_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use effective_date <- decode.optional_field(
    "effective_date",
    None,
    decode.optional(webhooks_effective_date_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use sponsorship <- decode.field("sponsorship", webhooks_sponsorship_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSponsorshipPendingCancellation(
      enterprise: enterprise,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      sender: sender,
      sponsorship: sponsorship,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_sponsorship_pending_cancellation_encode(
  data: WebhookSponsorshipPendingCancellation,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "effective_date",
        json.nullable(data.effective_date, webhooks_effective_date_encode),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("sponsorship", webhooks_sponsorship_encode(data.sponsorship)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_repository_publicized_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryPublicized(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_publicized_encode(data: WebhookRepositoryPublicized) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn simple_user_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    SimpleUser(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      starred_at: starred_at,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn simple_user_encode(data: SimpleUser) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("repos_url", json.string(data.repos_url)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("node_id", json.string(data.node_id)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn webhook_milestone_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.field("milestone", webhooks_milestone_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMilestoneDeleted(
      enterprise: enterprise,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_milestone_deleted_encode(data: WebhookMilestoneDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", webhooks_milestone_encode(data.milestone)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_required_status_checks_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleRequiredStatusChecks(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_required_status_checks_encode(
  data: RepositoryRuleRequiredStatusChecks,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn webhook_page_build_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use build <- decode.field(
    "build",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use id <- decode.field("id", decode.int)
  decode.success(
    WebhookPageBuild(
      enterprise: enterprise,
      repository: repository,
      build: build,
      organization: organization,
      sender: sender,
      installation: installation,
      id: id,
    ),
  )
}

pub fn webhook_page_build_encode(data: WebhookPageBuild) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("build", fn(_) { panic as "Literal object inside field" }(data.build)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("id", json.int(data.id))
    ],
  )
}

pub fn organization_actions_variable_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use value <- decode.field("value", decode.string)
  use visibility <- decode.field("visibility", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use selected_repositories_url <- decode.optional_field(
    "selected_repositories_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    OrganizationActionsVariable(
      created_at: created_at,
      name: name,
      value: value,
      visibility: visibility,
      updated_at: updated_at,
      selected_repositories_url: selected_repositories_url,
    ),
  )
}

pub fn organization_actions_variable_encode(data: OrganizationActionsVariable) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("value", json.string(data.value)),
      #("visibility", json.string(data.visibility)),
      #("updated_at", json.string(data.updated_at)),
      #(
        "selected_repositories_url",
        json.nullable(data.selected_repositories_url, json.string),
      )
    ],
  )
}

pub fn deployment_branch_policy_name_pattern_decoder() {
  use name <- decode.field("name", decode.string)
  decode.success(DeploymentBranchPolicyNamePattern(name: name))
}

pub fn deployment_branch_policy_name_pattern_encode(
  data: DeploymentBranchPolicyNamePattern,
) {
  json.object([#("name", json.string(data.name))])
}

pub fn projects_v2_status_update_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use created_at <- decode.field("created_at", decode.string)
  use start_date <- decode.optional_field(
    "start_date",
    None,
    decode.optional(decode.string),
  )
  use creator <- decode.optional_field(
    "creator",
    None,
    decode.optional(simple_user_decoder()),
  )
  use project_node_id <- decode.optional_field(
    "project_node_id",
    None,
    decode.optional(decode.string),
  )
  use status <- decode.optional_field(
    "status",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.float)
  use target_date <- decode.optional_field(
    "target_date",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ProjectsV2StatusUpdate(
      body: body,
      created_at: created_at,
      start_date: start_date,
      creator: creator,
      project_node_id: project_node_id,
      status: status,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      target_date: target_date,
    ),
  )
}

pub fn projects_v2_status_update_encode(data: ProjectsV2StatusUpdate) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("created_at", json.string(data.created_at)),
      #("start_date", json.nullable(data.start_date, json.string)),
      #("creator", json.nullable(data.creator, simple_user_encode)),
      #("project_node_id", json.nullable(data.project_node_id, json.string)),
      #("status", json.nullable(data.status, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.float(data.id)),
      #("target_date", json.nullable(data.target_date, json.string))
    ],
  )
}

pub fn webhook_project_card_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(nullable_repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use project_card <- decode.field(
    "project_card",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectCardDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      project_card: project_card,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_project_card_deleted_encode(data: WebhookProjectCardDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(data.repository, nullable_repository_webhooks_encode),
      ),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "project_card",
        fn(_) { panic as "Literal object inside field" }(data.project_card),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_issues_opened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesOpened(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_opened_encode(data: WebhookIssuesOpened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_projects_v2_status_update_edited_decoder() {
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use projects_v2_status_update <- decode.field(
    "projects_v2_status_update",
    projects_v2_status_update_decoder(),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2StatusUpdateEdited(
      changes: changes,
      organization: organization,
      sender: sender,
      action: action,
      projects_v2_status_update: projects_v2_status_update,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_status_update_edited_encode(
  data: WebhookProjectsV2StatusUpdateEdited,
) {
  json.object(
    [
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "projects_v2_status_update",
        projects_v2_status_update_encode(data.projects_v2_status_update),
      ),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_team_removed_from_repository_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use team <- decode.field("team", webhooks_team_one_decoder())
  decode.success(
    WebhookTeamRemovedFromRepository(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      team: team,
    ),
  )
}

pub fn webhook_team_removed_from_repository_encode(
  data: WebhookTeamRemovedFromRepository,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "repository",
        json.nullable(
          data.repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("team", webhooks_team_one_encode(data.team))
    ],
  )
}

pub fn webhook_member_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use member <- decode.field("member", webhooks_user_decoder())
  decode.success(
    WebhookMemberEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      member: member,
    ),
  )
}

pub fn webhook_member_edited_encode(data: WebhookMemberEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("member", webhooks_user_encode(data.member))
    ],
  )
}

pub fn webhook_issues_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(webhooks_label_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_edited_encode(data: WebhookIssuesEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", json.nullable(data.label, webhooks_label_encode)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn review_request_removed_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use requested_team <- decode.optional_field(
    "requested_team",
    None,
    decode.optional(team_decoder()),
  )
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use review_requester <- decode.field("review_requester", simple_user_decoder())
  use requested_reviewer <- decode.optional_field(
    "requested_reviewer",
    None,
    decode.optional(simple_user_decoder()),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    ReviewRequestRemovedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      requested_team: requested_team,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      review_requester: review_requester,
      requested_reviewer: requested_reviewer,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn review_request_removed_issue_event_encode(
  data: ReviewRequestRemovedIssueEvent,
) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("requested_team", json.nullable(data.requested_team, team_encode)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("review_requester", simple_user_encode(data.review_requester)),
      #(
        "requested_reviewer",
        json.nullable(data.requested_reviewer, simple_user_encode),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_project_column_moved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use project_column <- decode.field(
    "project_column",
    webhooks_project_column_decoder(),
  )
  decode.success(
    WebhookProjectColumnMoved(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      project_column: project_column,
    ),
  )
}

pub fn webhook_project_column_moved_encode(data: WebhookProjectColumnMoved) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("project_column", webhooks_project_column_encode(data.project_column))
    ],
  )
}

pub fn team_membership_decoder() {
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use role <- decode.field("role", decode.string)
  decode.success(TeamMembership(url: url, state: state, role: role))
}

pub fn team_membership_encode(data: TeamMembership) {
  json.object(
    [
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("role", json.string(data.role))
    ],
  )
}

pub fn webhook_project_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use project <- decode.field("project", webhooks_project_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectReopened(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      project: project,
      installation: installation,
    ),
  )
}

pub fn webhook_project_reopened_encode(data: WebhookProjectReopened) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("project", webhooks_project_encode(data.project)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_alert_environment_decoder() {
  decode.string
}

pub fn code_scanning_alert_environment_encode(data: CodeScanningAlertEnvironment) {
  json.string(data)
}

pub fn dependency_graph_diff_decoder() {
  decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }))
}

pub fn dependency_graph_diff_encode(data: DependencyGraphDiff) {
  json.array(data, fn(_) { panic as "object in array" })
}

pub fn issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use author_association <- decode.optional_field(
    "author_association",
    None,
    decode.optional(author_association_decoder()),
  )
  use requested_team <- decode.optional_field(
    "requested_team",
    None,
    decode.optional(team_decoder()),
  )
  use dismissed_review <- decode.optional_field(
    "dismissed_review",
    None,
    decode.optional(issue_event_dismissed_review_decoder()),
  )
  use url <- decode.field("url", decode.string)
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(issue_event_milestone_decoder()),
  )
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(issue_event_label_decoder()),
  )
  use actor <- decode.field("actor", nullable_simple_user_decoder())
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use review_requester <- decode.optional_field(
    "review_requester",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use project_card <- decode.optional_field(
    "project_card",
    None,
    decode.optional(issue_event_project_card_decoder()),
  )
  use requested_reviewer <- decode.optional_field(
    "requested_reviewer",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use node_id <- decode.field("node_id", decode.string)
  use lock_reason <- decode.optional_field(
    "lock_reason",
    None,
    decode.optional(decode.string),
  )
  use issue <- decode.optional_field(
    "issue",
    None,
    decode.optional(nullable_issue_decoder()),
  )
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  use assigner <- decode.optional_field(
    "assigner",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use rename <- decode.optional_field(
    "rename",
    None,
    decode.optional(issue_event_rename_decoder()),
  )
  decode.success(
    IssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      author_association: author_association,
      requested_team: requested_team,
      dismissed_review: dismissed_review,
      url: url,
      assignee: assignee,
      milestone: milestone,
      label: label,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      review_requester: review_requester,
      project_card: project_card,
      requested_reviewer: requested_reviewer,
      node_id: node_id,
      lock_reason: lock_reason,
      issue: issue,
      event: event,
      id: id,
      assigner: assigner,
      rename: rename,
    ),
  )
}

pub fn issue_event_encode(data: IssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #(
        "author_association",
        json.nullable(data.author_association, author_association_encode),
      ),
      #("requested_team", json.nullable(data.requested_team, team_encode)),
      #(
        "dismissed_review",
        json.nullable(data.dismissed_review, issue_event_dismissed_review_encode),
      ),
      #("url", json.string(data.url)),
      #("assignee", json.nullable(data.assignee, nullable_simple_user_encode)),
      #("milestone", json.nullable(data.milestone, issue_event_milestone_encode)),
      #("label", json.nullable(data.label, issue_event_label_encode)),
      #("actor", nullable_simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #(
        "review_requester",
        json.nullable(data.review_requester, nullable_simple_user_encode),
      ),
      #(
        "project_card",
        json.nullable(data.project_card, issue_event_project_card_encode),
      ),
      #(
        "requested_reviewer",
        json.nullable(data.requested_reviewer, nullable_simple_user_encode),
      ),
      #("node_id", json.string(data.node_id)),
      #("lock_reason", json.nullable(data.lock_reason, json.string)),
      #("issue", json.nullable(data.issue, nullable_issue_encode)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id)),
      #("assigner", json.nullable(data.assigner, nullable_simple_user_encode)),
      #("rename", json.nullable(data.rename, issue_event_rename_encode))
    ],
  )
}

pub fn installation_token_decoder() {
  use single_file_paths <- decode.optional_field(
    "single_file_paths",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(app_permissions_decoder()),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(decode.list(repository_decoder())),
  )
  use has_multiple_single_files <- decode.optional_field(
    "has_multiple_single_files",
    None,
    decode.optional(decode.bool),
  )
  use single_file <- decode.optional_field(
    "single_file",
    None,
    decode.optional(decode.string),
  )
  use repository_selection <- decode.optional_field(
    "repository_selection",
    None,
    decode.optional(decode.string),
  )
  use token_ <- decode.field("token", decode.string)
  use expires_at <- decode.field("expires_at", decode.string)
  decode.success(
    InstallationToken(
      single_file_paths: single_file_paths,
      permissions: permissions,
      repositories: repositories,
      has_multiple_single_files: has_multiple_single_files,
      single_file: single_file,
      repository_selection: repository_selection,
      token_: token_,
      expires_at: expires_at,
    ),
  )
}

pub fn installation_token_encode(data: InstallationToken) {
  json.object(
    [
      #(
        "single_file_paths",
        json.nullable(data.single_file_paths, json.array(_, json.string)),
      ),
      #("permissions", json.nullable(data.permissions, app_permissions_encode)),
      #(
        "repositories",
        json.nullable(data.repositories, json.array(_, repository_encode)),
      ),
      #(
        "has_multiple_single_files",
        json.nullable(data.has_multiple_single_files, json.bool),
      ),
      #("single_file", json.nullable(data.single_file, json.string)),
      #(
        "repository_selection",
        json.nullable(data.repository_selection, json.string),
      ),
      #("token", json.string(data.token_)),
      #("expires_at", json.string(data.expires_at))
    ],
  )
}

pub fn check_run_decoder() {
  use output <- decode.field(
    "output",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use check_suite <- decode.optional_field(
    "check_suite",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use app <- decode.field("app", nullable_integration_decoder())
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_simple_decoder()),
  )
  use completed_at <- decode.optional_field(
    "completed_at",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use head_sha <- decode.field("head_sha", decode.string)
  use url <- decode.field("url", decode.string)
  use external_id <- decode.optional_field(
    "external_id",
    None,
    decode.optional(decode.string),
  )
  use started_at <- decode.optional_field(
    "started_at",
    None,
    decode.optional(decode.string),
  )
  use details_url <- decode.optional_field(
    "details_url",
    None,
    decode.optional(decode.string),
  )
  use status <- decode.field("status", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use pull_requests <- decode.field(
    "pull_requests",
    decode.list(pull_request_minimal_decoder()),
  )
  use conclusion <- decode.optional_field(
    "conclusion",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CheckRun(
      output: output,
      check_suite: check_suite,
      app: app,
      deployment: deployment,
      completed_at: completed_at,
      name: name,
      head_sha: head_sha,
      url: url,
      external_id: external_id,
      started_at: started_at,
      details_url: details_url,
      status: status,
      node_id: node_id,
      id: id,
      html_url: html_url,
      pull_requests: pull_requests,
      conclusion: conclusion,
    ),
  )
}

pub fn check_run_encode(data: CheckRun) {
  json.object(
    [
      #("output", fn(_) { panic as "Literal object inside field" }(data.output)),
      #(
        "check_suite",
        json.nullable(
          data.check_suite,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("app", nullable_integration_encode(data.app)),
      #("deployment", json.nullable(data.deployment, deployment_simple_encode)),
      #("completed_at", json.nullable(data.completed_at, json.string)),
      #("name", json.string(data.name)),
      #("head_sha", json.string(data.head_sha)),
      #("url", json.string(data.url)),
      #("external_id", json.nullable(data.external_id, json.string)),
      #("started_at", json.nullable(data.started_at, json.string)),
      #("details_url", json.nullable(data.details_url, json.string)),
      #("status", json.string(data.status)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #(
        "pull_requests",
        json.array(_, pull_request_minimal_encode)(data.pull_requests),
      ),
      #("conclusion", json.nullable(data.conclusion, json.string))
    ],
  )
}

pub fn package_decoder() {
  use version_count <- decode.field("version_count", decode.int)
  use created_at <- decode.field("created_at", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(nullable_minimal_repository_decoder()),
  )
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use visibility <- decode.field("visibility", decode.string)
  use owner <- decode.optional_field(
    "owner",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use package_type <- decode.field("package_type", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    Package(
      version_count: version_count,
      created_at: created_at,
      repository: repository,
      name: name,
      url: url,
      visibility: visibility,
      owner: owner,
      package_type: package_type,
      updated_at: updated_at,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn package_encode(data: Package) {
  json.object(
    [
      #("version_count", json.int(data.version_count)),
      #("created_at", json.string(data.created_at)),
      #(
        "repository",
        json.nullable(data.repository, nullable_minimal_repository_encode),
      ),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("visibility", json.string(data.visibility)),
      #("owner", json.nullable(data.owner, nullable_simple_user_encode)),
      #("package_type", json.string(data.package_type)),
      #("updated_at", json.string(data.updated_at)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn nullable_simple_commit_decoder() {
  use message <- decode.field("message", decode.string)
  use committer <- decode.optional_field(
    "committer",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author <- decode.optional_field(
    "author",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use timestamp <- decode.field("timestamp", decode.string)
  use id <- decode.field("id", decode.string)
  use tree_id <- decode.field("tree_id", decode.string)
  decode.success(
    NullableSimpleCommit(
      message: message,
      committer: committer,
      author: author,
      timestamp: timestamp,
      id: id,
      tree_id: tree_id,
    ),
  )
}

pub fn nullable_simple_commit_encode(data: NullableSimpleCommit) {
  json.object(
    [
      #("message", json.string(data.message)),
      #(
        "committer",
        json.nullable(
          data.committer,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "author",
        json.nullable(
          data.author,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("timestamp", json.string(data.timestamp)),
      #("id", json.string(data.id)),
      #("tree_id", json.string(data.tree_id))
    ],
  )
}

pub fn secret_scanning_alert_resolution_webhook_decoder() {
  decode.string
}

pub fn secret_scanning_alert_resolution_webhook_encode(
  data: SecretScanningAlertResolutionWebhook,
) {
  json.string(data)
}

pub fn collaborator_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use role_name <- decode.field("role_name", decode.string)
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Collaborator(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      permissions: permissions,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      role_name: role_name,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn collaborator_encode(data: Collaborator) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("repos_url", json.string(data.repos_url)),
      #("role_name", json.string(data.role_name)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("node_id", json.string(data.node_id)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn community_profile_decoder() {
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use files <- decode.field(
    "files",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use documentation <- decode.optional_field(
    "documentation",
    None,
    decode.optional(decode.string),
  )
  use content_reports_enabled <- decode.optional_field(
    "content_reports_enabled",
    None,
    decode.optional(decode.bool),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use health_percentage <- decode.field("health_percentage", decode.int)
  decode.success(
    CommunityProfile(
      updated_at: updated_at,
      files: files,
      documentation: documentation,
      content_reports_enabled: content_reports_enabled,
      description: description,
      health_percentage: health_percentage,
    ),
  )
}

pub fn community_profile_encode(data: CommunityProfile) {
  json.object(
    [
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("files", fn(_) { panic as "Literal object inside field" }(data.files)),
      #("documentation", json.nullable(data.documentation, json.string)),
      #(
        "content_reports_enabled",
        json.nullable(data.content_reports_enabled, json.bool),
      ),
      #("description", json.nullable(data.description, json.string)),
      #("health_percentage", json.int(data.health_percentage))
    ],
  )
}

pub fn import__decoder() {
  use push_percent <- decode.optional_field(
    "push_percent",
    None,
    decode.optional(decode.int),
  )
  use svc_root <- decode.optional_field(
    "svc_root",
    None,
    decode.optional(decode.string),
  )
  use use_lfs <- decode.optional_field(
    "use_lfs",
    None,
    decode.optional(decode.bool),
  )
  use large_files_count <- decode.optional_field(
    "large_files_count",
    None,
    decode.optional(decode.int),
  )
  use vcs <- decode.optional_field("vcs", None, decode.optional(decode.string))
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.string),
  )
  use commit_count <- decode.optional_field(
    "commit_count",
    None,
    decode.optional(decode.int),
  )
  use import_percent <- decode.optional_field(
    "import_percent",
    None,
    decode.optional(decode.int),
  )
  use project_choices <- decode.optional_field(
    "project_choices",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use large_files_size <- decode.optional_field(
    "large_files_size",
    None,
    decode.optional(decode.int),
  )
  use failed_step <- decode.optional_field(
    "failed_step",
    None,
    decode.optional(decode.string),
  )
  use has_large_files <- decode.optional_field(
    "has_large_files",
    None,
    decode.optional(decode.bool),
  )
  use url <- decode.field("url", decode.string)
  use error_message <- decode.optional_field(
    "error_message",
    None,
    decode.optional(decode.string),
  )
  use status <- decode.field("status", decode.string)
  use vcs_url <- decode.field("vcs_url", decode.string)
  use svn_root <- decode.optional_field(
    "svn_root",
    None,
    decode.optional(decode.string),
  )
  use authors_url <- decode.field("authors_url", decode.string)
  use authors_count <- decode.optional_field(
    "authors_count",
    None,
    decode.optional(decode.int),
  )
  use tfvc_project <- decode.optional_field(
    "tfvc_project",
    None,
    decode.optional(decode.string),
  )
  use status_text <- decode.optional_field(
    "status_text",
    None,
    decode.optional(decode.string),
  )
  use repository_url <- decode.field("repository_url", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    Import(
      push_percent: push_percent,
      svc_root: svc_root,
      use_lfs: use_lfs,
      large_files_count: large_files_count,
      vcs: vcs,
      message: message,
      commit_count: commit_count,
      import_percent: import_percent,
      project_choices: project_choices,
      large_files_size: large_files_size,
      failed_step: failed_step,
      has_large_files: has_large_files,
      url: url,
      error_message: error_message,
      status: status,
      vcs_url: vcs_url,
      svn_root: svn_root,
      authors_url: authors_url,
      authors_count: authors_count,
      tfvc_project: tfvc_project,
      status_text: status_text,
      repository_url: repository_url,
      html_url: html_url,
    ),
  )
}

pub fn import__encode(data: Import) {
  json.object(
    [
      #("push_percent", json.nullable(data.push_percent, json.int)),
      #("svc_root", json.nullable(data.svc_root, json.string)),
      #("use_lfs", json.nullable(data.use_lfs, json.bool)),
      #("large_files_count", json.nullable(data.large_files_count, json.int)),
      #("vcs", json.nullable(data.vcs, json.string)),
      #("message", json.nullable(data.message, json.string)),
      #("commit_count", json.nullable(data.commit_count, json.int)),
      #("import_percent", json.nullable(data.import_percent, json.int)),
      #(
        "project_choices",
        json.nullable(
          data.project_choices,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("large_files_size", json.nullable(data.large_files_size, json.int)),
      #("failed_step", json.nullable(data.failed_step, json.string)),
      #("has_large_files", json.nullable(data.has_large_files, json.bool)),
      #("url", json.string(data.url)),
      #("error_message", json.nullable(data.error_message, json.string)),
      #("status", json.string(data.status)),
      #("vcs_url", json.string(data.vcs_url)),
      #("svn_root", json.nullable(data.svn_root, json.string)),
      #("authors_url", json.string(data.authors_url)),
      #("authors_count", json.nullable(data.authors_count, json.int)),
      #("tfvc_project", json.nullable(data.tfvc_project, json.string)),
      #("status_text", json.nullable(data.status_text, json.string)),
      #("repository_url", json.string(data.repository_url)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn copilot_usage_metrics_day_decoder() {
  use copilot_ide_chat <- decode.optional_field(
    "copilot_ide_chat",
    None,
    decode.optional(copilot_ide_chat_decoder()),
  )
  use total_active_users <- decode.optional_field(
    "total_active_users",
    None,
    decode.optional(decode.int),
  )
  use copilot_dotcom_pull_requests <- decode.optional_field(
    "copilot_dotcom_pull_requests",
    None,
    decode.optional(copilot_dotcom_pull_requests_decoder()),
  )
  use copilot_dotcom_chat <- decode.optional_field(
    "copilot_dotcom_chat",
    None,
    decode.optional(copilot_dotcom_chat_decoder()),
  )
  use copilot_ide_code_completions <- decode.optional_field(
    "copilot_ide_code_completions",
    None,
    decode.optional(copilot_ide_code_completions_decoder()),
  )
  use date <- decode.field("date", decode.string)
  use total_engaged_users <- decode.optional_field(
    "total_engaged_users",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CopilotUsageMetricsDay(
      copilot_ide_chat: copilot_ide_chat,
      total_active_users: total_active_users,
      copilot_dotcom_pull_requests: copilot_dotcom_pull_requests,
      copilot_dotcom_chat: copilot_dotcom_chat,
      copilot_ide_code_completions: copilot_ide_code_completions,
      date: date,
      total_engaged_users: total_engaged_users,
    ),
  )
}

pub fn copilot_usage_metrics_day_encode(data: CopilotUsageMetricsDay) {
  json.object(
    [
      #(
        "copilot_ide_chat",
        json.nullable(data.copilot_ide_chat, copilot_ide_chat_encode),
      ),
      #("total_active_users", json.nullable(data.total_active_users, json.int)),
      #(
        "copilot_dotcom_pull_requests",
        json.nullable(
          data.copilot_dotcom_pull_requests,
          copilot_dotcom_pull_requests_encode,
        ),
      ),
      #(
        "copilot_dotcom_chat",
        json.nullable(data.copilot_dotcom_chat, copilot_dotcom_chat_encode),
      ),
      #(
        "copilot_ide_code_completions",
        json.nullable(
          data.copilot_ide_code_completions,
          copilot_ide_code_completions_encode,
        ),
      ),
      #("date", json.string(data.date)),
      #("total_engaged_users", json.nullable(data.total_engaged_users, json.int))
    ],
  )
}

pub fn repository_rule_commit_author_email_pattern_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleCommitAuthorEmailPattern(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_commit_author_email_pattern_encode(
  data: RepositoryRuleCommitAuthorEmailPattern,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn user_marketplace_purchase_decoder() {
  use billing_cycle <- decode.field("billing_cycle", decode.string)
  use on_free_trial <- decode.field("on_free_trial", decode.bool)
  use plan <- decode.field("plan", marketplace_listing_plan_decoder())
  use free_trial_ends_on <- decode.optional_field(
    "free_trial_ends_on",
    None,
    decode.optional(decode.string),
  )
  use account <- decode.field("account", marketplace_account_decoder())
  use unit_count <- decode.optional_field(
    "unit_count",
    None,
    decode.optional(decode.int),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use next_billing_date <- decode.optional_field(
    "next_billing_date",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    UserMarketplacePurchase(
      billing_cycle: billing_cycle,
      on_free_trial: on_free_trial,
      plan: plan,
      free_trial_ends_on: free_trial_ends_on,
      account: account,
      unit_count: unit_count,
      updated_at: updated_at,
      next_billing_date: next_billing_date,
    ),
  )
}

pub fn user_marketplace_purchase_encode(data: UserMarketplacePurchase) {
  json.object(
    [
      #("billing_cycle", json.string(data.billing_cycle)),
      #("on_free_trial", json.bool(data.on_free_trial)),
      #("plan", marketplace_listing_plan_encode(data.plan)),
      #(
        "free_trial_ends_on",
        json.nullable(data.free_trial_ends_on, json.string),
      ),
      #("account", marketplace_account_encode(data.account)),
      #("unit_count", json.nullable(data.unit_count, json.int)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("next_billing_date", json.nullable(data.next_billing_date, json.string))
    ],
  )
}

pub fn dependabot_alert_with_repository_decoder() {
  use dismissed_comment <- decode.optional_field(
    "dismissed_comment",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", alert_number_decoder())
  use dismissed_at <- decode.field("dismissed_at", alert_dismissed_at_decoder())
  use created_at <- decode.field("created_at", alert_created_at_decoder())
  use repository <- decode.field("repository", simple_repository_decoder())
  use dependency <- decode.field(
    "dependency",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use dismissed_by <- decode.field(
    "dismissed_by",
    nullable_simple_user_decoder(),
  )
  use url <- decode.field("url", alert_url_decoder())
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", alert_updated_at_decoder())
  use security_advisory <- decode.field(
    "security_advisory",
    dependabot_alert_security_advisory_decoder(),
  )
  use auto_dismissed_at <- decode.optional_field(
    "auto_dismissed_at",
    None,
    decode.optional(alert_auto_dismissed_at_decoder()),
  )
  use dismissed_reason <- decode.optional_field(
    "dismissed_reason",
    None,
    decode.optional(decode.string),
  )
  use html_url <- decode.field("html_url", alert_html_url_decoder())
  use security_vulnerability <- decode.field(
    "security_vulnerability",
    dependabot_alert_security_vulnerability_decoder(),
  )
  use fixed_at <- decode.field("fixed_at", alert_fixed_at_decoder())
  decode.success(
    DependabotAlertWithRepository(
      dismissed_comment: dismissed_comment,
      number: number,
      dismissed_at: dismissed_at,
      created_at: created_at,
      repository: repository,
      dependency: dependency,
      dismissed_by: dismissed_by,
      url: url,
      state: state,
      updated_at: updated_at,
      security_advisory: security_advisory,
      auto_dismissed_at: auto_dismissed_at,
      dismissed_reason: dismissed_reason,
      html_url: html_url,
      security_vulnerability: security_vulnerability,
      fixed_at: fixed_at,
    ),
  )
}

pub fn dependabot_alert_with_repository_encode(
  data: DependabotAlertWithRepository,
) {
  json.object(
    [
      #("dismissed_comment", json.nullable(data.dismissed_comment, json.string)),
      #("number", alert_number_encode(data.number)),
      #("dismissed_at", alert_dismissed_at_encode(data.dismissed_at)),
      #("created_at", alert_created_at_encode(data.created_at)),
      #("repository", simple_repository_encode(data.repository)),
      #(
        "dependency",
        fn(_) { panic as "Literal object inside field" }(data.dependency),
      ),
      #("dismissed_by", nullable_simple_user_encode(data.dismissed_by)),
      #("url", alert_url_encode(data.url)),
      #("state", json.string(data.state)),
      #("updated_at", alert_updated_at_encode(data.updated_at)),
      #(
        "security_advisory",
        dependabot_alert_security_advisory_encode(data.security_advisory),
      ),
      #(
        "auto_dismissed_at",
        json.nullable(data.auto_dismissed_at, alert_auto_dismissed_at_encode),
      ),
      #("dismissed_reason", json.nullable(data.dismissed_reason, json.string)),
      #("html_url", alert_html_url_encode(data.html_url)),
      #(
        "security_vulnerability",
        dependabot_alert_security_vulnerability_encode(
          data.security_vulnerability,
        ),
      ),
      #("fixed_at", alert_fixed_at_encode(data.fixed_at))
    ],
  )
}

pub fn commit_activity_decoder() {
  use total <- decode.field("total", decode.int)
  use week <- decode.field("week", decode.int)
  use days <- decode.field("days", decode.list(decode.int))
  decode.success(CommitActivity(total: total, week: week, days: days))
}

pub fn commit_activity_encode(data: CommitActivity) {
  json.object(
    [
      #("total", json.int(data.total)),
      #("week", json.int(data.week)),
      #("days", json.array(_, json.int)(data.days))
    ],
  )
}

pub fn webhook_merge_group_checks_requested_decoder() {
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use merge_group <- decode.field("merge_group", merge_group_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMergeGroupChecksRequested(
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      merge_group: merge_group,
      installation: installation,
    ),
  )
}

pub fn webhook_merge_group_checks_requested_encode(
  data: WebhookMergeGroupChecksRequested,
) {
  json.object(
    [
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #("merge_group", merge_group_encode(data.merge_group)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn deployment_decoder() {
  use original_environment <- decode.optional_field(
    "original_environment",
    None,
    decode.optional(decode.string),
  )
  use task <- decode.field("task", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use sha <- decode.field("sha", decode.string)
  use production_environment <- decode.optional_field(
    "production_environment",
    None,
    decode.optional(decode.bool),
  )
  use payload <- decode.field(
    "payload",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use url <- decode.field("url", decode.string)
  use statuses_url <- decode.field("statuses_url", decode.string)
  use ref <- decode.field("ref", decode.string)
  use environment <- decode.field("environment", decode.string)
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use transient_environment <- decode.optional_field(
    "transient_environment",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    Deployment(
      original_environment: original_environment,
      task: task,
      created_at: created_at,
      creator: creator,
      sha: sha,
      production_environment: production_environment,
      payload: payload,
      url: url,
      statuses_url: statuses_url,
      ref: ref,
      environment: environment,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      repository_url: repository_url,
      id: id,
      description: description,
      transient_environment: transient_environment,
    ),
  )
}

pub fn deployment_encode(data: Deployment) {
  json.object(
    [
      #(
        "original_environment",
        json.nullable(data.original_environment, json.string),
      ),
      #("task", json.string(data.task)),
      #("created_at", json.string(data.created_at)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("sha", json.string(data.sha)),
      #(
        "production_environment",
        json.nullable(data.production_environment, json.bool),
      ),
      #("payload", fn(_) { panic as "OneOf inside field" }(data.payload)),
      #("url", json.string(data.url)),
      #("statuses_url", json.string(data.statuses_url)),
      #("ref", json.string(data.ref)),
      #("environment", json.string(data.environment)),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string)),
      #(
        "transient_environment",
        json.nullable(data.transient_environment, json.bool),
      )
    ],
  )
}

pub fn webhook_release_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use release <- decode.field("release", webhooks_release_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleaseEdited(
      enterprise: enterprise,
      changes: changes,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_edited_encode(data: WebhookReleaseEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #("release", webhooks_release_encode(data.release)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_config_secret_decoder() {
  decode.string
}

pub fn webhook_config_secret_encode(data: WebhookConfigSecret) {
  json.string(data)
}

pub fn webhook_discussion_unanswered_decoder() {
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use old_answer <- decode.field("old_answer", webhooks_answer_decoder())
  use action <- decode.field("action", decode.string)
  decode.success(
    WebhookDiscussionUnanswered(
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      old_answer: old_answer,
      action: action,
    ),
  )
}

pub fn webhook_discussion_unanswered_encode(data: WebhookDiscussionUnanswered) {
  json.object(
    [
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("old_answer", webhooks_answer_encode(data.old_answer)),
      #("action", json.string(data.action))
    ],
  )
}

pub fn simple_repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use branches_url <- decode.field("branches_url", decode.string)
  use forks_url <- decode.field("forks_url", decode.string)
  use fork <- decode.field("fork", decode.bool)
  use private <- decode.field("private", decode.bool)
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use trees_url <- decode.field("trees_url", decode.string)
  use blobs_url <- decode.field("blobs_url", decode.string)
  use teams_url <- decode.field("teams_url", decode.string)
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use statuses_url <- decode.field("statuses_url", decode.string)
  use archive_url <- decode.field("archive_url", decode.string)
  use milestones_url <- decode.field("milestones_url", decode.string)
  use owner <- decode.field("owner", simple_user_decoder())
  use assignees_url <- decode.field("assignees_url", decode.string)
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use notifications_url <- decode.field("notifications_url", decode.string)
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use id <- decode.field("id", decode.int)
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use pulls_url <- decode.field("pulls_url", decode.string)
  use deployments_url <- decode.field("deployments_url", decode.string)
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  decode.success(
    SimpleRepository(
      hooks_url: hooks_url,
      branches_url: branches_url,
      forks_url: forks_url,
      fork: fork,
      private: private,
      keys_url: keys_url,
      comments_url: comments_url,
      trees_url: trees_url,
      blobs_url: blobs_url,
      teams_url: teams_url,
      stargazers_url: stargazers_url,
      contributors_url: contributors_url,
      tags_url: tags_url,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      commits_url: commits_url,
      subscription_url: subscription_url,
      issue_events_url: issue_events_url,
      labels_url: labels_url,
      url: url,
      statuses_url: statuses_url,
      archive_url: archive_url,
      milestones_url: milestones_url,
      owner: owner,
      assignees_url: assignees_url,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      node_id: node_id,
      notifications_url: notifications_url,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      id: id,
      full_name: full_name,
      html_url: html_url,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      pulls_url: pulls_url,
      deployments_url: deployments_url,
      git_commits_url: git_commits_url,
    ),
  )
}

pub fn simple_repository_encode(data: SimpleRepository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("branches_url", json.string(data.branches_url)),
      #("forks_url", json.string(data.forks_url)),
      #("fork", json.bool(data.fork)),
      #("private", json.bool(data.private)),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("trees_url", json.string(data.trees_url)),
      #("blobs_url", json.string(data.blobs_url)),
      #("teams_url", json.string(data.teams_url)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("statuses_url", json.string(data.statuses_url)),
      #("archive_url", json.string(data.archive_url)),
      #("milestones_url", json.string(data.milestones_url)),
      #("owner", simple_user_encode(data.owner)),
      #("assignees_url", json.string(data.assignees_url)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #("node_id", json.string(data.node_id)),
      #("notifications_url", json.string(data.notifications_url)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("id", json.int(data.id)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("pulls_url", json.string(data.pulls_url)),
      #("deployments_url", json.string(data.deployments_url)),
      #("git_commits_url", json.string(data.git_commits_url))
    ],
  )
}

pub fn issue_event_rename_decoder() {
  use from <- decode.field("from", decode.string)
  use to <- decode.field("to", decode.string)
  decode.success(IssueEventRename(from: from, to: to))
}

pub fn issue_event_rename_encode(data: IssueEventRename) {
  json.object([#("from", json.string(data.from)), #("to", json.string(data.to))])
}

pub fn webhook_repository_ruleset_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use repository_ruleset <- decode.field(
    "repository_ruleset",
    repository_ruleset_decoder(),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookRepositoryRulesetDeleted(
      enterprise: enterprise,
      repository: repository,
      repository_ruleset: repository_ruleset,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_repository_ruleset_deleted_encode(
  data: WebhookRepositoryRulesetDeleted,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("repository_ruleset", repository_ruleset_encode(data.repository_ruleset)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_variant_analysis_language_decoder() {
  decode.string
}

pub fn code_scanning_variant_analysis_language_encode(
  data: CodeScanningVariantAnalysisLanguage,
) {
  json.string(data)
}

pub fn webhook_pull_request_demilestoned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(milestone_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use pull_request <- decode.field(
    "pull_request",
    webhooks_pull_request_5_decoder(),
  )
  use action <- decode.field("action", decode.string)
  decode.success(
    WebhookPullRequestDemilestoned(
      enterprise: enterprise,
      number: number,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
    ),
  )
}

pub fn webhook_pull_request_demilestoned_encode(
  data: WebhookPullRequestDemilestoned,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", json.nullable(data.milestone, milestone_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("pull_request", webhooks_pull_request_5_encode(data.pull_request)),
      #("action", json.string(data.action))
    ],
  )
}

pub fn code_scanning_ref_full_decoder() {
  decode.string
}

pub fn code_scanning_ref_full_encode(data: CodeScanningRefFull) {
  json.string(data)
}

pub fn secret_scanning_location_pull_request_review_decoder() {
  use pull_request_review_url <- decode.field(
    "pull_request_review_url",
    decode.string,
  )
  decode.success(
    SecretScanningLocationPullRequestReview(
      pull_request_review_url: pull_request_review_url,
    ),
  )
}

pub fn secret_scanning_location_pull_request_review_encode(
  data: SecretScanningLocationPullRequestReview,
) {
  json.object(
    [#("pull_request_review_url", json.string(data.pull_request_review_url))],
  )
}

pub fn webhook_code_scanning_alert_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use commit_oid <- decode.field(
    "commit_oid",
    webhooks_code_scanning_commit_oid_decoder(),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.field("ref", webhooks_code_scanning_ref_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookCodeScanningAlertCreated(
      enterprise: enterprise,
      commit_oid: commit_oid,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_code_scanning_alert_created_encode(
  data: WebhookCodeScanningAlertCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("commit_oid", webhooks_code_scanning_commit_oid_encode(data.commit_oid)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", webhooks_code_scanning_ref_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn webhook_workflow_job_waiting_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow_job <- decode.field(
    "workflow_job",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookWorkflowJobWaiting(
      enterprise: enterprise,
      deployment: deployment,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow_job: workflow_job,
    ),
  )
}

pub fn webhook_workflow_job_waiting_encode(data: WebhookWorkflowJobWaiting) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("deployment", json.nullable(data.deployment, deployment_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "workflow_job",
        fn(_) { panic as "Literal object inside field" }(data.workflow_job),
      )
    ],
  )
}

pub fn state_change_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use state_reason <- decode.optional_field(
    "state_reason",
    None,
    decode.optional(decode.string),
  )
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    StateChangeIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      state_reason: state_reason,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn state_change_issue_event_encode(data: StateChangeIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("state_reason", json.nullable(data.state_reason, json.string)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn code_frequency_stat_decoder() {
  decode.list(decode.int)
}

pub fn code_frequency_stat_encode(data: CodeFrequencyStat) {
  json.array(data, json.int)
}

pub fn branch_protection_decoder() {
  use allow_fork_syncing <- decode.optional_field(
    "allow_fork_syncing",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use enforce_admins <- decode.optional_field(
    "enforce_admins",
    None,
    decode.optional(protected_branch_admin_enforced_decoder()),
  )
  use enabled <- decode.optional_field(
    "enabled",
    None,
    decode.optional(decode.bool),
  )
  use block_creations <- decode.optional_field(
    "block_creations",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use restrictions <- decode.optional_field(
    "restrictions",
    None,
    decode.optional(branch_restriction_policy_decoder()),
  )
  use required_conversation_resolution <- decode.optional_field(
    "required_conversation_resolution",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use protection_url <- decode.optional_field(
    "protection_url",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use allow_deletions <- decode.optional_field(
    "allow_deletions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use required_pull_request_reviews <- decode.optional_field(
    "required_pull_request_reviews",
    None,
    decode.optional(protected_branch_pull_request_review_decoder()),
  )
  use allow_force_pushes <- decode.optional_field(
    "allow_force_pushes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use lock_branch <- decode.optional_field(
    "lock_branch",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use required_status_checks <- decode.optional_field(
    "required_status_checks",
    None,
    decode.optional(protected_branch_required_status_check_decoder()),
  )
  use required_linear_history <- decode.optional_field(
    "required_linear_history",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use required_signatures <- decode.optional_field(
    "required_signatures",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    BranchProtection(
      allow_fork_syncing: allow_fork_syncing,
      enforce_admins: enforce_admins,
      enabled: enabled,
      block_creations: block_creations,
      restrictions: restrictions,
      required_conversation_resolution: required_conversation_resolution,
      protection_url: protection_url,
      name: name,
      allow_deletions: allow_deletions,
      url: url,
      required_pull_request_reviews: required_pull_request_reviews,
      allow_force_pushes: allow_force_pushes,
      lock_branch: lock_branch,
      required_status_checks: required_status_checks,
      required_linear_history: required_linear_history,
      required_signatures: required_signatures,
    ),
  )
}

pub fn branch_protection_encode(data: BranchProtection) {
  json.object(
    [
      #(
        "allow_fork_syncing",
        json.nullable(
          data.allow_fork_syncing,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "enforce_admins",
        json.nullable(
          data.enforce_admins,
          protected_branch_admin_enforced_encode,
        ),
      ),
      #("enabled", json.nullable(data.enabled, json.bool)),
      #(
        "block_creations",
        json.nullable(
          data.block_creations,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "restrictions",
        json.nullable(data.restrictions, branch_restriction_policy_encode),
      ),
      #(
        "required_conversation_resolution",
        json.nullable(
          data.required_conversation_resolution,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("protection_url", json.nullable(data.protection_url, json.string)),
      #("name", json.nullable(data.name, json.string)),
      #(
        "allow_deletions",
        json.nullable(
          data.allow_deletions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.nullable(data.url, json.string)),
      #(
        "required_pull_request_reviews",
        json.nullable(
          data.required_pull_request_reviews,
          protected_branch_pull_request_review_encode,
        ),
      ),
      #(
        "allow_force_pushes",
        json.nullable(
          data.allow_force_pushes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "lock_branch",
        json.nullable(
          data.lock_branch,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "required_status_checks",
        json.nullable(
          data.required_status_checks,
          protected_branch_required_status_check_encode,
        ),
      ),
      #(
        "required_linear_history",
        json.nullable(
          data.required_linear_history,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "required_signatures",
        json.nullable(
          data.required_signatures,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_release_prereleased_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use release <- decode.field(
    "release",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookReleasePrereleased(
      enterprise: enterprise,
      release: release,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_release_prereleased_encode(data: WebhookReleasePrereleased) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "release",
        fn(_) { panic as "Literal object inside field" }(data.release),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_personal_access_token_request_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use personal_access_token_request <- decode.field(
    "personal_access_token_request",
    personal_access_token_request_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPersonalAccessTokenRequestCreated(
      enterprise: enterprise,
      personal_access_token_request: personal_access_token_request,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_personal_access_token_request_created_encode(
  data: WebhookPersonalAccessTokenRequestCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "personal_access_token_request",
        personal_access_token_request_encode(data.personal_access_token_request),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_codeql_database_decoder() {
  use content_type <- decode.field("content_type", decode.string)
  use size <- decode.field("size", decode.int)
  use commit_oid <- decode.optional_field(
    "commit_oid",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use uploader <- decode.field("uploader", simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use language <- decode.field("language", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    CodeScanningCodeqlDatabase(
      content_type: content_type,
      size: size,
      commit_oid: commit_oid,
      created_at: created_at,
      name: name,
      uploader: uploader,
      url: url,
      updated_at: updated_at,
      language: language,
      id: id,
    ),
  )
}

pub fn code_scanning_codeql_database_encode(data: CodeScanningCodeqlDatabase) {
  json.object(
    [
      #("content_type", json.string(data.content_type)),
      #("size", json.int(data.size)),
      #("commit_oid", json.nullable(data.commit_oid, json.string)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("uploader", simple_user_encode(data.uploader)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("language", json.string(data.language)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhooks_release_decoder() {
  use draft <- decode.field("draft", decode.bool)
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use assets <- decode.field(
    "assets",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use prerelease <- decode.field("prerelease", decode.bool)
  use published_at <- decode.optional_field(
    "published_at",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use author <- decode.optional_field(
    "author",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use url <- decode.field("url", decode.string)
  use tag_name <- decode.field("tag_name", decode.string)
  use zipball_url <- decode.optional_field(
    "zipball_url",
    None,
    decode.optional(decode.string),
  )
  use upload_url <- decode.field("upload_url", decode.string)
  use assets_url <- decode.field("assets_url", decode.string)
  use tarball_url <- decode.optional_field(
    "tarball_url",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use discussion_url <- decode.optional_field(
    "discussion_url",
    None,
    decode.optional(decode.string),
  )
  use target_commitish <- decode.field("target_commitish", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksRelease(
      draft: draft,
      body: body,
      assets: assets,
      prerelease: prerelease,
      published_at: published_at,
      created_at: created_at,
      reactions: reactions,
      author: author,
      name: name,
      url: url,
      tag_name: tag_name,
      zipball_url: zipball_url,
      upload_url: upload_url,
      assets_url: assets_url,
      tarball_url: tarball_url,
      node_id: node_id,
      discussion_url: discussion_url,
      target_commitish: target_commitish,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_release_encode(data: WebhooksRelease) {
  json.object(
    [
      #("draft", json.bool(data.draft)),
      #("body", json.nullable(data.body, json.string)),
      #(
        "assets",
        json.array(_, fn(_) { panic as "object in array" })(data.assets),
      ),
      #("prerelease", json.bool(data.prerelease)),
      #("published_at", json.nullable(data.published_at, json.string)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #(
        "reactions",
        json.nullable(
          data.reactions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "author",
        json.nullable(
          data.author,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("name", json.nullable(data.name, json.string)),
      #("url", json.string(data.url)),
      #("tag_name", json.string(data.tag_name)),
      #("zipball_url", json.nullable(data.zipball_url, json.string)),
      #("upload_url", json.string(data.upload_url)),
      #("assets_url", json.string(data.assets_url)),
      #("tarball_url", json.nullable(data.tarball_url, json.string)),
      #("node_id", json.string(data.node_id)),
      #("discussion_url", json.nullable(data.discussion_url, json.string)),
      #("target_commitish", json.string(data.target_commitish)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_check_run_completed_form_encoded_decoder() {
  use payload <- decode.field("payload", decode.string)
  decode.success(WebhookCheckRunCompletedFormEncoded(payload: payload))
}

pub fn webhook_check_run_completed_form_encoded_encode(
  data: WebhookCheckRunCompletedFormEncoded,
) {
  json.object([#("payload", json.string(data.payload))])
}

pub fn interaction_group_decoder() {
  decode.string
}

pub fn interaction_group_encode(data: InteractionGroup) {
  json.string(data)
}

pub fn webhook_issues_unassigned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use assignee <- decode.optional_field(
    "assignee",
    None,
    decode.optional(webhooks_user_mannequin_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field("issue", webhooks_issue_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesUnassigned(
      enterprise: enterprise,
      repository: repository,
      assignee: assignee,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_unassigned_encode(data: WebhookIssuesUnassigned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("assignee", json.nullable(data.assignee, webhooks_user_mannequin_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", webhooks_issue_encode(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_pull_request_dequeued_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use reason <- decode.field("reason", decode.string)
  use number <- decode.field("number", decode.int)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestDequeued(
      enterprise: enterprise,
      reason: reason,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_dequeued_encode(data: WebhookPullRequestDequeued) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("reason", json.string(data.reason)),
      #("number", json.int(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn authentication_token_decoder() {
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repositories <- decode.optional_field(
    "repositories",
    None,
    decode.optional(decode.list(repository_decoder())),
  )
  use single_file <- decode.optional_field(
    "single_file",
    None,
    decode.optional(decode.string),
  )
  use repository_selection <- decode.optional_field(
    "repository_selection",
    None,
    decode.optional(decode.string),
  )
  use token_ <- decode.field("token", decode.string)
  use expires_at <- decode.field("expires_at", decode.string)
  decode.success(
    AuthenticationToken(
      permissions: permissions,
      repositories: repositories,
      single_file: single_file,
      repository_selection: repository_selection,
      token_: token_,
      expires_at: expires_at,
    ),
  )
}

pub fn authentication_token_encode(data: AuthenticationToken) {
  json.object(
    [
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "repositories",
        json.nullable(data.repositories, json.array(_, repository_encode)),
      ),
      #("single_file", json.nullable(data.single_file, json.string)),
      #(
        "repository_selection",
        json.nullable(data.repository_selection, json.string),
      ),
      #("token", json.string(data.token_)),
      #("expires_at", json.string(data.expires_at))
    ],
  )
}

pub fn webhook_pull_request_milestoned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use milestone <- decode.optional_field(
    "milestone",
    None,
    decode.optional(milestone_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use pull_request <- decode.field(
    "pull_request",
    webhooks_pull_request_5_decoder(),
  )
  use action <- decode.field("action", decode.string)
  decode.success(
    WebhookPullRequestMilestoned(
      enterprise: enterprise,
      number: number,
      repository: repository,
      milestone: milestone,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
    ),
  )
}

pub fn webhook_pull_request_milestoned_encode(data: WebhookPullRequestMilestoned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("milestone", json.nullable(data.milestone, milestone_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("pull_request", webhooks_pull_request_5_encode(data.pull_request)),
      #("action", json.string(data.action))
    ],
  )
}

pub fn webhook_dependabot_alert_auto_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertAutoReopened(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_auto_reopened_encode(
  data: WebhookDependabotAlertAutoReopened,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn nullable_milestone_decoder() {
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", decode.int)
  use due_on <- decode.optional_field(
    "due_on",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use closed_issues <- decode.field("closed_issues", decode.int)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    NullableMilestone(
      closed_at: closed_at,
      number: number,
      due_on: due_on,
      created_at: created_at,
      creator: creator,
      closed_issues: closed_issues,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn nullable_milestone_encode(data: NullableMilestone) {
  json.object(
    [
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("number", json.int(data.number)),
      #("due_on", json.nullable(data.due_on, json.string)),
      #("created_at", json.string(data.created_at)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("closed_issues", json.int(data.closed_issues)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn snapshot_decoder() {
  use manifests <- decode.optional_field(
    "manifests",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use detector <- decode.field(
    "detector",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use sha <- decode.field("sha", decode.string)
  use metadata <- decode.optional_field(
    "metadata",
    None,
    decode.optional(metadata_decoder()),
  )
  use scanned <- decode.field("scanned", decode.string)
  use ref <- decode.field("ref", decode.string)
  use version <- decode.field("version", decode.int)
  use job <- decode.field(
    "job",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    Snapshot(
      manifests: manifests,
      detector: detector,
      sha: sha,
      metadata: metadata,
      scanned: scanned,
      ref: ref,
      version: version,
      job: job,
    ),
  )
}

pub fn snapshot_encode(data: Snapshot) {
  json.object(
    [
      #(
        "manifests",
        json.nullable(
          data.manifests,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "detector",
        fn(_) { panic as "Literal object inside field" }(data.detector),
      ),
      #("sha", json.string(data.sha)),
      #("metadata", json.nullable(data.metadata, metadata_encode)),
      #("scanned", json.string(data.scanned)),
      #("ref", json.string(data.ref)),
      #("version", json.int(data.version)),
      #("job", fn(_) { panic as "Literal object inside field" }(data.job))
    ],
  )
}

pub fn webhook_sponsorship_cancelled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use sponsorship <- decode.field("sponsorship", webhooks_sponsorship_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookSponsorshipCancelled(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      sponsorship: sponsorship,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_sponsorship_cancelled_encode(data: WebhookSponsorshipCancelled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("sponsorship", webhooks_sponsorship_encode(data.sponsorship)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_alert_state_decoder() {
  decode.string
}

pub fn code_scanning_alert_state_encode(data: CodeScanningAlertState) {
  json.string(data)
}

pub fn webhook_pull_request_review_dismissed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use review <- decode.field(
    "review",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestReviewDismissed(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      review: review,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_review_dismissed_encode(
  data: WebhookPullRequestReviewDismissed,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #("review", fn(_) { panic as "Literal object inside field" }(data.review)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_projects_v2_project_reopened_decoder() {
  use projects_v2 <- decode.field("projects_v2", projects_v2_decoder())
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ProjectReopened(
      projects_v2: projects_v2,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_project_reopened_encode(
  data: WebhookProjectsV2ProjectReopened,
) {
  json.object(
    [
      #("projects_v2", projects_v2_encode(data.projects_v2)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn project_card_decoder() {
  use project_id <- decode.optional_field(
    "project_id",
    None,
    decode.optional(decode.string),
  )
  use archived <- decode.optional_field(
    "archived",
    None,
    decode.optional(decode.bool),
  )
  use column_url <- decode.field("column_url", decode.string)
  use content_url <- decode.optional_field(
    "content_url",
    None,
    decode.optional(decode.string),
  )
  use project_url <- decode.field("project_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.field("creator", nullable_simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use note <- decode.optional_field("note", None, decode.optional(decode.string))
  use column_name <- decode.optional_field(
    "column_name",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    ProjectCard(
      project_id: project_id,
      archived: archived,
      column_url: column_url,
      content_url: content_url,
      project_url: project_url,
      created_at: created_at,
      creator: creator,
      url: url,
      note: note,
      column_name: column_name,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
    ),
  )
}

pub fn project_card_encode(data: ProjectCard) {
  json.object(
    [
      #("project_id", json.nullable(data.project_id, json.string)),
      #("archived", json.nullable(data.archived, json.bool)),
      #("column_url", json.string(data.column_url)),
      #("content_url", json.nullable(data.content_url, json.string)),
      #("project_url", json.string(data.project_url)),
      #("created_at", json.string(data.created_at)),
      #("creator", nullable_simple_user_encode(data.creator)),
      #("url", json.string(data.url)),
      #("note", json.nullable(data.note, json.string)),
      #("column_name", json.nullable(data.column_name, json.string)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_discussion_labeled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.field("label", webhooks_label_decoder())
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionLabeled(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_labeled_encode(data: WebhookDiscussionLabeled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", webhooks_label_encode(data.label)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn alert_auto_dismissed_at_decoder() {
  decode.string
}

pub fn alert_auto_dismissed_at_encode(data: AlertAutoDismissedAt) {
  json.string(data)
}

pub fn prevent_self_review_decoder() {
  decode.bool
}

pub fn prevent_self_review_encode(data: PreventSelfReview) {
  json.bool(data)
}

pub fn global_advisory_decoder() {
  use cwes <- decode.optional_field(
    "cwes",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use source_code_location <- decode.optional_field(
    "source_code_location",
    None,
    decode.optional(decode.string),
  )
  use published_at <- decode.field("published_at", decode.string)
  use summary <- decode.field("summary", decode.string)
  use cvss_severities <- decode.optional_field(
    "cvss_severities",
    None,
    decode.optional(cvss_severities_decoder()),
  )
  use nvd_published_at <- decode.optional_field(
    "nvd_published_at",
    None,
    decode.optional(decode.string),
  )
  use cve_id <- decode.optional_field(
    "cve_id",
    None,
    decode.optional(decode.string),
  )
  use references <- decode.optional_field(
    "references",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use identifiers <- decode.optional_field(
    "identifiers",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use epss <- decode.optional_field(
    "epss",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use ghsa_id <- decode.field("ghsa_id", decode.string)
  use withdrawn_at <- decode.optional_field(
    "withdrawn_at",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use cvss <- decode.optional_field(
    "cvss",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use credits <- decode.optional_field(
    "credits",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use vulnerabilities <- decode.optional_field(
    "vulnerabilities",
    None,
    decode.optional(decode.list(vulnerability_decoder())),
  )
  use type_ <- decode.field("type", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use severity <- decode.field("severity", decode.string)
  use repository_advisory_url <- decode.optional_field(
    "repository_advisory_url",
    None,
    decode.optional(decode.string),
  )
  use github_reviewed_at <- decode.optional_field(
    "github_reviewed_at",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    GlobalAdvisory(
      cwes: cwes,
      source_code_location: source_code_location,
      published_at: published_at,
      summary: summary,
      cvss_severities: cvss_severities,
      nvd_published_at: nvd_published_at,
      cve_id: cve_id,
      references: references,
      identifiers: identifiers,
      epss: epss,
      ghsa_id: ghsa_id,
      withdrawn_at: withdrawn_at,
      url: url,
      cvss: cvss,
      updated_at: updated_at,
      credits: credits,
      vulnerabilities: vulnerabilities,
      type_: type_,
      html_url: html_url,
      description: description,
      severity: severity,
      repository_advisory_url: repository_advisory_url,
      github_reviewed_at: github_reviewed_at,
    ),
  )
}

pub fn global_advisory_encode(data: GlobalAdvisory) {
  json.object(
    [
      #(
        "cwes",
        json.nullable(
          data.cwes,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "source_code_location",
        json.nullable(data.source_code_location, json.string),
      ),
      #("published_at", json.string(data.published_at)),
      #("summary", json.string(data.summary)),
      #(
        "cvss_severities",
        json.nullable(data.cvss_severities, cvss_severities_encode),
      ),
      #("nvd_published_at", json.nullable(data.nvd_published_at, json.string)),
      #("cve_id", json.nullable(data.cve_id, json.string)),
      #("references", json.nullable(data.references, json.array(_, json.string))),
      #(
        "identifiers",
        json.nullable(
          data.identifiers,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "epss",
        json.nullable(
          data.epss,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("ghsa_id", json.string(data.ghsa_id)),
      #("withdrawn_at", json.nullable(data.withdrawn_at, json.string)),
      #("url", json.string(data.url)),
      #(
        "cvss",
        json.nullable(
          data.cvss,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("updated_at", json.string(data.updated_at)),
      #(
        "credits",
        json.nullable(
          data.credits,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #(
        "vulnerabilities",
        json.nullable(data.vulnerabilities, json.array(_, vulnerability_encode)),
      ),
      #("type", json.string(data.type_)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string)),
      #("severity", json.string(data.severity)),
      #(
        "repository_advisory_url",
        json.nullable(data.repository_advisory_url, json.string),
      ),
      #(
        "github_reviewed_at",
        json.nullable(data.github_reviewed_at, json.string),
      )
    ],
  )
}

pub fn webhook_member_added_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use member <- decode.field("member", webhooks_user_decoder())
  decode.success(
    WebhookMemberAdded(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      member: member,
    ),
  )
}

pub fn webhook_member_added_encode(data: WebhookMemberAdded) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("member", webhooks_user_encode(data.member))
    ],
  )
}

pub fn webhook_code_scanning_alert_closed_by_user_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use commit_oid <- decode.field(
    "commit_oid",
    webhooks_code_scanning_commit_oid_decoder(),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use ref <- decode.field("ref", webhooks_code_scanning_ref_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field(
    "alert",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookCodeScanningAlertClosedByUser(
      enterprise: enterprise,
      commit_oid: commit_oid,
      repository: repository,
      ref: ref,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_code_scanning_alert_closed_by_user_encode(
  data: WebhookCodeScanningAlertClosedByUser,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("commit_oid", webhooks_code_scanning_commit_oid_encode(data.commit_oid)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("ref", webhooks_code_scanning_ref_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", fn(_) { panic as "Literal object inside field" }(data.alert))
    ],
  )
}

pub fn codespaces_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use visibility <- decode.field("visibility", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use selected_repositories_url <- decode.field(
    "selected_repositories_url",
    decode.string,
  )
  decode.success(
    CodespacesSecret(
      created_at: created_at,
      name: name,
      visibility: visibility,
      updated_at: updated_at,
      selected_repositories_url: selected_repositories_url,
    ),
  )
}

pub fn codespaces_secret_encode(data: CodespacesSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("visibility", json.string(data.visibility)),
      #("updated_at", json.string(data.updated_at)),
      #("selected_repositories_url", json.string(data.selected_repositories_url))
    ],
  )
}

pub fn webhook_pull_request_labeled_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use label <- decode.optional_field(
    "label",
    None,
    decode.optional(webhooks_label_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookPullRequestLabeled(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      label: label,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_pull_request_labeled_encode(data: WebhookPullRequestLabeled) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("label", json.nullable(data.label, webhooks_label_encode)),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn issue_event_dismissed_review_decoder() {
  use review_id <- decode.field("review_id", decode.int)
  use state <- decode.field("state", decode.string)
  use dismissal_commit_id <- decode.optional_field(
    "dismissal_commit_id",
    None,
    decode.optional(decode.string),
  )
  use dismissal_message <- decode.optional_field(
    "dismissal_message",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    IssueEventDismissedReview(
      review_id: review_id,
      state: state,
      dismissal_commit_id: dismissal_commit_id,
      dismissal_message: dismissal_message,
    ),
  )
}

pub fn issue_event_dismissed_review_encode(data: IssueEventDismissedReview) {
  json.object(
    [
      #("review_id", json.int(data.review_id)),
      #("state", json.string(data.state)),
      #(
        "dismissal_commit_id",
        json.nullable(data.dismissal_commit_id, json.string),
      ),
      #("dismissal_message", json.nullable(data.dismissal_message, json.string))
    ],
  )
}

pub fn webhook_team_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field(
    "changes",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use team <- decode.field("team", webhooks_team_one_decoder())
  decode.success(
    WebhookTeamEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      team: team,
    ),
  )
}

pub fn webhook_team_edited_encode(data: WebhookTeamEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        fn(_) { panic as "Literal object inside field" }(data.changes),
      ),
      #(
        "repository",
        json.nullable(
          data.repository,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("team", webhooks_team_one_encode(data.team))
    ],
  )
}

pub fn code_scanning_analysis_analysis_key_decoder() {
  decode.string
}

pub fn code_scanning_analysis_analysis_key_encode(
  data: CodeScanningAnalysisAnalysisKey,
) {
  json.string(data)
}

pub fn repository_rule_code_scanning_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleCodeScanning(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_code_scanning_encode(data: RepositoryRuleCodeScanning) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn webhook_workflow_job_completed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use deployment <- decode.optional_field(
    "deployment",
    None,
    decode.optional(deployment_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use workflow_job <- decode.field(
    "workflow_job",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  decode.success(
    WebhookWorkflowJobCompleted(
      enterprise: enterprise,
      deployment: deployment,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      workflow_job: workflow_job,
    ),
  )
}

pub fn webhook_workflow_job_completed_encode(data: WebhookWorkflowJobCompleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("deployment", json.nullable(data.deployment, deployment_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "workflow_job",
        fn(_) { panic as "AllOf inside field" }(data.workflow_job),
      )
    ],
  )
}

pub fn repository_rule_params_required_reviewer_configuration_decoder() {
  use file_patterns <- decode.field("file_patterns", decode.list(decode.string))
  use reviewer_id <- decode.field("reviewer_id", decode.string)
  use minimum_approvals <- decode.field("minimum_approvals", decode.int)
  decode.success(
    RepositoryRuleParamsRequiredReviewerConfiguration(
      file_patterns: file_patterns,
      reviewer_id: reviewer_id,
      minimum_approvals: minimum_approvals,
    ),
  )
}

pub fn repository_rule_params_required_reviewer_configuration_encode(
  data: RepositoryRuleParamsRequiredReviewerConfiguration,
) {
  json.object(
    [
      #("file_patterns", json.array(_, json.string)(data.file_patterns)),
      #("reviewer_id", json.string(data.reviewer_id)),
      #("minimum_approvals", json.int(data.minimum_approvals))
    ],
  )
}

pub fn team_organization_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use has_organization_projects <- decode.field(
    "has_organization_projects",
    decode.bool,
  )
  use twitter_username <- decode.optional_field(
    "twitter_username",
    None,
    decode.optional(decode.string),
  )
  use members_allowed_repository_creation_type <- decode.optional_field(
    "members_allowed_repository_creation_type",
    None,
    decode.optional(decode.string),
  )
  use blog <- decode.optional_field("blog", None, decode.optional(decode.string))
  use default_repository_permission <- decode.optional_field(
    "default_repository_permission",
    None,
    decode.optional(decode.string),
  )
  use two_factor_requirement_enabled <- decode.optional_field(
    "two_factor_requirement_enabled",
    None,
    decode.optional(decode.bool),
  )
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use members_url <- decode.field("members_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use plan <- decode.optional_field(
    "plan",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use login <- decode.field("login", decode.string)
  use has_repository_projects <- decode.field(
    "has_repository_projects",
    decode.bool,
  )
  use created_at <- decode.field("created_at", decode.string)
  use issues_url <- decode.field("issues_url", decode.string)
  use total_private_repos <- decode.optional_field(
    "total_private_repos",
    None,
    decode.optional(decode.int),
  )
  use owned_private_repos <- decode.optional_field(
    "owned_private_repos",
    None,
    decode.optional(decode.int),
  )
  use public_repos <- decode.field("public_repos", decode.int)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use members_can_fork_private_repositories <- decode.optional_field(
    "members_can_fork_private_repositories",
    None,
    decode.optional(decode.bool),
  )
  use collaborators <- decode.optional_field(
    "collaborators",
    None,
    decode.optional(decode.int),
  )
  use url <- decode.field("url", decode.string)
  use members_can_create_public_repositories <- decode.optional_field(
    "members_can_create_public_repositories",
    None,
    decode.optional(decode.bool),
  )
  use archived_at <- decode.optional_field(
    "archived_at",
    None,
    decode.optional(decode.string),
  )
  use following <- decode.field("following", decode.int)
  use repos_url <- decode.field("repos_url", decode.string)
  use members_can_create_private_repositories <- decode.optional_field(
    "members_can_create_private_repositories",
    None,
    decode.optional(decode.bool),
  )
  use public_members_url <- decode.field("public_members_url", decode.string)
  use private_gists <- decode.optional_field(
    "private_gists",
    None,
    decode.optional(decode.int),
  )
  use followers <- decode.field("followers", decode.int)
  use location <- decode.optional_field(
    "location",
    None,
    decode.optional(decode.string),
  )
  use members_can_create_pages <- decode.optional_field(
    "members_can_create_pages",
    None,
    decode.optional(decode.bool),
  )
  use members_can_create_repositories <- decode.optional_field(
    "members_can_create_repositories",
    None,
    decode.optional(decode.bool),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use billing_email <- decode.optional_field(
    "billing_email",
    None,
    decode.optional(decode.string),
  )
  use public_gists <- decode.field("public_gists", decode.int)
  use members_can_create_private_pages <- decode.optional_field(
    "members_can_create_private_pages",
    None,
    decode.optional(decode.bool),
  )
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use members_can_create_public_pages <- decode.optional_field(
    "members_can_create_public_pages",
    None,
    decode.optional(decode.bool),
  )
  use members_can_create_internal_repositories <- decode.optional_field(
    "members_can_create_internal_repositories",
    None,
    decode.optional(decode.bool),
  )
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use company <- decode.optional_field(
    "company",
    None,
    decode.optional(decode.string),
  )
  use is_verified <- decode.optional_field(
    "is_verified",
    None,
    decode.optional(decode.bool),
  )
  use disk_usage <- decode.optional_field(
    "disk_usage",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    TeamOrganization(
      hooks_url: hooks_url,
      has_organization_projects: has_organization_projects,
      twitter_username: twitter_username,
      members_allowed_repository_creation_type: members_allowed_repository_creation_type,
      blog: blog,
      default_repository_permission: default_repository_permission,
      two_factor_requirement_enabled: two_factor_requirement_enabled,
      web_commit_signoff_required: web_commit_signoff_required,
      members_url: members_url,
      events_url: events_url,
      avatar_url: avatar_url,
      plan: plan,
      login: login,
      has_repository_projects: has_repository_projects,
      created_at: created_at,
      issues_url: issues_url,
      total_private_repos: total_private_repos,
      owned_private_repos: owned_private_repos,
      public_repos: public_repos,
      name: name,
      members_can_fork_private_repositories: members_can_fork_private_repositories,
      collaborators: collaborators,
      url: url,
      members_can_create_public_repositories: members_can_create_public_repositories,
      archived_at: archived_at,
      following: following,
      repos_url: repos_url,
      members_can_create_private_repositories: members_can_create_private_repositories,
      public_members_url: public_members_url,
      private_gists: private_gists,
      followers: followers,
      location: location,
      members_can_create_pages: members_can_create_pages,
      members_can_create_repositories: members_can_create_repositories,
      updated_at: updated_at,
      node_id: node_id,
      billing_email: billing_email,
      public_gists: public_gists,
      members_can_create_private_pages: members_can_create_private_pages,
      type_: type_,
      id: id,
      html_url: html_url,
      members_can_create_public_pages: members_can_create_public_pages,
      members_can_create_internal_repositories: members_can_create_internal_repositories,
      email: email,
      description: description,
      company: company,
      is_verified: is_verified,
      disk_usage: disk_usage,
    ),
  )
}

pub fn team_organization_encode(data: TeamOrganization) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("has_organization_projects", json.bool(data.has_organization_projects)),
      #("twitter_username", json.nullable(data.twitter_username, json.string)),
      #(
        "members_allowed_repository_creation_type",
        json.nullable(data.members_allowed_repository_creation_type, json.string),
      ),
      #("blog", json.nullable(data.blog, json.string)),
      #(
        "default_repository_permission",
        json.nullable(data.default_repository_permission, json.string),
      ),
      #(
        "two_factor_requirement_enabled",
        json.nullable(data.two_factor_requirement_enabled, json.bool),
      ),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("members_url", json.string(data.members_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #(
        "plan",
        json.nullable(
          data.plan,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("login", json.string(data.login)),
      #("has_repository_projects", json.bool(data.has_repository_projects)),
      #("created_at", json.string(data.created_at)),
      #("issues_url", json.string(data.issues_url)),
      #("total_private_repos", json.nullable(data.total_private_repos, json.int)),
      #("owned_private_repos", json.nullable(data.owned_private_repos, json.int)),
      #("public_repos", json.int(data.public_repos)),
      #("name", json.nullable(data.name, json.string)),
      #(
        "members_can_fork_private_repositories",
        json.nullable(data.members_can_fork_private_repositories, json.bool),
      ),
      #("collaborators", json.nullable(data.collaborators, json.int)),
      #("url", json.string(data.url)),
      #(
        "members_can_create_public_repositories",
        json.nullable(data.members_can_create_public_repositories, json.bool),
      ),
      #("archived_at", json.nullable(data.archived_at, json.string)),
      #("following", json.int(data.following)),
      #("repos_url", json.string(data.repos_url)),
      #(
        "members_can_create_private_repositories",
        json.nullable(data.members_can_create_private_repositories, json.bool),
      ),
      #("public_members_url", json.string(data.public_members_url)),
      #("private_gists", json.nullable(data.private_gists, json.int)),
      #("followers", json.int(data.followers)),
      #("location", json.nullable(data.location, json.string)),
      #(
        "members_can_create_pages",
        json.nullable(data.members_can_create_pages, json.bool),
      ),
      #(
        "members_can_create_repositories",
        json.nullable(data.members_can_create_repositories, json.bool),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("billing_email", json.nullable(data.billing_email, json.string)),
      #("public_gists", json.int(data.public_gists)),
      #(
        "members_can_create_private_pages",
        json.nullable(data.members_can_create_private_pages, json.bool),
      ),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "members_can_create_public_pages",
        json.nullable(data.members_can_create_public_pages, json.bool),
      ),
      #(
        "members_can_create_internal_repositories",
        json.nullable(data.members_can_create_internal_repositories, json.bool),
      ),
      #("email", json.nullable(data.email, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("company", json.nullable(data.company, json.string)),
      #("is_verified", json.nullable(data.is_verified, json.bool)),
      #("disk_usage", json.nullable(data.disk_usage, json.int))
    ],
  )
}

pub fn locked_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use lock_reason <- decode.optional_field(
    "lock_reason",
    None,
    decode.optional(decode.string),
  )
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    LockedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      lock_reason: lock_reason,
      event: event,
      id: id,
    ),
  )
}

pub fn locked_issue_event_encode(data: LockedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("lock_reason", json.nullable(data.lock_reason, json.string)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_member_removed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use member <- decode.field("member", webhooks_user_decoder())
  decode.success(
    WebhookMemberRemoved(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      member: member,
    ),
  )
}

pub fn webhook_member_removed_encode(data: WebhookMemberRemoved) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("member", webhooks_user_encode(data.member))
    ],
  )
}

pub fn marketplace_purchase_decoder() {
  use login <- decode.field("login", decode.string)
  use organization_billing_email <- decode.optional_field(
    "organization_billing_email",
    None,
    decode.optional(decode.string),
  )
  use marketplace_pending_change <- decode.optional_field(
    "marketplace_pending_change",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use marketplace_purchase <- decode.field(
    "marketplace_purchase",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    MarketplacePurchase(
      login: login,
      organization_billing_email: organization_billing_email,
      marketplace_pending_change: marketplace_pending_change,
      url: url,
      marketplace_purchase: marketplace_purchase,
      type_: type_,
      id: id,
      email: email,
    ),
  )
}

pub fn marketplace_purchase_encode(data: MarketplacePurchase) {
  json.object(
    [
      #("login", json.string(data.login)),
      #(
        "organization_billing_email",
        json.nullable(data.organization_billing_email, json.string),
      ),
      #(
        "marketplace_pending_change",
        json.nullable(
          data.marketplace_pending_change,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.string(data.url)),
      #(
        "marketplace_purchase",
        fn(_) { panic as "Literal object inside field" }(
          data.marketplace_purchase,
        ),
      ),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn webhook_star_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookStarCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      starred_at: starred_at,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_star_created_encode(data: WebhookStarCreated) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_ruleset_info_decoder() {
  use ruleset_source_type <- decode.optional_field(
    "ruleset_source_type",
    None,
    decode.optional(decode.string),
  )
  use ruleset_id <- decode.optional_field(
    "ruleset_id",
    None,
    decode.optional(decode.int),
  )
  use ruleset_source <- decode.optional_field(
    "ruleset_source",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryRuleRulesetInfo(
      ruleset_source_type: ruleset_source_type,
      ruleset_id: ruleset_id,
      ruleset_source: ruleset_source,
    ),
  )
}

pub fn repository_rule_ruleset_info_encode(data: RepositoryRuleRulesetInfo) {
  json.object(
    [
      #(
        "ruleset_source_type",
        json.nullable(data.ruleset_source_type, json.string),
      ),
      #("ruleset_id", json.nullable(data.ruleset_id, json.int)),
      #("ruleset_source", json.nullable(data.ruleset_source, json.string))
    ],
  )
}

pub fn repository_rule_params_restricted_commits_decoder() {
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(decode.string),
  )
  use oid <- decode.field("oid", decode.string)
  decode.success(RepositoryRuleParamsRestrictedCommits(reason: reason, oid: oid))
}

pub fn repository_rule_params_restricted_commits_encode(
  data: RepositoryRuleParamsRestrictedCommits,
) {
  json.object(
    [
      #("reason", json.nullable(data.reason, json.string)),
      #("oid", json.string(data.oid))
    ],
  )
}

pub fn code_scanning_analysis_deletion_decoder() {
  use next_analysis_url <- decode.optional_field(
    "next_analysis_url",
    None,
    decode.optional(decode.string),
  )
  use confirm_delete_url <- decode.optional_field(
    "confirm_delete_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeScanningAnalysisDeletion(
      next_analysis_url: next_analysis_url,
      confirm_delete_url: confirm_delete_url,
    ),
  )
}

pub fn code_scanning_analysis_deletion_encode(data: CodeScanningAnalysisDeletion) {
  json.object(
    [
      #("next_analysis_url", json.nullable(data.next_analysis_url, json.string)),
      #(
        "confirm_delete_url",
        json.nullable(data.confirm_delete_url, json.string),
      )
    ],
  )
}

pub fn hook_decoder() {
  use test_url <- decode.field("test_url", decode.string)
  use ping_url <- decode.field("ping_url", decode.string)
  use config <- decode.field("config", webhook_config_decoder())
  use deliveries_url <- decode.optional_field(
    "deliveries_url",
    None,
    decode.optional(decode.string),
  )
  use active <- decode.field("active", decode.bool)
  use created_at <- decode.field("created_at", decode.string)
  use last_response <- decode.field("last_response", hook_response_decoder())
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use events <- decode.field("events", decode.list(decode.string))
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    Hook(
      test_url: test_url,
      ping_url: ping_url,
      config: config,
      deliveries_url: deliveries_url,
      active: active,
      created_at: created_at,
      last_response: last_response,
      name: name,
      url: url,
      updated_at: updated_at,
      events: events,
      type_: type_,
      id: id,
    ),
  )
}

pub fn hook_encode(data: Hook) {
  json.object(
    [
      #("test_url", json.string(data.test_url)),
      #("ping_url", json.string(data.ping_url)),
      #("config", webhook_config_encode(data.config)),
      #("deliveries_url", json.nullable(data.deliveries_url, json.string)),
      #("active", json.bool(data.active)),
      #("created_at", json.string(data.created_at)),
      #("last_response", hook_response_encode(data.last_response)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("updated_at", json.string(data.updated_at)),
      #("events", json.array(_, json.string)(data.events)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn organization_secret_scanning_alert_decoder() {
  use push_protection_bypass_request_html_url <- decode.optional_field(
    "push_protection_bypass_request_html_url",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypassed <- decode.optional_field(
    "push_protection_bypassed",
    None,
    decode.optional(decode.bool),
  )
  use number <- decode.optional_field(
    "number",
    None,
    decode.optional(alert_number_decoder()),
  )
  use secret_type <- decode.optional_field(
    "secret_type",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(alert_created_at_decoder()),
  )
  use push_protection_bypassed_at <- decode.optional_field(
    "push_protection_bypassed_at",
    None,
    decode.optional(decode.string),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(simple_repository_decoder()),
  )
  use push_protection_bypass_request_reviewer <- decode.optional_field(
    "push_protection_bypass_request_reviewer",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use publicly_leaked <- decode.optional_field(
    "publicly_leaked",
    None,
    decode.optional(decode.bool),
  )
  use resolution <- decode.optional_field(
    "resolution",
    None,
    decode.optional(secret_scanning_alert_resolution_decoder()),
  )
  use resolution_comment <- decode.optional_field(
    "resolution_comment",
    None,
    decode.optional(decode.string),
  )
  use locations_url <- decode.optional_field(
    "locations_url",
    None,
    decode.optional(decode.string),
  )
  use push_protection_bypassed_by <- decode.optional_field(
    "push_protection_bypassed_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  use url <- decode.optional_field(
    "url",
    None,
    decode.optional(alert_url_decoder()),
  )
  use secret <- decode.optional_field(
    "secret",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(secret_scanning_alert_state_decoder()),
  )
  use validity <- decode.optional_field(
    "validity",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(nullable_alert_updated_at_decoder()),
  )
  use multi_repo <- decode.optional_field(
    "multi_repo",
    None,
    decode.optional(decode.bool),
  )
  use push_protection_bypass_request_comment <- decode.optional_field(
    "push_protection_bypass_request_comment",
    None,
    decode.optional(decode.string),
  )
  use resolved_at <- decode.optional_field(
    "resolved_at",
    None,
    decode.optional(decode.string),
  )
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(alert_html_url_decoder()),
  )
  use secret_type_display_name <- decode.optional_field(
    "secret_type_display_name",
    None,
    decode.optional(decode.string),
  )
  use resolved_by <- decode.optional_field(
    "resolved_by",
    None,
    decode.optional(nullable_simple_user_decoder()),
  )
  decode.success(
    OrganizationSecretScanningAlert(
      push_protection_bypass_request_html_url: push_protection_bypass_request_html_url,
      push_protection_bypassed: push_protection_bypassed,
      number: number,
      secret_type: secret_type,
      created_at: created_at,
      push_protection_bypassed_at: push_protection_bypassed_at,
      repository: repository,
      push_protection_bypass_request_reviewer: push_protection_bypass_request_reviewer,
      publicly_leaked: publicly_leaked,
      resolution: resolution,
      resolution_comment: resolution_comment,
      locations_url: locations_url,
      push_protection_bypassed_by: push_protection_bypassed_by,
      url: url,
      secret: secret,
      state: state,
      validity: validity,
      updated_at: updated_at,
      multi_repo: multi_repo,
      push_protection_bypass_request_comment: push_protection_bypass_request_comment,
      resolved_at: resolved_at,
      html_url: html_url,
      secret_type_display_name: secret_type_display_name,
      resolved_by: resolved_by,
    ),
  )
}

pub fn organization_secret_scanning_alert_encode(
  data: OrganizationSecretScanningAlert,
) {
  json.object(
    [
      #(
        "push_protection_bypass_request_html_url",
        json.nullable(data.push_protection_bypass_request_html_url, json.string),
      ),
      #(
        "push_protection_bypassed",
        json.nullable(data.push_protection_bypassed, json.bool),
      ),
      #("number", json.nullable(data.number, alert_number_encode)),
      #("secret_type", json.nullable(data.secret_type, json.string)),
      #("created_at", json.nullable(data.created_at, alert_created_at_encode)),
      #(
        "push_protection_bypassed_at",
        json.nullable(data.push_protection_bypassed_at, json.string),
      ),
      #("repository", json.nullable(data.repository, simple_repository_encode)),
      #(
        "push_protection_bypass_request_reviewer",
        json.nullable(
          data.push_protection_bypass_request_reviewer,
          nullable_simple_user_encode,
        ),
      ),
      #("publicly_leaked", json.nullable(data.publicly_leaked, json.bool)),
      #(
        "resolution",
        json.nullable(data.resolution, secret_scanning_alert_resolution_encode),
      ),
      #(
        "resolution_comment",
        json.nullable(data.resolution_comment, json.string),
      ),
      #("locations_url", json.nullable(data.locations_url, json.string)),
      #(
        "push_protection_bypassed_by",
        json.nullable(
          data.push_protection_bypassed_by,
          nullable_simple_user_encode,
        ),
      ),
      #("url", json.nullable(data.url, alert_url_encode)),
      #("secret", json.nullable(data.secret, json.string)),
      #("state", json.nullable(data.state, secret_scanning_alert_state_encode)),
      #("validity", json.nullable(data.validity, json.string)),
      #(
        "updated_at",
        json.nullable(data.updated_at, nullable_alert_updated_at_encode),
      ),
      #("multi_repo", json.nullable(data.multi_repo, json.bool)),
      #(
        "push_protection_bypass_request_comment",
        json.nullable(data.push_protection_bypass_request_comment, json.string),
      ),
      #("resolved_at", json.nullable(data.resolved_at, json.string)),
      #("html_url", json.nullable(data.html_url, alert_html_url_encode)),
      #(
        "secret_type_display_name",
        json.nullable(data.secret_type_display_name, json.string),
      ),
      #(
        "resolved_by",
        json.nullable(data.resolved_by, nullable_simple_user_encode),
      )
    ],
  )
}

pub fn page_deployment_decoder() {
  use status_url <- decode.field("status_url", decode.string)
  use preview_url <- decode.optional_field(
    "preview_url",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field(
    "id",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use page_url <- decode.field("page_url", decode.string)
  decode.success(
    PageDeployment(
      status_url: status_url,
      preview_url: preview_url,
      id: id,
      page_url: page_url,
    ),
  )
}

pub fn page_deployment_encode(data: PageDeployment) {
  json.object(
    [
      #("status_url", json.string(data.status_url)),
      #("preview_url", json.nullable(data.preview_url, json.string)),
      #("id", fn(_) { panic as "OneOf inside field" }(data.id)),
      #("page_url", json.string(data.page_url))
    ],
  )
}

pub fn repository_ruleset_decoder() {
  use enforcement <- decode.field(
    "enforcement",
    repository_rule_enforcement_decoder(),
  )
  use current_user_can_bypass <- decode.optional_field(
    "current_user_can_bypass",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use target <- decode.optional_field(
    "target",
    None,
    decode.optional(decode.string),
  )
  use bypass_actors <- decode.optional_field(
    "bypass_actors",
    None,
    decode.optional(decode.list(repository_ruleset_bypass_actor_decoder())),
  )
  use rules <- decode.optional_field(
    "rules",
    None,
    decode.optional(decode.list(repository_rule_decoder())),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use conditions <- decode.optional_field(
    "conditions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use links <- decode.optional_field(
    "_links",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use source <- decode.field("source", decode.string)
  use id <- decode.field("id", decode.int)
  use source_type <- decode.optional_field(
    "source_type",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    RepositoryRuleset(
      enforcement: enforcement,
      current_user_can_bypass: current_user_can_bypass,
      created_at: created_at,
      name: name,
      target: target,
      bypass_actors: bypass_actors,
      rules: rules,
      updated_at: updated_at,
      node_id: node_id,
      conditions: conditions,
      links: links,
      source: source,
      id: id,
      source_type: source_type,
    ),
  )
}

pub fn repository_ruleset_encode(data: RepositoryRuleset) {
  json.object(
    [
      #("enforcement", repository_rule_enforcement_encode(data.enforcement)),
      #(
        "current_user_can_bypass",
        json.nullable(data.current_user_can_bypass, json.string),
      ),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("name", json.string(data.name)),
      #("target", json.nullable(data.target, json.string)),
      #(
        "bypass_actors",
        json.nullable(
          data.bypass_actors,
          json.array(_, repository_ruleset_bypass_actor_encode),
        ),
      ),
      #(
        "rules",
        json.nullable(data.rules, json.array(_, repository_rule_encode)),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #(
        "conditions",
        json.nullable(data.conditions, fn(_) { panic as "AnyOf inside field" }),
      ),
      #(
        "_links",
        json.nullable(
          data.links,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("source", json.string(data.source)),
      #("id", json.int(data.id)),
      #("source_type", json.nullable(data.source_type, json.string))
    ],
  )
}

pub fn webhook_config_content_type_decoder() {
  decode.string
}

pub fn webhook_config_content_type_encode(data: WebhookConfigContentType) {
  json.string(data)
}

pub fn gitignore_template_decoder() {
  use name <- decode.field("name", decode.string)
  use source <- decode.field("source", decode.string)
  decode.success(GitignoreTemplate(name: name, source: source))
}

pub fn gitignore_template_encode(data: GitignoreTemplate) {
  json.object(
    [#("name", json.string(data.name)), #("source", json.string(data.source))],
  )
}

pub fn webhook_organization_renamed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use membership <- decode.optional_field(
    "membership",
    None,
    decode.optional(webhooks_membership_decoder()),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookOrganizationRenamed(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      membership: membership,
      installation: installation,
    ),
  )
}

pub fn webhook_organization_renamed_encode(data: WebhookOrganizationRenamed) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("membership", json.nullable(data.membership, webhooks_membership_encode)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn simple_classroom_assignment_decoder() {
  use feedback_pull_requests_enabled <- decode.field(
    "feedback_pull_requests_enabled",
    decode.bool,
  )
  use accepted <- decode.field("accepted", decode.int)
  use public_repo <- decode.field("public_repo", decode.bool)
  use slug <- decode.field("slug", decode.string)
  use editor <- decode.field("editor", decode.string)
  use invite_link <- decode.field("invite_link", decode.string)
  use passing <- decode.field("passing", decode.int)
  use classroom <- decode.field("classroom", simple_classroom_decoder())
  use title <- decode.field("title", decode.string)
  use deadline <- decode.optional_field(
    "deadline",
    None,
    decode.optional(decode.string),
  )
  use language <- decode.field("language", decode.string)
  use type_ <- decode.field("type", decode.string)
  use submitted <- decode.field("submitted", decode.int)
  use id <- decode.field("id", decode.int)
  use max_teams <- decode.optional_field(
    "max_teams",
    None,
    decode.optional(decode.int),
  )
  use invitations_enabled <- decode.field("invitations_enabled", decode.bool)
  use max_members <- decode.optional_field(
    "max_members",
    None,
    decode.optional(decode.int),
  )
  use students_are_repo_admins <- decode.field(
    "students_are_repo_admins",
    decode.bool,
  )
  decode.success(
    SimpleClassroomAssignment(
      feedback_pull_requests_enabled: feedback_pull_requests_enabled,
      accepted: accepted,
      public_repo: public_repo,
      slug: slug,
      editor: editor,
      invite_link: invite_link,
      passing: passing,
      classroom: classroom,
      title: title,
      deadline: deadline,
      language: language,
      type_: type_,
      submitted: submitted,
      id: id,
      max_teams: max_teams,
      invitations_enabled: invitations_enabled,
      max_members: max_members,
      students_are_repo_admins: students_are_repo_admins,
    ),
  )
}

pub fn simple_classroom_assignment_encode(data: SimpleClassroomAssignment) {
  json.object(
    [
      #(
        "feedback_pull_requests_enabled",
        json.bool(data.feedback_pull_requests_enabled),
      ),
      #("accepted", json.int(data.accepted)),
      #("public_repo", json.bool(data.public_repo)),
      #("slug", json.string(data.slug)),
      #("editor", json.string(data.editor)),
      #("invite_link", json.string(data.invite_link)),
      #("passing", json.int(data.passing)),
      #("classroom", simple_classroom_encode(data.classroom)),
      #("title", json.string(data.title)),
      #("deadline", json.nullable(data.deadline, json.string)),
      #("language", json.string(data.language)),
      #("type", json.string(data.type_)),
      #("submitted", json.int(data.submitted)),
      #("id", json.int(data.id)),
      #("max_teams", json.nullable(data.max_teams, json.int)),
      #("invitations_enabled", json.bool(data.invitations_enabled)),
      #("max_members", json.nullable(data.max_members, json.int)),
      #("students_are_repo_admins", json.bool(data.students_are_repo_admins))
    ],
  )
}

pub fn webhooks_workflow_decoder() {
  use path_ <- decode.field("path", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use badge_url <- decode.field("badge_url", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksWorkflow(
      path_: path_,
      created_at: created_at,
      name: name,
      url: url,
      state: state,
      badge_url: badge_url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_workflow_encode(data: WebhooksWorkflow) {
  json.object(
    [
      #("path", json.string(data.path_)),
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("badge_url", json.string(data.badge_url)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn project_collaborator_permission_decoder() {
  use user <- decode.field("user", nullable_simple_user_decoder())
  use permission <- decode.field("permission", decode.string)
  decode.success(
    ProjectCollaboratorPermission(user: user, permission: permission),
  )
}

pub fn project_collaborator_permission_encode(
  data: ProjectCollaboratorPermission,
) {
  json.object(
    [
      #("user", nullable_simple_user_encode(data.user)),
      #("permission", json.string(data.permission))
    ],
  )
}

pub fn team_simple_decoder() {
  use ldap_dn <- decode.optional_field(
    "ldap_dn",
    None,
    decode.optional(decode.string),
  )
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.field("members_url", decode.string)
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use url <- decode.field("url", decode.string)
  use permission <- decode.field("permission", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repositories_url <- decode.field("repositories_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    TeamSimple(
      ldap_dn: ldap_dn,
      privacy: privacy,
      members_url: members_url,
      name: name,
      slug: slug,
      url: url,
      permission: permission,
      node_id: node_id,
      repositories_url: repositories_url,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn team_simple_encode(data: TeamSimple) {
  json.object(
    [
      #("ldap_dn", json.nullable(data.ldap_dn, json.string)),
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.string(data.members_url)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("url", json.string(data.url)),
      #("permission", json.string(data.permission)),
      #("node_id", json.string(data.node_id)),
      #("repositories_url", json.string(data.repositories_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn code_scanning_alert_instance_decoder() {
  use commit_sha <- decode.optional_field(
    "commit_sha",
    None,
    decode.optional(decode.string),
  )
  use message <- decode.optional_field(
    "message",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use classifications <- decode.optional_field(
    "classifications",
    None,
    decode.optional(decode.list(code_scanning_alert_classification_decoder())),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(code_scanning_alert_state_decoder()),
  )
  use ref <- decode.optional_field(
    "ref",
    None,
    decode.optional(code_scanning_ref_decoder()),
  )
  use environment <- decode.optional_field(
    "environment",
    None,
    decode.optional(code_scanning_alert_environment_decoder()),
  )
  use location <- decode.optional_field(
    "location",
    None,
    decode.optional(code_scanning_alert_location_decoder()),
  )
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use analysis_key <- decode.optional_field(
    "analysis_key",
    None,
    decode.optional(code_scanning_analysis_analysis_key_decoder()),
  )
  use category <- decode.optional_field(
    "category",
    None,
    decode.optional(code_scanning_analysis_category_decoder()),
  )
  decode.success(
    CodeScanningAlertInstance(
      commit_sha: commit_sha,
      message: message,
      classifications: classifications,
      state: state,
      ref: ref,
      environment: environment,
      location: location,
      html_url: html_url,
      analysis_key: analysis_key,
      category: category,
    ),
  )
}

pub fn code_scanning_alert_instance_encode(data: CodeScanningAlertInstance) {
  json.object(
    [
      #("commit_sha", json.nullable(data.commit_sha, json.string)),
      #(
        "message",
        json.nullable(
          data.message,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "classifications",
        json.nullable(
          data.classifications,
          json.array(_, code_scanning_alert_classification_encode),
        ),
      ),
      #("state", json.nullable(data.state, code_scanning_alert_state_encode)),
      #("ref", json.nullable(data.ref, code_scanning_ref_encode)),
      #(
        "environment",
        json.nullable(data.environment, code_scanning_alert_environment_encode),
      ),
      #(
        "location",
        json.nullable(data.location, code_scanning_alert_location_encode),
      ),
      #("html_url", json.nullable(data.html_url, json.string)),
      #(
        "analysis_key",
        json.nullable(
          data.analysis_key,
          code_scanning_analysis_analysis_key_encode,
        ),
      ),
      #(
        "category",
        json.nullable(data.category, code_scanning_analysis_category_encode),
      )
    ],
  )
}

pub fn user_role_assignment_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use assignment <- decode.optional_field(
    "assignment",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use inherited_from <- decode.optional_field(
    "inherited_from",
    None,
    decode.optional(decode.list(team_simple_decoder())),
  )
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use starred_at <- decode.optional_field(
    "starred_at",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use node_id <- decode.field("node_id", decode.string)
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    UserRoleAssignment(
      user_view_type: user_view_type,
      gists_url: gists_url,
      following_url: following_url,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      name: name,
      assignment: assignment,
      url: url,
      inherited_from: inherited_from,
      starred_url: starred_url,
      organizations_url: organizations_url,
      repos_url: repos_url,
      starred_at: starred_at,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      node_id: node_id,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
    ),
  )
}

pub fn user_role_assignment_encode(data: UserRoleAssignment) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #("following_url", json.string(data.following_url)),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("name", json.nullable(data.name, json.string)),
      #("assignment", json.nullable(data.assignment, json.string)),
      #("url", json.string(data.url)),
      #(
        "inherited_from",
        json.nullable(data.inherited_from, json.array(_, team_simple_encode)),
      ),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("repos_url", json.string(data.repos_url)),
      #("starred_at", json.nullable(data.starred_at, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("node_id", json.string(data.node_id)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string))
    ],
  )
}

pub fn repository_ruleset_conditions_decoder() {
  use ref_name <- decode.optional_field(
    "ref_name",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(RepositoryRulesetConditions(ref_name: ref_name))
}

pub fn repository_ruleset_conditions_encode(data: RepositoryRulesetConditions) {
  json.object(
    [
      #(
        "ref_name",
        json.nullable(
          data.ref_name,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_secret_scanning_alert_created_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", secret_scanning_alert_webhook_decoder())
  decode.success(
    WebhookSecretScanningAlertCreated(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_secret_scanning_alert_created_encode(
  data: WebhookSecretScanningAlertCreated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", secret_scanning_alert_webhook_encode(data.alert))
    ],
  )
}

pub fn hook_delivery_item_decoder() {
  use installation_id <- decode.optional_field(
    "installation_id",
    None,
    decode.optional(decode.int),
  )
  use redelivery <- decode.field("redelivery", decode.bool)
  use guid <- decode.field("guid", decode.string)
  use delivered_at <- decode.field("delivered_at", decode.string)
  use repository_id <- decode.optional_field(
    "repository_id",
    None,
    decode.optional(decode.int),
  )
  use status <- decode.field("status", decode.string)
  use duration <- decode.field("duration", decode.float)
  use action <- decode.optional_field(
    "action",
    None,
    decode.optional(decode.string),
  )
  use throttled_at <- decode.optional_field(
    "throttled_at",
    None,
    decode.optional(decode.string),
  )
  use status_code <- decode.field("status_code", decode.int)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    HookDeliveryItem(
      installation_id: installation_id,
      redelivery: redelivery,
      guid: guid,
      delivered_at: delivered_at,
      repository_id: repository_id,
      status: status,
      duration: duration,
      action: action,
      throttled_at: throttled_at,
      status_code: status_code,
      event: event,
      id: id,
    ),
  )
}

pub fn hook_delivery_item_encode(data: HookDeliveryItem) {
  json.object(
    [
      #("installation_id", json.nullable(data.installation_id, json.int)),
      #("redelivery", json.bool(data.redelivery)),
      #("guid", json.string(data.guid)),
      #("delivered_at", json.string(data.delivered_at)),
      #("repository_id", json.nullable(data.repository_id, json.int)),
      #("status", json.string(data.status)),
      #("duration", json.float(data.duration)),
      #("action", json.nullable(data.action, json.string)),
      #("throttled_at", json.nullable(data.throttled_at, json.string)),
      #("status_code", json.int(data.status_code)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn repository_rule_non_fast_forward_decoder() {
  use type_ <- decode.field("type", decode.string)
  decode.success(RepositoryRuleNonFastForward(type_: type_))
}

pub fn repository_rule_non_fast_forward_encode(
  data: RepositoryRuleNonFastForward,
) {
  json.object([#("type", json.string(data.type_))])
}

pub fn projects_v2_iteration_setting_decoder() {
  use start_date <- decode.optional_field(
    "start_date",
    None,
    decode.optional(decode.string),
  )
  use duration <- decode.optional_field(
    "duration",
    None,
    decode.optional(decode.float),
  )
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.string)
  decode.success(
    ProjectsV2IterationSetting(
      start_date: start_date,
      duration: duration,
      title: title,
      id: id,
    ),
  )
}

pub fn projects_v2_iteration_setting_encode(data: ProjectsV2IterationSetting) {
  json.object(
    [
      #("start_date", json.nullable(data.start_date, json.string)),
      #("duration", json.nullable(data.duration, json.float)),
      #("title", json.string(data.title)),
      #("id", json.string(data.id))
    ],
  )
}

pub fn webhook_custom_property_values_updated_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use new_property_values <- decode.field(
    "new_property_values",
    decode.list(custom_property_value_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use old_property_values <- decode.field(
    "old_property_values",
    decode.list(custom_property_value_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookCustomPropertyValuesUpdated(
      enterprise: enterprise,
      repository: repository,
      new_property_values: new_property_values,
      organization: organization,
      old_property_values: old_property_values,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_custom_property_values_updated_encode(
  data: WebhookCustomPropertyValuesUpdated,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "new_property_values",
        json.array(_, custom_property_value_encode)(data.new_property_values),
      ),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #(
        "old_property_values",
        json.array(_, custom_property_value_encode)(data.old_property_values),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_alert_location_decoder() {
  use path_ <- decode.optional_field(
    "path",
    None,
    decode.optional(decode.string),
  )
  use start_line <- decode.optional_field(
    "start_line",
    None,
    decode.optional(decode.int),
  )
  use start_column <- decode.optional_field(
    "start_column",
    None,
    decode.optional(decode.int),
  )
  use end_line <- decode.optional_field(
    "end_line",
    None,
    decode.optional(decode.int),
  )
  use end_column <- decode.optional_field(
    "end_column",
    None,
    decode.optional(decode.int),
  )
  decode.success(
    CodeScanningAlertLocation(
      path_: path_,
      start_line: start_line,
      start_column: start_column,
      end_line: end_line,
      end_column: end_column,
    ),
  )
}

pub fn code_scanning_alert_location_encode(data: CodeScanningAlertLocation) {
  json.object(
    [
      #("path", json.nullable(data.path_, json.string)),
      #("start_line", json.nullable(data.start_line, json.int)),
      #("start_column", json.nullable(data.start_column, json.int)),
      #("end_line", json.nullable(data.end_line, json.int)),
      #("end_column", json.nullable(data.end_column, json.int))
    ],
  )
}

pub fn actions_can_approve_pull_request_reviews_decoder() {
  decode.bool
}

pub fn actions_can_approve_pull_request_reviews_encode(
  data: ActionsCanApprovePullRequestReviews,
) {
  json.bool(data)
}

pub fn code_scanning_alert_rule_summary_decoder() {
  use security_severity_level <- decode.optional_field(
    "security_severity_level",
    None,
    decode.optional(decode.string),
  )
  use help <- decode.optional_field("help", None, decode.optional(decode.string))
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use full_description <- decode.optional_field(
    "full_description",
    None,
    decode.optional(decode.string),
  )
  use help_uri <- decode.optional_field(
    "help_uri",
    None,
    decode.optional(decode.string),
  )
  use tags <- decode.optional_field(
    "tags",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use id <- decode.optional_field("id", None, decode.optional(decode.string))
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use severity <- decode.optional_field(
    "severity",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    CodeScanningAlertRuleSummary(
      security_severity_level: security_severity_level,
      help: help,
      name: name,
      full_description: full_description,
      help_uri: help_uri,
      tags: tags,
      id: id,
      description: description,
      severity: severity,
    ),
  )
}

pub fn code_scanning_alert_rule_summary_encode(
  data: CodeScanningAlertRuleSummary,
) {
  json.object(
    [
      #(
        "security_severity_level",
        json.nullable(data.security_severity_level, json.string),
      ),
      #("help", json.nullable(data.help, json.string)),
      #("name", json.nullable(data.name, json.string)),
      #("full_description", json.nullable(data.full_description, json.string)),
      #("help_uri", json.nullable(data.help_uri, json.string)),
      #("tags", json.nullable(data.tags, json.array(_, json.string))),
      #("id", json.nullable(data.id, json.string)),
      #("description", json.nullable(data.description, json.string)),
      #("severity", json.nullable(data.severity, json.string))
    ],
  )
}

pub fn webhook_projects_v2_item_created_decoder() {
  use projects_v2_item <- decode.field(
    "projects_v2_item",
    projects_v2_item_decoder(),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ItemCreated(
      projects_v2_item: projects_v2_item,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_item_created_encode(
  data: WebhookProjectsV2ItemCreated,
) {
  json.object(
    [
      #("projects_v2_item", projects_v2_item_encode(data.projects_v2_item)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn repository_rule_commit_message_pattern_decoder() {
  use parameters <- decode.optional_field(
    "parameters",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use type_ <- decode.field("type", decode.string)
  decode.success(
    RepositoryRuleCommitMessagePattern(parameters: parameters, type_: type_),
  )
}

pub fn repository_rule_commit_message_pattern_encode(
  data: RepositoryRuleCommitMessagePattern,
) {
  json.object(
    [
      #(
        "parameters",
        json.nullable(
          data.parameters,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("type", json.string(data.type_))
    ],
  )
}

pub fn nullable_minimal_repository_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use default_branch <- decode.optional_field(
    "default_branch",
    None,
    decode.optional(decode.string),
  )
  use branches_url <- decode.field("branches_url", decode.string)
  use size <- decode.optional_field("size", None, decode.optional(decode.int))
  use forks_url <- decode.field("forks_url", decode.string)
  use license <- decode.optional_field(
    "license",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use delete_branch_on_merge <- decode.optional_field(
    "delete_branch_on_merge",
    None,
    decode.optional(decode.bool),
  )
  use forks_count <- decode.optional_field(
    "forks_count",
    None,
    decode.optional(decode.int),
  )
  use fork <- decode.field("fork", decode.bool)
  use git_url <- decode.optional_field(
    "git_url",
    None,
    decode.optional(decode.string),
  )
  use archived <- decode.optional_field(
    "archived",
    None,
    decode.optional(decode.bool),
  )
  use private <- decode.field("private", decode.bool)
  use security_and_analysis <- decode.optional_field(
    "security_and_analysis",
    None,
    decode.optional(security_and_analysis_decoder()),
  )
  use permissions <- decode.optional_field(
    "permissions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use keys_url <- decode.field("keys_url", decode.string)
  use comments_url <- decode.field("comments_url", decode.string)
  use topics <- decode.optional_field(
    "topics",
    None,
    decode.optional(decode.list(decode.string)),
  )
  use trees_url <- decode.field("trees_url", decode.string)
  use has_downloads <- decode.optional_field(
    "has_downloads",
    None,
    decode.optional(decode.bool),
  )
  use blobs_url <- decode.field("blobs_url", decode.string)
  use has_discussions <- decode.optional_field(
    "has_discussions",
    None,
    decode.optional(decode.bool),
  )
  use teams_url <- decode.field("teams_url", decode.string)
  use watchers_count <- decode.optional_field(
    "watchers_count",
    None,
    decode.optional(decode.int),
  )
  use stargazers_url <- decode.field("stargazers_url", decode.string)
  use stargazers_count <- decode.optional_field(
    "stargazers_count",
    None,
    decode.optional(decode.int),
  )
  use contributors_url <- decode.field("contributors_url", decode.string)
  use tags_url <- decode.field("tags_url", decode.string)
  use web_commit_signoff_required <- decode.optional_field(
    "web_commit_signoff_required",
    None,
    decode.optional(decode.bool),
  )
  use issue_comment_url <- decode.field("issue_comment_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use allow_forking <- decode.optional_field(
    "allow_forking",
    None,
    decode.optional(decode.bool),
  )
  use issues_url <- decode.field("issues_url", decode.string)
  use contents_url <- decode.field("contents_url", decode.string)
  use merges_url <- decode.field("merges_url", decode.string)
  use name <- decode.field("name", decode.string)
  use languages_url <- decode.field("languages_url", decode.string)
  use temp_clone_token <- decode.optional_field(
    "temp_clone_token",
    None,
    decode.optional(decode.string),
  )
  use commits_url <- decode.field("commits_url", decode.string)
  use subscription_url <- decode.field("subscription_url", decode.string)
  use clone_url <- decode.optional_field(
    "clone_url",
    None,
    decode.optional(decode.string),
  )
  use code_of_conduct <- decode.optional_field(
    "code_of_conduct",
    None,
    decode.optional(code_of_conduct_decoder()),
  )
  use homepage <- decode.optional_field(
    "homepage",
    None,
    decode.optional(decode.string),
  )
  use issue_events_url <- decode.field("issue_events_url", decode.string)
  use mirror_url <- decode.optional_field(
    "mirror_url",
    None,
    decode.optional(decode.string),
  )
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.optional_field(
    "open_issues",
    None,
    decode.optional(decode.int),
  )
  use is_template <- decode.optional_field(
    "is_template",
    None,
    decode.optional(decode.bool),
  )
  use statuses_url <- decode.field("statuses_url", decode.string)
  use forks <- decode.optional_field("forks", None, decode.optional(decode.int))
  use archive_url <- decode.field("archive_url", decode.string)
  use visibility <- decode.optional_field(
    "visibility",
    None,
    decode.optional(decode.string),
  )
  use milestones_url <- decode.field("milestones_url", decode.string)
  use owner <- decode.field("owner", simple_user_decoder())
  use role_name <- decode.optional_field(
    "role_name",
    None,
    decode.optional(decode.string),
  )
  use assignees_url <- decode.field("assignees_url", decode.string)
  use has_wiki <- decode.optional_field(
    "has_wiki",
    None,
    decode.optional(decode.bool),
  )
  use compare_url <- decode.field("compare_url", decode.string)
  use git_tags_url <- decode.field("git_tags_url", decode.string)
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use watchers <- decode.optional_field(
    "watchers",
    None,
    decode.optional(decode.int),
  )
  use node_id <- decode.field("node_id", decode.string)
  use notifications_url <- decode.field("notifications_url", decode.string)
  use ssh_url <- decode.optional_field(
    "ssh_url",
    None,
    decode.optional(decode.string),
  )
  use language <- decode.optional_field(
    "language",
    None,
    decode.optional(decode.string),
  )
  use pushed_at <- decode.optional_field(
    "pushed_at",
    None,
    decode.optional(decode.string),
  )
  use downloads_url <- decode.field("downloads_url", decode.string)
  use subscribers_url <- decode.field("subscribers_url", decode.string)
  use subscribers_count <- decode.optional_field(
    "subscribers_count",
    None,
    decode.optional(decode.int),
  )
  use id <- decode.field("id", decode.int)
  use svn_url <- decode.optional_field(
    "svn_url",
    None,
    decode.optional(decode.string),
  )
  use full_name <- decode.field("full_name", decode.string)
  use html_url <- decode.field("html_url", decode.string)
  use disabled <- decode.optional_field(
    "disabled",
    None,
    decode.optional(decode.bool),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  use releases_url <- decode.field("releases_url", decode.string)
  use git_refs_url <- decode.field("git_refs_url", decode.string)
  use collaborators_url <- decode.field("collaborators_url", decode.string)
  use pulls_url <- decode.field("pulls_url", decode.string)
  use network_count <- decode.optional_field(
    "network_count",
    None,
    decode.optional(decode.int),
  )
  use deployments_url <- decode.field("deployments_url", decode.string)
  use has_projects <- decode.optional_field(
    "has_projects",
    None,
    decode.optional(decode.bool),
  )
  use has_pages <- decode.optional_field(
    "has_pages",
    None,
    decode.optional(decode.bool),
  )
  use open_issues_count <- decode.optional_field(
    "open_issues_count",
    None,
    decode.optional(decode.int),
  )
  use git_commits_url <- decode.field("git_commits_url", decode.string)
  use has_issues <- decode.optional_field(
    "has_issues",
    None,
    decode.optional(decode.bool),
  )
  decode.success(
    NullableMinimalRepository(
      hooks_url: hooks_url,
      default_branch: default_branch,
      branches_url: branches_url,
      size: size,
      forks_url: forks_url,
      license: license,
      delete_branch_on_merge: delete_branch_on_merge,
      forks_count: forks_count,
      fork: fork,
      git_url: git_url,
      archived: archived,
      private: private,
      security_and_analysis: security_and_analysis,
      permissions: permissions,
      keys_url: keys_url,
      comments_url: comments_url,
      topics: topics,
      trees_url: trees_url,
      has_downloads: has_downloads,
      blobs_url: blobs_url,
      has_discussions: has_discussions,
      teams_url: teams_url,
      watchers_count: watchers_count,
      stargazers_url: stargazers_url,
      stargazers_count: stargazers_count,
      contributors_url: contributors_url,
      tags_url: tags_url,
      web_commit_signoff_required: web_commit_signoff_required,
      issue_comment_url: issue_comment_url,
      events_url: events_url,
      created_at: created_at,
      allow_forking: allow_forking,
      issues_url: issues_url,
      contents_url: contents_url,
      merges_url: merges_url,
      name: name,
      languages_url: languages_url,
      temp_clone_token: temp_clone_token,
      commits_url: commits_url,
      subscription_url: subscription_url,
      clone_url: clone_url,
      code_of_conduct: code_of_conduct,
      homepage: homepage,
      issue_events_url: issue_events_url,
      mirror_url: mirror_url,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      is_template: is_template,
      statuses_url: statuses_url,
      forks: forks,
      archive_url: archive_url,
      visibility: visibility,
      milestones_url: milestones_url,
      owner: owner,
      role_name: role_name,
      assignees_url: assignees_url,
      has_wiki: has_wiki,
      compare_url: compare_url,
      git_tags_url: git_tags_url,
      updated_at: updated_at,
      watchers: watchers,
      node_id: node_id,
      notifications_url: notifications_url,
      ssh_url: ssh_url,
      language: language,
      pushed_at: pushed_at,
      downloads_url: downloads_url,
      subscribers_url: subscribers_url,
      subscribers_count: subscribers_count,
      id: id,
      svn_url: svn_url,
      full_name: full_name,
      html_url: html_url,
      disabled: disabled,
      description: description,
      releases_url: releases_url,
      git_refs_url: git_refs_url,
      collaborators_url: collaborators_url,
      pulls_url: pulls_url,
      network_count: network_count,
      deployments_url: deployments_url,
      has_projects: has_projects,
      has_pages: has_pages,
      open_issues_count: open_issues_count,
      git_commits_url: git_commits_url,
      has_issues: has_issues,
    ),
  )
}

pub fn nullable_minimal_repository_encode(data: NullableMinimalRepository) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("default_branch", json.nullable(data.default_branch, json.string)),
      #("branches_url", json.string(data.branches_url)),
      #("size", json.nullable(data.size, json.int)),
      #("forks_url", json.string(data.forks_url)),
      #(
        "license",
        json.nullable(
          data.license,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "delete_branch_on_merge",
        json.nullable(data.delete_branch_on_merge, json.bool),
      ),
      #("forks_count", json.nullable(data.forks_count, json.int)),
      #("fork", json.bool(data.fork)),
      #("git_url", json.nullable(data.git_url, json.string)),
      #("archived", json.nullable(data.archived, json.bool)),
      #("private", json.bool(data.private)),
      #(
        "security_and_analysis",
        json.nullable(data.security_and_analysis, security_and_analysis_encode),
      ),
      #(
        "permissions",
        json.nullable(
          data.permissions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("keys_url", json.string(data.keys_url)),
      #("comments_url", json.string(data.comments_url)),
      #("topics", json.nullable(data.topics, json.array(_, json.string))),
      #("trees_url", json.string(data.trees_url)),
      #("has_downloads", json.nullable(data.has_downloads, json.bool)),
      #("blobs_url", json.string(data.blobs_url)),
      #("has_discussions", json.nullable(data.has_discussions, json.bool)),
      #("teams_url", json.string(data.teams_url)),
      #("watchers_count", json.nullable(data.watchers_count, json.int)),
      #("stargazers_url", json.string(data.stargazers_url)),
      #("stargazers_count", json.nullable(data.stargazers_count, json.int)),
      #("contributors_url", json.string(data.contributors_url)),
      #("tags_url", json.string(data.tags_url)),
      #(
        "web_commit_signoff_required",
        json.nullable(data.web_commit_signoff_required, json.bool),
      ),
      #("issue_comment_url", json.string(data.issue_comment_url)),
      #("events_url", json.string(data.events_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("allow_forking", json.nullable(data.allow_forking, json.bool)),
      #("issues_url", json.string(data.issues_url)),
      #("contents_url", json.string(data.contents_url)),
      #("merges_url", json.string(data.merges_url)),
      #("name", json.string(data.name)),
      #("languages_url", json.string(data.languages_url)),
      #("temp_clone_token", json.nullable(data.temp_clone_token, json.string)),
      #("commits_url", json.string(data.commits_url)),
      #("subscription_url", json.string(data.subscription_url)),
      #("clone_url", json.nullable(data.clone_url, json.string)),
      #(
        "code_of_conduct",
        json.nullable(data.code_of_conduct, code_of_conduct_encode),
      ),
      #("homepage", json.nullable(data.homepage, json.string)),
      #("issue_events_url", json.string(data.issue_events_url)),
      #("mirror_url", json.nullable(data.mirror_url, json.string)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.nullable(data.open_issues, json.int)),
      #("is_template", json.nullable(data.is_template, json.bool)),
      #("statuses_url", json.string(data.statuses_url)),
      #("forks", json.nullable(data.forks, json.int)),
      #("archive_url", json.string(data.archive_url)),
      #("visibility", json.nullable(data.visibility, json.string)),
      #("milestones_url", json.string(data.milestones_url)),
      #("owner", simple_user_encode(data.owner)),
      #("role_name", json.nullable(data.role_name, json.string)),
      #("assignees_url", json.string(data.assignees_url)),
      #("has_wiki", json.nullable(data.has_wiki, json.bool)),
      #("compare_url", json.string(data.compare_url)),
      #("git_tags_url", json.string(data.git_tags_url)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("watchers", json.nullable(data.watchers, json.int)),
      #("node_id", json.string(data.node_id)),
      #("notifications_url", json.string(data.notifications_url)),
      #("ssh_url", json.nullable(data.ssh_url, json.string)),
      #("language", json.nullable(data.language, json.string)),
      #("pushed_at", json.nullable(data.pushed_at, json.string)),
      #("downloads_url", json.string(data.downloads_url)),
      #("subscribers_url", json.string(data.subscribers_url)),
      #("subscribers_count", json.nullable(data.subscribers_count, json.int)),
      #("id", json.int(data.id)),
      #("svn_url", json.nullable(data.svn_url, json.string)),
      #("full_name", json.string(data.full_name)),
      #("html_url", json.string(data.html_url)),
      #("disabled", json.nullable(data.disabled, json.bool)),
      #("description", json.nullable(data.description, json.string)),
      #("releases_url", json.string(data.releases_url)),
      #("git_refs_url", json.string(data.git_refs_url)),
      #("collaborators_url", json.string(data.collaborators_url)),
      #("pulls_url", json.string(data.pulls_url)),
      #("network_count", json.nullable(data.network_count, json.int)),
      #("deployments_url", json.string(data.deployments_url)),
      #("has_projects", json.nullable(data.has_projects, json.bool)),
      #("has_pages", json.nullable(data.has_pages, json.bool)),
      #("open_issues_count", json.nullable(data.open_issues_count, json.int)),
      #("git_commits_url", json.string(data.git_commits_url)),
      #("has_issues", json.nullable(data.has_issues, json.bool))
    ],
  )
}

pub fn root_decoder() {
  use commit_search_url <- decode.field("commit_search_url", decode.string)
  use gists_url <- decode.field("gists_url", decode.string)
  use starred_gists_url <- decode.field("starred_gists_url", decode.string)
  use following_url <- decode.field("following_url", decode.string)
  use current_user_url <- decode.field("current_user_url", decode.string)
  use organization_url <- decode.field("organization_url", decode.string)
  use label_search_url <- decode.field("label_search_url", decode.string)
  use keys_url <- decode.field("keys_url", decode.string)
  use organization_repositories_url <- decode.field(
    "organization_repositories_url",
    decode.string,
  )
  use feeds_url <- decode.field("feeds_url", decode.string)
  use followers_url <- decode.field("followers_url", decode.string)
  use hub_url <- decode.optional_field(
    "hub_url",
    None,
    decode.optional(decode.string),
  )
  use current_user_repositories_url <- decode.field(
    "current_user_repositories_url",
    decode.string,
  )
  use emails_url <- decode.field("emails_url", decode.string)
  use topic_search_url <- decode.optional_field(
    "topic_search_url",
    None,
    decode.optional(decode.string),
  )
  use events_url <- decode.field("events_url", decode.string)
  use public_gists_url <- decode.field("public_gists_url", decode.string)
  use issues_url <- decode.field("issues_url", decode.string)
  use authorizations_url <- decode.field("authorizations_url", decode.string)
  use code_search_url <- decode.field("code_search_url", decode.string)
  use user_repositories_url <- decode.field(
    "user_repositories_url",
    decode.string,
  )
  use rate_limit_url <- decode.field("rate_limit_url", decode.string)
  use user_search_url <- decode.field("user_search_url", decode.string)
  use repository_search_url <- decode.field(
    "repository_search_url",
    decode.string,
  )
  use starred_url <- decode.field("starred_url", decode.string)
  use current_user_authorizations_html_url <- decode.field(
    "current_user_authorizations_html_url",
    decode.string,
  )
  use notifications_url <- decode.field("notifications_url", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use organization_teams_url <- decode.field(
    "organization_teams_url",
    decode.string,
  )
  use user_url <- decode.field("user_url", decode.string)
  use user_organizations_url <- decode.field(
    "user_organizations_url",
    decode.string,
  )
  use emojis_url <- decode.field("emojis_url", decode.string)
  use issue_search_url <- decode.field("issue_search_url", decode.string)
  decode.success(
    Root(
      commit_search_url: commit_search_url,
      gists_url: gists_url,
      starred_gists_url: starred_gists_url,
      following_url: following_url,
      current_user_url: current_user_url,
      organization_url: organization_url,
      label_search_url: label_search_url,
      keys_url: keys_url,
      organization_repositories_url: organization_repositories_url,
      feeds_url: feeds_url,
      followers_url: followers_url,
      hub_url: hub_url,
      current_user_repositories_url: current_user_repositories_url,
      emails_url: emails_url,
      topic_search_url: topic_search_url,
      events_url: events_url,
      public_gists_url: public_gists_url,
      issues_url: issues_url,
      authorizations_url: authorizations_url,
      code_search_url: code_search_url,
      user_repositories_url: user_repositories_url,
      rate_limit_url: rate_limit_url,
      user_search_url: user_search_url,
      repository_search_url: repository_search_url,
      starred_url: starred_url,
      current_user_authorizations_html_url: current_user_authorizations_html_url,
      notifications_url: notifications_url,
      repository_url: repository_url,
      organization_teams_url: organization_teams_url,
      user_url: user_url,
      user_organizations_url: user_organizations_url,
      emojis_url: emojis_url,
      issue_search_url: issue_search_url,
    ),
  )
}

pub fn root_encode(data: Root) {
  json.object(
    [
      #("commit_search_url", json.string(data.commit_search_url)),
      #("gists_url", json.string(data.gists_url)),
      #("starred_gists_url", json.string(data.starred_gists_url)),
      #("following_url", json.string(data.following_url)),
      #("current_user_url", json.string(data.current_user_url)),
      #("organization_url", json.string(data.organization_url)),
      #("label_search_url", json.string(data.label_search_url)),
      #("keys_url", json.string(data.keys_url)),
      #(
        "organization_repositories_url",
        json.string(data.organization_repositories_url),
      ),
      #("feeds_url", json.string(data.feeds_url)),
      #("followers_url", json.string(data.followers_url)),
      #("hub_url", json.nullable(data.hub_url, json.string)),
      #(
        "current_user_repositories_url",
        json.string(data.current_user_repositories_url),
      ),
      #("emails_url", json.string(data.emails_url)),
      #("topic_search_url", json.nullable(data.topic_search_url, json.string)),
      #("events_url", json.string(data.events_url)),
      #("public_gists_url", json.string(data.public_gists_url)),
      #("issues_url", json.string(data.issues_url)),
      #("authorizations_url", json.string(data.authorizations_url)),
      #("code_search_url", json.string(data.code_search_url)),
      #("user_repositories_url", json.string(data.user_repositories_url)),
      #("rate_limit_url", json.string(data.rate_limit_url)),
      #("user_search_url", json.string(data.user_search_url)),
      #("repository_search_url", json.string(data.repository_search_url)),
      #("starred_url", json.string(data.starred_url)),
      #(
        "current_user_authorizations_html_url",
        json.string(data.current_user_authorizations_html_url),
      ),
      #("notifications_url", json.string(data.notifications_url)),
      #("repository_url", json.string(data.repository_url)),
      #("organization_teams_url", json.string(data.organization_teams_url)),
      #("user_url", json.string(data.user_url)),
      #("user_organizations_url", json.string(data.user_organizations_url)),
      #("emojis_url", json.string(data.emojis_url)),
      #("issue_search_url", json.string(data.issue_search_url))
    ],
  )
}

pub fn nullable_alert_updated_at_decoder() {
  decode.string
}

pub fn nullable_alert_updated_at_encode(data: NullableAlertUpdatedAt) {
  json.string(data)
}

pub fn webhook_secret_scanning_alert_reopened_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", secret_scanning_alert_webhook_decoder())
  decode.success(
    WebhookSecretScanningAlertReopened(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_secret_scanning_alert_reopened_encode(
  data: WebhookSecretScanningAlertReopened,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", secret_scanning_alert_webhook_encode(data.alert))
    ],
  )
}

pub fn sigstore_bundle_0_decoder() {
  use verification_material <- decode.optional_field(
    "verificationMaterial",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use dsse_envelope <- decode.optional_field(
    "dsseEnvelope",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use media_type <- decode.optional_field(
    "mediaType",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    SigstoreBundle0(
      verification_material: verification_material,
      dsse_envelope: dsse_envelope,
      media_type: media_type,
    ),
  )
}

pub fn sigstore_bundle_0_encode(data: SigstoreBundle0) {
  json.object(
    [
      #(
        "verificationMaterial",
        json.nullable(
          data.verification_material,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "dsseEnvelope",
        json.nullable(
          data.dsse_envelope,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("mediaType", json.nullable(data.media_type, json.string))
    ],
  )
}

pub fn contributor_activity_decoder() {
  use total <- decode.field("total", decode.int)
  use author <- decode.field("author", nullable_simple_user_decoder())
  use weeks <- decode.field(
    "weeks",
    decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(ContributorActivity(total: total, author: author, weeks: weeks))
}

pub fn contributor_activity_encode(data: ContributorActivity) {
  json.object(
    [
      #("total", json.int(data.total)),
      #("author", nullable_simple_user_encode(data.author)),
      #("weeks", json.array(_, fn(_) { panic as "object in array" })(data.weeks))
    ],
  )
}

pub fn webhooks_code_scanning_commit_oid_decoder() {
  decode.string
}

pub fn webhooks_code_scanning_commit_oid_encode(
  data: WebhooksCodeScanningCommitOid,
) {
  json.string(data)
}

pub fn gist_commit_decoder() {
  use change_status <- decode.field(
    "change_status",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use user <- decode.field("user", nullable_simple_user_decoder())
  use url <- decode.field("url", decode.string)
  use committed_at <- decode.field("committed_at", decode.string)
  use version <- decode.field("version", decode.string)
  decode.success(
    GistCommit(
      change_status: change_status,
      user: user,
      url: url,
      committed_at: committed_at,
      version: version,
    ),
  )
}

pub fn gist_commit_encode(data: GistCommit) {
  json.object(
    [
      #(
        "change_status",
        fn(_) { panic as "Literal object inside field" }(data.change_status),
      ),
      #("user", nullable_simple_user_encode(data.user)),
      #("url", json.string(data.url)),
      #("committed_at", json.string(data.committed_at)),
      #("version", json.string(data.version))
    ],
  )
}

pub fn enterprise_decoder() {
  use avatar_url <- decode.field("avatar_url", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use slug <- decode.field("slug", decode.string)
  use website_url <- decode.optional_field(
    "website_url",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    Enterprise(
      avatar_url: avatar_url,
      created_at: created_at,
      name: name,
      slug: slug,
      website_url: website_url,
      updated_at: updated_at,
      node_id: node_id,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn enterprise_encode(data: Enterprise) {
  json.object(
    [
      #("avatar_url", json.string(data.avatar_url)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("name", json.string(data.name)),
      #("slug", json.string(data.slug)),
      #("website_url", json.nullable(data.website_url, json.string)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn webhook_issue_comment_deleted_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_issue_comment_decoder())
  decode.success(
    WebhookIssueCommentDeleted(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_issue_comment_deleted_encode(data: WebhookIssueCommentDeleted) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "AllOf inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_issue_comment_encode(data.comment))
    ],
  )
}

pub fn webhooks_ref_0_decoder() {
  decode.string
}

pub fn webhooks_ref_0_encode(data: WebhooksRef0) {
  json.string(data)
}

pub fn webhooks_milestone_3_decoder() {
  use closed_at <- decode.optional_field(
    "closed_at",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", decode.int)
  use due_on <- decode.optional_field(
    "due_on",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use creator <- decode.optional_field(
    "creator",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use closed_issues <- decode.field("closed_issues", decode.int)
  use labels_url <- decode.field("labels_url", decode.string)
  use url <- decode.field("url", decode.string)
  use open_issues <- decode.field("open_issues", decode.int)
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use title <- decode.field("title", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksMilestone3(
      closed_at: closed_at,
      number: number,
      due_on: due_on,
      created_at: created_at,
      creator: creator,
      closed_issues: closed_issues,
      labels_url: labels_url,
      url: url,
      open_issues: open_issues,
      state: state,
      updated_at: updated_at,
      node_id: node_id,
      title: title,
      id: id,
      html_url: html_url,
      description: description,
    ),
  )
}

pub fn webhooks_milestone_3_encode(data: WebhooksMilestone3) {
  json.object(
    [
      #("closed_at", json.nullable(data.closed_at, json.string)),
      #("number", json.int(data.number)),
      #("due_on", json.nullable(data.due_on, json.string)),
      #("created_at", json.string(data.created_at)),
      #(
        "creator",
        json.nullable(
          data.creator,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("closed_issues", json.int(data.closed_issues)),
      #("labels_url", json.string(data.labels_url)),
      #("url", json.string(data.url)),
      #("open_issues", json.int(data.open_issues)),
      #("state", json.string(data.state)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("title", json.string(data.title)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn dependabot_alert_decoder() {
  use dismissed_comment <- decode.optional_field(
    "dismissed_comment",
    None,
    decode.optional(decode.string),
  )
  use number <- decode.field("number", alert_number_decoder())
  use dismissed_at <- decode.field("dismissed_at", alert_dismissed_at_decoder())
  use created_at <- decode.field("created_at", alert_created_at_decoder())
  use dependency <- decode.field(
    "dependency",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use dismissed_by <- decode.field(
    "dismissed_by",
    nullable_simple_user_decoder(),
  )
  use url <- decode.field("url", alert_url_decoder())
  use state <- decode.field("state", decode.string)
  use updated_at <- decode.field("updated_at", alert_updated_at_decoder())
  use security_advisory <- decode.field(
    "security_advisory",
    dependabot_alert_security_advisory_decoder(),
  )
  use auto_dismissed_at <- decode.optional_field(
    "auto_dismissed_at",
    None,
    decode.optional(alert_auto_dismissed_at_decoder()),
  )
  use dismissed_reason <- decode.optional_field(
    "dismissed_reason",
    None,
    decode.optional(decode.string),
  )
  use html_url <- decode.field("html_url", alert_html_url_decoder())
  use security_vulnerability <- decode.field(
    "security_vulnerability",
    dependabot_alert_security_vulnerability_decoder(),
  )
  use fixed_at <- decode.field("fixed_at", alert_fixed_at_decoder())
  decode.success(
    DependabotAlert(
      dismissed_comment: dismissed_comment,
      number: number,
      dismissed_at: dismissed_at,
      created_at: created_at,
      dependency: dependency,
      dismissed_by: dismissed_by,
      url: url,
      state: state,
      updated_at: updated_at,
      security_advisory: security_advisory,
      auto_dismissed_at: auto_dismissed_at,
      dismissed_reason: dismissed_reason,
      html_url: html_url,
      security_vulnerability: security_vulnerability,
      fixed_at: fixed_at,
    ),
  )
}

pub fn dependabot_alert_encode(data: DependabotAlert) {
  json.object(
    [
      #("dismissed_comment", json.nullable(data.dismissed_comment, json.string)),
      #("number", alert_number_encode(data.number)),
      #("dismissed_at", alert_dismissed_at_encode(data.dismissed_at)),
      #("created_at", alert_created_at_encode(data.created_at)),
      #(
        "dependency",
        fn(_) { panic as "Literal object inside field" }(data.dependency),
      ),
      #("dismissed_by", nullable_simple_user_encode(data.dismissed_by)),
      #("url", alert_url_encode(data.url)),
      #("state", json.string(data.state)),
      #("updated_at", alert_updated_at_encode(data.updated_at)),
      #(
        "security_advisory",
        dependabot_alert_security_advisory_encode(data.security_advisory),
      ),
      #(
        "auto_dismissed_at",
        json.nullable(data.auto_dismissed_at, alert_auto_dismissed_at_encode),
      ),
      #("dismissed_reason", json.nullable(data.dismissed_reason, json.string)),
      #("html_url", alert_html_url_encode(data.html_url)),
      #(
        "security_vulnerability",
        dependabot_alert_security_vulnerability_encode(
          data.security_vulnerability,
        ),
      ),
      #("fixed_at", alert_fixed_at_encode(data.fixed_at))
    ],
  )
}

pub fn code_scanning_default_setup_update_decoder() {
  use query_suite <- decode.optional_field(
    "query_suite",
    None,
    decode.optional(decode.string),
  )
  use state <- decode.optional_field(
    "state",
    None,
    decode.optional(decode.string),
  )
  use languages <- decode.optional_field(
    "languages",
    None,
    decode.optional(decode.list(decode.string)),
  )
  decode.success(
    CodeScanningDefaultSetupUpdate(
      query_suite: query_suite,
      state: state,
      languages: languages,
    ),
  )
}

pub fn code_scanning_default_setup_update_encode(
  data: CodeScanningDefaultSetupUpdate,
) {
  json.object(
    [
      #("query_suite", json.nullable(data.query_suite, json.string)),
      #("state", json.nullable(data.state, json.string)),
      #("languages", json.nullable(data.languages, json.array(_, json.string)))
    ],
  )
}

pub fn timeline_commit_commented_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use comments <- decode.optional_field(
    "comments",
    None,
    decode.optional(decode.list(commit_comment_decoder())),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use event <- decode.optional_field(
    "event",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    TimelineCommitCommentedEvent(
      commit_id: commit_id,
      comments: comments,
      node_id: node_id,
      event: event,
    ),
  )
}

pub fn timeline_commit_commented_event_encode(data: TimelineCommitCommentedEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #(
        "comments",
        json.nullable(data.comments, json.array(_, commit_comment_encode)),
      ),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("event", json.nullable(data.event, json.string))
    ],
  )
}

pub fn webhook_delete_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use ref_type <- decode.field("ref_type", decode.string)
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use pusher_type <- decode.field(
    "pusher_type",
    webhooks_deploy_pusher_type_decoder(),
  )
  use ref <- decode.field("ref", webhooks_ref_0_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDelete(
      enterprise: enterprise,
      ref_type: ref_type,
      repository: repository,
      pusher_type: pusher_type,
      ref: ref,
      organization: organization,
      sender: sender,
      installation: installation,
    ),
  )
}

pub fn webhook_delete_encode(data: WebhookDelete) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("ref_type", json.string(data.ref_type)),
      #("repository", repository_webhooks_encode(data.repository)),
      #("pusher_type", webhooks_deploy_pusher_type_encode(data.pusher_type)),
      #("ref", webhooks_ref_0_encode(data.ref)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn webhook_deployment_review_rejected_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use approver <- decode.optional_field(
    "approver",
    None,
    decode.optional(webhooks_approver_decoder()),
  )
  use workflow_job_run <- decode.optional_field(
    "workflow_job_run",
    None,
    decode.optional(webhooks_workflow_job_run_decoder()),
  )
  use workflow_job_runs <- decode.optional_field(
    "workflow_job_runs",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use workflow_run <- decode.optional_field(
    "workflow_run",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use reviewers <- decode.optional_field(
    "reviewers",
    None,
    decode.optional(webhooks_reviewers_decoder()),
  )
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use since <- decode.field("since", decode.string)
  use comment <- decode.optional_field(
    "comment",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhookDeploymentReviewRejected(
      enterprise: enterprise,
      approver: approver,
      workflow_job_run: workflow_job_run,
      workflow_job_runs: workflow_job_runs,
      repository: repository,
      workflow_run: workflow_run,
      reviewers: reviewers,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      since: since,
      comment: comment,
    ),
  )
}

pub fn webhook_deployment_review_rejected_encode(
  data: WebhookDeploymentReviewRejected,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("approver", json.nullable(data.approver, webhooks_approver_encode)),
      #(
        "workflow_job_run",
        json.nullable(data.workflow_job_run, webhooks_workflow_job_run_encode),
      ),
      #(
        "workflow_job_runs",
        json.nullable(
          data.workflow_job_runs,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "workflow_run",
        json.nullable(
          data.workflow_run,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("reviewers", json.nullable(data.reviewers, webhooks_reviewers_encode)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("since", json.string(data.since)),
      #("comment", json.nullable(data.comment, json.string))
    ],
  )
}

pub fn secret_scanning_alert_state_decoder() {
  decode.string
}

pub fn secret_scanning_alert_state_encode(data: SecretScanningAlertState) {
  json.string(data)
}

pub fn protected_branch_decoder() {
  use allow_fork_syncing <- decode.optional_field(
    "allow_fork_syncing",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use enforce_admins <- decode.optional_field(
    "enforce_admins",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use block_creations <- decode.optional_field(
    "block_creations",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use restrictions <- decode.optional_field(
    "restrictions",
    None,
    decode.optional(branch_restriction_policy_decoder()),
  )
  use required_conversation_resolution <- decode.optional_field(
    "required_conversation_resolution",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use allow_deletions <- decode.optional_field(
    "allow_deletions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use url <- decode.field("url", decode.string)
  use required_pull_request_reviews <- decode.optional_field(
    "required_pull_request_reviews",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use allow_force_pushes <- decode.optional_field(
    "allow_force_pushes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use lock_branch <- decode.optional_field(
    "lock_branch",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use required_status_checks <- decode.optional_field(
    "required_status_checks",
    None,
    decode.optional(status_check_policy_decoder()),
  )
  use required_linear_history <- decode.optional_field(
    "required_linear_history",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use required_signatures <- decode.optional_field(
    "required_signatures",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    ProtectedBranch(
      allow_fork_syncing: allow_fork_syncing,
      enforce_admins: enforce_admins,
      block_creations: block_creations,
      restrictions: restrictions,
      required_conversation_resolution: required_conversation_resolution,
      allow_deletions: allow_deletions,
      url: url,
      required_pull_request_reviews: required_pull_request_reviews,
      allow_force_pushes: allow_force_pushes,
      lock_branch: lock_branch,
      required_status_checks: required_status_checks,
      required_linear_history: required_linear_history,
      required_signatures: required_signatures,
    ),
  )
}

pub fn protected_branch_encode(data: ProtectedBranch) {
  json.object(
    [
      #(
        "allow_fork_syncing",
        json.nullable(
          data.allow_fork_syncing,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "enforce_admins",
        json.nullable(
          data.enforce_admins,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "block_creations",
        json.nullable(
          data.block_creations,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "restrictions",
        json.nullable(data.restrictions, branch_restriction_policy_encode),
      ),
      #(
        "required_conversation_resolution",
        json.nullable(
          data.required_conversation_resolution,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "allow_deletions",
        json.nullable(
          data.allow_deletions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("url", json.string(data.url)),
      #(
        "required_pull_request_reviews",
        json.nullable(
          data.required_pull_request_reviews,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "allow_force_pushes",
        json.nullable(
          data.allow_force_pushes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "lock_branch",
        json.nullable(
          data.lock_branch,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "required_status_checks",
        json.nullable(data.required_status_checks, status_check_policy_encode),
      ),
      #(
        "required_linear_history",
        json.nullable(
          data.required_linear_history,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "required_signatures",
        json.nullable(
          data.required_signatures,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhooks_answer_decoder() {
  use body <- decode.field("body", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use user <- decode.optional_field(
    "user",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use child_comment_count <- decode.field("child_comment_count", decode.int)
  use author_association <- decode.field("author_association", decode.string)
  use discussion_id <- decode.field("discussion_id", decode.int)
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use repository_url <- decode.field("repository_url", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    WebhooksAnswer(
      body: body,
      created_at: created_at,
      reactions: reactions,
      user: user,
      child_comment_count: child_comment_count,
      author_association: author_association,
      discussion_id: discussion_id,
      updated_at: updated_at,
      node_id: node_id,
      repository_url: repository_url,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn webhooks_answer_encode(data: WebhooksAnswer) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("created_at", json.string(data.created_at)),
      #(
        "reactions",
        json.nullable(
          data.reactions,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "user",
        json.nullable(
          data.user,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("child_comment_count", json.int(data.child_comment_count)),
      #("author_association", json.string(data.author_association)),
      #("discussion_id", json.int(data.discussion_id)),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("repository_url", json.string(data.repository_url)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn webhook_issue_comment_edited_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.field("changes", webhooks_changes_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use comment <- decode.field("comment", webhooks_issue_comment_decoder())
  decode.success(
    WebhookIssueCommentEdited(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
      comment: comment,
    ),
  )
}

pub fn webhook_issue_comment_edited_encode(data: WebhookIssueCommentEdited) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("changes", webhooks_changes_encode(data.changes)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "AllOf inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("comment", webhooks_issue_comment_encode(data.comment))
    ],
  )
}

pub fn license_decoder() {
  use body <- decode.field("body", decode.string)
  use permissions <- decode.field("permissions", decode.list(decode.string))
  use spdx_id <- decode.optional_field(
    "spdx_id",
    None,
    decode.optional(decode.string),
  )
  use name <- decode.field("name", decode.string)
  use featured <- decode.field("featured", decode.bool)
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use implementation <- decode.field("implementation", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use conditions <- decode.field("conditions", decode.list(decode.string))
  use limitations <- decode.field("limitations", decode.list(decode.string))
  use html_url <- decode.field("html_url", decode.string)
  use description <- decode.field("description", decode.string)
  use key <- decode.field("key", decode.string)
  decode.success(
    License(
      body: body,
      permissions: permissions,
      spdx_id: spdx_id,
      name: name,
      featured: featured,
      url: url,
      implementation: implementation,
      node_id: node_id,
      conditions: conditions,
      limitations: limitations,
      html_url: html_url,
      description: description,
      key: key,
    ),
  )
}

pub fn license_encode(data: License) {
  json.object(
    [
      #("body", json.string(data.body)),
      #("permissions", json.array(_, json.string)(data.permissions)),
      #("spdx_id", json.nullable(data.spdx_id, json.string)),
      #("name", json.string(data.name)),
      #("featured", json.bool(data.featured)),
      #("url", json.nullable(data.url, json.string)),
      #("implementation", json.string(data.implementation)),
      #("node_id", json.string(data.node_id)),
      #("conditions", json.array(_, json.string)(data.conditions)),
      #("limitations", json.array(_, json.string)(data.limitations)),
      #("html_url", json.string(data.html_url)),
      #("description", json.string(data.description)),
      #("key", json.string(data.key))
    ],
  )
}

pub fn webhook_dependabot_alert_auto_dismissed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use alert <- decode.field("alert", dependabot_alert_decoder())
  decode.success(
    WebhookDependabotAlertAutoDismissed(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
      alert: alert,
    ),
  )
}

pub fn webhook_dependabot_alert_auto_dismissed_encode(
  data: WebhookDependabotAlertAutoDismissed,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("alert", dependabot_alert_encode(data.alert))
    ],
  )
}

pub fn webhooks_team_decoder() {
  use privacy <- decode.optional_field(
    "privacy",
    None,
    decode.optional(decode.string),
  )
  use members_url <- decode.optional_field(
    "members_url",
    None,
    decode.optional(decode.string),
  )
  use parent <- decode.optional_field(
    "parent",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use name <- decode.field("name", decode.string)
  use slug <- decode.optional_field("slug", None, decode.optional(decode.string))
  use url <- decode.optional_field("url", None, decode.optional(decode.string))
  use permission <- decode.optional_field(
    "permission",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.optional_field(
    "node_id",
    None,
    decode.optional(decode.string),
  )
  use repositories_url <- decode.optional_field(
    "repositories_url",
    None,
    decode.optional(decode.string),
  )
  use deleted <- decode.optional_field(
    "deleted",
    None,
    decode.optional(decode.bool),
  )
  use id <- decode.field("id", decode.int)
  use html_url <- decode.optional_field(
    "html_url",
    None,
    decode.optional(decode.string),
  )
  use notification_setting <- decode.optional_field(
    "notification_setting",
    None,
    decode.optional(decode.string),
  )
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    WebhooksTeam(
      privacy: privacy,
      members_url: members_url,
      parent: parent,
      name: name,
      slug: slug,
      url: url,
      permission: permission,
      node_id: node_id,
      repositories_url: repositories_url,
      deleted: deleted,
      id: id,
      html_url: html_url,
      notification_setting: notification_setting,
      description: description,
    ),
  )
}

pub fn webhooks_team_encode(data: WebhooksTeam) {
  json.object(
    [
      #("privacy", json.nullable(data.privacy, json.string)),
      #("members_url", json.nullable(data.members_url, json.string)),
      #(
        "parent",
        json.nullable(
          data.parent,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("name", json.string(data.name)),
      #("slug", json.nullable(data.slug, json.string)),
      #("url", json.nullable(data.url, json.string)),
      #("permission", json.nullable(data.permission, json.string)),
      #("node_id", json.nullable(data.node_id, json.string)),
      #("repositories_url", json.nullable(data.repositories_url, json.string)),
      #("deleted", json.nullable(data.deleted, json.bool)),
      #("id", json.int(data.id)),
      #("html_url", json.nullable(data.html_url, json.string)),
      #(
        "notification_setting",
        json.nullable(data.notification_setting, json.string),
      ),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn user_search_result_item_decoder() {
  use user_view_type <- decode.optional_field(
    "user_view_type",
    None,
    decode.optional(decode.string),
  )
  use gists_url <- decode.field("gists_url", decode.string)
  use text_matches <- decode.optional_field(
    "text_matches",
    None,
    decode.optional(search_result_text_matches_decoder()),
  )
  use following_url <- decode.field("following_url", decode.string)
  use blog <- decode.optional_field("blog", None, decode.optional(decode.string))
  use followers_url <- decode.field("followers_url", decode.string)
  use subscriptions_url <- decode.field("subscriptions_url", decode.string)
  use received_events_url <- decode.field("received_events_url", decode.string)
  use bio <- decode.optional_field("bio", None, decode.optional(decode.string))
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use public_repos <- decode.optional_field(
    "public_repos",
    None,
    decode.optional(decode.int),
  )
  use name <- decode.optional_field("name", None, decode.optional(decode.string))
  use hireable <- decode.optional_field(
    "hireable",
    None,
    decode.optional(decode.bool),
  )
  use url <- decode.field("url", decode.string)
  use starred_url <- decode.field("starred_url", decode.string)
  use organizations_url <- decode.field("organizations_url", decode.string)
  use following <- decode.optional_field(
    "following",
    None,
    decode.optional(decode.int),
  )
  use repos_url <- decode.field("repos_url", decode.string)
  use score <- decode.field("score", decode.float)
  use followers <- decode.optional_field(
    "followers",
    None,
    decode.optional(decode.int),
  )
  use location <- decode.optional_field(
    "location",
    None,
    decode.optional(decode.string),
  )
  use gravatar_id <- decode.optional_field(
    "gravatar_id",
    None,
    decode.optional(decode.string),
  )
  use site_admin <- decode.field("site_admin", decode.bool)
  use suspended_at <- decode.optional_field(
    "suspended_at",
    None,
    decode.optional(decode.string),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use node_id <- decode.field("node_id", decode.string)
  use public_gists <- decode.optional_field(
    "public_gists",
    None,
    decode.optional(decode.int),
  )
  use type_ <- decode.field("type", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  use email <- decode.optional_field(
    "email",
    None,
    decode.optional(decode.string),
  )
  use company <- decode.optional_field(
    "company",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    UserSearchResultItem(
      user_view_type: user_view_type,
      gists_url: gists_url,
      text_matches: text_matches,
      following_url: following_url,
      blog: blog,
      followers_url: followers_url,
      subscriptions_url: subscriptions_url,
      received_events_url: received_events_url,
      bio: bio,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      created_at: created_at,
      public_repos: public_repos,
      name: name,
      hireable: hireable,
      url: url,
      starred_url: starred_url,
      organizations_url: organizations_url,
      following: following,
      repos_url: repos_url,
      score: score,
      followers: followers,
      location: location,
      gravatar_id: gravatar_id,
      site_admin: site_admin,
      suspended_at: suspended_at,
      updated_at: updated_at,
      node_id: node_id,
      public_gists: public_gists,
      type_: type_,
      id: id,
      html_url: html_url,
      email: email,
      company: company,
    ),
  )
}

pub fn user_search_result_item_encode(data: UserSearchResultItem) {
  json.object(
    [
      #("user_view_type", json.nullable(data.user_view_type, json.string)),
      #("gists_url", json.string(data.gists_url)),
      #(
        "text_matches",
        json.nullable(data.text_matches, search_result_text_matches_encode),
      ),
      #("following_url", json.string(data.following_url)),
      #("blog", json.nullable(data.blog, json.string)),
      #("followers_url", json.string(data.followers_url)),
      #("subscriptions_url", json.string(data.subscriptions_url)),
      #("received_events_url", json.string(data.received_events_url)),
      #("bio", json.nullable(data.bio, json.string)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("public_repos", json.nullable(data.public_repos, json.int)),
      #("name", json.nullable(data.name, json.string)),
      #("hireable", json.nullable(data.hireable, json.bool)),
      #("url", json.string(data.url)),
      #("starred_url", json.string(data.starred_url)),
      #("organizations_url", json.string(data.organizations_url)),
      #("following", json.nullable(data.following, json.int)),
      #("repos_url", json.string(data.repos_url)),
      #("score", json.float(data.score)),
      #("followers", json.nullable(data.followers, json.int)),
      #("location", json.nullable(data.location, json.string)),
      #("gravatar_id", json.nullable(data.gravatar_id, json.string)),
      #("site_admin", json.bool(data.site_admin)),
      #("suspended_at", json.nullable(data.suspended_at, json.string)),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #("node_id", json.string(data.node_id)),
      #("public_gists", json.nullable(data.public_gists, json.int)),
      #("type", json.string(data.type_)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url)),
      #("email", json.nullable(data.email, json.string)),
      #("company", json.nullable(data.company, json.string))
    ],
  )
}

pub fn webhook_discussion_unpinned_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use discussion <- decode.field("discussion", discussion_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookDiscussionUnpinned(
      enterprise: enterprise,
      discussion: discussion,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_discussion_unpinned_encode(data: WebhookDiscussionUnpinned) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("discussion", discussion_encode(data.discussion)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn unassigned_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use assignee <- decode.field("assignee", simple_user_decoder())
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    nullable_integration_decoder(),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  use assigner <- decode.field("assigner", simple_user_decoder())
  decode.success(
    UnassignedIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      assignee: assignee,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      node_id: node_id,
      event: event,
      id: id,
      assigner: assigner,
    ),
  )
}

pub fn unassigned_issue_event_encode(data: UnassignedIssueEvent) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("assignee", simple_user_encode(data.assignee)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        nullable_integration_encode(data.performed_via_github_app),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id)),
      #("assigner", simple_user_encode(data.assigner))
    ],
  )
}

pub fn nullable_organization_simple_decoder() {
  use hooks_url <- decode.field("hooks_url", decode.string)
  use members_url <- decode.field("members_url", decode.string)
  use events_url <- decode.field("events_url", decode.string)
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use issues_url <- decode.field("issues_url", decode.string)
  use url <- decode.field("url", decode.string)
  use repos_url <- decode.field("repos_url", decode.string)
  use public_members_url <- decode.field("public_members_url", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use id <- decode.field("id", decode.int)
  use description <- decode.optional_field(
    "description",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    NullableOrganizationSimple(
      hooks_url: hooks_url,
      members_url: members_url,
      events_url: events_url,
      avatar_url: avatar_url,
      login: login,
      issues_url: issues_url,
      url: url,
      repos_url: repos_url,
      public_members_url: public_members_url,
      node_id: node_id,
      id: id,
      description: description,
    ),
  )
}

pub fn nullable_organization_simple_encode(data: NullableOrganizationSimple) {
  json.object(
    [
      #("hooks_url", json.string(data.hooks_url)),
      #("members_url", json.string(data.members_url)),
      #("events_url", json.string(data.events_url)),
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("issues_url", json.string(data.issues_url)),
      #("url", json.string(data.url)),
      #("repos_url", json.string(data.repos_url)),
      #("public_members_url", json.string(data.public_members_url)),
      #("node_id", json.string(data.node_id)),
      #("id", json.int(data.id)),
      #("description", json.nullable(data.description, json.string))
    ],
  )
}

pub fn repository_subscription_decoder() {
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use ignored <- decode.field("ignored", decode.bool)
  use subscribed <- decode.field("subscribed", decode.bool)
  use repository_url <- decode.field("repository_url", decode.string)
  decode.success(
    RepositorySubscription(
      reason: reason,
      created_at: created_at,
      url: url,
      ignored: ignored,
      subscribed: subscribed,
      repository_url: repository_url,
    ),
  )
}

pub fn repository_subscription_encode(data: RepositorySubscription) {
  json.object(
    [
      #("reason", json.nullable(data.reason, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("ignored", json.bool(data.ignored)),
      #("subscribed", json.bool(data.subscribed)),
      #("repository_url", json.string(data.repository_url))
    ],
  )
}

pub fn webhooks_changes_decoder() {
  use body <- decode.optional_field(
    "body",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(WebhooksChanges(body: body))
}

pub fn webhooks_changes_encode(data: WebhooksChanges) {
  json.object(
    [
      #(
        "body",
        json.nullable(
          data.body,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_pull_request_synchronize_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use number <- decode.field("number", webhooks_number_decoder())
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use pull_request <- decode.field(
    "pull_request",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use after <- decode.field("after", decode.string)
  use before <- decode.field("before", decode.string)
  decode.success(
    WebhookPullRequestSynchronize(
      enterprise: enterprise,
      number: number,
      repository: repository,
      organization: organization,
      sender: sender,
      pull_request: pull_request,
      action: action,
      installation: installation,
      after: after,
      before: before,
    ),
  )
}

pub fn webhook_pull_request_synchronize_encode(
  data: WebhookPullRequestSynchronize,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("number", webhooks_number_encode(data.number)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "pull_request",
        fn(_) { panic as "Literal object inside field" }(data.pull_request),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #("after", json.string(data.after)),
      #("before", json.string(data.before))
    ],
  )
}

pub fn webhook_merge_group_destroyed_decoder() {
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(decode.string),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.optional_field(
    "sender",
    None,
    decode.optional(simple_user_decoder()),
  )
  use action <- decode.field("action", decode.string)
  use merge_group <- decode.field("merge_group", merge_group_decoder())
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookMergeGroupDestroyed(
      reason: reason,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      merge_group: merge_group,
      installation: installation,
    ),
  )
}

pub fn webhook_merge_group_destroyed_encode(data: WebhookMergeGroupDestroyed) {
  json.object(
    [
      #("reason", json.nullable(data.reason, json.string)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", json.nullable(data.sender, simple_user_encode)),
      #("action", json.string(data.action)),
      #("merge_group", merge_group_encode(data.merge_group)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn pages_health_check_decoder() {
  use domain <- decode.optional_field(
    "domain",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use alt_domain <- decode.optional_field(
    "alt_domain",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(PagesHealthCheck(domain: domain, alt_domain: alt_domain))
}

pub fn pages_health_check_encode(data: PagesHealthCheck) {
  json.object(
    [
      #(
        "domain",
        json.nullable(
          data.domain,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #(
        "alt_domain",
        json.nullable(
          data.alt_domain,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_check_run_requested_action_form_encoded_decoder() {
  use payload <- decode.field("payload", decode.string)
  decode.success(WebhookCheckRunRequestedActionFormEncoded(payload: payload))
}

pub fn webhook_check_run_requested_action_form_encoded_encode(
  data: WebhookCheckRunRequestedActionFormEncoded,
) {
  json.object([#("payload", json.string(data.payload))])
}

pub fn actions_secret_decoder() {
  use created_at <- decode.field("created_at", decode.string)
  use name <- decode.field("name", decode.string)
  use updated_at <- decode.field("updated_at", decode.string)
  decode.success(
    ActionsSecret(created_at: created_at, name: name, updated_at: updated_at),
  )
}

pub fn actions_secret_encode(data: ActionsSecret) {
  json.object(
    [
      #("created_at", json.string(data.created_at)),
      #("name", json.string(data.name)),
      #("updated_at", json.string(data.updated_at))
    ],
  )
}

pub fn converted_note_to_issue_issue_event_decoder() {
  use commit_id <- decode.optional_field(
    "commit_id",
    None,
    decode.optional(decode.string),
  )
  use commit_url <- decode.optional_field(
    "commit_url",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.field("created_at", decode.string)
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.field(
    "performed_via_github_app",
    integration_decoder(),
  )
  use project_card <- decode.optional_field(
    "project_card",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  decode.success(
    ConvertedNoteToIssueIssueEvent(
      commit_id: commit_id,
      commit_url: commit_url,
      created_at: created_at,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      project_card: project_card,
      node_id: node_id,
      event: event,
      id: id,
    ),
  )
}

pub fn converted_note_to_issue_issue_event_encode(
  data: ConvertedNoteToIssueIssueEvent,
) {
  json.object(
    [
      #("commit_id", json.nullable(data.commit_id, json.string)),
      #("commit_url", json.nullable(data.commit_url, json.string)),
      #("created_at", json.string(data.created_at)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        integration_encode(data.performed_via_github_app),
      ),
      #(
        "project_card",
        json.nullable(
          data.project_card,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn webhook_issues_unlocked_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use repository <- decode.field("repository", repository_webhooks_decoder())
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use issue <- decode.field(
    "issue",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookIssuesUnlocked(
      enterprise: enterprise,
      repository: repository,
      organization: organization,
      sender: sender,
      action: action,
      issue: issue,
      installation: installation,
    ),
  )
}

pub fn webhook_issues_unlocked_encode(data: WebhookIssuesUnlocked) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("repository", repository_webhooks_encode(data.repository)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #("issue", fn(_) { panic as "Literal object inside field" }(data.issue)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn code_scanning_alert_decoder() {
  use dismissed_comment <- decode.optional_field(
    "dismissed_comment",
    None,
    decode.optional(code_scanning_alert_dismissed_comment_decoder()),
  )
  use number <- decode.field("number", alert_number_decoder())
  use dismissed_at <- decode.field("dismissed_at", alert_dismissed_at_decoder())
  use created_at <- decode.field("created_at", alert_created_at_decoder())
  use dismissed_by <- decode.field(
    "dismissed_by",
    nullable_simple_user_decoder(),
  )
  use instances_url <- decode.field(
    "instances_url",
    alert_instances_url_decoder(),
  )
  use url <- decode.field("url", alert_url_decoder())
  use state <- decode.field("state", code_scanning_alert_state_decoder())
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(alert_updated_at_decoder()),
  )
  use tool <- decode.field("tool", code_scanning_analysis_tool_decoder())
  use dismissed_reason <- decode.field(
    "dismissed_reason",
    code_scanning_alert_dismissed_reason_decoder(),
  )
  use html_url <- decode.field("html_url", alert_html_url_decoder())
  use rule <- decode.field("rule", code_scanning_alert_rule_decoder())
  use most_recent_instance <- decode.field(
    "most_recent_instance",
    code_scanning_alert_instance_decoder(),
  )
  use fixed_at <- decode.optional_field(
    "fixed_at",
    None,
    decode.optional(alert_fixed_at_decoder()),
  )
  decode.success(
    CodeScanningAlert(
      dismissed_comment: dismissed_comment,
      number: number,
      dismissed_at: dismissed_at,
      created_at: created_at,
      dismissed_by: dismissed_by,
      instances_url: instances_url,
      url: url,
      state: state,
      updated_at: updated_at,
      tool: tool,
      dismissed_reason: dismissed_reason,
      html_url: html_url,
      rule: rule,
      most_recent_instance: most_recent_instance,
      fixed_at: fixed_at,
    ),
  )
}

pub fn code_scanning_alert_encode(data: CodeScanningAlert) {
  json.object(
    [
      #(
        "dismissed_comment",
        json.nullable(
          data.dismissed_comment,
          code_scanning_alert_dismissed_comment_encode,
        ),
      ),
      #("number", alert_number_encode(data.number)),
      #("dismissed_at", alert_dismissed_at_encode(data.dismissed_at)),
      #("created_at", alert_created_at_encode(data.created_at)),
      #("dismissed_by", nullable_simple_user_encode(data.dismissed_by)),
      #("instances_url", alert_instances_url_encode(data.instances_url)),
      #("url", alert_url_encode(data.url)),
      #("state", code_scanning_alert_state_encode(data.state)),
      #("updated_at", json.nullable(data.updated_at, alert_updated_at_encode)),
      #("tool", code_scanning_analysis_tool_encode(data.tool)),
      #(
        "dismissed_reason",
        code_scanning_alert_dismissed_reason_encode(data.dismissed_reason),
      ),
      #("html_url", alert_html_url_encode(data.html_url)),
      #("rule", code_scanning_alert_rule_encode(data.rule)),
      #(
        "most_recent_instance",
        code_scanning_alert_instance_encode(data.most_recent_instance),
      ),
      #("fixed_at", json.nullable(data.fixed_at, alert_fixed_at_encode))
    ],
  )
}

pub fn timeline_comment_event_decoder() {
  use body <- decode.optional_field("body", None, decode.optional(decode.string))
  use body_html <- decode.optional_field(
    "body_html",
    None,
    decode.optional(decode.string),
  )
  use issue_url <- decode.field("issue_url", decode.string)
  use created_at <- decode.field("created_at", decode.string)
  use body_text <- decode.optional_field(
    "body_text",
    None,
    decode.optional(decode.string),
  )
  use reactions <- decode.optional_field(
    "reactions",
    None,
    decode.optional(reaction_rollup_decoder()),
  )
  use user <- decode.field("user", simple_user_decoder())
  use author_association <- decode.field(
    "author_association",
    author_association_decoder(),
  )
  use url <- decode.field("url", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use performed_via_github_app <- decode.optional_field(
    "performed_via_github_app",
    None,
    decode.optional(nullable_integration_decoder()),
  )
  use updated_at <- decode.field("updated_at", decode.string)
  use node_id <- decode.field("node_id", decode.string)
  use event <- decode.field("event", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    TimelineCommentEvent(
      body: body,
      body_html: body_html,
      issue_url: issue_url,
      created_at: created_at,
      body_text: body_text,
      reactions: reactions,
      user: user,
      author_association: author_association,
      url: url,
      actor: actor,
      performed_via_github_app: performed_via_github_app,
      updated_at: updated_at,
      node_id: node_id,
      event: event,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn timeline_comment_event_encode(data: TimelineCommentEvent) {
  json.object(
    [
      #("body", json.nullable(data.body, json.string)),
      #("body_html", json.nullable(data.body_html, json.string)),
      #("issue_url", json.string(data.issue_url)),
      #("created_at", json.string(data.created_at)),
      #("body_text", json.nullable(data.body_text, json.string)),
      #("reactions", json.nullable(data.reactions, reaction_rollup_encode)),
      #("user", simple_user_encode(data.user)),
      #("author_association", author_association_encode(data.author_association)),
      #("url", json.string(data.url)),
      #("actor", simple_user_encode(data.actor)),
      #(
        "performed_via_github_app",
        json.nullable(data.performed_via_github_app, nullable_integration_encode),
      ),
      #("updated_at", json.string(data.updated_at)),
      #("node_id", json.string(data.node_id)),
      #("event", json.string(data.event)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn code_scanning_variant_analysis_decoder() {
  use query_pack_url <- decode.field("query_pack_url", decode.string)
  use completed_at <- decode.optional_field(
    "completed_at",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use actions_workflow_run_id <- decode.optional_field(
    "actions_workflow_run_id",
    None,
    decode.optional(decode.int),
  )
  use query_language <- decode.field(
    "query_language",
    code_scanning_variant_analysis_language_decoder(),
  )
  use status <- decode.field("status", decode.string)
  use actor <- decode.field("actor", simple_user_decoder())
  use controller_repo <- decode.field(
    "controller_repo",
    simple_repository_decoder(),
  )
  use skipped_repositories <- decode.optional_field(
    "skipped_repositories",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use updated_at <- decode.optional_field(
    "updated_at",
    None,
    decode.optional(decode.string),
  )
  use scanned_repositories <- decode.optional_field(
    "scanned_repositories",
    None,
    decode.optional(
      decode.list(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
    ),
  )
  use failure_reason <- decode.optional_field(
    "failure_reason",
    None,
    decode.optional(decode.string),
  )
  use id <- decode.field("id", decode.int)
  decode.success(
    CodeScanningVariantAnalysis(
      query_pack_url: query_pack_url,
      completed_at: completed_at,
      created_at: created_at,
      actions_workflow_run_id: actions_workflow_run_id,
      query_language: query_language,
      status: status,
      actor: actor,
      controller_repo: controller_repo,
      skipped_repositories: skipped_repositories,
      updated_at: updated_at,
      scanned_repositories: scanned_repositories,
      failure_reason: failure_reason,
      id: id,
    ),
  )
}

pub fn code_scanning_variant_analysis_encode(data: CodeScanningVariantAnalysis) {
  json.object(
    [
      #("query_pack_url", json.string(data.query_pack_url)),
      #("completed_at", json.nullable(data.completed_at, json.string)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #(
        "actions_workflow_run_id",
        json.nullable(data.actions_workflow_run_id, json.int),
      ),
      #(
        "query_language",
        code_scanning_variant_analysis_language_encode(data.query_language),
      ),
      #("status", json.string(data.status)),
      #("actor", simple_user_encode(data.actor)),
      #("controller_repo", simple_repository_encode(data.controller_repo)),
      #(
        "skipped_repositories",
        json.nullable(
          data.skipped_repositories,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("updated_at", json.nullable(data.updated_at, json.string)),
      #(
        "scanned_repositories",
        json.nullable(
          data.scanned_repositories,
          json.array(_, fn(_) { panic as "object in array" }),
        ),
      ),
      #("failure_reason", json.nullable(data.failure_reason, json.string)),
      #("id", json.int(data.id))
    ],
  )
}

pub fn key_simple_decoder() {
  use id <- decode.field("id", decode.int)
  use key <- decode.field("key", decode.string)
  decode.success(KeySimple(id: id, key: key))
}

pub fn key_simple_encode(data: KeySimple) {
  json.object([#("id", json.int(data.id)), #("key", json.string(data.key))])
}

pub fn webhook_marketplace_purchase_changed_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use effective_date <- decode.field("effective_date", decode.string)
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use marketplace_purchase <- decode.field(
    "marketplace_purchase",
    webhooks_marketplace_purchase_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  use previous_marketplace_purchase <- decode.optional_field(
    "previous_marketplace_purchase",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  decode.success(
    WebhookMarketplacePurchaseChanged(
      enterprise: enterprise,
      effective_date: effective_date,
      repository: repository,
      organization: organization,
      marketplace_purchase: marketplace_purchase,
      sender: sender,
      action: action,
      installation: installation,
      previous_marketplace_purchase: previous_marketplace_purchase,
    ),
  )
}

pub fn webhook_marketplace_purchase_changed_encode(
  data: WebhookMarketplacePurchaseChanged,
) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #("effective_date", json.string(data.effective_date)),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #(
        "marketplace_purchase",
        webhooks_marketplace_purchase_encode(data.marketplace_purchase),
      ),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      ),
      #(
        "previous_marketplace_purchase",
        json.nullable(
          data.previous_marketplace_purchase,
          fn(_) { panic as "Literal object inside field" },
        ),
      )
    ],
  )
}

pub fn webhook_projects_v2_project_created_decoder() {
  use projects_v2 <- decode.field("projects_v2", projects_v2_decoder())
  use organization <- decode.field(
    "organization",
    organization_simple_webhooks_decoder(),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectsV2ProjectCreated(
      projects_v2: projects_v2,
      organization: organization,
      sender: sender,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_projects_v2_project_created_encode(
  data: WebhookProjectsV2ProjectCreated,
) {
  json.object(
    [
      #("projects_v2", projects_v2_encode(data.projects_v2)),
      #("organization", organization_simple_webhooks_encode(data.organization)),
      #("sender", simple_user_encode(data.sender)),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn pull_request_review_request_decoder() {
  use users <- decode.field("users", decode.list(simple_user_decoder()))
  use teams <- decode.field("teams", decode.list(team_decoder()))
  decode.success(PullRequestReviewRequest(users: users, teams: teams))
}

pub fn pull_request_review_request_encode(data: PullRequestReviewRequest) {
  json.object(
    [
      #("users", json.array(_, simple_user_encode)(data.users)),
      #("teams", json.array(_, team_encode)(data.teams))
    ],
  )
}

pub fn simple_classroom_user_decoder() {
  use avatar_url <- decode.field("avatar_url", decode.string)
  use login <- decode.field("login", decode.string)
  use id <- decode.field("id", decode.int)
  use html_url <- decode.field("html_url", decode.string)
  decode.success(
    SimpleClassroomUser(
      avatar_url: avatar_url,
      login: login,
      id: id,
      html_url: html_url,
    ),
  )
}

pub fn simple_classroom_user_encode(data: SimpleClassroomUser) {
  json.object(
    [
      #("avatar_url", json.string(data.avatar_url)),
      #("login", json.string(data.login)),
      #("id", json.int(data.id)),
      #("html_url", json.string(data.html_url))
    ],
  )
}

pub fn combined_commit_status_decoder() {
  use statuses <- decode.field(
    "statuses",
    decode.list(simple_commit_status_decoder()),
  )
  use commit_url <- decode.field("commit_url", decode.string)
  use repository <- decode.field("repository", minimal_repository_decoder())
  use sha <- decode.field("sha", decode.string)
  use url <- decode.field("url", decode.string)
  use state <- decode.field("state", decode.string)
  use total_count <- decode.field("total_count", decode.int)
  decode.success(
    CombinedCommitStatus(
      statuses: statuses,
      commit_url: commit_url,
      repository: repository,
      sha: sha,
      url: url,
      state: state,
      total_count: total_count,
    ),
  )
}

pub fn combined_commit_status_encode(data: CombinedCommitStatus) {
  json.object(
    [
      #("statuses", json.array(_, simple_commit_status_encode)(data.statuses)),
      #("commit_url", json.string(data.commit_url)),
      #("repository", minimal_repository_encode(data.repository)),
      #("sha", json.string(data.sha)),
      #("url", json.string(data.url)),
      #("state", json.string(data.state)),
      #("total_count", json.int(data.total_count))
    ],
  )
}

pub fn interaction_limit_decoder() {
  use expiry <- decode.optional_field(
    "expiry",
    None,
    decode.optional(interaction_expiry_decoder()),
  )
  use limit <- decode.field("limit", interaction_group_decoder())
  decode.success(InteractionLimit(expiry: expiry, limit: limit))
}

pub fn interaction_limit_encode(data: InteractionLimit) {
  json.object(
    [
      #("expiry", json.nullable(data.expiry, interaction_expiry_encode)),
      #("limit", interaction_group_encode(data.limit))
    ],
  )
}

pub fn webhook_project_card_moved_decoder() {
  use enterprise <- decode.optional_field(
    "enterprise",
    None,
    decode.optional(enterprise_webhooks_decoder()),
  )
  use changes <- decode.optional_field(
    "changes",
    None,
    decode.optional(decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) })),
  )
  use repository <- decode.optional_field(
    "repository",
    None,
    decode.optional(repository_webhooks_decoder()),
  )
  use organization <- decode.optional_field(
    "organization",
    None,
    decode.optional(organization_simple_webhooks_decoder()),
  )
  use sender <- decode.field("sender", simple_user_decoder())
  use project_card <- decode.field(
    "project_card",
    decode.new_primitive_decoder("Nil", fn(_) { Ok(Nil) }),
  )
  use action <- decode.field("action", decode.string)
  use installation <- decode.optional_field(
    "installation",
    None,
    decode.optional(simple_installation_decoder()),
  )
  decode.success(
    WebhookProjectCardMoved(
      enterprise: enterprise,
      changes: changes,
      repository: repository,
      organization: organization,
      sender: sender,
      project_card: project_card,
      action: action,
      installation: installation,
    ),
  )
}

pub fn webhook_project_card_moved_encode(data: WebhookProjectCardMoved) {
  json.object(
    [
      #("enterprise", json.nullable(data.enterprise, enterprise_webhooks_encode)),
      #(
        "changes",
        json.nullable(
          data.changes,
          fn(_) { panic as "Literal object inside field" },
        ),
      ),
      #("repository", json.nullable(data.repository, repository_webhooks_encode)),
      #(
        "organization",
        json.nullable(data.organization, organization_simple_webhooks_encode),
      ),
      #("sender", simple_user_encode(data.sender)),
      #(
        "project_card",
        fn(_) { panic as "AllOf inside field" }(data.project_card),
      ),
      #("action", json.string(data.action)),
      #(
        "installation",
        json.nullable(data.installation, simple_installation_encode),
      )
    ],
  )
}

pub fn thread_subscription_decoder() {
  use reason <- decode.optional_field(
    "reason",
    None,
    decode.optional(decode.string),
  )
  use created_at <- decode.optional_field(
    "created_at",
    None,
    decode.optional(decode.string),
  )
  use url <- decode.field("url", decode.string)
  use ignored <- decode.field("ignored", decode.bool)
  use subscribed <- decode.field("subscribed", decode.bool)
  use thread_url <- decode.optional_field(
    "thread_url",
    None,
    decode.optional(decode.string),
  )
  use repository_url <- decode.optional_field(
    "repository_url",
    None,
    decode.optional(decode.string),
  )
  decode.success(
    ThreadSubscription(
      reason: reason,
      created_at: created_at,
      url: url,
      ignored: ignored,
      subscribed: subscribed,
      thread_url: thread_url,
      repository_url: repository_url,
    ),
  )
}

pub fn thread_subscription_encode(data: ThreadSubscription) {
  json.object(
    [
      #("reason", json.nullable(data.reason, json.string)),
      #("created_at", json.nullable(data.created_at, json.string)),
      #("url", json.string(data.url)),
      #("ignored", json.bool(data.ignored)),
      #("subscribed", json.bool(data.subscribed)),
      #("thread_url", json.nullable(data.thread_url, json.string)),
      #("repository_url", json.nullable(data.repository_url, json.string))
    ],
  )
}
